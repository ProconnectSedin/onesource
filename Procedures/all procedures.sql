CREATE PROCEDURE click.usp_d_accountadditionalmaster()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_accountadditionalmaster t
    SET
        acc_mst_key = s.acc_mst_key,
        company_code = s.company_code,
        fb_id = s.fb_id,
        usage_id = s.usage_id,
        effective_from = s.effective_from,
        currency_code = s.currency_code,
        drcr_flag = s.drcr_flag,
        dest_fbid = s.dest_fbid,
        child_company = s.child_company,
        dest_company = s.dest_company,
        sequence_no = s.sequence_no,
        timestamp = s.timestamp,
        account_code = s.account_code,
        effective_to = s.effective_to,
        resou_id = s.resou_id,
        usage_type = s.usage_type,
        ard_type = s.ard_type,
        flag = s.flag,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_accountadditionalmaster s
    WHERE t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.usage_id = s.usage_id
    AND t.effective_from = s.effective_from
    AND t.currency_code = s.currency_code
    AND t.drcr_flag = s.drcr_flag
    AND t.dest_fbid = s.dest_fbid
    AND t.child_company = s.child_company
    AND t.dest_company = s.dest_company
    AND t.sequence_no = s.sequence_no;

    INSERT INTO click.d_accountadditionalmaster(acc_mst_key, company_code, fb_id, usage_id, effective_from, currency_code, drcr_flag, dest_fbid, child_company, dest_company, sequence_no, timestamp, account_code, effective_to, resou_id, usage_type, ard_type, flag, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.acc_mst_key, s.company_code, s.fb_id, s.usage_id, s.effective_from, s.currency_code, s.drcr_flag, s.dest_fbid, s.child_company, s.dest_company, s.sequence_no, s.timestamp, s.account_code, s.effective_to, s.resou_id, s.usage_type, s.ard_type, s.flag, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_accountadditionalmaster s
    LEFT JOIN click.d_accountadditionalmaster t
    ON t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.usage_id = s.usage_id
    AND t.effective_from = s.effective_from
    AND t.currency_code = s.currency_code
    AND t.drcr_flag = s.drcr_flag
    AND t.dest_fbid = s.dest_fbid
    AND t.child_company = s.child_company
    AND t.dest_company = s.dest_company
    AND t.sequence_no = s.sequence_no
    WHERE t.company_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_accountadditionalmaster() OWNER TO proconnect;

--
-- Name: usp_d_address(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_address()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_address t
    SET
        address_key = s.address_key,
        address_id = s.address_id,
        atimestamp = s.atimestamp,
        address1 = s.address1,
        address2 = s.address2,
        address3 = s.address3,
        address_desc = s.address_desc,
        city = s.city,
        state = s.state,
        country = s.country,
        phone_no = s.phone_no,
        url = s.url,
        zip_code = s.zip_code,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        state_code = s.state_code,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_address s
    WHERE t.address_id = s.address_id;

    INSERT INTO click.d_address(address_key, address_id, atimestamp, address1, address2, address3, address_desc, city, state, country, phone_no, url, zip_code, createdby, createddate, modifiedby, modifieddate, state_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.address_key, s.address_id, s.atimestamp, s.address1, s.address2, s.address3, s.address_desc, s.city, s.state, s.country, s.phone_no, s.url, s.zip_code, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.state_code, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_address s
    LEFT JOIN click.d_address t
    ON t.address_id = s.address_id
    WHERE t.address_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_address() OWNER TO proconnect;

--
-- Name: usp_d_assetaccountmaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_assetaccountmaster()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_assetaccountmaster t
    SET
        d_asset_mst_key = s.d_asset_mst_key,
        company_code = s.company_code,
        fb_id = s.fb_id,
        asset_class = s.asset_class,
        asset_usage = s.asset_usage,
        effective_from = s.effective_from,
        sequence_no = s.sequence_no,
        timestamp = s.timestamp,
        account_code = s.account_code,
        effective_to = s.effective_to,
        resou_id = s.resou_id,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_assetaccountmaster s
    WHERE t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.asset_class = s.asset_class
    AND t.asset_usage = s.asset_usage
    AND t.effective_from = s.effective_from
    AND t.sequence_no = s.sequence_no;

    INSERT INTO click.d_assetaccountmaster(d_asset_mst_key, company_code, fb_id, asset_class, asset_usage, effective_from, sequence_no, timestamp, account_code, effective_to, resou_id, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.d_asset_mst_key, s.company_code, s.fb_id, s.asset_class, s.asset_usage, s.effective_from, s.sequence_no, s.timestamp, s.account_code, s.effective_to, s.resou_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_assetaccountmaster s
    LEFT JOIN click.d_assetaccountmaster t
    ON t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.asset_class = s.asset_class
    AND t.asset_usage = s.asset_usage
    AND t.effective_from = s.effective_from
    AND t.sequence_no = s.sequence_no
    WHERE t.company_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_assetaccountmaster() OWNER TO proconnect;

--
-- Name: usp_d_bankaccountmaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_bankaccountmaster()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_bankaccountmaster t
    SET
        bank_acc_mst_key = s.bank_acc_mst_key,
        company_code = s.company_code,
        bank_ref_no = s.bank_ref_no,
        bank_acc_no = s.bank_acc_no,
        serial_no = s.serial_no,
        btimestamp = s.btimestamp,
        flag = s.flag,
        currency_code = s.currency_code,
        credit_limit = s.credit_limit,
        draw_limit = s.draw_limit,
        status = s.status,
        effective_from = s.effective_from,
        creation_ou = s.creation_ou,
        createdby = s.createdby,
        createddate = s.createddate,
        acctrf = s.acctrf,
        neft = s.neft,
        rtgs = s.rtgs,
        restpostingaftrrecon = s.restpostingaftrrecon,
        echeq = s.echeq,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_bankaccountmaster s
    WHERE t.company_code = s.company_code
    AND t.bank_ref_no = s.bank_ref_no
    AND t.bank_acc_no = s.bank_acc_no
    AND t.serial_no = s.serial_no;

    INSERT INTO click.d_bankaccountmaster(bank_acc_mst_key, company_code, bank_ref_no, bank_acc_no, serial_no, btimestamp, flag, currency_code, credit_limit, draw_limit, status, effective_from, creation_ou, createdby, createddate, acctrf, neft, rtgs, restpostingaftrrecon, echeq, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.bank_acc_mst_key, s.company_code, s.bank_ref_no, s.bank_acc_no, s.serial_no, s.btimestamp, s.flag, s.currency_code, s.credit_limit, s.draw_limit, s.status, s.effective_from, s.creation_ou, s.createdby, s.createddate, s.acctrf, s.neft, s.rtgs, s.restpostingaftrrecon, s.echeq, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_bankaccountmaster s
    LEFT JOIN click.d_bankaccountmaster t
    ON t.company_code = s.company_code
    AND t.bank_ref_no = s.bank_ref_no
    AND t.bank_acc_no = s.bank_acc_no
    AND t.serial_no = s.serial_no
    WHERE t.company_code IS NULL;
	--and t.bank_acc_mst_key <> -1;
END;
$$;


ALTER PROCEDURE click.usp_d_bankaccountmaster() OWNER TO proconnect;

--
-- Name: usp_d_bankcashaccountmaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_bankcashaccountmaster()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_bankcashaccountmaster t
    SET
        d_bank_mst_key = s.d_bank_mst_key,
        company_code = s.company_code,
        fb_id = s.fb_id,
        bank_ptt_code = s.bank_ptt_code,
        effective_from = s.effective_from,
        sequence_no = s.sequence_no,
        timestamp = s.timestamp,
        bankptt_account = s.bankptt_account,
        bankcharge_account = s.bankcharge_account,
        effective_to = s.effective_to,
        resou_id = s.resou_id,
        flag = s.flag,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_bankcashaccountmaster s
    WHERE t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.bank_ptt_code = s.bank_ptt_code
    AND t.effective_from = s.effective_from
    AND t.sequence_no = s.sequence_no;

    INSERT INTO click.d_bankcashaccountmaster(d_bank_mst_key, company_code, fb_id, bank_ptt_code, effective_from, sequence_no, timestamp, bankptt_account, bankcharge_account, effective_to, resou_id, flag, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.d_bank_mst_key, s.company_code, s.fb_id, s.bank_ptt_code, s.effective_from, s.sequence_no, s.timestamp, s.bankptt_account, s.bankcharge_account, s.effective_to, s.resou_id, s.flag, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_bankcashaccountmaster s
    LEFT JOIN click.d_bankcashaccountmaster t
    ON t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.bank_ptt_code = s.bank_ptt_code
    AND t.effective_from = s.effective_from
    AND t.sequence_no = s.sequence_no
    WHERE t.company_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_bankcashaccountmaster() OWNER TO proconnect;

--
-- Name: usp_d_bankrefmaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_bankrefmaster()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_bankrefmaster t
    SET
        bank_ref_mst_key = s.bank_ref_mst_key,
        bank_ref_no = s.bank_ref_no,
        bank_status = s.bank_status,
        btimestamp = s.btimestamp,
        bank_ptt_flag = s.bank_ptt_flag,
        bank_type = s.bank_type,
        bank_name = s.bank_name,
        address1 = s.address1,
        address2 = s.address2,
        address3 = s.address3,
        city = s.city,
        state = s.state,
        country = s.country,
        clearing_no = s.clearing_no,
        swift_no = s.swift_no,
        zip_code = s.zip_code,
        creation_ou = s.creation_ou,
        modification_ou = s.modification_ou,
        effective_from = s.effective_from,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        createdin = s.createdin,
        ifsccode = s.ifsccode,
        long_description = s.long_description,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_bankrefmaster s
    WHERE t.bank_ref_no = s.bank_ref_no
    AND t.bank_status = s.bank_status;

    INSERT INTO click.d_bankrefmaster(bank_ref_mst_key, bank_ref_no, bank_status, btimestamp, bank_ptt_flag, bank_type, bank_name, address1, address2, address3, city, state, country, clearing_no, swift_no, zip_code, creation_ou, modification_ou, effective_from, createdby, createddate, modifiedby, modifieddate, createdin, ifsccode, long_description, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.bank_ref_mst_key, s.bank_ref_no, s.bank_status, s.btimestamp, s.bank_ptt_flag, s.bank_type, s.bank_name, s.address1, s.address2, s.address3, s.city, s.state, s.country, s.clearing_no, s.swift_no, s.zip_code, s.creation_ou, s.modification_ou, s.effective_from, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.createdin, s.ifsccode, s.long_description, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_bankrefmaster s
    LEFT JOIN click.d_bankrefmaster t
    ON t.bank_ref_no = s.bank_ref_no
    AND t.bank_status = s.bank_status
    WHERE t.bank_ref_no IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_bankrefmaster() OWNER TO proconnect;

--
-- Name: usp_d_bintypelocation(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_bintypelocation()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_bintypelocation t
    SET
        bin_typ_key = s.bin_typ_key,
        bin_typ_ou = s.bin_typ_ou,
        bin_typ_code = s.bin_typ_code,
        bin_typ_loc_code = s.bin_typ_loc_code,
        bin_typ_lineno = s.bin_typ_lineno,
        bin_typ_storage_unit = s.bin_typ_storage_unit,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_bintypelocation s
    WHERE t.bin_typ_key = s.bin_typ_key;

    INSERT INTO click.d_bintypelocation(bin_typ_key, bin_typ_ou, bin_typ_code, bin_typ_loc_code, bin_typ_lineno, bin_typ_storage_unit, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.bin_typ_key, s.bin_typ_ou, s.bin_typ_code, s.bin_typ_loc_code, s.bin_typ_lineno, s.bin_typ_storage_unit, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_bintypelocation s
    LEFT JOIN click.d_bintypelocation t
    ON t.bin_typ_key = s.bin_typ_key
    WHERE t.bin_typ_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_bintypelocation() OWNER TO proconnect;

--
-- Name: usp_d_bintypes(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_bintypes()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_bintypes t
    SET
        bin_typ_key = s.bin_typ_key,
        bin_typ_ou = s.bin_typ_ou,
        bin_typ_code = s.bin_typ_code,
        bin_typ_loc_code = s.bin_typ_loc_code,
        bin_typ_desc = s.bin_typ_desc,
        bin_typ_status = s.bin_typ_status,
        bin_typ_width = s.bin_typ_width,
        bin_typ_height = s.bin_typ_height,
        bin_typ_depth = s.bin_typ_depth,
        bin_typ_dim_uom = s.bin_typ_dim_uom,
        bin_typ_volume = s.bin_typ_volume,
        bin_typ_vol_uom = s.bin_typ_vol_uom,
        bin_typ_max_per_wt = s.bin_typ_max_per_wt,
        bin_typ_max_wt_uom = s.bin_typ_max_wt_uom,
        bin_typ_cap_indicator = s.bin_typ_cap_indicator,
        bin_timestamp = s.bin_timestamp,
        bin_created_by = s.bin_created_by,
        bin_created_dt = s.bin_created_dt,
        bin_modified_by = s.bin_modified_by,
        bin_modified_dt = s.bin_modified_dt,
        bin_one_bin_one_pal = s.bin_one_bin_one_pal,
        bin_typ_one_bin = s.bin_typ_one_bin,
        bin_typ_area = s.bin_typ_area,
        bin_typ_area_uom = s.bin_typ_area_uom,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_bintypes s
    WHERE t.bin_typ_ou = s.bin_typ_ou
    AND t.bin_typ_code = s.bin_typ_code
    AND t.bin_typ_loc_code = s.bin_typ_loc_code;

    INSERT INTO click.d_bintypes(bin_typ_key, bin_typ_ou, bin_typ_code, bin_typ_loc_code, bin_typ_desc, bin_typ_status, bin_typ_width, bin_typ_height, bin_typ_depth, bin_typ_dim_uom, bin_typ_volume, bin_typ_vol_uom, bin_typ_max_per_wt, bin_typ_max_wt_uom, bin_typ_cap_indicator, bin_timestamp, bin_created_by, bin_created_dt, bin_modified_by, bin_modified_dt, bin_one_bin_one_pal, bin_typ_one_bin, bin_typ_area, bin_typ_area_uom, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.bin_typ_key, s.bin_typ_ou, s.bin_typ_code, s.bin_typ_loc_code, s.bin_typ_desc, s.bin_typ_status, s.bin_typ_width, s.bin_typ_height, s.bin_typ_depth, s.bin_typ_dim_uom, s.bin_typ_volume, s.bin_typ_vol_uom, s.bin_typ_max_per_wt, s.bin_typ_max_wt_uom, s.bin_typ_cap_indicator, s.bin_timestamp, s.bin_created_by, s.bin_created_dt, s.bin_modified_by, s.bin_modified_dt, s.bin_one_bin_one_pal, s.bin_typ_one_bin, s.bin_typ_area, s.bin_typ_area_uom, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_bintypes s
    LEFT JOIN click.d_bintypes t
    ON t.bin_typ_ou = s.bin_typ_ou
    AND t.bin_typ_code = s.bin_typ_code
    AND t.bin_typ_loc_code = s.bin_typ_loc_code
    WHERE t.bin_typ_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_bintypes() OWNER TO proconnect;

--
-- Name: usp_d_bulocationmap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_bulocationmap()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_bulocationmap t
    SET
        bu_loc_map_key = s.bu_loc_map_key,
        lo_id = s.lo_id,
        bu_id = s.bu_id,
        company_code = s.company_code,
        serial_no = s.serial_no,
        btimestamp = s.btimestamp,
        lo_name = s.lo_name,
        map_status = s.map_status,
        effective_from = s.effective_from,
        map_by = s.map_by,
        map_date = s.map_date,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_bulocationmap s
    WHERE t.lo_id = s.lo_id
    AND t.bu_id = s.bu_id
    AND t.company_code = s.company_code
    AND t.serial_no = s.serial_no;

    INSERT INTO click.d_bulocationmap(bu_loc_map_key, lo_id, bu_id, company_code, serial_no, btimestamp, lo_name, map_status, effective_from, map_by, map_date, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.bu_loc_map_key, s.lo_id, s.bu_id, s.company_code, s.serial_no, s.btimestamp, s.lo_name, s.map_status, s.effective_from, s.map_by, s.map_date, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_bulocationmap s
    LEFT JOIN click.d_bulocationmap t
    ON t.lo_id = s.lo_id
    AND t.bu_id = s.bu_id
    AND t.company_code = s.company_code
    AND t.serial_no = s.serial_no
    WHERE t.lo_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_bulocationmap() OWNER TO proconnect;

--
-- Name: usp_d_businessunit(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_businessunit()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_businessunit t
    SET
        bu_key = s.bu_key,
        company_code = s.company_code,
        bu_id = s.bu_id,
        serial_no = s.serial_no,
        btimestamp = s.btimestamp,
        bu_name = s.bu_name,
        status = s.status,
        address_id = s.address_id,
        effective_from = s.effective_from,
        createdby = s.createdby,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_businessunit s
    WHERE t.company_code = s.company_code
    AND t.bu_id = s.bu_id
    AND t.serial_no = s.serial_no;

    INSERT INTO click.d_businessunit(bu_key, company_code, bu_id, serial_no, btimestamp, bu_name, status, address_id, effective_from, createdby, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.bu_key, s.company_code, s.bu_id, s.serial_no, s.btimestamp, s.bu_name, s.status, s.address_id, s.effective_from, s.createdby, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_businessunit s
    LEFT JOIN click.d_businessunit t
    ON t.company_code = s.company_code
    AND t.bu_id = s.bu_id
    AND t.serial_no = s.serial_no
    WHERE t.company_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_businessunit() OWNER TO proconnect;

--
-- Name: usp_d_company(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_company()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_company t
    SET
        company_key = s.company_key,
        company_code = s.company_code,
        serial_no = s.serial_no,
        ctimestamp = s.ctimestamp,
        company_name = s.company_name,
        address1 = s.address1,
        address2 = s.address2,
        address3 = s.address3,
        city = s.city,
        country = s.country,
        zip_code = s.zip_code,
        phone_no = s.phone_no,
        state = s.state,
        company_url = s.company_url,
        par_comp_code = s.par_comp_code,
        base_currency = s.base_currency,
        status = s.status,
        effective_from = s.effective_from,
        para_base_flag = s.para_base_flag,
        reg_date = s.reg_date,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        company_id = s.company_id,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_company s
    WHERE t.company_code = s.company_code
    AND t.serial_no = s.serial_no;

    INSERT INTO click.d_company(company_key, company_code, serial_no, ctimestamp, company_name, address1, address2, address3, city, country, zip_code, phone_no, state, company_url, par_comp_code, base_currency, status, effective_from, para_base_flag, reg_date, createdby, createddate, modifiedby, modifieddate, company_id, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.company_key, s.company_code, s.serial_no, s.ctimestamp, s.company_name, s.address1, s.address2, s.address3, s.city, s.country, s.zip_code, s.phone_no, s.state, s.company_url, s.par_comp_code, s.base_currency, s.status, s.effective_from, s.para_base_flag, s.reg_date, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.company_id, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_company s
    LEFT JOIN click.d_company t
    ON t.company_code = s.company_code
    AND t.serial_no = s.serial_no
    WHERE t.company_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_company() OWNER TO proconnect;

--
-- Name: usp_d_companycurrencymap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_companycurrencymap()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_companycurrencymap t
    SET
        d_companycurrencymap_key = s.d_companycurrencymap_key,
        serial_no = s.serial_no,
        company_code = s.company_code,
        currency_code = s.currency_code,
        timestamp = s.timestamp,
        map_status = s.map_status,
        effective_from = s.effective_from,
        map_by = s.map_by,
        map_date = s.map_date,
        currency_flag = s.currency_flag,
        createdby = s.createdby,
        createddate = s.createddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_companycurrencymap s
    WHERE t.serial_no = s.serial_no
    AND t.company_code = s.company_code
    AND t.currency_code = s.currency_code;

    INSERT INTO click.d_companycurrencymap(d_companycurrencymap_key, serial_no, company_code, currency_code, timestamp, map_status, effective_from, map_by, map_date, currency_flag, createdby, createddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.d_companycurrencymap_key, s.serial_no, s.company_code, s.currency_code, s.timestamp, s.map_status, s.effective_from, s.map_by, s.map_date, s.currency_flag, s.createdby, s.createddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_companycurrencymap s
    LEFT JOIN click.d_companycurrencymap t
    ON t.serial_no = s.serial_no
    AND t.company_code = s.company_code
    AND t.currency_code = s.currency_code
    WHERE t.serial_no IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_companycurrencymap() OWNER TO proconnect;

--
-- Name: usp_d_consignee(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_consignee()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_consignee t
    SET
        consignee_hdr_key = s.consignee_hdr_key,
        consignee_id = s.consignee_id,
        consignee_ou = s.consignee_ou,
        consignee_desc = s.consignee_desc,
        consignee_status = s.consignee_status,
        consignee_currency = s.consignee_currency,
        consignee_address1 = s.consignee_address1,
        consignee_address2 = s.consignee_address2,
        consignee_city = s.consignee_city,
        consignee_state = s.consignee_state,
        consignee_country = s.consignee_country,
        consignee_postalcode = s.consignee_postalcode,
        consignee_phone1 = s.consignee_phone1,
        consignee_customer_id = s.consignee_customer_id,
        consignee_created_by = s.consignee_created_by,
        consignee_created_date = s.consignee_created_date,
        consignee_modified_by = s.consignee_modified_by,
        consignee_modified_date = s.consignee_modified_date,
        consignee_timestamp = s.consignee_timestamp,
        consignee_zone = s.consignee_zone,
        consignee_timezone = s.consignee_timezone,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_consignee s
    WHERE t.consignee_id = s.consignee_id
    AND t.consignee_ou = s.consignee_ou;

    INSERT INTO click.d_consignee(consignee_hdr_key, consignee_id, consignee_ou, consignee_desc, consignee_status, consignee_currency, consignee_address1, consignee_address2, consignee_city, consignee_state, consignee_country, consignee_postalcode, consignee_phone1, consignee_customer_id, consignee_created_by, consignee_created_date, consignee_modified_by, consignee_modified_date, consignee_timestamp, consignee_zone, consignee_timezone, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.consignee_hdr_key, s.consignee_id, s.consignee_ou, s.consignee_desc, s.consignee_status, s.consignee_currency, s.consignee_address1, s.consignee_address2, s.consignee_city, s.consignee_state, s.consignee_country, s.consignee_postalcode, s.consignee_phone1, s.consignee_customer_id, s.consignee_created_by, s.consignee_created_date, s.consignee_modified_by, s.consignee_modified_date, s.consignee_timestamp, s.consignee_zone, s.consignee_timezone, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_consignee s
    LEFT JOIN click.d_consignee t
    ON t.consignee_id = s.consignee_id
    AND t.consignee_ou = s.consignee_ou
    WHERE t.consignee_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_consignee() OWNER TO proconnect;

--
-- Name: usp_d_consignor(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_consignor()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_consignor t
    SET
        consignor_key = s.consignor_key,
        consignor_id = s.consignor_id,
        consignor_ou = s.consignor_ou,
        consignor_desc = s.consignor_desc,
        consignor_status = s.consignor_status,
        consignor_currency = s.consignor_currency,
        consignor_address1 = s.consignor_address1,
        consignor_address2 = s.consignor_address2,
        consignor_address3 = s.consignor_address3,
        consignor_city = s.consignor_city,
        consignor_state = s.consignor_state,
        consignor_country = s.consignor_country,
        consignor_postalcode = s.consignor_postalcode,
        consignor_phone1 = s.consignor_phone1,
        consignor_customer_id = s.consignor_customer_id,
        consignor_created_by = s.consignor_created_by,
        consignor_created_date = s.consignor_created_date,
        consignor_modified_by = s.consignor_modified_by,
        consignor_modified_date = s.consignor_modified_date,
        consignor_timestamp = s.consignor_timestamp,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_consignor s
    WHERE t.consignor_id = s.consignor_id
    AND t.consignor_ou = s.consignor_ou;

    INSERT INTO click.d_consignor(consignor_key, consignor_id, consignor_ou, consignor_desc, consignor_status, consignor_currency, consignor_address1, consignor_address2, consignor_address3, consignor_city, consignor_state, consignor_country, consignor_postalcode, consignor_phone1, consignor_customer_id, consignor_created_by, consignor_created_date, consignor_modified_by, consignor_modified_date, consignor_timestamp, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.consignor_key, s.consignor_id, s.consignor_ou, s.consignor_desc, s.consignor_status, s.consignor_currency, s.consignor_address1, s.consignor_address2, s.consignor_address3, s.consignor_city, s.consignor_state, s.consignor_country, s.consignor_postalcode, s.consignor_phone1, s.consignor_customer_id, s.consignor_created_by, s.consignor_created_date, s.consignor_modified_by, s.consignor_modified_date, s.consignor_timestamp, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_consignor s
    LEFT JOIN click.d_consignor t
    ON t.consignor_id = s.consignor_id
    AND t.consignor_ou = s.consignor_ou
    WHERE t.consignor_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_consignor() OWNER TO proconnect;

--
-- Name: usp_d_currency(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_currency()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_currency t
    SET
        curr_key = s.curr_key,
        iso_curr_code = s.iso_curr_code,
        serial_no = s.serial_no,
        ctimestamp = s.ctimestamp,
        num_curr_code = s.num_curr_code,
        curr_symbol = s.curr_symbol,
        curr_desc = s.curr_desc,
        curr_sub_units = s.curr_sub_units,
        curr_sub_unit_desc = s.curr_sub_unit_desc,
        curr_units = s.curr_units,
        currency_status = s.currency_status,
        curr_symbol_flag = s.curr_symbol_flag,
        effective_from = s.effective_from,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_currency s
    WHERE t.iso_curr_code = s.iso_curr_code
    AND t.serial_no = s.serial_no;

    INSERT INTO click.d_currency(curr_key, iso_curr_code, serial_no, ctimestamp, num_curr_code, curr_symbol, curr_desc, curr_sub_units, curr_sub_unit_desc, curr_units, currency_status, curr_symbol_flag, effective_from, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.curr_key, s.iso_curr_code, s.serial_no, s.ctimestamp, s.num_curr_code, s.curr_symbol, s.curr_desc, s.curr_sub_units, s.curr_sub_unit_desc, s.curr_units, s.currency_status, s.curr_symbol_flag, s.effective_from, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_currency s
    LEFT JOIN click.d_currency t
    ON t.iso_curr_code = s.iso_curr_code
    AND t.serial_no = s.serial_no
    WHERE t.iso_curr_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_currency() OWNER TO proconnect;

--
-- Name: usp_d_customer(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customer()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customer t
    SET
        customer_key = s.customer_key,
        customer_id = s.customer_id,
        customer_ou = s.customer_ou,
        customer_name = s.customer_name,
        customer_status = s.customer_status,
        customer_type = s.customer_type,
        customer_description = s.customer_description,
        customer_credit_term = s.customer_credit_term,
        customer_pay_term = s.customer_pay_term,
        customer_currency = s.customer_currency,
        customer_reason_code = s.customer_reason_code,
        customer_address1 = s.customer_address1,
        customer_address2 = s.customer_address2,
        customer_address3 = s.customer_address3,
        customer_city = s.customer_city,
        customer_state = s.customer_state,
        customer_country = s.customer_country,
        customer_postal_code = s.customer_postal_code,
        customer_timezone = s.customer_timezone,
        customer_contact_person = s.customer_contact_person,
        customer_phone1 = s.customer_phone1,
        customer_phone2 = s.customer_phone2,
        customer_fax = s.customer_fax,
        customer_email = s.customer_email,
        customer_bill_same_as_customer = s.customer_bill_same_as_customer,
        customer_bill_address1 = s.customer_bill_address1,
        customer_bill_address2 = s.customer_bill_address2,
        customer_bill_address3 = s.customer_bill_address3,
        customer_bill_city = s.customer_bill_city,
        customer_bill_state = s.customer_bill_state,
        customer_bill_country = s.customer_bill_country,
        customer_bill_postal_code = s.customer_bill_postal_code,
        customer_bill_contact_person = s.customer_bill_contact_person,
        customer_bill_phone = s.customer_bill_phone,
        customer_bill_fax = s.customer_bill_fax,
        customer_ret_undelivered = s.customer_ret_undelivered,
        customer_ret_same_as_customer = s.customer_ret_same_as_customer,
        customer_ret_address1 = s.customer_ret_address1,
        customer_ret_address2 = s.customer_ret_address2,
        customer_ret_address3 = s.customer_ret_address3,
        customer_ret_city = s.customer_ret_city,
        customer_ret_state = s.customer_ret_state,
        customer_ret_country = s.customer_ret_country,
        customer_ret_postal_code = s.customer_ret_postal_code,
        customer_ret_contact_person = s.customer_ret_contact_person,
        customer_ret_phone1 = s.customer_ret_phone1,
        customer_ret_fax = s.customer_ret_fax,
        customer_timestamp = s.customer_timestamp,
        customer_created_by = s.customer_created_by,
        customer_created_dt = s.customer_created_dt,
        customer_modified_by = s.customer_modified_by,
        customer_modified_dt = s.customer_modified_dt,
        customer_br_valid_prof_id = s.customer_br_valid_prof_id,
        customer_payment_typ = s.customer_payment_typ,
        customer_geo_fence = s.customer_geo_fence,
        customer_bill_geo_fence = s.customer_bill_geo_fence,
        customer_bill_longtitude = s.customer_bill_longtitude,
        customer_bill_latitude = s.customer_bill_latitude,
        customer_bill_zone = s.customer_bill_zone,
        customer_bill_sub_zone = s.customer_bill_sub_zone,
        customer_bill_region = s.customer_bill_region,
        customer_ret_geo_fence = s.customer_ret_geo_fence,
        customer_ret_longtitude = s.customer_ret_longtitude,
        customer_ret_latitude = s.customer_ret_latitude,
        customer_customer_grp = s.customer_customer_grp,
        customer_industry_typ = s.customer_industry_typ,
        allow_rev_protection = s.allow_rev_protection,
        customer_invrep = s.customer_invrep,
        customer_rcti = s.customer_rcti,
        customer_gen_from = s.customer_gen_from,
        customer_bill_hrchy1 = s.customer_bill_hrchy1,
        customer_new_customer = s.customer_new_customer,
        customer_final_bill_stage = s.customer_final_bill_stage,
        customer_allwdb_billto = s.customer_allwdb_billto,
        customer_contact_person2 = s.customer_contact_person2,
        cus_contact_person2_email = s.cus_contact_person2_email,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customer s
    WHERE t.customer_id = s.customer_id
    AND t.customer_ou = s.customer_ou;

    INSERT INTO click.d_customer(customer_key, customer_id, customer_ou, customer_name, customer_status, customer_type, customer_description, customer_credit_term, customer_pay_term, customer_currency, customer_reason_code, customer_address1, customer_address2, customer_address3, customer_city, customer_state, customer_country, customer_postal_code, customer_timezone, customer_contact_person, customer_phone1, customer_phone2, customer_fax, customer_email, customer_bill_same_as_customer, customer_bill_address1, customer_bill_address2, customer_bill_address3, customer_bill_city, customer_bill_state, customer_bill_country, customer_bill_postal_code, customer_bill_contact_person, customer_bill_phone, customer_bill_fax, customer_ret_undelivered, customer_ret_same_as_customer, customer_ret_address1, customer_ret_address2, customer_ret_address3, customer_ret_city, customer_ret_state, customer_ret_country, customer_ret_postal_code, customer_ret_contact_person, customer_ret_phone1, customer_ret_fax, customer_timestamp, customer_created_by, customer_created_dt, customer_modified_by, customer_modified_dt, customer_br_valid_prof_id, customer_payment_typ, customer_geo_fence, customer_bill_geo_fence, customer_bill_longtitude, customer_bill_latitude, customer_bill_zone, customer_bill_sub_zone, customer_bill_region, customer_ret_geo_fence, customer_ret_longtitude, customer_ret_latitude, customer_customer_grp, customer_industry_typ, allow_rev_protection, customer_invrep, customer_rcti, customer_gen_from, customer_bill_hrchy1, customer_new_customer, customer_final_bill_stage, customer_allwdb_billto, customer_contact_person2, cus_contact_person2_email, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.customer_key, s.customer_id, s.customer_ou, s.customer_name, s.customer_status, s.customer_type, s.customer_description, s.customer_credit_term, s.customer_pay_term, s.customer_currency, s.customer_reason_code, s.customer_address1, s.customer_address2, s.customer_address3, s.customer_city, s.customer_state, s.customer_country, s.customer_postal_code, s.customer_timezone, s.customer_contact_person, s.customer_phone1, s.customer_phone2, s.customer_fax, s.customer_email, s.customer_bill_same_as_customer, s.customer_bill_address1, s.customer_bill_address2, s.customer_bill_address3, s.customer_bill_city, s.customer_bill_state, s.customer_bill_country, s.customer_bill_postal_code, s.customer_bill_contact_person, s.customer_bill_phone, s.customer_bill_fax, s.customer_ret_undelivered, s.customer_ret_same_as_customer, s.customer_ret_address1, s.customer_ret_address2, s.customer_ret_address3, s.customer_ret_city, s.customer_ret_state, s.customer_ret_country, s.customer_ret_postal_code, s.customer_ret_contact_person, s.customer_ret_phone1, s.customer_ret_fax, s.customer_timestamp, s.customer_created_by, s.customer_created_dt, s.customer_modified_by, s.customer_modified_dt, s.customer_br_valid_prof_id, s.customer_payment_typ, s.customer_geo_fence, s.customer_bill_geo_fence, s.customer_bill_longtitude, s.customer_bill_latitude, s.customer_bill_zone, s.customer_bill_sub_zone, s.customer_bill_region, s.customer_ret_geo_fence, s.customer_ret_longtitude, s.customer_ret_latitude, s.customer_customer_grp, s.customer_industry_typ, s.allow_rev_protection, s.customer_invrep, s.customer_rcti, s.customer_gen_from, s.customer_bill_hrchy1, s.customer_new_customer, s.customer_final_bill_stage, s.customer_allwdb_billto, s.customer_contact_person2, s.cus_contact_person2_email, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customer s
    LEFT JOIN click.d_customer t
    ON t.customer_id = s.customer_id
    AND t.customer_ou = s.customer_ou
    WHERE t.customer_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customer() OWNER TO proconnect;

--
-- Name: usp_d_customerattributes(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customerattributes()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customerattributes t
    SET
        wms_cust_attr_key = s.wms_cust_attr_key,
        wms_cust_attr_cust_code = s.wms_cust_attr_cust_code,
        wms_cust_attr_lineno = s.wms_cust_attr_lineno,
        wms_cust_attr_ou = s.wms_cust_attr_ou,
        wms_cust_attr_typ = s.wms_cust_attr_typ,
        wms_cust_attr_apl = s.wms_cust_attr_apl,
        wms_cust_attr_value = s.wms_cust_attr_value,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customerattributes s
    WHERE t.wms_cust_attr_cust_code = s.wms_cust_attr_cust_code
    AND t.wms_cust_attr_lineno = s.wms_cust_attr_lineno
    AND t.wms_cust_attr_ou = s.wms_cust_attr_ou;

    INSERT INTO click.d_customerattributes(wms_cust_attr_key, wms_cust_attr_cust_code, wms_cust_attr_lineno, wms_cust_attr_ou, wms_cust_attr_typ, wms_cust_attr_apl, wms_cust_attr_value, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.wms_cust_attr_key, s.wms_cust_attr_cust_code, s.wms_cust_attr_lineno, s.wms_cust_attr_ou, s.wms_cust_attr_typ, s.wms_cust_attr_apl, s.wms_cust_attr_value, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customerattributes s
    LEFT JOIN click.d_customerattributes t
    ON t.wms_cust_attr_cust_code = s.wms_cust_attr_cust_code
    AND t.wms_cust_attr_lineno = s.wms_cust_attr_lineno
    AND t.wms_cust_attr_ou = s.wms_cust_attr_ou
    WHERE t.wms_cust_attr_cust_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customerattributes() OWNER TO proconnect;

--
-- Name: usp_d_customergrouphdr(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customergrouphdr()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customergrouphdr t
    SET
        cgh_key = s.cgh_key,
        cgh_lo = s.cgh_lo,
        cgh_bu = s.cgh_bu,
        cgh_cust_group_code = s.cgh_cust_group_code,
        cgh_control_group_flag = s.cgh_control_group_flag,
        cgh_group_type_code = s.cgh_group_type_code,
        cgh_created_at = s.cgh_created_at,
        cgh_cust_group_desc = s.cgh_cust_group_desc,
        cgh_cust_group_desc_shd = s.cgh_cust_group_desc_shd,
        cgh_reason_code = s.cgh_reason_code,
        cgh_status = s.cgh_status,
        cgh_prev_status = s.cgh_prev_status,
        cgh_created_by = s.cgh_created_by,
        cgh_created_date = s.cgh_created_date,
        cgh_modified_by = s.cgh_modified_by,
        cgh_modified_date = s.cgh_modified_date,
        cgh_timestamp_value = s.cgh_timestamp_value,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customergrouphdr s
    WHERE t.cgh_lo = s.cgh_lo
    AND t.cgh_cust_group_code = s.cgh_cust_group_code
    AND t.cgh_control_group_flag = s.cgh_control_group_flag
    AND t.cgh_group_type_code = s.cgh_group_type_code;

    INSERT INTO click.d_customergrouphdr(cgh_key, cgh_lo, cgh_bu, cgh_cust_group_code, cgh_control_group_flag, cgh_group_type_code, cgh_created_at, cgh_cust_group_desc, cgh_cust_group_desc_shd, cgh_reason_code, cgh_status, cgh_prev_status, cgh_created_by, cgh_created_date, cgh_modified_by, cgh_modified_date, cgh_timestamp_value, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.cgh_key, s.cgh_lo, s.cgh_bu, s.cgh_cust_group_code, s.cgh_control_group_flag, s.cgh_group_type_code, s.cgh_created_at, s.cgh_cust_group_desc, s.cgh_cust_group_desc_shd, s.cgh_reason_code, s.cgh_status, s.cgh_prev_status, s.cgh_created_by, s.cgh_created_date, s.cgh_modified_by, s.cgh_modified_date, s.cgh_timestamp_value, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customergrouphdr s
    LEFT JOIN click.d_customergrouphdr t
    ON t.cgh_lo = s.cgh_lo
    AND t.cgh_cust_group_code = s.cgh_cust_group_code
    AND t.cgh_control_group_flag = s.cgh_control_group_flag
    AND t.cgh_group_type_code = s.cgh_group_type_code
    WHERE t.cgh_lo IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customergrouphdr() OWNER TO proconnect;

--
-- Name: usp_d_customerlocation(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customerlocation()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customerlocation t
    SET
        loc_cust_key = s.loc_cust_key,
        loc_ou = s.loc_ou,
        loc_code = s.loc_code,
        loc_lineno = s.loc_lineno,
        loc_cust_code = s.loc_cust_code,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customerlocation s
    WHERE t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_lineno = s.loc_lineno;

    INSERT INTO click.d_customerlocation(loc_cust_key, loc_ou, loc_code, loc_lineno, loc_cust_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.loc_cust_key, s.loc_ou, s.loc_code, s.loc_lineno, s.loc_cust_code, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customerlocation s
    LEFT JOIN click.d_customerlocation t
    ON t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_lineno = s.loc_lineno
    WHERE t.loc_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customerlocation() OWNER TO proconnect;

--
-- Name: usp_d_customerlocationinfo(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customerlocationinfo()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customerlocationinfo t
    SET
        clo_key = s.clo_key,
        clo_lo = s.clo_lo,
        clo_cust_code = s.clo_cust_code,
        clo_cust_name = s.clo_cust_name,
        clo_cust_name_shd = s.clo_cust_name_shd,
        clo_created_at = s.clo_created_at,
        clo_registration_dt = s.clo_registration_dt,
        clo_portal_user = s.clo_portal_user,
        clo_prosp_cust_code = s.clo_prosp_cust_code,
        clo_parent_cust_code = s.clo_parent_cust_code,
        clo_supp_code = s.clo_supp_code,
        clo_number_type = s.clo_number_type,
        clo_addrline1 = s.clo_addrline1,
        clo_addrline2 = s.clo_addrline2,
        clo_addrline3 = s.clo_addrline3,
        clo_city = s.clo_city,
        clo_state = s.clo_state,
        clo_country = s.clo_country,
        clo_zip = s.clo_zip,
        clo_phone1 = s.clo_phone1,
        clo_phone2 = s.clo_phone2,
        clo_mobile = s.clo_mobile,
        clo_fax = s.clo_fax,
        clo_email = s.clo_email,
        clo_url = s.clo_url,
        clo_cr_chk_at = s.clo_cr_chk_at,
        clo_nature_of_cust = s.clo_nature_of_cust,
        clo_internal_bu = s.clo_internal_bu,
        clo_internal_company = s.clo_internal_company,
        clo_account_group_code = s.clo_account_group_code,
        clo_created_by = s.clo_created_by,
        clo_created_date = s.clo_created_date,
        clo_modified_by = s.clo_modified_by,
        clo_modified_date = s.clo_modified_date,
        clo_timestamp_value = s.clo_timestamp_value,
        clo_cust_long_desc = s.clo_cust_long_desc,
        clo_noc = s.clo_noc,
        clo_template = s.clo_template,
        clo_pannumber = s.clo_pannumber,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customerlocationinfo s
    WHERE t.clo_lo = s.clo_lo
    AND t.clo_cust_code = s.clo_cust_code;

    INSERT INTO click.d_customerlocationinfo(clo_key, clo_lo, clo_cust_code, clo_cust_name, clo_cust_name_shd, clo_created_at, clo_registration_dt, clo_portal_user, clo_prosp_cust_code, clo_parent_cust_code, clo_supp_code, clo_number_type, clo_addrline1, clo_addrline2, clo_addrline3, clo_city, clo_state, clo_country, clo_zip, clo_phone1, clo_phone2, clo_mobile, clo_fax, clo_email, clo_url, clo_cr_chk_at, clo_nature_of_cust, clo_internal_bu, clo_internal_company, clo_account_group_code, clo_created_by, clo_created_date, clo_modified_by, clo_modified_date, clo_timestamp_value, clo_cust_long_desc, clo_noc, clo_template, clo_pannumber, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.clo_key, s.clo_lo, s.clo_cust_code, s.clo_cust_name, s.clo_cust_name_shd, s.clo_created_at, s.clo_registration_dt, s.clo_portal_user, s.clo_prosp_cust_code, s.clo_parent_cust_code, s.clo_supp_code, s.clo_number_type, s.clo_addrline1, s.clo_addrline2, s.clo_addrline3, s.clo_city, s.clo_state, s.clo_country, s.clo_zip, s.clo_phone1, s.clo_phone2, s.clo_mobile, s.clo_fax, s.clo_email, s.clo_url, s.clo_cr_chk_at, s.clo_nature_of_cust, s.clo_internal_bu, s.clo_internal_company, s.clo_account_group_code, s.clo_created_by, s.clo_created_date, s.clo_modified_by, s.clo_modified_date, s.clo_timestamp_value, s.clo_cust_long_desc, s.clo_noc, s.clo_template, s.clo_pannumber, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customerlocationinfo s
    LEFT JOIN click.d_customerlocationinfo t
    ON t.clo_lo = s.clo_lo
    AND t.clo_cust_code = s.clo_cust_code
    WHERE t.clo_lo IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customerlocationinfo() OWNER TO proconnect;

--
-- Name: usp_d_customerlocdiv(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customerlocdiv()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customerlocdiv t
    SET
        wms_customer_key = s.wms_customer_key,
        wms_customer_id = s.wms_customer_id,
        wms_customer_ou = s.wms_customer_ou,
        wms_customer_lineno = s.wms_customer_lineno,
        wms_customer_type = s.wms_customer_type,
        wms_customer_code = s.wms_customer_code,
        wms_customer_itm_val_contract = s.wms_customer_itm_val_contract,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customerlocdiv s
    WHERE t.wms_customer_id = s.wms_customer_id
    AND t.wms_customer_ou = s.wms_customer_ou
    AND t.wms_customer_lineno = s.wms_customer_lineno;

    INSERT INTO click.d_customerlocdiv(wms_customer_key, wms_customer_id, wms_customer_ou, wms_customer_lineno, wms_customer_type, wms_customer_code, wms_customer_itm_val_contract, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.wms_customer_key, s.wms_customer_id, s.wms_customer_ou, s.wms_customer_lineno, s.wms_customer_type, s.wms_customer_code, s.wms_customer_itm_val_contract, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customerlocdiv s
    LEFT JOIN click.d_customerlocdiv t
    ON t.wms_customer_id = s.wms_customer_id
    AND t.wms_customer_ou = s.wms_customer_ou
    AND t.wms_customer_lineno = s.wms_customer_lineno
    WHERE t.wms_customer_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customerlocdiv() OWNER TO proconnect;

--
-- Name: usp_d_customerouinfo(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customerouinfo()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customerouinfo t
    SET
        cou_key = s.cou_key,
        cou_lo = s.cou_lo,
        cou_bu = s.cou_bu,
        cou_ou = s.cou_ou,
        cou_cust_code = s.cou_cust_code,
        cou_dflt_billto_id = s.cou_dflt_billto_id,
        cou_dflt_shipto_id = s.cou_dflt_shipto_id,
        cou_order_from_id = s.cou_order_from_id,
        cou_dflt_billto_cust = s.cou_dflt_billto_cust,
        cou_dflt_shipto_cust = s.cou_dflt_shipto_cust,
        cou_dflt_pricelist = s.cou_dflt_pricelist,
        cou_dflt_ship_pt = s.cou_dflt_ship_pt,
        cou_language = s.cou_language,
        cou_transport_mode = s.cou_transport_mode,
        cou_sales_chnl = s.cou_sales_chnl,
        cou_order_type = s.cou_order_type,
        cou_process_actn = s.cou_process_actn,
        cou_partshp_flag = s.cou_partshp_flag,
        cou_freight_term = s.cou_freight_term,
        cou_prfrd_carrier = s.cou_prfrd_carrier,
        cou_secstk_flag = s.cou_secstk_flag,
        cou_cons_sales = s.cou_cons_sales,
        cou_cons_bill = s.cou_cons_bill,
        cou_trnshp_flag = s.cou_trnshp_flag,
        cou_inv_appl_flag = s.cou_inv_appl_flag,
        cou_auto_invauth_flag = s.cou_auto_invauth_flag,
        cou_frtbillable_flag = s.cou_frtbillable_flag,
        cou_no_of_invcopies = s.cou_no_of_invcopies,
        cou_elgble_for_rebate = s.cou_elgble_for_rebate,
        cou_reason_code = s.cou_reason_code,
        cou_cr_status = s.cou_cr_status,
        cou_status = s.cou_status,
        cou_prev_status = s.cou_prev_status,
        cou_created_by = s.cou_created_by,
        cou_created_date = s.cou_created_date,
        cou_modified_by = s.cou_modified_by,
        cou_modified_date = s.cou_modified_date,
        cou_timestamp_value = s.cou_timestamp_value,
        cou_company_code = s.cou_company_code,
        cou_cust_priority = s.cou_cust_priority,
        cou_sales_person = s.cou_sales_person,
        cou_cust_frequency = s.cou_cust_frequency,
        cou_wf_status = s.cou_wf_status,
        cou_revision_no = s.cou_revision_no,
        cou_trade_type = s.cou_trade_type,
        cou_frt_appl = s.cou_frt_appl,
        cou_cust_category = s.cou_cust_category,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customerouinfo s
    WHERE t.cou_lo = s.cou_lo
    AND t.cou_bu = s.cou_bu
    AND t.cou_ou = s.cou_ou
    AND t.cou_cust_code = s.cou_cust_code;

    INSERT INTO click.d_customerouinfo(cou_key, cou_lo, cou_bu, cou_ou, cou_cust_code, cou_dflt_billto_id, cou_dflt_shipto_id, cou_order_from_id, cou_dflt_billto_cust, cou_dflt_shipto_cust, cou_dflt_pricelist, cou_dflt_ship_pt, cou_language, cou_transport_mode, cou_sales_chnl, cou_order_type, cou_process_actn, cou_partshp_flag, cou_freight_term, cou_prfrd_carrier, cou_secstk_flag, cou_cons_sales, cou_cons_bill, cou_trnshp_flag, cou_inv_appl_flag, cou_auto_invauth_flag, cou_frtbillable_flag, cou_no_of_invcopies, cou_elgble_for_rebate, cou_reason_code, cou_cr_status, cou_status, cou_prev_status, cou_created_by, cou_created_date, cou_modified_by, cou_modified_date, cou_timestamp_value, cou_company_code, cou_cust_priority, cou_sales_person, cou_cust_frequency, cou_wf_status, cou_revision_no, cou_trade_type, cou_frt_appl, cou_cust_category, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.cou_key, s.cou_lo, s.cou_bu, s.cou_ou, s.cou_cust_code, s.cou_dflt_billto_id, s.cou_dflt_shipto_id, s.cou_order_from_id, s.cou_dflt_billto_cust, s.cou_dflt_shipto_cust, s.cou_dflt_pricelist, s.cou_dflt_ship_pt, s.cou_language, s.cou_transport_mode, s.cou_sales_chnl, s.cou_order_type, s.cou_process_actn, s.cou_partshp_flag, s.cou_freight_term, s.cou_prfrd_carrier, s.cou_secstk_flag, s.cou_cons_sales, s.cou_cons_bill, s.cou_trnshp_flag, s.cou_inv_appl_flag, s.cou_auto_invauth_flag, s.cou_frtbillable_flag, s.cou_no_of_invcopies, s.cou_elgble_for_rebate, s.cou_reason_code, s.cou_cr_status, s.cou_status, s.cou_prev_status, s.cou_created_by, s.cou_created_date, s.cou_modified_by, s.cou_modified_date, s.cou_timestamp_value, s.cou_company_code, s.cou_cust_priority, s.cou_sales_person, s.cou_cust_frequency, s.cou_wf_status, s.cou_revision_no, s.cou_trade_type, s.cou_frt_appl, s.cou_cust_category, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customerouinfo s
    LEFT JOIN click.d_customerouinfo t
    ON t.cou_lo = s.cou_lo
    AND t.cou_bu = s.cou_bu
    AND t.cou_ou = s.cou_ou
    AND t.cou_cust_code = s.cou_cust_code
    WHERE t.cou_lo IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customerouinfo() OWNER TO proconnect;

--
-- Name: usp_d_customerportalusermap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_customerportalusermap()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_customerportalusermap t
    SET
        customer_key = s.customer_key,
        customer_id = s.customer_id,
        customer_ou = s.customer_ou,
        customer_lineno = s.customer_lineno,
        customer_user_id = s.customer_user_id,
        customer_role = s.customer_role,
        customer_wms = s.customer_wms,
        customer_tms = s.customer_tms,
        customer_addl_custmap = s.customer_addl_custmap,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_customerportalusermap s
    WHERE t.customer_id = s.customer_id
    AND t.customer_ou = s.customer_ou
    AND t.customer_lineno = s.customer_lineno;

    INSERT INTO click.d_customerportalusermap(customer_key, customer_id, customer_ou, customer_lineno, customer_user_id, customer_role, customer_wms, customer_tms, customer_addl_custmap, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.customer_key, s.customer_id, s.customer_ou, s.customer_lineno, s.customer_user_id, s.customer_role, s.customer_wms, s.customer_tms, s.customer_addl_custmap, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_customerportalusermap s
    LEFT JOIN click.d_customerportalusermap t
    ON t.customer_id = s.customer_id
    AND t.customer_ou = s.customer_ou
    AND t.customer_lineno = s.customer_lineno
    WHERE t.customer_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_customerportalusermap() OWNER TO proconnect;

--
-- Name: usp_d_custprospectinfo(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_custprospectinfo()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_custprospectinfo t
    SET
        cpr_key = s.cpr_key,
        cpr_lo = s.cpr_lo,
        cpr_prosp_cust_code = s.cpr_prosp_cust_code,
        cpr_prosp_cust_name = s.cpr_prosp_cust_name,
        cpr_prosp_custname_shd = s.cpr_prosp_custname_shd,
        cpr_registration_dt = s.cpr_registration_dt,
        cpr_created_at = s.cpr_created_at,
        cpr_number_type = s.cpr_number_type,
        cpr_created_transaction = s.cpr_created_transaction,
        cpr_addrline1 = s.cpr_addrline1,
        cpr_addrline2 = s.cpr_addrline2,
        cpr_addrline3 = s.cpr_addrline3,
        cpr_city = s.cpr_city,
        cpr_state = s.cpr_state,
        cpr_country = s.cpr_country,
        cpr_zip = s.cpr_zip,
        cpr_phone1 = s.cpr_phone1,
        cpr_mobile = s.cpr_mobile,
        cpr_fax = s.cpr_fax,
        cpr_email = s.cpr_email,
        cpr_status = s.cpr_status,
        cpr_created_by = s.cpr_created_by,
        cpr_created_date = s.cpr_created_date,
        cpr_modified_by = s.cpr_modified_by,
        cpr_modified_date = s.cpr_modified_date,
        cpr_timestamp_value = s.cpr_timestamp_value,
        cpr_cont_person = s.cpr_cont_person,
        cpr_prosp_long_desc = s.cpr_prosp_long_desc,
        cpr_industry = s.cpr_industry,
        cpr_priority = s.cpr_priority,
        cpr_region = s.cpr_region,
        cpr_prosp_contact_name = s.cpr_prosp_contact_name,
        cpr_registration_no = s.cpr_registration_no,
        cpr_registration_type = s.cpr_registration_type,
        cpr_address_id = s.cpr_address_id,
        cpr_crm_flag = s.cpr_crm_flag,
        cpr_segment = s.cpr_segment,
        cpr_sp_code = s.cpr_sp_code,
        cpr_cust_loyalty = s.cpr_cust_loyalty,
        cpr_pannumber = s.cpr_pannumber,
        cpr_job_title = s.cpr_job_title,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_custprospectinfo s
    WHERE t.cpr_lo = s.cpr_lo
    AND t.cpr_prosp_cust_code = s.cpr_prosp_cust_code;

    INSERT INTO click.d_custprospectinfo(cpr_key, cpr_lo, cpr_prosp_cust_code, cpr_prosp_cust_name, cpr_prosp_custname_shd, cpr_registration_dt, cpr_created_at, cpr_number_type, cpr_created_transaction, cpr_addrline1, cpr_addrline2, cpr_addrline3, cpr_city, cpr_state, cpr_country, cpr_zip, cpr_phone1, cpr_mobile, cpr_fax, cpr_email, cpr_status, cpr_created_by, cpr_created_date, cpr_modified_by, cpr_modified_date, cpr_timestamp_value, cpr_cont_person, cpr_prosp_long_desc, cpr_industry, cpr_priority, cpr_region, cpr_prosp_contact_name, cpr_registration_no, cpr_registration_type, cpr_address_id, cpr_crm_flag, cpr_segment, cpr_sp_code, cpr_cust_loyalty, cpr_pannumber, cpr_job_title, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.cpr_key, s.cpr_lo, s.cpr_prosp_cust_code, s.cpr_prosp_cust_name, s.cpr_prosp_custname_shd, s.cpr_registration_dt, s.cpr_created_at, s.cpr_number_type, s.cpr_created_transaction, s.cpr_addrline1, s.cpr_addrline2, s.cpr_addrline3, s.cpr_city, s.cpr_state, s.cpr_country, s.cpr_zip, s.cpr_phone1, s.cpr_mobile, s.cpr_fax, s.cpr_email, s.cpr_status, s.cpr_created_by, s.cpr_created_date, s.cpr_modified_by, s.cpr_modified_date, s.cpr_timestamp_value, s.cpr_cont_person, s.cpr_prosp_long_desc, s.cpr_industry, s.cpr_priority, s.cpr_region, s.cpr_prosp_contact_name, s.cpr_registration_no, s.cpr_registration_type, s.cpr_address_id, s.cpr_crm_flag, s.cpr_segment, s.cpr_sp_code, s.cpr_cust_loyalty, s.cpr_pannumber, s.cpr_job_title, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_custprospectinfo s
    LEFT JOIN click.d_custprospectinfo t
    ON t.cpr_lo = s.cpr_lo
    AND t.cpr_prosp_cust_code = s.cpr_prosp_cust_code
    WHERE t.cpr_lo IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_custprospectinfo() OWNER TO proconnect;

--
-- Name: usp_d_date(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_date()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_date t
    SET
        datekey = s.datekey,
        dateactual = s.dateactual,
        epoch = s.epoch,
        daysuffix = s.daysuffix,
        dayname = s.dayname,
        dayofweek = s.dayofweek,
        dayofmonth = s.dayofmonth,
        dayofquarter = s.dayofquarter,
        dayofyear = s.dayofyear,
        weekofmonth = s.weekofmonth,
        weekofyear = s.weekofyear,
        weekofyeariso = s.weekofyeariso,
        monthactual = s.monthactual,
        monthname = s.monthname,
        monthnameabbreviated = s.monthnameabbreviated,
        quarteractual = s.quarteractual,
        quartername = s.quartername,
        yearactual = s.yearactual,
        firstdayofweek = s.firstdayofweek,
        lastdayofweek = s.lastdayofweek,
        firstdayofmonth = s.firstdayofmonth,
        lastdayofmonth = s.lastdayofmonth,
        firstdayofquarter = s.firstdayofquarter,
        lastdayofquarter = s.lastdayofquarter,
        firstdayofyear = s.firstdayofyear,
        lastdayofyear = s.lastdayofyear,
        rolling12monthind = s.rolling12monthind,
        priorrolling12monthind = s.priorrolling12monthind,
        priorpriorrolling12monthind = s.priorpriorrolling12monthind,
        rolling24monthind = s.rolling24monthind,
        rolling36monthind = s.rolling36monthind,
        rolling2yearind = s.rolling2yearind,
        rolling3yearind = s.rolling3yearind,
        rolling6monthind = s.rolling6monthind,
        roling3monthind = s.roling3monthind,
        currentmonthind = s.currentmonthind,
        prioryearcurrentmonthind = s.prioryearcurrentmonthind,
        future6monthind = s.future6monthind,
        future5monthind = s.future5monthind,
        future4monthind = s.future4monthind,
        future3monthind = s.future3monthind,
        future12monthind = s.future12monthind,
        yeartolastcompletedmonthind = s.yeartolastcompletedmonthind,
        prioryeartolastcompletedmonthind = s.prioryeartolastcompletedmonthind,
        priorprioryeartolastcompletedmonthind = s.priorprioryeartolastcompletedmonthind,
        fullyearind = s.fullyearind,
        priorfullyearind = s.priorfullyearind,
        monthtodateind = s.monthtodateind,
        prioryearmonthtodateind = s.prioryearmonthtodateind,
        yeartodateind = s.yeartodateind,
        currentyearind = s.currentyearind,
        prioryearind = s.prioryearind,
        priormonthind = s.priormonthind,
        prioryeartodateind = s.prioryeartodateind,
        priorprioryeartodateind = s.priorprioryeartodateind,
        priorprioryearmonthtodateind = s.priorprioryearmonthtodateind,
        priorprioryearind = s.priorprioryearind,
        rolling365daysind = s.rolling365daysind,
        finacialyearind = s.finacialyearind,
        prioryearfinancialyearind = s.prioryearfinancialyearind,
        etlactiveind = s.etlactiveind,
        mmyyyy = s.mmyyyy,
        mmddyyyy = s.mmddyyyy,
        weekendindr = s.weekendindr
    FROM dwh.d_date s
    WHERE t.dateactual = s.dateactual;

    INSERT INTO click.d_date(datekey, dateactual, epoch, daysuffix, dayname, dayofweek, dayofmonth, dayofquarter, dayofyear, weekofmonth, weekofyear, weekofyeariso, monthactual, monthname, monthnameabbreviated, quarteractual, quartername, yearactual, firstdayofweek, lastdayofweek, firstdayofmonth, lastdayofmonth, firstdayofquarter, lastdayofquarter, firstdayofyear, lastdayofyear, rolling12monthind, priorrolling12monthind, priorpriorrolling12monthind, rolling24monthind, rolling36monthind, rolling2yearind, rolling3yearind, rolling6monthind, roling3monthind, currentmonthind, prioryearcurrentmonthind, future6monthind, future5monthind, future4monthind, future3monthind, future12monthind, yeartolastcompletedmonthind, prioryeartolastcompletedmonthind, priorprioryeartolastcompletedmonthind, fullyearind, priorfullyearind, monthtodateind, prioryearmonthtodateind, yeartodateind, currentyearind, prioryearind, priormonthind, prioryeartodateind, priorprioryeartodateind, priorprioryearmonthtodateind, priorprioryearind, rolling365daysind, finacialyearind, prioryearfinancialyearind, etlactiveind, mmyyyy, mmddyyyy,weekendindr)
    SELECT s.datekey, s.dateactual, s.epoch, s.daysuffix, s.dayname, s.dayofweek, s.dayofmonth, s.dayofquarter, s.dayofyear, s.weekofmonth, s.weekofyear, s.weekofyeariso, s.monthactual, s.monthname, s.monthnameabbreviated, s.quarteractual, s.quartername, s.yearactual, s.firstdayofweek, s.lastdayofweek, s.firstdayofmonth, s.lastdayofmonth, s.firstdayofquarter, s.lastdayofquarter, s.firstdayofyear, s.lastdayofyear, s.rolling12monthind, s.priorrolling12monthind, s.priorpriorrolling12monthind, s.rolling24monthind, s.rolling36monthind, s.rolling2yearind, s.rolling3yearind, s.rolling6monthind, s.roling3monthind, s.currentmonthind, s.prioryearcurrentmonthind, s.future6monthind, s.future5monthind, s.future4monthind, s.future3monthind, s.future12monthind, s.yeartolastcompletedmonthind, s.prioryeartolastcompletedmonthind, s.priorprioryeartolastcompletedmonthind, s.fullyearind, s.priorfullyearind, s.monthtodateind, s.prioryearmonthtodateind, s.yeartodateind, s.currentyearind, s.prioryearind, s.priormonthind, s.prioryeartodateind, s.priorprioryeartodateind, s.priorprioryearmonthtodateind, s.priorprioryearind, s.rolling365daysind, s.finacialyearind, s.prioryearfinancialyearind, s.etlactiveind, s.mmyyyy, s.mmddyyyy,s.weekendindr
    FROM dwh.d_date s
    LEFT JOIN click.d_date t
    ON t.dateactual = s.dateactual
    WHERE t.dateactual IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_date() OWNER TO proconnect;

--
-- Name: usp_d_division(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_division()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_division t
    SET
        div_key = s.div_key,
        div_ou = s.div_ou,
        div_code = s.div_code,
        div_desc = s.div_desc,
        div_status = s.div_status,
        div_type = s.div_type,
        div_reason_code = s.div_reason_code,
        div_user_def1 = s.div_user_def1,
        div_user_def2 = s.div_user_def2,
        div_user_def3 = s.div_user_def3,
        div_timestamp = s.div_timestamp,
        div_created_by = s.div_created_by,
        div_created_dt = s.div_created_dt,
        div_modified_by = s.div_modified_by,
        div_modified_dt = s.div_modified_dt,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_division s
    WHERE t.div_ou = s.div_ou
    AND t.div_code = s.div_code;

    INSERT INTO click.d_division(div_key, div_ou, div_code, div_desc, div_status, div_type, div_reason_code, div_user_def1, div_user_def2, div_user_def3, div_timestamp, div_created_by, div_created_dt, div_modified_by, div_modified_dt, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.div_key, s.div_ou, s.div_code, s.div_desc, s.div_status, s.div_type, s.div_reason_code, s.div_user_def1, s.div_user_def2, s.div_user_def3, s.div_timestamp, s.div_created_by, s.div_created_dt, s.div_modified_by, s.div_modified_dt, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_division s
    LEFT JOIN click.d_division t
    ON t.div_ou = s.div_ou
    AND t.div_code = s.div_code
    WHERE t.div_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_division() OWNER TO proconnect;

--
-- Name: usp_d_divloclist(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_divloclist()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_divloclist t
    SET
        div_loc_key = s.div_loc_key,
        div_ou = s.div_ou,
        div_code = s.div_code,
        div_lineno = s.div_lineno,
        div_loc_code = s.div_loc_code,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_divloclist s
    WHERE t.div_ou = s.div_ou
    AND t.div_code = s.div_code
    AND t.div_lineno = s.div_lineno;

    INSERT INTO click.d_divloclist(div_loc_key, div_ou, div_code, div_lineno, div_loc_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.div_loc_key, s.div_ou, s.div_code, s.div_lineno, s.div_loc_code, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_divloclist s
    LEFT JOIN click.d_divloclist t
    ON t.div_ou = s.div_ou
    AND t.div_code = s.div_code
    AND t.div_lineno = s.div_lineno
    WHERE t.div_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_divloclist() OWNER TO proconnect;

--
-- Name: usp_d_employeeheader(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_employeeheader()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_employeeheader t
    SET
        emp_hdr_key = s.emp_hdr_key,
        emp_employee_code = s.emp_employee_code,
        emp_ou = s.emp_ou,
        emp_description = s.emp_description,
        emp_status = s.emp_status,
        emp_reason_code = s.emp_reason_code,
        emp_first_name = s.emp_first_name,
        emp_last_name = s.emp_last_name,
        emp_middle_name = s.emp_middle_name,
        emp_ssn_id_no = s.emp_ssn_id_no,
        emp_gender = s.emp_gender,
        emp_owner_type = s.emp_owner_type,
        emp_nationality = s.emp_nationality,
        emp_agency_id = s.emp_agency_id,
        emp_religion = s.emp_religion,
        emp_agency_contact_num = s.emp_agency_contact_num,
        emp_dob = s.emp_dob,
        emp_date_of_confirmation = s.emp_date_of_confirmation,
        emp_user = s.emp_user,
        emp_department = s.emp_department,
        emp_designation = s.emp_designation,
        emp_date_of_joining = s.emp_date_of_joining,
        emp_blood_group = s.emp_blood_group,
        emp_cost_center = s.emp_cost_center,
        emp_address_line1 = s.emp_address_line1,
        emp_address_line2 = s.emp_address_line2,
        emp_address_line3 = s.emp_address_line3,
        emp_city = s.emp_city,
        emp_state = s.emp_state,
        emp_country = s.emp_country,
        emp_postal_code = s.emp_postal_code,
        emp_primary_phone = s.emp_primary_phone,
        emp_secondary_phone = s.emp_secondary_phone,
        emp_email = s.emp_email,
        emp_emergency_contact_pers = s.emp_emergency_contact_pers,
        emp_emergency_relationship = s.emp_emergency_relationship,
        emp_phone = s.emp_phone,
        emp_default_location = s.emp_default_location,
        emp_current_location = s.emp_current_location,
        emp_current_location_since = s.emp_current_location_since,
        emp_shift_pref = s.emp_shift_pref,
        emp_grade = s.emp_grade,
        emp_created_by = s.emp_created_by,
        emp_created_date = s.emp_created_date,
        emp_modified_by = s.emp_modified_by,
        emp_modified_date = s.emp_modified_date,
        emp_timestamp = s.emp_timestamp,
        emp_given_name = s.emp_given_name,
        emp_gen_info_grade = s.emp_gen_info_grade,
        emp_employment = s.emp_employment,
        emp_rate_tariffid = s.emp_rate_tariffid,
        emp_intransit = s.emp_intransit,
        emp_route = s.emp_route,
        emp_and = s.emp_and,
        emp_between = s.emp_between,
        emp_rate_tariffcontid = s.emp_rate_tariffcontid,
        emp_raise_int_drfbill = s.emp_raise_int_drfbill,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_employeeheader s
    WHERE t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou;

    INSERT INTO click.d_employeeheader(emp_hdr_key, emp_employee_code, emp_ou, emp_description, emp_status, emp_reason_code, emp_first_name, emp_last_name, emp_middle_name, emp_ssn_id_no, emp_gender, emp_owner_type, emp_nationality, emp_agency_id, emp_religion, emp_agency_contact_num, emp_dob, emp_date_of_confirmation, emp_user, emp_department, emp_designation, emp_date_of_joining, emp_blood_group, emp_cost_center, emp_address_line1, emp_address_line2, emp_address_line3, emp_city, emp_state, emp_country, emp_postal_code, emp_primary_phone, emp_secondary_phone, emp_email, emp_emergency_contact_pers, emp_emergency_relationship, emp_phone, emp_default_location, emp_current_location, emp_current_location_since, emp_shift_pref, emp_grade, emp_created_by, emp_created_date, emp_modified_by, emp_modified_date, emp_timestamp, emp_given_name, emp_gen_info_grade, emp_employment, emp_rate_tariffid, emp_intransit, emp_route, emp_and, emp_between, emp_rate_tariffcontid, emp_raise_int_drfbill, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.emp_hdr_key, s.emp_employee_code, s.emp_ou, s.emp_description, s.emp_status, s.emp_reason_code, s.emp_first_name, s.emp_last_name, s.emp_middle_name, s.emp_ssn_id_no, s.emp_gender, s.emp_owner_type, s.emp_nationality, s.emp_agency_id, s.emp_religion, s.emp_agency_contact_num, s.emp_dob, s.emp_date_of_confirmation, s.emp_user, s.emp_department, s.emp_designation, s.emp_date_of_joining, s.emp_blood_group, s.emp_cost_center, s.emp_address_line1, s.emp_address_line2, s.emp_address_line3, s.emp_city, s.emp_state, s.emp_country, s.emp_postal_code, s.emp_primary_phone, s.emp_secondary_phone, s.emp_email, s.emp_emergency_contact_pers, s.emp_emergency_relationship, s.emp_phone, s.emp_default_location, s.emp_current_location, s.emp_current_location_since, s.emp_shift_pref, s.emp_grade, s.emp_created_by, s.emp_created_date, s.emp_modified_by, s.emp_modified_date, s.emp_timestamp, s.emp_given_name, s.emp_gen_info_grade, s.emp_employment, s.emp_rate_tariffid, s.emp_intransit, s.emp_route, s.emp_and, s.emp_between, s.emp_rate_tariffcontid, s.emp_raise_int_drfbill, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_employeeheader s
    LEFT JOIN click.d_employeeheader t
    ON t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    WHERE t.emp_employee_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_employeeheader() OWNER TO proconnect;

--
-- Name: usp_d_employeelicense(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_employeelicense()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_employeelicense t
    SET
        emp_key = s.emp_key,
        emp_employee_code = s.emp_employee_code,
        emp_ou = s.emp_ou,
        emp_lineno = s.emp_lineno,
        emp_license_type = s.emp_license_type,
        emp_license_num = s.emp_license_num,
        emp_description = s.emp_description,
        emp_issued_date = s.emp_issued_date,
        emp_valid_from = s.emp_valid_from,
        emp_valid_till = s.emp_valid_till,
        emp_issuing_authority = s.emp_issuing_authority,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_employeelicense s
    WHERE t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno;

    INSERT INTO click.d_employeelicense(emp_key, emp_employee_code, emp_ou, emp_lineno, emp_license_type, emp_license_num, emp_description, emp_issued_date, emp_valid_from, emp_valid_till, emp_issuing_authority, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.emp_key, s.emp_employee_code, s.emp_ou, s.emp_lineno, s.emp_license_type, s.emp_license_num, s.emp_description, s.emp_issued_date, s.emp_valid_from, s.emp_valid_till, s.emp_issuing_authority, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_employeelicense s
    LEFT JOIN click.d_employeelicense t
    ON t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno
    WHERE t.emp_employee_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_employeelicense() OWNER TO proconnect;

--
-- Name: usp_d_employeelocation(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_employeelocation()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_employeelocation t
    SET
        emp_loc_key = s.emp_loc_key,
        emp_employee_code = s.emp_employee_code,
        emp_ou = s.emp_ou,
        emp_lineno = s.emp_lineno,
        emp_geo_type = s.emp_geo_type,
        emp_division_location = s.emp_division_location,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_employeelocation s
    WHERE t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno;

    INSERT INTO click.d_employeelocation(emp_loc_key, emp_employee_code, emp_ou, emp_lineno, emp_geo_type, emp_division_location, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.emp_loc_key, s.emp_employee_code, s.emp_ou, s.emp_lineno, s.emp_geo_type, s.emp_division_location, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_employeelocation s
    LEFT JOIN click.d_employeelocation t
    ON t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno
    WHERE t.emp_employee_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_employeelocation() OWNER TO proconnect;

--
-- Name: usp_d_employeeskills(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_employeeskills()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_employeeskills t
    SET
        emp_skill_key = s.emp_skill_key,
        emp_employee_code = s.emp_employee_code,
        emp_ou = s.emp_ou,
        emp_lineno = s.emp_lineno,
        emp_skill_code = s.emp_skill_code,
        emp_primary_skill = s.emp_primary_skill,
        emp_certificate_no = s.emp_certificate_no,
        emp_certificate_type = s.emp_certificate_type,
        emp_issued_date = s.emp_issued_date,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_employeeskills s
    WHERE t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno;

    INSERT INTO click.d_employeeskills(emp_skill_key, emp_employee_code, emp_ou, emp_lineno, emp_skill_code, emp_primary_skill, emp_certificate_no, emp_certificate_type, emp_issued_date, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.emp_skill_key, s.emp_employee_code, s.emp_ou, s.emp_lineno, s.emp_skill_code, s.emp_primary_skill, s.emp_certificate_no, s.emp_certificate_type, s.emp_issued_date, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_employeeskills s
    LEFT JOIN click.d_employeeskills t
    ON t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno
    WHERE t.emp_employee_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_employeeskills() OWNER TO proconnect;

--
-- Name: usp_d_employeetype(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_employeetype()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_employeetype t
    SET
        emp_employee_key = s.emp_employee_key,
        emp_employee_code = s.emp_employee_code,
        emp_ou = s.emp_ou,
        emp_lineno = s.emp_lineno,
        emp_type = s.emp_type,
        emp_priority = s.emp_priority,
        emp_mapped = s.emp_mapped,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_employeetype s
    WHERE t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno;

    INSERT INTO click.d_employeetype(emp_employee_key, emp_employee_code, emp_ou, emp_lineno, emp_type, emp_priority, emp_mapped, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.emp_employee_key, s.emp_employee_code, s.emp_ou, s.emp_lineno, s.emp_type, s.emp_priority, s.emp_mapped, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_employeetype s
    LEFT JOIN click.d_employeetype t
    ON t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno
    WHERE t.emp_employee_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_employeetype() OWNER TO proconnect;

--
-- Name: usp_d_employeeunavdate(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_employeeunavdate()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_employeeunavdate t
    SET
        emp_udate_key = s.emp_udate_key,
        emp_employee_code = s.emp_employee_code,
        emp_ou = s.emp_ou,
        emp_lineno = s.emp_lineno,
        emp_from_date = s.emp_from_date,
        emp_to_date = s.emp_to_date,
        emp_reason_code = s.emp_reason_code,
        emp_all_shift = s.emp_all_shift,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_employeeunavdate s
    WHERE t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno;

    INSERT INTO click.d_employeeunavdate(emp_udate_key, emp_employee_code, emp_ou, emp_lineno, emp_from_date, emp_to_date, emp_reason_code, emp_all_shift, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.emp_udate_key, s.emp_employee_code, s.emp_ou, s.emp_lineno, s.emp_from_date, s.emp_to_date, s.emp_reason_code, s.emp_all_shift, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_employeeunavdate s
    LEFT JOIN click.d_employeeunavdate t
    ON t.emp_employee_code = s.emp_employee_code
    AND t.emp_ou = s.emp_ou
    AND t.emp_lineno = s.emp_lineno
    WHERE t.emp_employee_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_employeeunavdate() OWNER TO proconnect;

--
-- Name: usp_d_equipment(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_equipment()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_equipment t
    SET
        eqp_key = s.eqp_key,
        eqp_ou = s.eqp_ou,
        eqp_equipment_id = s.eqp_equipment_id,
        eqp_description = s.eqp_description,
        eqp_status = s.eqp_status,
        eqp_type = s.eqp_type,
        eqp_hazardous_goods = s.eqp_hazardous_goods,
        eqp_owner_type = s.eqp_owner_type,
        eqp_default_location = s.eqp_default_location,
        eqp_current_location = s.eqp_current_location,
        eqp_timestamp = s.eqp_timestamp,
        eqp_created_date = s.eqp_created_date,
        eqp_created_by = s.eqp_created_by,
        eqp_modified_date = s.eqp_modified_date,
        eqp_modified_by = s.eqp_modified_by,
        eqp_intransit = s.eqp_intransit,
        eqp_refrigerated = s.eqp_refrigerated,
        veh_current_geo_type = s.veh_current_geo_type,
        eqp_raise_int_drfbill = s.eqp_raise_int_drfbill,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_equipment s
    WHERE t.eqp_ou = s.eqp_ou
    AND t.eqp_equipment_id = s.eqp_equipment_id;

    INSERT INTO click.d_equipment(eqp_key, eqp_ou, eqp_equipment_id, eqp_description, eqp_status, eqp_type, eqp_hazardous_goods, eqp_owner_type, eqp_default_location, eqp_current_location, eqp_timestamp, eqp_created_date, eqp_created_by, eqp_modified_date, eqp_modified_by, eqp_intransit, eqp_refrigerated, veh_current_geo_type, eqp_raise_int_drfbill, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.eqp_key, s.eqp_ou, s.eqp_equipment_id, s.eqp_description, s.eqp_status, s.eqp_type, s.eqp_hazardous_goods, s.eqp_owner_type, s.eqp_default_location, s.eqp_current_location, s.eqp_timestamp, s.eqp_created_date, s.eqp_created_by, s.eqp_modified_date, s.eqp_modified_by, s.eqp_intransit, s.eqp_refrigerated, s.veh_current_geo_type, s.eqp_raise_int_drfbill, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_equipment s
    LEFT JOIN click.d_equipment t
    ON t.eqp_ou = s.eqp_ou
    AND t.eqp_equipment_id = s.eqp_equipment_id
    WHERE t.eqp_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_equipment() OWNER TO proconnect;

--
-- Name: usp_d_equipmentgroup(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_equipmentgroup()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_equipmentgroup t
    SET
        egrp_key = s.egrp_key,
        egrp_ou = s.egrp_ou,
        egrp_id = s.egrp_id,
        egrp_desc = s.egrp_desc,
        egrp_status = s.egrp_status,
        egrp_created_by = s.egrp_created_by,
        egrp_created_date = s.egrp_created_date,
        egrp_modified_by = s.egrp_modified_by,
        egrp_modified_date = s.egrp_modified_date,
        egrp_timestamp = s.egrp_timestamp,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_equipmentgroup s
    WHERE t.egrp_ou = s.egrp_ou
    AND t.egrp_id = s.egrp_id;

    INSERT INTO click.d_equipmentgroup(egrp_key, egrp_ou, egrp_id, egrp_desc, egrp_status, egrp_created_by, egrp_created_date, egrp_modified_by, egrp_modified_date, egrp_timestamp, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.egrp_key, s.egrp_ou, s.egrp_id, s.egrp_desc, s.egrp_status, s.egrp_created_by, s.egrp_created_date, s.egrp_modified_by, s.egrp_modified_date, s.egrp_timestamp, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_equipmentgroup s
    LEFT JOIN click.d_equipmentgroup t
    ON t.egrp_ou = s.egrp_ou
    AND t.egrp_id = s.egrp_id
    WHERE t.egrp_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_equipmentgroup() OWNER TO proconnect;

--
-- Name: usp_d_equipmentgroupdtl(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_equipmentgroupdtl()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_equipmentgroupdtl t
    SET
        egrp_key = s.egrp_key,
        egrp_ou = s.egrp_ou,
        egrp_id = s.egrp_id,
        egrp_lineno = s.egrp_lineno,
        egrp_eqp_id = s.egrp_eqp_id,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_equipmentgroupdtl s
    WHERE t.egrp_ou = s.egrp_ou
    AND t.egrp_id = s.egrp_id
    AND t.egrp_lineno = s.egrp_lineno;

    INSERT INTO click.d_equipmentgroupdtl(egrp_key, egrp_ou, egrp_id, egrp_lineno, egrp_eqp_id, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.egrp_key, s.egrp_ou, s.egrp_id, s.egrp_lineno, s.egrp_eqp_id, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_equipmentgroupdtl s
    LEFT JOIN click.d_equipmentgroupdtl t
    ON t.egrp_ou = s.egrp_ou
    AND t.egrp_id = s.egrp_id
    AND t.egrp_lineno = s.egrp_lineno
    WHERE t.egrp_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_equipmentgroupdtl() OWNER TO proconnect;

--
-- Name: usp_d_excessitem(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_excessitem()
    LANGUAGE plpgsql
    AS $$

Declare p_etllastrundate date;
BEGIN

	SELECT max(COALESCE(etlupdatedatetime,etlcreatedatetime)):: DATE as p_etllastrundate
	INTO p_etllastrundate
	FROM click.d_excessitem;
	
    UPDATE click.d_excessitem t
    SET
        ex_itm_key = s.ex_itm_key,
        ex_itm_ou = s.ex_itm_ou,
        ex_itm_code = s.ex_itm_code,
        ex_itm_loc_code = s.ex_itm_loc_code,
        ex_itm_desc = s.ex_itm_desc,
        ex_itm_cap_profile = s.ex_itm_cap_profile,
        ex_itm_zone_profile = s.ex_itm_zone_profile,
        ex_itm_stage_profile = s.ex_itm_stage_profile,
        ex_itm_effective_frm = s.ex_itm_effective_frm,
        ex_itm_effective_to = s.ex_itm_effective_to,
        ex_itm_pick_per_tol_pos = s.ex_itm_pick_per_tol_pos,
        ex_itm_pick_per_tol_neg = s.ex_itm_pick_per_tol_neg,
        ex_itm_pick_uom_tol_pos = s.ex_itm_pick_uom_tol_pos,
        ex_itm_pick_uom_tol_neg = s.ex_itm_pick_uom_tol_neg,
        ex_itm_mininum_qty = s.ex_itm_mininum_qty,
        ex_itm_maximum_qty = s.ex_itm_maximum_qty,
        ex_itm_replen_qty = s.ex_itm_replen_qty,
        ex_itm_master_uom = s.ex_itm_master_uom,
        ex_itm_timestamp = s.ex_itm_timestamp,
        ex_itm_created_by = s.ex_itm_created_by,
        ex_itm_created_dt = s.ex_itm_created_dt,
        ex_itm_modified_by = s.ex_itm_modified_by,
        ex_itm_modified_dt = s.ex_itm_modified_dt,
        ex_itm_packing_bay = s.ex_itm_packing_bay,
        ex_itm_low_stk_lvl = s.ex_itm_low_stk_lvl,
        ex_itm_std_strg_thu_id = s.ex_itm_std_strg_thu_id,
        ex_itm_wave_repln_req = s.ex_itm_wave_repln_req,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = s.etlupdatedatetime
    FROM dwh.d_excessitem s
    WHERE t.ex_itm_ou = s.ex_itm_ou
    AND t.ex_itm_code = s.ex_itm_code
    AND t.ex_itm_loc_code = s.ex_itm_loc_code
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE >= p_etllastrundate;

    INSERT INTO click.d_excessitem(ex_itm_key, ex_itm_ou, ex_itm_code, ex_itm_loc_code, ex_itm_desc, ex_itm_cap_profile, ex_itm_zone_profile, ex_itm_stage_profile, ex_itm_effective_frm, ex_itm_effective_to, ex_itm_pick_per_tol_pos, ex_itm_pick_per_tol_neg, ex_itm_pick_uom_tol_pos, ex_itm_pick_uom_tol_neg, ex_itm_mininum_qty, ex_itm_maximum_qty, ex_itm_replen_qty, ex_itm_master_uom, ex_itm_timestamp, ex_itm_created_by, ex_itm_created_dt, ex_itm_modified_by, ex_itm_modified_dt, ex_itm_packing_bay, ex_itm_low_stk_lvl, ex_itm_std_strg_thu_id, ex_itm_wave_repln_req, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.ex_itm_key, s.ex_itm_ou, s.ex_itm_code, s.ex_itm_loc_code, s.ex_itm_desc, s.ex_itm_cap_profile, s.ex_itm_zone_profile, s.ex_itm_stage_profile, s.ex_itm_effective_frm, s.ex_itm_effective_to, s.ex_itm_pick_per_tol_pos, s.ex_itm_pick_per_tol_neg, s.ex_itm_pick_uom_tol_pos, s.ex_itm_pick_uom_tol_neg, s.ex_itm_mininum_qty, s.ex_itm_maximum_qty, s.ex_itm_replen_qty, s.ex_itm_master_uom, s.ex_itm_timestamp, s.ex_itm_created_by, s.ex_itm_created_dt, s.ex_itm_modified_by, s.ex_itm_modified_dt, s.ex_itm_packing_bay, s.ex_itm_low_stk_lvl, s.ex_itm_std_strg_thu_id, s.ex_itm_wave_repln_req, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, s.etlcreatedatetime
    FROM dwh.d_excessitem s
    LEFT JOIN click.d_excessitem t
    ON t.ex_itm_ou = s.ex_itm_ou
    AND t.ex_itm_code = s.ex_itm_code
    AND t.ex_itm_loc_code = s.ex_itm_loc_code
    WHERE t.ex_itm_ou IS NULL
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE >= p_etllastrundate;
END;
$$;


ALTER PROCEDURE click.usp_d_excessitem() OWNER TO proconnect;

--
-- Name: usp_d_exchangerate(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_exchangerate()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_exchangerate t
    SET
        d_exchangerate_key = s.d_exchangerate_key,
        ou_id = s.ou_id,
        exchrate_type = s.exchrate_type,
        from_currency = s.from_currency,
        to_currency = s.to_currency,
        inverse_typeno = s.inverse_typeno,
        start_date = s.start_date,
        timestamp = s.timestamp,
        end_date = s.end_date,
        exchange_rate = s.exchange_rate,
        tolerance_flag = s.tolerance_flag,
        tolerance_limit = s.tolerance_limit,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_exchangerate s
    WHERE t.ou_id = s.ou_id
    AND t.exchrate_type = s.exchrate_type
    AND t.from_currency = s.from_currency
    AND t.to_currency = s.to_currency
    AND t.inverse_typeno = s.inverse_typeno
    AND t.start_date = s.start_date;

    INSERT INTO click.d_exchangerate(d_exchangerate_key, ou_id, exchrate_type, from_currency, to_currency, inverse_typeno, start_date, timestamp, end_date, exchange_rate, tolerance_flag, tolerance_limit, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.d_exchangerate_key, s.ou_id, s.exchrate_type, s.from_currency, s.to_currency, s.inverse_typeno, s.start_date, s.timestamp, s.end_date, s.exchange_rate, s.tolerance_flag, s.tolerance_limit, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_exchangerate s
    LEFT JOIN click.d_exchangerate t
    ON t.ou_id = s.ou_id
    AND t.exchrate_type = s.exchrate_type
    AND t.from_currency = s.from_currency
    AND t.to_currency = s.to_currency
    AND t.inverse_typeno = s.inverse_typeno
    AND t.start_date = s.start_date
    WHERE t.ou_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_exchangerate() OWNER TO proconnect;

--
-- Name: usp_d_financebook(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_financebook()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_financebook t
    SET
        fb_key = s.fb_key,
        fb_id = s.fb_id,
        company_code = s.company_code,
        serial_no = s.serial_no,
        fb_type = s.fb_type,
        ftimestamp = s.ftimestamp,
        fb_desc = s.fb_desc,
        effective_from = s.effective_from,
        status = s.status,
        resou_id = s.resou_id,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_financebook s
    WHERE t.fb_id = s.fb_id
    AND t.company_code = s.company_code
    AND t.serial_no = s.serial_no
    AND t.fb_type = s.fb_type;

    INSERT INTO click.d_financebook(fb_key, fb_id, company_code, serial_no, fb_type, ftimestamp, fb_desc, effective_from, status, resou_id, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.fb_key, s.fb_id, s.company_code, s.serial_no, s.fb_type, s.ftimestamp, s.fb_desc, s.effective_from, s.status, s.resou_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_financebook s
    LEFT JOIN click.d_financebook t
    ON t.fb_id = s.fb_id
    AND t.company_code = s.company_code
    AND t.serial_no = s.serial_no
    AND t.fb_type = s.fb_type
    WHERE t.fb_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_financebook() OWNER TO proconnect;

--
-- Name: usp_d_gateemployeemapping(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_gateemployeemapping()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_gateemployeemapping t
    SET
        gate_emp_map_key = s.gate_emp_map_key,
        gate_loc_code = s.gate_loc_code,
        gate_ou = s.gate_ou,
        gate_lineno = s.gate_lineno,
        gate_shift_code = s.gate_shift_code,
        gate_emp_code = s.gate_emp_code,
        gate_area = s.gate_area,
        gate_timestamp = s.gate_timestamp,
        gate_created_by = s.gate_created_by,
        gate_created_date = s.gate_created_date,
        gate_modified_by = s.gate_modified_by,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_gateemployeemapping s
    WHERE t.gate_loc_code = s.gate_loc_code
    AND t.gate_ou = s.gate_ou
    AND t.gate_lineno = s.gate_lineno;

    INSERT INTO click.d_gateemployeemapping(gate_emp_map_key, gate_loc_code, gate_ou, gate_lineno, gate_shift_code, gate_emp_code, gate_area, gate_timestamp, gate_created_by, gate_created_date, gate_modified_by, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.gate_emp_map_key, s.gate_loc_code, s.gate_ou, s.gate_lineno, s.gate_shift_code, s.gate_emp_code, s.gate_area, s.gate_timestamp, s.gate_created_by, s.gate_created_date, s.gate_modified_by, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_gateemployeemapping s
    LEFT JOIN click.d_gateemployeemapping t
    ON t.gate_loc_code = s.gate_loc_code
    AND t.gate_ou = s.gate_ou
    AND t.gate_lineno = s.gate_lineno
    WHERE t.gate_loc_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_gateemployeemapping() OWNER TO proconnect;

--
-- Name: usp_d_geocitydetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_geocitydetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_geocitydetail t
    SET
        geo_city_key = s.geo_city_key,
        geo_country_code = s.geo_country_code,
        geo_state_code = s.geo_state_code,
        geo_city_code = s.geo_city_code,
        geo_city_ou = s.geo_city_ou,
        geo_city_lineno = s.geo_city_lineno,
        geo_city_desc = s.geo_city_desc,
        geo_city_timezn = s.geo_city_timezn,
        geo_city_status = s.geo_city_status,
        geo_city_rsn = s.geo_city_rsn,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_geocitydetail s
    WHERE t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_city_code = s.geo_city_code
    AND t.geo_city_ou = s.geo_city_ou
    AND t.geo_city_lineno = s.geo_city_lineno;

    INSERT INTO click.d_geocitydetail(geo_city_key, geo_country_code, geo_state_code, geo_city_code, geo_city_ou, geo_city_lineno, geo_city_desc, geo_city_timezn, geo_city_status, geo_city_rsn, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_city_key, s.geo_country_code, s.geo_state_code, s.geo_city_code, s.geo_city_ou, s.geo_city_lineno, s.geo_city_desc, s.geo_city_timezn, s.geo_city_status, s.geo_city_rsn, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_geocitydetail s
    LEFT JOIN click.d_geocitydetail t
    ON t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_city_code = s.geo_city_code
    AND t.geo_city_ou = s.geo_city_ou
    AND t.geo_city_lineno = s.geo_city_lineno
    WHERE t.geo_country_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_geocitydetail() OWNER TO proconnect;

--
-- Name: usp_d_geocountrydetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_geocountrydetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_geocountrydetail t
    SET
        geo_country_key = s.geo_country_key,
        geo_country_code = s.geo_country_code,
        geo_country_ou = s.geo_country_ou,
        geo_country_lineno = s.geo_country_lineno,
        geo_country_desc = s.geo_country_desc,
        geo_country_timezn = s.geo_country_timezn,
        geo_country_status = s.geo_country_status,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_geocountrydetail s
    WHERE t.geo_country_code = s.geo_country_code
    AND t.geo_country_ou = s.geo_country_ou
    AND t.geo_country_lineno = s.geo_country_lineno;

    INSERT INTO click.d_geocountrydetail(geo_country_key, geo_country_code, geo_country_ou, geo_country_lineno, geo_country_desc, geo_country_timezn, geo_country_status, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_country_key, s.geo_country_code, s.geo_country_ou, s.geo_country_lineno, s.geo_country_desc, s.geo_country_timezn, s.geo_country_status, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_geocountrydetail s
    LEFT JOIN click.d_geocountrydetail t
    ON t.geo_country_code = s.geo_country_code
    AND t.geo_country_ou = s.geo_country_ou
    AND t.geo_country_lineno = s.geo_country_lineno
    WHERE t.geo_country_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_geocountrydetail() OWNER TO proconnect;

--
-- Name: usp_d_geopostaldetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_geopostaldetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_geopostaldetail t
    SET
        geo_postal_key = s.geo_postal_key,
        geo_country_code = s.geo_country_code,
        geo_state_code = s.geo_state_code,
        geo_city_code = s.geo_city_code,
        geo_postal_code = s.geo_postal_code,
        geo_postal_ou = s.geo_postal_ou,
        geo_postal_lineno = s.geo_postal_lineno,
        geo_postal_desc = s.geo_postal_desc,
        geo_postal_status = s.geo_postal_status,
        geo_postal_rsn = s.geo_postal_rsn,
        geo_postal_lantitude = s.geo_postal_lantitude,
        geo_postal_longitude = s.geo_postal_longitude,
        geo_postal_geo_fen_name = s.geo_postal_geo_fen_name,
        geo_postal_geo_fen_range = s.geo_postal_geo_fen_range,
        geo_postal_range_uom = s.geo_postal_range_uom,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_geopostaldetail s
    WHERE t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_city_code = s.geo_city_code
    AND t.geo_postal_code = s.geo_postal_code
    AND t.geo_postal_ou = s.geo_postal_ou
    AND t.geo_postal_lineno = s.geo_postal_lineno;

    INSERT INTO click.d_geopostaldetail(geo_postal_key, geo_country_code, geo_state_code, geo_city_code, geo_postal_code, geo_postal_ou, geo_postal_lineno, geo_postal_desc, geo_postal_status, geo_postal_rsn, geo_postal_lantitude, geo_postal_longitude, geo_postal_geo_fen_name, geo_postal_geo_fen_range, geo_postal_range_uom, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_postal_key, s.geo_country_code, s.geo_state_code, s.geo_city_code, s.geo_postal_code, s.geo_postal_ou, s.geo_postal_lineno, s.geo_postal_desc, s.geo_postal_status, s.geo_postal_rsn, s.geo_postal_lantitude, s.geo_postal_longitude, s.geo_postal_geo_fen_name, s.geo_postal_geo_fen_range, s.geo_postal_range_uom, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_geopostaldetail s
    LEFT JOIN click.d_geopostaldetail t
    ON t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_city_code = s.geo_city_code
    AND t.geo_postal_code = s.geo_postal_code
    AND t.geo_postal_ou = s.geo_postal_ou
    AND t.geo_postal_lineno = s.geo_postal_lineno
    WHERE t.geo_country_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_geopostaldetail() OWNER TO proconnect;

--
-- Name: usp_d_georegion(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_georegion()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_georegion t
    SET
        geo_reg_key = s.geo_reg_key,
        geo_reg = s.geo_reg,
        geo_reg_ou = s.geo_reg_ou,
        geo_reg_desc = s.geo_reg_desc,
        geo_reg_stat = s.geo_reg_stat,
        geo_reg_rsn = s.geo_reg_rsn,
        geo_reg_created_by = s.geo_reg_created_by,
        geo_reg_created_date = s.geo_reg_created_date,
        geo_reg_modified_by = s.geo_reg_modified_by,
        geo_reg_modified_date = s.geo_reg_modified_date,
        geo_reg_timestamp = s.geo_reg_timestamp,
        geo_reg_userdefined1 = s.geo_reg_userdefined1,
        geo_reg_userdefined2 = s.geo_reg_userdefined2,
        geo_reg_userdefined3 = s.geo_reg_userdefined3,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_georegion s
    WHERE t.geo_reg = s.geo_reg
    AND t.geo_reg_ou = s.geo_reg_ou;

    INSERT INTO click.d_georegion(geo_reg_key, geo_reg, geo_reg_ou, geo_reg_desc, geo_reg_stat, geo_reg_rsn, geo_reg_created_by, geo_reg_created_date, geo_reg_modified_by, geo_reg_modified_date, geo_reg_timestamp, geo_reg_userdefined1, geo_reg_userdefined2, geo_reg_userdefined3, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_reg_key, s.geo_reg, s.geo_reg_ou, s.geo_reg_desc, s.geo_reg_stat, s.geo_reg_rsn, s.geo_reg_created_by, s.geo_reg_created_date, s.geo_reg_modified_by, s.geo_reg_modified_date, s.geo_reg_timestamp, s.geo_reg_userdefined1, s.geo_reg_userdefined2, s.geo_reg_userdefined3, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_georegion s
    LEFT JOIN click.d_georegion t
    ON t.geo_reg = s.geo_reg
    AND t.geo_reg_ou = s.geo_reg_ou
    WHERE t.geo_reg IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_georegion() OWNER TO proconnect;

--
-- Name: usp_d_geostatedetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_geostatedetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_geostatedetail t
    SET
        geo_state_key = s.geo_state_key,
        geo_country_code = s.geo_country_code,
        geo_state_code = s.geo_state_code,
        geo_state_ou = s.geo_state_ou,
        geo_state_lineno = s.geo_state_lineno,
        geo_state_desc = s.geo_state_desc,
        geo_state_timezn = s.geo_state_timezn,
        geo_state_status = s.geo_state_status,
        geo_state_rsn = s.geo_state_rsn,
        ge_holidays = s.ge_holidays,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_geostatedetail s
    WHERE t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_state_ou = s.geo_state_ou
    AND t.geo_state_lineno = s.geo_state_lineno;

    INSERT INTO click.d_geostatedetail(geo_state_key, geo_country_code, geo_state_code, geo_state_ou, geo_state_lineno, geo_state_desc, geo_state_timezn, geo_state_status, geo_state_rsn, ge_holidays, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_state_key, s.geo_country_code, s.geo_state_code, s.geo_state_ou, s.geo_state_lineno, s.geo_state_desc, s.geo_state_timezn, s.geo_state_status, s.geo_state_rsn, s.ge_holidays, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_geostatedetail s
    LEFT JOIN click.d_geostatedetail t
    ON t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_state_ou = s.geo_state_ou
    AND t.geo_state_lineno = s.geo_state_lineno
    WHERE t.geo_country_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_geostatedetail() OWNER TO proconnect;

--
-- Name: usp_d_geosuburbdetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_geosuburbdetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_geosuburbdetail t
    SET
        geo_state_key = s.geo_state_key,
        geo_country_code = s.geo_country_code,
        geo_state_code = s.geo_state_code,
        geo_city_code = s.geo_city_code,
        geo_postal_code = s.geo_postal_code,
        geo_suburb_code = s.geo_suburb_code,
        geo_suburb_ou = s.geo_suburb_ou,
        geo_suburb_lineno = s.geo_suburb_lineno,
        geo_suburb_desc = s.geo_suburb_desc,
        geo_suburb_status = s.geo_suburb_status,
        geo_suburb_rsn = s.geo_suburb_rsn,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_geosuburbdetail s
    WHERE t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_city_code = s.geo_city_code
    AND t.geo_postal_code = s.geo_postal_code
    AND t.geo_suburb_code = s.geo_suburb_code
    AND t.geo_suburb_ou = s.geo_suburb_ou
    AND t.geo_suburb_lineno = s.geo_suburb_lineno;

    INSERT INTO click.d_geosuburbdetail(geo_state_key, geo_country_code, geo_state_code, geo_city_code, geo_postal_code, geo_suburb_code, geo_suburb_ou, geo_suburb_lineno, geo_suburb_desc, geo_suburb_status, geo_suburb_rsn, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_state_key, s.geo_country_code, s.geo_state_code, s.geo_city_code, s.geo_postal_code, s.geo_suburb_code, s.geo_suburb_ou, s.geo_suburb_lineno, s.geo_suburb_desc, s.geo_suburb_status, s.geo_suburb_rsn, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_geosuburbdetail s
    LEFT JOIN click.d_geosuburbdetail t
    ON t.geo_country_code = s.geo_country_code
    AND t.geo_state_code = s.geo_state_code
    AND t.geo_city_code = s.geo_city_code
    AND t.geo_postal_code = s.geo_postal_code
    AND t.geo_suburb_code = s.geo_suburb_code
    AND t.geo_suburb_ou = s.geo_suburb_ou
    AND t.geo_suburb_lineno = s.geo_suburb_lineno
    WHERE t.geo_country_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_geosuburbdetail() OWNER TO proconnect;

--
-- Name: usp_d_geosubzone(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_geosubzone()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_geosubzone t
    SET
        geo_sub_zone_key = s.geo_sub_zone_key,
        geo_sub_zone = s.geo_sub_zone,
        geo_sub_zone_ou = s.geo_sub_zone_ou,
        geo_sub_zone_desc = s.geo_sub_zone_desc,
        geo_sub_zone_stat = s.geo_sub_zone_stat,
        geo_sub_zone_created_by = s.geo_sub_zone_created_by,
        geo_sub_zone_created_date = s.geo_sub_zone_created_date,
        geo_sub_zone_modified_by = s.geo_sub_zone_modified_by,
        geo_sub_zone_modified_date = s.geo_sub_zone_modified_date,
        geo_sub_zone_timestamp = s.geo_sub_zone_timestamp,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_geosubzone s
    WHERE t.geo_sub_zone = s.geo_sub_zone
    AND t.geo_sub_zone_ou = s.geo_sub_zone_ou;

    INSERT INTO click.d_geosubzone(geo_sub_zone_key, geo_sub_zone, geo_sub_zone_ou, geo_sub_zone_desc, geo_sub_zone_stat, geo_sub_zone_created_by, geo_sub_zone_created_date, geo_sub_zone_modified_by, geo_sub_zone_modified_date, geo_sub_zone_timestamp, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_sub_zone_key, s.geo_sub_zone, s.geo_sub_zone_ou, s.geo_sub_zone_desc, s.geo_sub_zone_stat, s.geo_sub_zone_created_by, s.geo_sub_zone_created_date, s.geo_sub_zone_modified_by, s.geo_sub_zone_modified_date, s.geo_sub_zone_timestamp, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_geosubzone s
    LEFT JOIN click.d_geosubzone t
    ON t.geo_sub_zone = s.geo_sub_zone
    AND t.geo_sub_zone_ou = s.geo_sub_zone_ou
    WHERE t.geo_sub_zone IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_geosubzone() OWNER TO proconnect;

--
-- Name: usp_d_geozone(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_geozone()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_geozone t
    SET
        geo_zone_key = s.geo_zone_key,
        geo_zone = s.geo_zone,
        geo_zone_ou = s.geo_zone_ou,
        geo_zone_desc = s.geo_zone_desc,
        geo_zone_stat = s.geo_zone_stat,
        geo_zone_rsn = s.geo_zone_rsn,
        geo_zone_created_by = s.geo_zone_created_by,
        geo_zone_created_date = s.geo_zone_created_date,
        geo_zone_modified_by = s.geo_zone_modified_by,
        geo_zone_modified_date = s.geo_zone_modified_date,
        geo_zone_timestamp = s.geo_zone_timestamp,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_geozone s
    WHERE t.geo_zone = s.geo_zone
    AND t.geo_zone_ou = s.geo_zone_ou;

    INSERT INTO click.d_geozone(geo_zone_key, geo_zone, geo_zone_ou, geo_zone_desc, geo_zone_stat, geo_zone_rsn, geo_zone_created_by, geo_zone_created_date, geo_zone_modified_by, geo_zone_modified_date, geo_zone_timestamp, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_zone_key, s.geo_zone, s.geo_zone_ou, s.geo_zone_desc, s.geo_zone_stat, s.geo_zone_rsn, s.geo_zone_created_by, s.geo_zone_created_date, s.geo_zone_modified_by, s.geo_zone_modified_date, s.geo_zone_timestamp, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_geozone s
    LEFT JOIN click.d_geozone t
    ON t.geo_zone = s.geo_zone
    AND t.geo_zone_ou = s.geo_zone_ou
    WHERE t.geo_zone IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_geozone() OWNER TO proconnect;

--
-- Name: usp_d_hhtmaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_hhtmaster()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
    p_errordesc character varying;

BEGIN
   

    TRUNCATE ONLY click.d_hhtmaster restart identity ;

    INSERT INTO click.d_hhtmaster
    (
       hht_loc_key, id,   locationcode,    locationdesc,    brand, Count,    oldcount040220,   oldcount300920,
            oldcount030321,         etlactiveind,                   etljobname, 
        envsourcecd,                datasourcecd,                   etlcreatedatetime
    )

    SELECT
        s.hht_loc_key,  s.id,   s.locationcode,    s.locationdesc,    s.brand, s.Count,    s.oldcount040220,   s.oldcount300920,s.oldcount030321,               
        '1',                s.etljobname,       s.envsourcecd,  s.datasourcecd, NOW()::Timestamp
    FROM dwh.d_hht_master s;

 
        
    EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
END;
$$;


ALTER PROCEDURE click.usp_d_hhtmaster() OWNER TO proconnect;

--
-- Name: usp_d_itemgrouptype(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_itemgrouptype()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_itemgrouptype t
    SET
        item_igt_key = s.item_igt_key,
        item_igt_grouptype = s.item_igt_grouptype,
        item_igt_lo = s.item_igt_lo,
        item_igt_category = s.item_igt_category,
        item_igt_grouptypedesc = s.item_igt_grouptypedesc,
        item_igt_usage = s.item_igt_usage,
        item_igt_created_by = s.item_igt_created_by,
        item_igt_created_date = s.item_igt_created_date,
        item_igt_modified_by = s.item_igt_modified_by,
        item_igt_modified_date = s.item_igt_modified_date,
        item_igt_timestamp = s.item_igt_timestamp,
        item_igt_created_langid = s.item_igt_created_langid,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_itemgrouptype s
    WHERE t.item_igt_grouptype = s.item_igt_grouptype
    AND t.item_igt_lo = s.item_igt_lo;

    INSERT INTO click.d_itemgrouptype(item_igt_key, item_igt_grouptype, item_igt_lo, item_igt_category, item_igt_grouptypedesc, item_igt_usage, item_igt_created_by, item_igt_created_date, item_igt_modified_by, item_igt_modified_date, item_igt_timestamp, item_igt_created_langid, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.item_igt_key, s.item_igt_grouptype, s.item_igt_lo, s.item_igt_category, s.item_igt_grouptypedesc, s.item_igt_usage, s.item_igt_created_by, s.item_igt_created_date, s.item_igt_modified_by, s.item_igt_modified_date, s.item_igt_timestamp, s.item_igt_created_langid, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_itemgrouptype s
    LEFT JOIN click.d_itemgrouptype t
    ON t.item_igt_grouptype = s.item_igt_grouptype
    AND t.item_igt_lo = s.item_igt_lo
    WHERE t.item_igt_grouptype IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_itemgrouptype() OWNER TO proconnect;

--
-- Name: usp_d_itemheader(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_itemheader()
    LANGUAGE plpgsql
    AS $$
Declare p_etllastrundate date;
BEGIN



	SELECT max(COALESCE(etlupdatedatetime,etlcreatedatetime)):: DATE as p_etllastrundate
	INTO p_etllastrundate
	FROM click.d_itemheader;
	
    UPDATE click.d_itemheader t
    SET
        itm_hdr_key = s.itm_hdr_key,
        itm_ou = s.itm_ou,
        itm_code = s.itm_code,
        itm_short_desc = s.itm_short_desc,
        itm_long_desc = s.itm_long_desc,
        itm_mas_unit = s.itm_mas_unit,
        itm_customer = s.itm_customer,
        itm_class = s.itm_class,
        itm_status = s.itm_status,
        itm_ref_no = s.itm_ref_no,
        itm_subs_item1 = s.itm_subs_item1,
        itm_hs_code = s.itm_hs_code,
        itm_price = s.itm_price,
        itm_currency = s.itm_currency,
        itm_tracking = s.itm_tracking,
        itm_lot_numbering = s.itm_lot_numbering,
        itm_serial_numbering = s.itm_serial_numbering,
        itm_remarks = s.itm_remarks,
        itm_instructions = s.itm_instructions,
        itm_hazardous = s.itm_hazardous,
        itm_length = s.itm_length,
        itm_breadth = s.itm_breadth,
        itm_height = s.itm_height,
        itm_uom = s.itm_uom,
        itm_volume = s.itm_volume,
        itm_volume_uom = s.itm_volume_uom,
        itm_weight = s.itm_weight,
        itm_weight_uom = s.itm_weight_uom,
        itm_storage_from_temp = s.itm_storage_from_temp,
        itm_storage_to_temp = s.itm_storage_to_temp,
        itm_storage_temp_uom = s.itm_storage_temp_uom,
        itm_shelf_life = s.itm_shelf_life,
        itm_shelf_life_uom = s.itm_shelf_life_uom,
        itm_timestamp = s.itm_timestamp,
        itm_created_by = s.itm_created_by,
        itm_created_dt = s.itm_created_dt,
        itm_modified_by = s.itm_modified_by,
        itm_modified_dt = s.itm_modified_dt,
        itm_reason_code = s.itm_reason_code,
        itm_type = s.itm_type,
        itm_user_defined1 = s.itm_user_defined1,
        itm_user_defined2 = s.itm_user_defined2,
        itm_itemgroup = s.itm_itemgroup,
        itm_criticaldays = s.itm_criticaldays,
        itm_criticaldays_uom = s.itm_criticaldays_uom,
        itm_movement_type = s.itm_movement_type,
        itm_volume_factor = s.itm_volume_factor,
        itm_volume_weight = s.itm_volume_weight,
        itm_item_url = s.itm_item_url,
        itm_compilance = s.itm_compilance,
        itm_new_item = s.itm_new_item,
        itm_customer_serial_no = s.itm_customer_serial_no,
        itm_warranty_serial_no = s.itm_warranty_serial_no,
        itm_gift_card_serial_no = s.itm_gift_card_serial_no,
        itm_oe_serial_no = s.itm_oe_serial_no,
        itm_oub_customer_serial_no = s.itm_oub_customer_serial_no,
        itm_oub_warranty_serial_no = s.itm_oub_warranty_serial_no,
        itm_oub_gift_card_serial_no = s.itm_oub_gift_card_serial_no,
        itm_oub_oe_serial_no = s.itm_oub_oe_serial_no,
        itm_inbound = s.itm_inbound,
        itm_outbound = s.itm_outbound,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = s.etlupdatedatetime
    FROM dwh.d_itemheader s
    WHERE t.itm_ou = s.itm_ou
    AND t.itm_code = s.itm_code
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE >= p_etllastrundate;

    INSERT INTO click.d_itemheader(itm_hdr_key, itm_ou, itm_code, itm_short_desc, itm_long_desc, itm_mas_unit, itm_customer, itm_class, itm_status, itm_ref_no, itm_subs_item1, itm_hs_code, itm_price, itm_currency, itm_tracking, itm_lot_numbering, itm_serial_numbering, itm_remarks, itm_instructions, itm_hazardous, itm_length, itm_breadth, itm_height, itm_uom, itm_volume, itm_volume_uom, itm_weight, itm_weight_uom, itm_storage_from_temp, itm_storage_to_temp, itm_storage_temp_uom, itm_shelf_life, itm_shelf_life_uom, itm_timestamp, itm_created_by, itm_created_dt, itm_modified_by, itm_modified_dt, itm_reason_code, itm_type, itm_user_defined1, itm_user_defined2, itm_itemgroup, itm_criticaldays, itm_criticaldays_uom, itm_movement_type, itm_volume_factor, itm_volume_weight, itm_item_url, itm_compilance, itm_new_item, itm_customer_serial_no, itm_warranty_serial_no, itm_gift_card_serial_no, itm_oe_serial_no, itm_oub_customer_serial_no, itm_oub_warranty_serial_no, itm_oub_gift_card_serial_no, itm_oub_oe_serial_no, itm_inbound, itm_outbound, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.itm_hdr_key, s.itm_ou, s.itm_code, s.itm_short_desc, s.itm_long_desc, s.itm_mas_unit, s.itm_customer, s.itm_class, s.itm_status, s.itm_ref_no, s.itm_subs_item1, s.itm_hs_code, s.itm_price, s.itm_currency, s.itm_tracking, s.itm_lot_numbering, s.itm_serial_numbering, s.itm_remarks, s.itm_instructions, s.itm_hazardous, s.itm_length, s.itm_breadth, s.itm_height, s.itm_uom, s.itm_volume, s.itm_volume_uom, s.itm_weight, s.itm_weight_uom, s.itm_storage_from_temp, s.itm_storage_to_temp, s.itm_storage_temp_uom, s.itm_shelf_life, s.itm_shelf_life_uom, s.itm_timestamp, s.itm_created_by, s.itm_created_dt, s.itm_modified_by, s.itm_modified_dt, s.itm_reason_code, s.itm_type, s.itm_user_defined1, s.itm_user_defined2, s.itm_itemgroup, s.itm_criticaldays, s.itm_criticaldays_uom, s.itm_movement_type, s.itm_volume_factor, s.itm_volume_weight, s.itm_item_url, s.itm_compilance, s.itm_new_item, s.itm_customer_serial_no, s.itm_warranty_serial_no, s.itm_gift_card_serial_no, s.itm_oe_serial_no, s.itm_oub_customer_serial_no, s.itm_oub_warranty_serial_no, s.itm_oub_gift_card_serial_no, s.itm_oub_oe_serial_no, s.itm_inbound, s.itm_outbound, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, s.etlcreatedatetime
    FROM dwh.d_itemheader s
    LEFT JOIN click.d_itemheader t
    ON t.itm_ou = s.itm_ou
    AND t.itm_code = s.itm_code
    WHERE t.itm_ou IS NULL
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE >= p_etllastrundate;
END;
$$;


ALTER PROCEDURE click.usp_d_itemheader() OWNER TO proconnect;

--
-- Name: usp_d_itemsuppliermap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_itemsuppliermap()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_itemsuppliermap t
    SET
        itm_supp_key = s.itm_supp_key,
        itm_ou = s.itm_ou,
        itm_code = s.itm_code,
        itm_lineno = s.itm_lineno,
        itm_supp_code = s.itm_supp_code,
        item_source = s.item_source,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_itemsuppliermap s
    WHERE t.itm_ou = s.itm_ou
    AND t.itm_code = s.itm_code
    AND t.itm_lineno = s.itm_lineno;

    INSERT INTO click.d_itemsuppliermap(itm_supp_key, itm_ou, itm_code, itm_lineno, itm_supp_code, item_source, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.itm_supp_key, s.itm_ou, s.itm_code, s.itm_lineno, s.itm_supp_code, s.item_source, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_itemsuppliermap s
    LEFT JOIN click.d_itemsuppliermap t
    ON t.itm_ou = s.itm_ou
    AND t.itm_code = s.itm_code
    AND t.itm_lineno = s.itm_lineno
    WHERE t.itm_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_itemsuppliermap() OWNER TO proconnect;

--
-- Name: usp_d_location(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_location()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_location t
    SET
        loc_key = s.loc_key,
        loc_ou = s.loc_ou,
        loc_code = s.loc_code,
        loc_desc = s.loc_desc,
        loc_status = s.loc_status,
        loc_type = s.loc_type,
        reason_code = s.reason_code,
        finance_book = s.finance_book,
        costcenter = s.costcenter,
        address1 = s.address1,
        address2 = s.address2,
        country = s.country,
        state = s.state,
        city = s.city,
        zip_code = s.zip_code,
        contperson = s.contperson,
        contact_no = s.contact_no,
        time_zone_id = s.time_zone_id,
        loc_lat = s.loc_lat,
        loc_long = s.loc_long,
        ltimestamp = s.ltimestamp,
        created_by = s.created_by,
        created_dt = s.created_dt,
        modified_by = s.modified_by,
        modified_dt = s.modified_dt,
        def_plan_mode = s.def_plan_mode,
        loc_shp_point = s.loc_shp_point,
        loc_cubing = s.loc_cubing,
        blanket_count_sa = s.blanket_count_sa,
        enable_uid_prof = s.enable_uid_prof,
        loc_linked_hub = s.loc_linked_hub,
        loc_enable_bin_chkbit = s.loc_enable_bin_chkbit,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_location s
    WHERE t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code;

    INSERT INTO click.d_location(loc_key, loc_ou, loc_code, loc_desc, loc_status, loc_type, reason_code, finance_book, costcenter, address1, address2, country, state, city, zip_code, contperson, contact_no, time_zone_id, loc_lat, loc_long, ltimestamp, created_by, created_dt, modified_by, modified_dt, def_plan_mode, loc_shp_point, loc_cubing, blanket_count_sa, enable_uid_prof, loc_linked_hub, loc_enable_bin_chkbit, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.loc_key, s.loc_ou, s.loc_code, s.loc_desc, s.loc_status, s.loc_type, s.reason_code, s.finance_book, s.costcenter, s.address1, s.address2, s.country, s.state, s.city, s.zip_code, s.contperson, s.contact_no, s.time_zone_id, s.loc_lat, s.loc_long, s.ltimestamp, s.created_by, s.created_dt, s.modified_by, s.modified_dt, s.def_plan_mode, s.loc_shp_point, s.loc_cubing, s.blanket_count_sa, s.enable_uid_prof, s.loc_linked_hub, s.loc_enable_bin_chkbit, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_location s
    LEFT JOIN click.d_location t
    ON t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    WHERE t.loc_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_location() OWNER TO proconnect;

--
-- Name: usp_d_locationgeomap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_locationgeomap()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_locationgeomap t
    SET
        loc_geo_key = s.loc_geo_key,
        loc_ou = s.loc_ou,
        loc_code = s.loc_code,
        loc_geo_lineno = s.loc_geo_lineno,
        loc_geography = s.loc_geography,
        loc_geo_type = s.loc_geo_type,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_locationgeomap s
    WHERE t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_geo_lineno = s.loc_geo_lineno;

    INSERT INTO click.d_locationgeomap(loc_geo_key, loc_ou, loc_code, loc_geo_lineno, loc_geography, loc_geo_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.loc_geo_key, s.loc_ou, s.loc_code, s.loc_geo_lineno, s.loc_geography, s.loc_geo_type, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_locationgeomap s
    LEFT JOIN click.d_locationgeomap t
    ON t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_geo_lineno = s.loc_geo_lineno
    WHERE t.loc_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_locationgeomap() OWNER TO proconnect;

--
-- Name: usp_d_locationoperationsdetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_locationoperationsdetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_locationoperationsdetail t
    SET
        loc_opr_dtl_key = s.loc_opr_dtl_key,
        loc_opr_loc_code = s.loc_opr_loc_code,
        loc_opr_ou = s.loc_opr_ou,
        loc_opr_shift_code = s.loc_opr_shift_code,
        loc_opr_lineno = s.loc_opr_lineno,
        loc_opr_sun_day = s.loc_opr_sun_day,
        loc_opr_mon_day = s.loc_opr_mon_day,
        loc_opr_tue_day = s.loc_opr_tue_day,
        loc_opr_wed_day = s.loc_opr_wed_day,
        loc_opr_thu_day = s.loc_opr_thu_day,
        loc_opr_fri_day = s.loc_opr_fri_day,
        loc_opr_sat_day = s.loc_opr_sat_day,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_locationoperationsdetail s
    WHERE t.loc_opr_loc_code = s.loc_opr_loc_code
    AND t.loc_opr_ou = s.loc_opr_ou
    AND t.loc_opr_lineno = s.loc_opr_lineno;

    INSERT INTO click.d_locationoperationsdetail(loc_opr_dtl_key, loc_opr_loc_code, loc_opr_ou, loc_opr_shift_code, loc_opr_lineno, loc_opr_sun_day, loc_opr_mon_day, loc_opr_tue_day, loc_opr_wed_day, loc_opr_thu_day, loc_opr_fri_day, loc_opr_sat_day, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.loc_opr_dtl_key, s.loc_opr_loc_code, s.loc_opr_ou, s.loc_opr_shift_code, s.loc_opr_lineno, s.loc_opr_sun_day, s.loc_opr_mon_day, s.loc_opr_tue_day, s.loc_opr_wed_day, s.loc_opr_thu_day, s.loc_opr_fri_day, s.loc_opr_sat_day, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_locationoperationsdetail s
    LEFT JOIN click.d_locationoperationsdetail t
    ON t.loc_opr_loc_code = s.loc_opr_loc_code
    AND t.loc_opr_ou = s.loc_opr_ou
    AND t.loc_opr_lineno = s.loc_opr_lineno
    WHERE t.loc_opr_loc_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_locationoperationsdetail() OWNER TO proconnect;

--
-- Name: usp_d_locationshiftdetails(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_locationshiftdetails()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_locationshiftdetails t
    SET
        loc_shft_dtl_key = s.loc_shft_dtl_key,
        loc_ou = s.loc_ou,
        loc_code = s.loc_code,
        loc_shft_lineno = s.loc_shft_lineno,
        loc_shft_shift = s.loc_shft_shift,
        loc_shft_fr_time = s.loc_shft_fr_time,
        loc_shft_to_time = s.loc_shft_to_time,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_locationshiftdetails s
    WHERE t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_shft_lineno = s.loc_shft_lineno;

    INSERT INTO click.d_locationshiftdetails(loc_shft_dtl_key, loc_ou, loc_code, loc_shft_lineno, loc_shft_shift, loc_shft_fr_time, loc_shft_to_time, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.loc_shft_dtl_key, s.loc_ou, s.loc_code, s.loc_shft_lineno, s.loc_shft_shift, s.loc_shft_fr_time, s.loc_shft_to_time, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_locationshiftdetails s
    LEFT JOIN click.d_locationshiftdetails t
    ON t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_shft_lineno = s.loc_shft_lineno
    WHERE t.loc_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_locationshiftdetails() OWNER TO proconnect;

--
-- Name: usp_d_locationusermapping(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_locationusermapping()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_locationusermapping t
    SET
        loc_user_mapping_key = s.loc_user_mapping_key,
        loc_ou = s.loc_ou,
        loc_code = s.loc_code,
        loc_lineno = s.loc_lineno,
        loc_user_name = s.loc_user_name,
        loc_user_admin = s.loc_user_admin,
        loc_user_planner = s.loc_user_planner,
        loc_user_executor = s.loc_user_executor,
        loc_user_controller = s.loc_user_controller,
        loc_user_default = s.loc_user_default,
        loc_status = s.loc_status,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_locationusermapping s
    WHERE t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_lineno = s.loc_lineno;

    INSERT INTO click.d_locationusermapping(loc_user_mapping_key, loc_ou, loc_code, loc_lineno, loc_user_name, loc_user_admin, loc_user_planner, loc_user_executor, loc_user_controller, loc_user_default, loc_status, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.loc_user_mapping_key, s.loc_ou, s.loc_code, s.loc_lineno, s.loc_user_name, s.loc_user_admin, s.loc_user_planner, s.loc_user_executor, s.loc_user_controller, s.loc_user_default, s.loc_status, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_locationusermapping s
    LEFT JOIN click.d_locationusermapping t
    ON t.loc_ou = s.loc_ou
    AND t.loc_code = s.loc_code
    AND t.loc_lineno = s.loc_lineno
    WHERE t.loc_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_locationusermapping() OWNER TO proconnect;

--
-- Name: usp_d_locattribute(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_locattribute()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_locattribute t
    SET
        loc_attr_key = s.loc_attr_key,
        loc_attr_loc_code = s.loc_attr_loc_code,
        loc_attr_lineno = s.loc_attr_lineno,
        loc_attr_ou = s.loc_attr_ou,
        loc_attr_typ = s.loc_attr_typ,
        loc_attr_apl = s.loc_attr_apl,
        loc_attr_value = s.loc_attr_value,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_locattribute s
    WHERE t.loc_attr_loc_code = s.loc_attr_loc_code
    AND t.loc_attr_lineno = s.loc_attr_lineno
    AND t.loc_attr_ou = s.loc_attr_ou;

    INSERT INTO click.d_locattribute(loc_attr_key, loc_attr_loc_code, loc_attr_lineno, loc_attr_ou, loc_attr_typ, loc_attr_apl, loc_attr_value, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.loc_attr_key, s.loc_attr_loc_code, s.loc_attr_lineno, s.loc_attr_ou, s.loc_attr_typ, s.loc_attr_apl, s.loc_attr_value, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_locattribute s
    LEFT JOIN click.d_locattribute t
    ON t.loc_attr_loc_code = s.loc_attr_loc_code
    AND t.loc_attr_lineno = s.loc_attr_lineno
    AND t.loc_attr_ou = s.loc_attr_ou
    WHERE t.loc_attr_loc_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_locattribute() OWNER TO proconnect;

--
-- Name: usp_d_operationalaccountdetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_operationalaccountdetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_operationalaccountdetail t
    SET
        opcoa_key = s.opcoa_key,
        opcoa_id = s.opcoa_id,
        account_code = s.account_code,
        timestamp = s.timestamp,
        account_desc = s.account_desc,
        currency_code = s.currency_code,
        account_group = s.account_group,
        account_class = s.account_class,
        ctrl_acctype = s.ctrl_acctype,
        autopost_acctype = s.autopost_acctype,
        effective_from = s.effective_from,
        layout_code = s.layout_code,
        account_status = s.account_status,
        active_to = s.active_to,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        createdlangid = s.createdlangid,
        schedule_code = s.schedule_code,
        status = s.status,
        revised_schedule_code = s.revised_schedule_code,
        revised_layout_code = s.revised_layout_code,
        revised_neg_layout_code = s.revised_neg_layout_code,
        workflow_status = s.workflow_status,
        wf_flag = s.wf_flag,
        revised_asindas_layout_code = s.revised_asindas_layout_code,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_operationalaccountdetail s
    WHERE t.opcoa_id = s.opcoa_id
    AND t.account_code = s.account_code;

    INSERT INTO click.d_operationalaccountdetail(opcoa_key, opcoa_id, account_code, timestamp, account_desc, currency_code, account_group, account_class, ctrl_acctype, autopost_acctype, effective_from, layout_code, account_status, active_to, createdby, createddate, modifiedby, modifieddate, createdlangid, schedule_code, status, revised_schedule_code, revised_layout_code, revised_neg_layout_code, workflow_status, wf_flag, revised_asindas_layout_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.opcoa_key, s.opcoa_id, s.account_code, s.timestamp, s.account_desc, s.currency_code, s.account_group, s.account_class, s.ctrl_acctype, s.autopost_acctype, s.effective_from, s.layout_code, s.account_status, s.active_to, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.createdlangid, s.schedule_code, s.status, s.revised_schedule_code, s.revised_layout_code, s.revised_neg_layout_code, s.workflow_status, s.wf_flag, s.revised_asindas_layout_code, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_operationalaccountdetail s
    LEFT JOIN click.d_operationalaccountdetail t
    ON t.opcoa_id = s.opcoa_id
    AND t.account_code = s.account_code
    WHERE t.opcoa_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_operationalaccountdetail() OWNER TO proconnect;

--
-- Name: usp_d_opscomponentlookup(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_opscomponentlookup()
    LANGUAGE plpgsql
    AS $$

BEGIN
    

    INSERT INTO click.d_opscomponentlookup(comp_lkp_key, componentname, paramcategory, paramtype, paramcode, optionvalue, sequenceno, paramdesc, paramdesc_shd, langid, cml_len, cml_translate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.comp_lkp_key, s.componentname, s.paramcategory, s.paramtype, s.paramcode, s.optionvalue, s.sequenceno, s.paramdesc, s.paramdesc_shd, s.langid, s.cml_len, s.cml_translate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_opscomponentlookup s
    LEFT JOIN click.d_opscomponentlookup t
    ON 	COALESCE(s.componentname,'NULL') 	    = COALESCE(t.componentname,'NULL')
	AND COALESCE(s.paramcategory,'NULL')  		= COALESCE(t.paramcategory,'NULL')
	AND COALESCE(s.paramtype,'NULL')  			= COALESCE(t.paramtype,'NULL')
	AND COALESCE(s.paramcode,'NULL') 			= COALESCE(t.paramcode ,'NULL')
    AND COALESCE(s.optionvalue,'NULL') 			= COALESCE(t.optionvalue,'NULL')
    AND COALESCE(s.sequenceno,0) 			    = COALESCE(t.sequenceno,0)
    AND COALESCE(s.paramdesc,'NULL') 			= COALESCE(t.paramdesc,'NULL')
    AND COALESCE(s.paramdesc_shd,'NULL')  		= COALESCE(t.paramdesc_shd,'NULL')
    AND COALESCE(s.langid,0) 			        = COALESCE(t.langid,0)
    AND COALESCE(s.cml_len,0)  			        = COALESCE(t.cml_len,0)
    AND COALESCE(s.cml_translate,'NULL') 		= COALESCE(t.cml_translate,'NULL')
    WHERE t.componentname IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_opscomponentlookup() OWNER TO proconnect;

--
-- Name: usp_d_oubumap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_oubumap()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_oubumap t
    SET
        d_oubumap_key = s.d_oubumap_key,
        ou_id = s.ou_id,
        bu_id = s.bu_id,
        company_code = s.company_code,
        serial_no = s.serial_no,
        timestamp = s.timestamp,
        map_status = s.map_status,
        effective_from = s.effective_from,
        map_by = s.map_by,
        map_date = s.map_date,
        createdby = s.createdby,
        createddate = s.createddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_oubumap s
    WHERE t.ou_id = s.ou_id
    AND t.bu_id = s.bu_id
    AND t.company_code = s.company_code
    AND t.serial_no = s.serial_no;

    INSERT INTO click.d_oubumap(d_oubumap_key, ou_id, bu_id, company_code, serial_no, timestamp, map_status, effective_from, map_by, map_date, createdby, createddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.d_oubumap_key, s.ou_id, s.bu_id, s.company_code, s.serial_no, s.timestamp, s.map_status, s.effective_from, s.map_by, s.map_date, s.createdby, s.createddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_oubumap s
    LEFT JOIN click.d_oubumap t
    ON t.ou_id = s.ou_id
    AND t.bu_id = s.bu_id
    AND t.company_code = s.company_code
    AND t.serial_no = s.serial_no
    WHERE t.ou_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_oubumap() OWNER TO proconnect;

--
-- Name: usp_d_oumaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_oumaster()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_oumaster t
    SET
        ou_key = s.ou_key,
        ou_id = s.ou_id,
        bu_id = s.bu_id,
        company_code = s.company_code,
        address_id = s.address_id,
        serial_no = s.serial_no,
        otimestamp = s.otimestamp,
        default_flag = s.default_flag,
        map_status = s.map_status,
        effective_from = s.effective_from,
        createdby = s.createdby,
        createddate = s.createddate,
        modifiedby = s.modifiedby,
        modifieddate = s.modifieddate,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_oumaster s
    WHERE t.ou_id = s.ou_id
    AND t.bu_id = s.bu_id
    AND t.company_code = s.company_code
    AND t.address_id = s.address_id
    AND t.serial_no = s.serial_no;

    INSERT INTO click.d_oumaster(ou_key, ou_id, bu_id, company_code, address_id, serial_no, otimestamp, default_flag, map_status, effective_from, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.ou_key, s.ou_id, s.bu_id, s.company_code, s.address_id, s.serial_no, s.otimestamp, s.default_flag, s.map_status, s.effective_from, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_oumaster s
    LEFT JOIN click.d_oumaster t
    ON t.ou_id = s.ou_id
    AND t.bu_id = s.bu_id
    AND t.company_code = s.company_code
    AND t.address_id = s.address_id
    AND t.serial_no = s.serial_no
    WHERE t.ou_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_oumaster() OWNER TO proconnect;

--
-- Name: usp_d_route(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_route()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_route t
    SET
        rou_key = s.rou_key,
        rou_route_id = s.rou_route_id,
        rou_ou = s.rou_ou,
        rou_description = s.rou_description,
        rou_status = s.rou_status,
        rou_rsn_code = s.rou_rsn_code,
        rou_trans_mode = s.rou_trans_mode,
        rou_serv_type = s.rou_serv_type,
        rou_sub_serv_type = s.rou_sub_serv_type,
        rou_valid_frm = s.rou_valid_frm,
        rou_valid_to = s.rou_valid_to,
        rou_created_by = s.rou_created_by,
        rou_created_date = s.rou_created_date,
        rou_modified_by = s.rou_modified_by,
        rou_modified_date = s.rou_modified_date,
        rou_timestamp = s.rou_timestamp,
        rou_route_type = s.rou_route_type,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_route s
    WHERE t.rou_route_id = s.rou_route_id
    AND t.rou_ou = s.rou_ou;

    INSERT INTO click.d_route(rou_key, rou_route_id, rou_ou, rou_description, rou_status, rou_rsn_code, rou_trans_mode, rou_serv_type, rou_sub_serv_type, rou_valid_frm, rou_valid_to, rou_created_by, rou_created_date, rou_modified_by, rou_modified_date, rou_timestamp, rou_route_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.rou_key, s.rou_route_id, s.rou_ou, s.rou_description, s.rou_status, s.rou_rsn_code, s.rou_trans_mode, s.rou_serv_type, s.rou_sub_serv_type, s.rou_valid_frm, s.rou_valid_to, s.rou_created_by, s.rou_created_date, s.rou_modified_by, s.rou_modified_date, s.rou_timestamp, s.rou_route_type, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_route s
    LEFT JOIN click.d_route t
    ON t.rou_route_id = s.rou_route_id
    AND t.rou_ou = s.rou_ou
    WHERE t.rou_route_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_route() OWNER TO proconnect;

--
-- Name: usp_d_shippingpoint(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_shippingpoint()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_shippingpoint t
    SET
        shp_pt_key = s.shp_pt_key,
        shp_pt_ou = s.shp_pt_ou,
        shp_pt_id = s.shp_pt_id,
        shp_pt_desc = s.shp_pt_desc,
        shp_pt_status = s.shp_pt_status,
        shp_pt_rsn_code = s.shp_pt_rsn_code,
        shp_pt_address1 = s.shp_pt_address1,
        shp_pt_address2 = s.shp_pt_address2,
        shp_pt_zipcode = s.shp_pt_zipcode,
        shp_pt_city = s.shp_pt_city,
        shp_pt_state = s.shp_pt_state,
        shp_pt_country = s.shp_pt_country,
        shp_pt_email = s.shp_pt_email,
        shp_pt_timestamp = s.shp_pt_timestamp,
        shp_pt_created_by = s.shp_pt_created_by,
        shp_pt_created_date = s.shp_pt_created_date,
        shp_pt_modified_by = s.shp_pt_modified_by,
        shp_pt_modified_date = s.shp_pt_modified_date,
        shp_pt_address3 = s.shp_pt_address3,
        shp_pt_contact_person = s.shp_pt_contact_person,
        shp_pt_fax = s.shp_pt_fax,
        shp_pt_latitude = s.shp_pt_latitude,
        shp_pt_longitude = s.shp_pt_longitude,
        shp_pt_phone1 = s.shp_pt_phone1,
        shp_pt_phone2 = s.shp_pt_phone2,
        shp_pt_region = s.shp_pt_region,
        shp_pt_zone = s.shp_pt_zone,
        shp_pt_sub_zone = s.shp_pt_sub_zone,
        shp_pt_time_zone = s.shp_pt_time_zone,
        shp_pt_url = s.shp_pt_url,
        shp_pt_suburb_code = s.shp_pt_suburb_code,
        shp_pt_time_slot = s.shp_pt_time_slot,
        shp_pt_time_slot_uom = s.shp_pt_time_slot_uom,
        shp_pt_wh = s.shp_pt_wh,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_shippingpoint s
    WHERE t.shp_pt_ou = s.shp_pt_ou
    AND t.shp_pt_id = s.shp_pt_id;

    INSERT INTO click.d_shippingpoint(shp_pt_key, shp_pt_ou, shp_pt_id, shp_pt_desc, shp_pt_status, shp_pt_rsn_code, shp_pt_address1, shp_pt_address2, shp_pt_zipcode, shp_pt_city, shp_pt_state, shp_pt_country, shp_pt_email, shp_pt_timestamp, shp_pt_created_by, shp_pt_created_date, shp_pt_modified_by, shp_pt_modified_date, shp_pt_address3, shp_pt_contact_person, shp_pt_fax, shp_pt_latitude, shp_pt_longitude, shp_pt_phone1, shp_pt_phone2, shp_pt_region, shp_pt_zone, shp_pt_sub_zone, shp_pt_time_zone, shp_pt_url, shp_pt_suburb_code, shp_pt_time_slot, shp_pt_time_slot_uom, shp_pt_wh, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.shp_pt_key, s.shp_pt_ou, s.shp_pt_id, s.shp_pt_desc, s.shp_pt_status, s.shp_pt_rsn_code, s.shp_pt_address1, s.shp_pt_address2, s.shp_pt_zipcode, s.shp_pt_city, s.shp_pt_state, s.shp_pt_country, s.shp_pt_email, s.shp_pt_timestamp, s.shp_pt_created_by, s.shp_pt_created_date, s.shp_pt_modified_by, s.shp_pt_modified_date, s.shp_pt_address3, s.shp_pt_contact_person, s.shp_pt_fax, s.shp_pt_latitude, s.shp_pt_longitude, s.shp_pt_phone1, s.shp_pt_phone2, s.shp_pt_region, s.shp_pt_zone, s.shp_pt_sub_zone, s.shp_pt_time_zone, s.shp_pt_url, s.shp_pt_suburb_code, s.shp_pt_time_slot, s.shp_pt_time_slot_uom, s.shp_pt_wh, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_shippingpoint s
    LEFT JOIN click.d_shippingpoint t
    ON t.shp_pt_ou = s.shp_pt_ou
    AND t.shp_pt_id = s.shp_pt_id
    WHERE t.shp_pt_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_shippingpoint() OWNER TO proconnect;

--
-- Name: usp_d_shippingpointcustmap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_shippingpointcustmap()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_shippingpointcustmap t
    SET
        shp_pt_cus_key = s.shp_pt_cus_key,
        shp_pt_ou = s.shp_pt_ou,
        shp_pt_id = s.shp_pt_id,
        shp_pt_lineno = s.shp_pt_lineno,
        shp_pt_cusid = s.shp_pt_cusid,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_shippingpointcustmap s
    WHERE t.shp_pt_ou = s.shp_pt_ou
    AND t.shp_pt_id = s.shp_pt_id
    AND t.shp_pt_lineno = s.shp_pt_lineno;

    INSERT INTO click.d_shippingpointcustmap(shp_pt_cus_key, shp_pt_ou, shp_pt_id, shp_pt_lineno, shp_pt_cusid, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.shp_pt_cus_key, s.shp_pt_ou, s.shp_pt_id, s.shp_pt_lineno, s.shp_pt_cusid, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_shippingpointcustmap s
    LEFT JOIN click.d_shippingpointcustmap t
    ON t.shp_pt_ou = s.shp_pt_ou
    AND t.shp_pt_id = s.shp_pt_id
    AND t.shp_pt_lineno = s.shp_pt_lineno
    WHERE t.shp_pt_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_shippingpointcustmap() OWNER TO proconnect;

--
-- Name: usp_d_skills(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_skills()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_skills t
    SET
        skl_key = s.skl_key,
        skl_ou = s.skl_ou,
        skl_code = s.skl_code,
        skl_type = s.skl_type,
        skl_desc = s.skl_desc,
        skl_currency = s.skl_currency,
        skl_status = s.skl_status,
        skl_timestamp = s.skl_timestamp,
        skl_created_by = s.skl_created_by,
        skl_created_dt = s.skl_created_dt,
        skl_modified_by = s.skl_modified_by,
        skl_modified_dt = s.skl_modified_dt,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_skills s
    WHERE t.skl_ou = s.skl_ou
    AND t.skl_code = s.skl_code
    AND t.skl_type = s.skl_type;

    INSERT INTO click.d_skills(skl_key, skl_ou, skl_code, skl_type, skl_desc, skl_currency, skl_status, skl_timestamp, skl_created_by, skl_created_dt, skl_modified_by, skl_modified_dt, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.skl_key, s.skl_ou, s.skl_code, s.skl_type, s.skl_desc, s.skl_currency, s.skl_status, s.skl_timestamp, s.skl_created_by, s.skl_created_dt, s.skl_modified_by, s.skl_modified_dt, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_skills s
    LEFT JOIN click.d_skills t
    ON t.skl_ou = s.skl_ou
    AND t.skl_code = s.skl_code
    AND t.skl_type = s.skl_type
    WHERE t.skl_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_skills() OWNER TO proconnect;

--
-- Name: usp_d_stage(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_stage()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_stage t
    SET
        stg_mas_key = s.stg_mas_key,
        stg_mas_ou = s.stg_mas_ou,
        stg_mas_id = s.stg_mas_id,
        stg_mas_desc = s.stg_mas_desc,
        stg_mas_status = s.stg_mas_status,
        stg_mas_loc = s.stg_mas_loc,
        stg_mas_type = s.stg_mas_type,
        stg_mas_def_bin = s.stg_mas_def_bin,
        stg_mas_rsn_code = s.stg_mas_rsn_code,
        stg_mas_frm_stage = s.stg_mas_frm_stage,
        stg_mas_frm_doc_typ = s.stg_mas_frm_doc_typ,
        stg_mas_frm_doc_status = s.stg_mas_frm_doc_status,
        stg_mas_frm_doc_conf_req = s.stg_mas_frm_doc_conf_req,
        stg_mas_to_stage = s.stg_mas_to_stage,
        stg_mas_to_doc_typ = s.stg_mas_to_doc_typ,
        stg_mas_to_doc_status = s.stg_mas_to_doc_status,
        stg_mas_to_doc_conf_req = s.stg_mas_to_doc_conf_req,
        stg_mas_timestamp = s.stg_mas_timestamp,
        stg_mas_created_by = s.stg_mas_created_by,
        stg_mas_created_dt = s.stg_mas_created_dt,
        stg_mas_modified_by = s.stg_mas_modified_by,
        stg_mas_modified_dt = s.stg_mas_modified_dt,
        stg_mas_dock_status = s.stg_mas_dock_status,
        stg_mas_dock_prevstat = s.stg_mas_dock_prevstat,
        stg_mas_frm_stage_typ = s.stg_mas_frm_stage_typ,
        stg_mas_to_stage_typ = s.stg_mas_to_stage_typ,
        stg_mas_pack_bin = s.stg_mas_pack_bin,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_stage s
    WHERE t.stg_mas_ou = s.stg_mas_ou
    AND t.stg_mas_id = s.stg_mas_id
    AND t.stg_mas_loc = s.stg_mas_loc;

    INSERT INTO click.d_stage(stg_mas_key, stg_mas_ou, stg_mas_id, stg_mas_desc, stg_mas_status, stg_mas_loc, stg_mas_type, stg_mas_def_bin, stg_mas_rsn_code, stg_mas_frm_stage, stg_mas_frm_doc_typ, stg_mas_frm_doc_status, stg_mas_frm_doc_conf_req, stg_mas_to_stage, stg_mas_to_doc_typ, stg_mas_to_doc_status, stg_mas_to_doc_conf_req, stg_mas_timestamp, stg_mas_created_by, stg_mas_created_dt, stg_mas_modified_by, stg_mas_modified_dt, stg_mas_dock_status, stg_mas_dock_prevstat, stg_mas_frm_stage_typ, stg_mas_to_stage_typ, stg_mas_pack_bin, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.stg_mas_key, s.stg_mas_ou, s.stg_mas_id, s.stg_mas_desc, s.stg_mas_status, s.stg_mas_loc, s.stg_mas_type, s.stg_mas_def_bin, s.stg_mas_rsn_code, s.stg_mas_frm_stage, s.stg_mas_frm_doc_typ, s.stg_mas_frm_doc_status, s.stg_mas_frm_doc_conf_req, s.stg_mas_to_stage, s.stg_mas_to_doc_typ, s.stg_mas_to_doc_status, s.stg_mas_to_doc_conf_req, s.stg_mas_timestamp, s.stg_mas_created_by, s.stg_mas_created_dt, s.stg_mas_modified_by, s.stg_mas_modified_dt, s.stg_mas_dock_status, s.stg_mas_dock_prevstat, s.stg_mas_frm_stage_typ, s.stg_mas_to_stage_typ, s.stg_mas_pack_bin, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_stage s
    LEFT JOIN click.d_stage t
    ON t.stg_mas_ou = s.stg_mas_ou
    AND t.stg_mas_id = s.stg_mas_id
    AND t.stg_mas_loc = s.stg_mas_loc
    WHERE t.stg_mas_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_stage() OWNER TO proconnect;

--
-- Name: usp_d_tariffservice(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_tariffservice()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_tariffservice t
    SET
        tf_key = s.tf_key,
        tf_ser_id = s.tf_ser_id,
        tf_ser_ou = s.tf_ser_ou,
        tf_ser_desc = s.tf_ser_desc,
        tf_ser_status = s.tf_ser_status,
        tf_ser_valid_from = s.tf_ser_valid_from,
        tf_ser_valid_to = s.tf_ser_valid_to,
        tf_ser_service_period = s.tf_ser_service_period,
        tf_ser_uom = s.tf_ser_uom,
        tf_ser_service_level_per = s.tf_ser_service_level_per,
        tf_ser_reason_code = s.tf_ser_reason_code,
        tf_ser_timestamp = s.tf_ser_timestamp,
        tf_ser_created_by = s.tf_ser_created_by,
        tf_ser_created_dt = s.tf_ser_created_dt,
        tf_ser_modified_by = s.tf_ser_modified_by,
        tf_ser_modified_dt = s.tf_ser_modified_dt,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_tariffservice s
    WHERE t.tf_ser_id = s.tf_ser_id
    AND t.tf_ser_ou = s.tf_ser_ou;

    INSERT INTO click.d_tariffservice(tf_key, tf_ser_id, tf_ser_ou, tf_ser_desc, tf_ser_status, tf_ser_valid_from, tf_ser_valid_to, tf_ser_service_period, tf_ser_uom, tf_ser_service_level_per, tf_ser_reason_code, tf_ser_timestamp, tf_ser_created_by, tf_ser_created_dt, tf_ser_modified_by, tf_ser_modified_dt, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.tf_key, s.tf_ser_id, s.tf_ser_ou, s.tf_ser_desc, s.tf_ser_status, s.tf_ser_valid_from, s.tf_ser_valid_to, s.tf_ser_service_period, s.tf_ser_uom, s.tf_ser_service_level_per, s.tf_ser_reason_code, s.tf_ser_timestamp, s.tf_ser_created_by, s.tf_ser_created_dt, s.tf_ser_modified_by, s.tf_ser_modified_dt, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_tariffservice s
    LEFT JOIN click.d_tariffservice t
    ON t.tf_ser_id = s.tf_ser_id
    AND t.tf_ser_ou = s.tf_ser_ou
    WHERE t.tf_ser_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_tariffservice() OWNER TO proconnect;

--
-- Name: usp_d_tarifftransport(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_tarifftransport()
    LANGUAGE plpgsql
    AS $$
Declare p_etllastrundate date;
BEGIN

	SELECT max(COALESCE(etlupdatedatetime,etlcreatedatetime)):: DATE as p_etllastrundate
	INTO p_etllastrundate
	FROM click.d_tarifftransport;
	
    UPDATE click.d_tarifftransport t
    SET
        tf_tp_key = s.tf_tp_key,
        tf_tp_id = s.tf_tp_id,
        tf_tp_ou = s.tf_tp_ou,
        tf_tp_desc = s.tf_tp_desc,
        tf_tp_type_code = s.tf_tp_type_code,
        tf_tp_status = s.tf_tp_status,
        tf_tp_division = s.tf_tp_division,
        tf_tp_location = s.tf_tp_location,
        tf_tp_validity_id = s.tf_tp_validity_id,
        tf_tp_frm_ship_point = s.tf_tp_frm_ship_point,
        tf_tp_to_ship_point = s.tf_tp_to_ship_point,
        tf_tp_frm_geo_type = s.tf_tp_frm_geo_type,
        tf_tp_frm_geo = s.tf_tp_frm_geo,
        tf_tp_to_geo_type = s.tf_tp_to_geo_type,
        tf_tp_to_geo = s.tf_tp_to_geo,
        tf_tp_dist_check = s.tf_tp_dist_check,
        tf_tp_dist_min = s.tf_tp_dist_min,
        tf_tp_dist_max = s.tf_tp_dist_max,
        tf_tp_dist_uom = s.tf_tp_dist_uom,
        tf_tp_wt = s.tf_tp_wt,
        tf_tp_wt_min = s.tf_tp_wt_min,
        tf_tp_wt_max = s.tf_tp_wt_max,
        tf_tp_wt_uom = s.tf_tp_wt_uom,
        tf_tp_vol = s.tf_tp_vol,
        tf_tp_vol_min = s.tf_tp_vol_min,
        tf_tp_vol_max = s.tf_tp_vol_max,
        tf_tp_vol_uom = s.tf_tp_vol_uom,
        tf_tp_trip_time = s.tf_tp_trip_time,
        tf_tp_trip_time_min = s.tf_tp_trip_time_min,
        tf_tp_trip_time_max = s.tf_tp_trip_time_max,
        tf_tp_trip_time_uom = s.tf_tp_trip_time_uom,
        tf_tp_vol_conversion = s.tf_tp_vol_conversion,
        tf_tp_service = s.tf_tp_service,
        tf_tp_sub_service = s.tf_tp_sub_service,
        tf_tp_thu_type = s.tf_tp_thu_type,
        tf_tp_min_no_thu = s.tf_tp_min_no_thu,
        tf_tp_max_no_thu = s.tf_tp_max_no_thu,
        tf_tp_class_of_stores = s.tf_tp_class_of_stores,
        tf_tp_thu_space_frm = s.tf_tp_thu_space_frm,
        tf_tp_thu_space_to = s.tf_tp_thu_space_to,
        tf_tp_equip_type = s.tf_tp_equip_type,
        tf_tp_veh_type = s.tf_tp_veh_type,
        tf_tp_timestamp = s.tf_tp_timestamp,
        tf_tp_created_by = s.tf_tp_created_by,
        tf_tp_created_dt = s.tf_tp_created_dt,
        tf_tp_modified_by = s.tf_tp_modified_by,
        tf_tp_modified_dt = s.tf_tp_modified_dt,
        tf_tp_multilvl_approval = s.tf_tp_multilvl_approval,
        tf_tp_min_weight = s.tf_tp_min_weight,
        tf_tp_min_volume = s.tf_tp_min_volume,
        tf_tp_previous_status = s.tf_tp_previous_status,
        tf_tp_factor = s.tf_tp_factor,
        tf_tp_leg_behavior = s.tf_tp_leg_behavior,
        tf_tp_service_id = s.tf_tp_service_id,
        non_billable_chk = s.non_billable_chk,
        tf_tp_numeric_round_off = s.tf_tp_numeric_round_off,
        tf_tp_thu_volume_min_lim = s.tf_tp_thu_volume_min_lim,
        tf_tp_thu_weight_min_lim = s.tf_tp_thu_weight_min_lim,
        tf_tp_category = s.tf_tp_category,
        tf_tp_load_type = s.tf_tp_load_type,
        tf_tp_freight_charges = s.tf_tp_freight_charges,
        tf_tp_inco_terms = s.tf_tp_inco_terms,
        tf_tp_rate_class = s.tf_tp_rate_class,
        tf_tp_govt_status = s.tf_tp_govt_status,
        tf_tp_uniq_note = s.tf_tp_uniq_note,
        tf_tp_type_of_entry = s.tf_tp_type_of_entry,
        tf_tp_uld_rating_type = s.tf_tp_uld_rating_type,
        tf_tp_uld_charge_code = s.tf_tp_uld_charge_code,
        tf_tp_dis_doc_type = s.tf_tp_dis_doc_type,
        tf_tp_resource_type = s.tf_tp_resource_type,
        tf_tp_no_of_thu_uom = s.tf_tp_no_of_thu_uom,
        tf_tp_space_uom = s.tf_tp_space_uom,
        tf_tp_cod_cop = s.tf_tp_cod_cop,
        tf_tp_cod_cop_min = s.tf_tp_cod_cop_min,
        tf_tp_cod_cop_max = s.tf_tp_cod_cop_max,
        tf_tp_cod_cop_min_lim = s.tf_tp_cod_cop_min_lim,
        tf_tp_cod_cop_uom = s.tf_tp_cod_cop_uom,
        tf_tp_declrd_value = s.tf_tp_declrd_value,
        tf_tp_declrd_value_min = s.tf_tp_declrd_value_min,
        tf_tp_declrd_value_max = s.tf_tp_declrd_value_max,
        tf_tp_declrd_value_min_lim = s.tf_tp_declrd_value_min_lim,
        tf_tp_declrd_value_uom = s.tf_tp_declrd_value_uom,
        tf_tp_dutiable_value = s.tf_tp_dutiable_value,
        tf_tp_dutiable_value_min = s.tf_tp_dutiable_value_min,
        tf_tp_dutiable_value_max = s.tf_tp_dutiable_value_max,
        tf_tp_dutiable_value_min_lim = s.tf_tp_dutiable_value_min_lim,
        tf_tp_dutiable_value_uom = s.tf_tp_dutiable_value_uom,
        tf_tp_thu_length = s.tf_tp_thu_length,
        tf_tp_thu_length_min = s.tf_tp_thu_length_min,
        tf_tp_thu_length_max = s.tf_tp_thu_length_max,
        tf_tp_thu_length_min_lim = s.tf_tp_thu_length_min_lim,
        tf_tp_thu_length_uom = s.tf_tp_thu_length_uom,
        tf_tp_thu_width = s.tf_tp_thu_width,
        tf_tp_thu_width_min = s.tf_tp_thu_width_min,
        tf_tp_thu_width_max = s.tf_tp_thu_width_max,
        tf_tp_thu_width_min_lim = s.tf_tp_thu_width_min_lim,
        tf_tp_thu_width_uom = s.tf_tp_thu_width_uom,
        tf_tp_thu_height = s.tf_tp_thu_height,
        tf_tp_thu_height_min = s.tf_tp_thu_height_min,
        tf_tp_thu_height_max = s.tf_tp_thu_height_max,
        tf_tp_thu_height_min_lim = s.tf_tp_thu_height_min_lim,
        tf_tp_thu_height_uom = s.tf_tp_thu_height_uom,
        tf_tp_thu_distance_min_lim = s.tf_tp_thu_distance_min_lim,
        tf_tp_thu_trip_time_min_lim = s.tf_tp_thu_trip_time_min_lim,
        tf_tp_cost_type = s.tf_tp_cost_type,
        tf_tp_area = s.tf_tp_area,
        tf_tp_origin_via_point = s.tf_tp_origin_via_point,
        tf_tp_dest_via_point = s.tf_tp_dest_via_point,
        tf_tp_data_source = s.tf_tp_data_source,
        tf_tp_directioncode_chk = s.tf_tp_directioncode_chk,
        tf_tp_proportional_code = s.tf_tp_proportional_code,
        tf_tp_uniq_addon_area_code = s.tf_tp_uniq_addon_area_code,
        tf_tp_no_of_thu_min = s.tf_tp_no_of_thu_min,
        tf_tp_no_of_thu_max = s.tf_tp_no_of_thu_max,
        tf_tp_space_min = s.tf_tp_space_min,
        tf_tp_space_max = s.tf_tp_space_max,
        tf_tp_no_of_thu = s.tf_tp_no_of_thu,
        tf_tp_no_of_thu_min_lim = s.tf_tp_no_of_thu_min_lim,
        tf_tp_space = s.tf_tp_space,
        tf_tp_space_min_lim = s.tf_tp_space_min_lim,
        tf_acc_flag = s.tf_acc_flag,
        tf_tp_reciprocal_yn = s.tf_tp_reciprocal_yn,
        tf_tp_doc = s.tf_tp_doc,
        tf_tp_min_doc = s.tf_tp_min_doc,
        tf_tp_doc_min = s.tf_tp_doc_min,
        tf_tp_doc_max = s.tf_tp_doc_max,
        tf_tp_doc_uom = s.tf_tp_doc_uom,
        tf_tp_doc_min_lim = s.tf_tp_doc_min_lim,
        tf_tp_dec_id = s.tf_tp_dec_id,
        tf_tp_consumables = s.tf_tp_consumables,
        tf_tp_task = s.tf_tp_task,
        tf_tp_job_type = s.tf_tp_job_type,
        tf_tp_min_eqp = s.tf_tp_min_eqp,
        tf_tp_eqp_min = s.tf_tp_eqp_min,
        tf_tp_eqp_max = s.tf_tp_eqp_max,
        tf_tp_eqp_uom = s.tf_tp_eqp_uom,
        tf_tp_min_commodity = s.tf_tp_min_commodity,
        tf_tp_commodity_min = s.tf_tp_commodity_min,
        tf_tp_commodity_max = s.tf_tp_commodity_max,
        tf_tp_commodity_uom = s.tf_tp_commodity_uom,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = s.etlupdatedatetime
    FROM dwh.d_tarifftransport s
    WHERE t.tf_tp_id = s.tf_tp_id
    AND t.tf_tp_ou = s.tf_tp_ou
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE >= p_etllastrundate;

    INSERT INTO click.d_tarifftransport(tf_tp_key, tf_tp_id, tf_tp_ou, tf_tp_desc, tf_tp_type_code, tf_tp_status, tf_tp_division, tf_tp_location, tf_tp_validity_id, tf_tp_frm_ship_point, tf_tp_to_ship_point, tf_tp_frm_geo_type, tf_tp_frm_geo, tf_tp_to_geo_type, tf_tp_to_geo, tf_tp_dist_check, tf_tp_dist_min, tf_tp_dist_max, tf_tp_dist_uom, tf_tp_wt, tf_tp_wt_min, tf_tp_wt_max, tf_tp_wt_uom, tf_tp_vol, tf_tp_vol_min, tf_tp_vol_max, tf_tp_vol_uom, tf_tp_trip_time, tf_tp_trip_time_min, tf_tp_trip_time_max, tf_tp_trip_time_uom, tf_tp_vol_conversion, tf_tp_service, tf_tp_sub_service, tf_tp_thu_type, tf_tp_min_no_thu, tf_tp_max_no_thu, tf_tp_class_of_stores, tf_tp_thu_space_frm, tf_tp_thu_space_to, tf_tp_equip_type, tf_tp_veh_type, tf_tp_timestamp, tf_tp_created_by, tf_tp_created_dt, tf_tp_modified_by, tf_tp_modified_dt, tf_tp_multilvl_approval, tf_tp_min_weight, tf_tp_min_volume, tf_tp_previous_status, tf_tp_factor, tf_tp_leg_behavior, tf_tp_service_id, non_billable_chk, tf_tp_numeric_round_off, tf_tp_thu_volume_min_lim, tf_tp_thu_weight_min_lim, tf_tp_category, tf_tp_load_type, tf_tp_freight_charges, tf_tp_inco_terms, tf_tp_rate_class, tf_tp_govt_status, tf_tp_uniq_note, tf_tp_type_of_entry, tf_tp_uld_rating_type, tf_tp_uld_charge_code, tf_tp_dis_doc_type, tf_tp_resource_type, tf_tp_no_of_thu_uom, tf_tp_space_uom, tf_tp_cod_cop, tf_tp_cod_cop_min, tf_tp_cod_cop_max, tf_tp_cod_cop_min_lim, tf_tp_cod_cop_uom, tf_tp_declrd_value, tf_tp_declrd_value_min, tf_tp_declrd_value_max, tf_tp_declrd_value_min_lim, tf_tp_declrd_value_uom, tf_tp_dutiable_value, tf_tp_dutiable_value_min, tf_tp_dutiable_value_max, tf_tp_dutiable_value_min_lim, tf_tp_dutiable_value_uom, tf_tp_thu_length, tf_tp_thu_length_min, tf_tp_thu_length_max, tf_tp_thu_length_min_lim, tf_tp_thu_length_uom, tf_tp_thu_width, tf_tp_thu_width_min, tf_tp_thu_width_max, tf_tp_thu_width_min_lim, tf_tp_thu_width_uom, tf_tp_thu_height, tf_tp_thu_height_min, tf_tp_thu_height_max, tf_tp_thu_height_min_lim, tf_tp_thu_height_uom, tf_tp_thu_distance_min_lim, tf_tp_thu_trip_time_min_lim, tf_tp_cost_type, tf_tp_area, tf_tp_origin_via_point, tf_tp_dest_via_point, tf_tp_data_source, tf_tp_directioncode_chk, tf_tp_proportional_code, tf_tp_uniq_addon_area_code, tf_tp_no_of_thu_min, tf_tp_no_of_thu_max, tf_tp_space_min, tf_tp_space_max, tf_tp_no_of_thu, tf_tp_no_of_thu_min_lim, tf_tp_space, tf_tp_space_min_lim, tf_acc_flag, tf_tp_reciprocal_yn, tf_tp_doc, tf_tp_min_doc, tf_tp_doc_min, tf_tp_doc_max, tf_tp_doc_uom, tf_tp_doc_min_lim, tf_tp_dec_id, tf_tp_consumables, tf_tp_task, tf_tp_job_type, tf_tp_min_eqp, tf_tp_eqp_min, tf_tp_eqp_max, tf_tp_eqp_uom, tf_tp_min_commodity, tf_tp_commodity_min, tf_tp_commodity_max, tf_tp_commodity_uom, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.tf_tp_key, s.tf_tp_id, s.tf_tp_ou, s.tf_tp_desc, s.tf_tp_type_code, s.tf_tp_status, s.tf_tp_division, s.tf_tp_location, s.tf_tp_validity_id, s.tf_tp_frm_ship_point, s.tf_tp_to_ship_point, s.tf_tp_frm_geo_type, s.tf_tp_frm_geo, s.tf_tp_to_geo_type, s.tf_tp_to_geo, s.tf_tp_dist_check, s.tf_tp_dist_min, s.tf_tp_dist_max, s.tf_tp_dist_uom, s.tf_tp_wt, s.tf_tp_wt_min, s.tf_tp_wt_max, s.tf_tp_wt_uom, s.tf_tp_vol, s.tf_tp_vol_min, s.tf_tp_vol_max, s.tf_tp_vol_uom, s.tf_tp_trip_time, s.tf_tp_trip_time_min, s.tf_tp_trip_time_max, s.tf_tp_trip_time_uom, s.tf_tp_vol_conversion, s.tf_tp_service, s.tf_tp_sub_service, s.tf_tp_thu_type, s.tf_tp_min_no_thu, s.tf_tp_max_no_thu, s.tf_tp_class_of_stores, s.tf_tp_thu_space_frm, s.tf_tp_thu_space_to, s.tf_tp_equip_type, s.tf_tp_veh_type, s.tf_tp_timestamp, s.tf_tp_created_by, s.tf_tp_created_dt, s.tf_tp_modified_by, s.tf_tp_modified_dt, s.tf_tp_multilvl_approval, s.tf_tp_min_weight, s.tf_tp_min_volume, s.tf_tp_previous_status, s.tf_tp_factor, s.tf_tp_leg_behavior, s.tf_tp_service_id, s.non_billable_chk, s.tf_tp_numeric_round_off, s.tf_tp_thu_volume_min_lim, s.tf_tp_thu_weight_min_lim, s.tf_tp_category, s.tf_tp_load_type, s.tf_tp_freight_charges, s.tf_tp_inco_terms, s.tf_tp_rate_class, s.tf_tp_govt_status, s.tf_tp_uniq_note, s.tf_tp_type_of_entry, s.tf_tp_uld_rating_type, s.tf_tp_uld_charge_code, s.tf_tp_dis_doc_type, s.tf_tp_resource_type, s.tf_tp_no_of_thu_uom, s.tf_tp_space_uom, s.tf_tp_cod_cop, s.tf_tp_cod_cop_min, s.tf_tp_cod_cop_max, s.tf_tp_cod_cop_min_lim, s.tf_tp_cod_cop_uom, s.tf_tp_declrd_value, s.tf_tp_declrd_value_min, s.tf_tp_declrd_value_max, s.tf_tp_declrd_value_min_lim, s.tf_tp_declrd_value_uom, s.tf_tp_dutiable_value, s.tf_tp_dutiable_value_min, s.tf_tp_dutiable_value_max, s.tf_tp_dutiable_value_min_lim, s.tf_tp_dutiable_value_uom, s.tf_tp_thu_length, s.tf_tp_thu_length_min, s.tf_tp_thu_length_max, s.tf_tp_thu_length_min_lim, s.tf_tp_thu_length_uom, s.tf_tp_thu_width, s.tf_tp_thu_width_min, s.tf_tp_thu_width_max, s.tf_tp_thu_width_min_lim, s.tf_tp_thu_width_uom, s.tf_tp_thu_height, s.tf_tp_thu_height_min, s.tf_tp_thu_height_max, s.tf_tp_thu_height_min_lim, s.tf_tp_thu_height_uom, s.tf_tp_thu_distance_min_lim, s.tf_tp_thu_trip_time_min_lim, s.tf_tp_cost_type, s.tf_tp_area, s.tf_tp_origin_via_point, s.tf_tp_dest_via_point, s.tf_tp_data_source, s.tf_tp_directioncode_chk, s.tf_tp_proportional_code, s.tf_tp_uniq_addon_area_code, s.tf_tp_no_of_thu_min, s.tf_tp_no_of_thu_max, s.tf_tp_space_min, s.tf_tp_space_max, s.tf_tp_no_of_thu, s.tf_tp_no_of_thu_min_lim, s.tf_tp_space, s.tf_tp_space_min_lim, s.tf_acc_flag, s.tf_tp_reciprocal_yn, s.tf_tp_doc, s.tf_tp_min_doc, s.tf_tp_doc_min, s.tf_tp_doc_max, s.tf_tp_doc_uom, s.tf_tp_doc_min_lim, s.tf_tp_dec_id, s.tf_tp_consumables, s.tf_tp_task, s.tf_tp_job_type, s.tf_tp_min_eqp, s.tf_tp_eqp_min, s.tf_tp_eqp_max, s.tf_tp_eqp_uom, s.tf_tp_min_commodity, s.tf_tp_commodity_min, s.tf_tp_commodity_max, s.tf_tp_commodity_uom, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, s.etlcreatedatetime
    FROM dwh.d_tarifftransport s
    LEFT JOIN click.d_tarifftransport t
    ON t.tf_tp_id = s.tf_tp_id
    AND t.tf_tp_ou = s.tf_tp_ou
    WHERE t.tf_tp_id IS NULL
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE >= p_etllastrundate;
END;
$$;


ALTER PROCEDURE click.usp_d_tarifftransport() OWNER TO proconnect;

--
-- Name: usp_d_tarifftype(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_tarifftype()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_tarifftype t
    SET
        tar_key = s.tar_key,
        tar_lineno = s.tar_lineno,
        tar_ou = s.tar_ou,
        tar_applicability = s.tar_applicability,
        tar_scr_code = s.tar_scr_code,
        tar_type_code = s.tar_type_code,
        tar_tf_type = s.tar_tf_type,
        tar_display_tf_type = s.tar_display_tf_type,
        tar_created_by = s.tar_created_by,
        tar_created_date = s.tar_created_date,
        tar_modified_by = s.tar_modified_by,
        tar_modified_date = s.tar_modified_date,
        tar_timestamp = s.tar_timestamp,
        tar_revenue_split = s.tar_revenue_split,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_tarifftype s
    WHERE t.tar_lineno = s.tar_lineno
    AND t.tar_ou = s.tar_ou;

    INSERT INTO click.d_tarifftype(tar_key, tar_lineno, tar_ou, tar_applicability, tar_scr_code, tar_type_code, tar_tf_type, tar_display_tf_type, tar_created_by, tar_created_date, tar_modified_by, tar_modified_date, tar_timestamp, tar_revenue_split, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.tar_key, s.tar_lineno, s.tar_ou, s.tar_applicability, s.tar_scr_code, s.tar_type_code, s.tar_tf_type, s.tar_display_tf_type, s.tar_created_by, s.tar_created_date, s.tar_modified_by, s.tar_modified_date, s.tar_timestamp, s.tar_revenue_split, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_tarifftype s
    LEFT JOIN click.d_tarifftype t
    ON t.tar_lineno = s.tar_lineno
    AND t.tar_ou = s.tar_ou
    WHERE t.tar_lineno IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_tarifftype() OWNER TO proconnect;

--
-- Name: usp_d_tarifftypegroup(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_tarifftypegroup()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_tarifftypegroup t
    SET
        tf_key = s.tf_key,
        tf_grp_code = s.tf_grp_code,
        tf_type_code = s.tf_type_code,
        tf_type_desc = s.tf_type_desc,
        tf_formula = s.tf_formula,
        tf_created_by = s.tf_created_by,
        tf_created_date = s.tf_created_date,
        tf_langid = s.tf_langid,
        tf_acc_flag = s.tf_acc_flag,
        tariff_code = s.tariff_code,
        description = s.description,
        formula = s.formula,
        tf_tariff_code_version = s.tf_tariff_code_version,
        tf_br_remit_flag = s.tf_br_remit_flag,
        tf_revenue_split = s.tf_revenue_split,
        tf_basicsforop = s.tf_basicsforop,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_tarifftypegroup s
    WHERE t.tf_grp_code = s.tf_grp_code
    AND t.tf_type_code = s.tf_type_code;

    INSERT INTO click.d_tarifftypegroup(tf_key, tf_grp_code, tf_type_code, tf_type_desc, tf_formula, tf_created_by, tf_created_date, tf_langid, tf_acc_flag, tariff_code, description, formula, tf_tariff_code_version, tf_br_remit_flag, tf_revenue_split, tf_basicsforop, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.tf_key, s.tf_grp_code, s.tf_type_code, s.tf_type_desc, s.tf_formula, s.tf_created_by, s.tf_created_date, s.tf_langid, s.tf_acc_flag, s.tariff_code, s.description, s.formula, s.tf_tariff_code_version, s.tf_br_remit_flag, s.tf_revenue_split, s.tf_basicsforop, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_tarifftypegroup s
    LEFT JOIN click.d_tarifftypegroup t
    ON t.tf_grp_code = s.tf_grp_code
    AND t.tf_type_code = s.tf_type_code
    WHERE t.tf_grp_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_tarifftypegroup() OWNER TO proconnect;

--
-- Name: usp_d_thu(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_thu()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_thu t
    SET
        thu_key = s.thu_key,
        thu_id = s.thu_id,
        thu_ou = s.thu_ou,
        thu_description = s.thu_description,
        thu_bulk = s.thu_bulk,
        thu_class = s.thu_class,
        thu_status = s.thu_status,
        thu_reason_code = s.thu_reason_code,
        thu_tare = s.thu_tare,
        thu_max_allowable = s.thu_max_allowable,
        thu_weight_uom = s.thu_weight_uom,
        thu_uom = s.thu_uom,
        thu_int_length = s.thu_int_length,
        thu_int_width = s.thu_int_width,
        thu_int_height = s.thu_int_height,
        thu_int_uom = s.thu_int_uom,
        thu_ext_length = s.thu_ext_length,
        thu_ext_width = s.thu_ext_width,
        thu_ext_height = s.thu_ext_height,
        thu_ext_uom = s.thu_ext_uom,
        thu_timestamp = s.thu_timestamp,
        thu_created_by = s.thu_created_by,
        thu_created_date = s.thu_created_date,
        thu_modified_by = s.thu_modified_by,
        thu_modified_date = s.thu_modified_date,
        thu_size = s.thu_size,
        thu_eligible_cubing = s.thu_eligible_cubing,
        thu_area = s.thu_area,
        thu_weight_const = s.thu_weight_const,
        thu_volume_const = s.thu_volume_const,
        thu_unit_pallet_const = s.thu_unit_pallet_const,
        thu_max_unit_permissable = s.thu_max_unit_permissable,
        thu_stage_mapping = s.thu_stage_mapping,
        thu_ser_cont = s.thu_ser_cont,
        thu_is_ethu = s.thu_is_ethu,
        thu_volume_uom = s.thu_volume_uom,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_thu s
    WHERE t.thu_id = s.thu_id
    AND t.thu_ou = s.thu_ou;

    INSERT INTO click.d_thu(thu_key, thu_id, thu_ou, thu_description, thu_bulk, thu_class, thu_status, thu_reason_code, thu_tare, thu_max_allowable, thu_weight_uom, thu_uom, thu_int_length, thu_int_width, thu_int_height, thu_int_uom, thu_ext_length, thu_ext_width, thu_ext_height, thu_ext_uom, thu_timestamp, thu_created_by, thu_created_date, thu_modified_by, thu_modified_date, thu_size, thu_eligible_cubing, thu_area, thu_weight_const, thu_volume_const, thu_unit_pallet_const, thu_max_unit_permissable, thu_stage_mapping, thu_ser_cont, thu_is_ethu, thu_volume_uom, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.thu_key, s.thu_id, s.thu_ou, s.thu_description, s.thu_bulk, s.thu_class, s.thu_status, s.thu_reason_code, s.thu_tare, s.thu_max_allowable, s.thu_weight_uom, s.thu_uom, s.thu_int_length, s.thu_int_width, s.thu_int_height, s.thu_int_uom, s.thu_ext_length, s.thu_ext_width, s.thu_ext_height, s.thu_ext_uom, s.thu_timestamp, s.thu_created_by, s.thu_created_date, s.thu_modified_by, s.thu_modified_date, s.thu_size, s.thu_eligible_cubing, s.thu_area, s.thu_weight_const, s.thu_volume_const, s.thu_unit_pallet_const, s.thu_max_unit_permissable, s.thu_stage_mapping, s.thu_ser_cont, s.thu_is_ethu, s.thu_volume_uom, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_thu s
    LEFT JOIN click.d_thu t
    ON t.thu_id = s.thu_id
    AND t.thu_ou = s.thu_ou
    WHERE t.thu_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_thu() OWNER TO proconnect;

--
-- Name: usp_d_thuitemmap(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_thuitemmap()
    LANGUAGE plpgsql
    AS $$

Declare p_etllastrundate date;

BEGIN

	SELECT max(COALESCE(etlupdatedatetime,etlcreatedatetime)):: DATE as p_etllastrundate
	INTO p_etllastrundate
	FROM click.d_thuitemmap;	
	
	
    UPDATE click.d_thuitemmap t
    SET
        thu_itm_key = s.thu_itm_key,
        thu_loc_code = s.thu_loc_code,
        thu_ou = s.thu_ou,
        thu_serial_no = s.thu_serial_no,
        thu_id = s.thu_id,
        thu_item = s.thu_item,
        thu_lot_no = s.thu_lot_no,
        thu_itm_serial_no = s.thu_itm_serial_no,
        thu_qty = s.thu_qty,
        thu_created_by = s.thu_created_by,
        thu_created_date = s.thu_created_date,
        thu_ser_no = s.thu_ser_no,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = s.etlupdatedatetime
    FROM dwh.d_thuitemmap s
    WHERE t.thu_loc_code = s.thu_loc_code
    AND t.thu_ou = s.thu_ou
    AND t.thu_serial_no = s.thu_serial_no
    AND t.thu_id = s.thu_id
    AND t.thu_item = s.thu_item
    AND t.thu_lot_no = s.thu_lot_no
    AND t.thu_itm_serial_no = s.thu_itm_serial_no
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE > p_etllastrundate;
	

    INSERT INTO click.d_thuitemmap(thu_itm_key, thu_loc_code, thu_ou, thu_serial_no, thu_id, thu_item, thu_lot_no, thu_itm_serial_no, thu_qty, thu_created_by, thu_created_date, thu_ser_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.thu_itm_key, s.thu_loc_code, s.thu_ou, s.thu_serial_no, s.thu_id, s.thu_item, s.thu_lot_no, s.thu_itm_serial_no, s.thu_qty, s.thu_created_by, s.thu_created_date, s.thu_ser_no, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, s.etlcreatedatetime
    FROM dwh.d_thuitemmap s
    LEFT JOIN click.d_thuitemmap t
    ON t.thu_loc_code = s.thu_loc_code
    AND t.thu_ou = s.thu_ou
    AND t.thu_serial_no = s.thu_serial_no
    AND t.thu_id = s.thu_id
    AND t.thu_item = s.thu_item
    AND t.thu_lot_no = s.thu_lot_no
    AND t.thu_itm_serial_no = s.thu_itm_serial_no
    WHERE t.thu_loc_code IS NULL
	AND COALESCE(s.etlupdatedatetime,s.etlcreatedatetime)::DATE > p_etllastrundate;
END;
$$;


ALTER PROCEDURE click.usp_d_thuitemmap() OWNER TO proconnect;

--
-- Name: usp_d_tmsparameter(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_tmsparameter()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_tmsparameter t
    SET
        tms_key = s.tms_key,
        tms_componentname = s.tms_componentname,
        tms_paramcategory = s.tms_paramcategory,
        tms_paramtype = s.tms_paramtype,
        tms_paramcode = s.tms_paramcode,
        tms_paramdesc = s.tms_paramdesc,
        tms_langid = s.tms_langid,
        tms_optionvalue = s.tms_optionvalue,
        tms_sequenceno = s.tms_sequenceno,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_tmsparameter s
    WHERE t.tms_componentname = s.tms_componentname
    AND t.tms_paramcategory = s.tms_paramcategory
    AND t.tms_paramtype = s.tms_paramtype
    AND t.tms_paramcode = s.tms_paramcode
    AND t.tms_paramdesc = s.tms_paramdesc
    AND t.tms_langid = s.tms_langid;

    INSERT INTO click.d_tmsparameter(tms_key, tms_componentname, tms_paramcategory, tms_paramtype, tms_paramcode, tms_paramdesc, tms_langid, tms_optionvalue, tms_sequenceno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.tms_key, s.tms_componentname, s.tms_paramcategory, s.tms_paramtype, s.tms_paramcode, s.tms_paramdesc, s.tms_langid, s.tms_optionvalue, s.tms_sequenceno, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_tmsparameter s
    LEFT JOIN click.d_tmsparameter t
    ON t.tms_componentname = s.tms_componentname
    AND t.tms_paramcategory = s.tms_paramcategory
    AND t.tms_paramtype = s.tms_paramtype
    AND t.tms_paramcode = s.tms_paramcode
    AND t.tms_paramdesc = s.tms_paramdesc
    AND t.tms_langid = s.tms_langid
    WHERE t.tms_componentname IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_tmsparameter() OWNER TO proconnect;

--
-- Name: usp_d_uom(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_uom()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_uom t
    SET
        uom_key = s.uom_key,
        mas_ouinstance = s.mas_ouinstance,
        mas_uomcode = s.mas_uomcode,
        mas_uomdesc = s.mas_uomdesc,
        mas_fractions = s.mas_fractions,
        mas_status = s.mas_status,
        mas_reasoncode = s.mas_reasoncode,
        mas_created_by = s.mas_created_by,
        mas_created_date = s.mas_created_date,
        mas_modified_by = s.mas_modified_by,
        mas_modified_date = s.mas_modified_date,
        mas_timestamp = s.mas_timestamp,
        mas_created_langid = s.mas_created_langid,
        mas_class = s.mas_class,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_uom s
    WHERE t.mas_ouinstance = s.mas_ouinstance
    AND t.mas_uomcode = s.mas_uomcode;

    INSERT INTO click.d_uom(uom_key, mas_ouinstance, mas_uomcode, mas_uomdesc, mas_fractions, mas_status, mas_reasoncode, mas_created_by, mas_created_date, mas_modified_by, mas_modified_date, mas_timestamp, mas_created_langid, mas_class, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.uom_key, s.mas_ouinstance, s.mas_uomcode, s.mas_uomdesc, s.mas_fractions, s.mas_status, s.mas_reasoncode, s.mas_created_by, s.mas_created_date, s.mas_modified_by, s.mas_modified_date, s.mas_timestamp, s.mas_created_langid, s.mas_class, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_uom s
    LEFT JOIN click.d_uom t
    ON t.mas_ouinstance = s.mas_ouinstance
    AND t.mas_uomcode = s.mas_uomcode
    WHERE t.mas_ouinstance IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_uom() OWNER TO proconnect;

--
-- Name: usp_d_uomconversion(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_uomconversion()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_uomconversion t
    SET
        uom_con_key = s.uom_con_key,
        con_ouinstance = s.con_ouinstance,
        con_fromuomcode = s.con_fromuomcode,
        con_touomcode = s.con_touomcode,
        con_confact_ntr = s.con_confact_ntr,
        con_confact_dtr = s.con_confact_dtr,
        con_created_by = s.con_created_by,
        con_created_date = s.con_created_date,
        con_modified_by = s.con_modified_by,
        con_modified_date = s.con_modified_date,
        con_flag = s.con_flag,
        con_convert_type = s.con_convert_type,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_uomconversion s
    WHERE t.con_fromuomcode = s.con_fromuomcode
    AND t.con_touomcode = s.con_touomcode;

    INSERT INTO click.d_uomconversion(uom_con_key, con_ouinstance, con_fromuomcode, con_touomcode, con_confact_ntr, con_confact_dtr, con_created_by, con_created_date, con_modified_by, con_modified_date, con_flag, con_convert_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.uom_con_key, s.con_ouinstance, s.con_fromuomcode, s.con_touomcode, s.con_confact_ntr, s.con_confact_dtr, s.con_created_by, s.con_created_date, s.con_modified_by, s.con_modified_date, s.con_flag, s.con_convert_type, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_uomconversion s
    LEFT JOIN click.d_uomconversion t
    ON t.con_fromuomcode = s.con_fromuomcode
    AND t.con_touomcode = s.con_touomcode
    WHERE t.con_ouinstance IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_uomconversion() OWNER TO proconnect;

--
-- Name: usp_d_vehicle(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_vehicle()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_vehicle t
    SET
        veh_key = s.veh_key,
        veh_ou = s.veh_ou,
        veh_id = s.veh_id,
        veh_desc = s.veh_desc,
        veh_status = s.veh_status,
        veh_rsn_code = s.veh_rsn_code,
        veh_vin = s.veh_vin,
        veh_type = s.veh_type,
        veh_own_typ = s.veh_own_typ,
        veh_agency_id = s.veh_agency_id,
        veh_agency_contno = s.veh_agency_contno,
        veh_build_date = s.veh_build_date,
        veh_def_loc = s.veh_def_loc,
        veh_cur_loc = s.veh_cur_loc,
        veh_cur_loc_since = s.veh_cur_loc_since,
        veh_trans_typ = s.veh_trans_typ,
        veh_fuel_used = s.veh_fuel_used,
        veh_steering_type = s.veh_steering_type,
        veh_colour = s.veh_colour,
        veh_wt_uom = s.veh_wt_uom,
        veh_tare = s.veh_tare,
        veh_vehicle_gross = s.veh_vehicle_gross,
        veh_gross_com = s.veh_gross_com,
        veh_dim_uom = s.veh_dim_uom,
        veh_length = s.veh_length,
        veh_width = s.veh_width,
        veh_height = s.veh_height,
        veh_created_by = s.veh_created_by,
        veh_created_date = s.veh_created_date,
        veh_modified_by = s.veh_modified_by,
        veh_modified_date = s.veh_modified_date,
        veh_timestamp = s.veh_timestamp,
        veh_refrigerated = s.veh_refrigerated,
        veh_intransit = s.veh_intransit,
        veh_route = s.veh_route,
        veh_and = s.veh_and,
        veh_between = s.veh_between,
        veh_category = s.veh_category,
        veh_use_of_haz = s.veh_use_of_haz,
        veh_in_dim_uom = s.veh_in_dim_uom,
        veh_in_length = s.veh_in_length,
        veh_in_width = s.veh_in_width,
        veh_in_height = s.veh_in_height,
        veh_vol_uom = s.veh_vol_uom,
        veh_over_vol = s.veh_over_vol,
        veh_internal_vol = s.veh_internal_vol,
        veh_purchase_date = s.veh_purchase_date,
        veh_induct_date = s.veh_induct_date,
        veh_rigid = s.veh_rigid,
        veh_home_geo_type = s.veh_home_geo_type,
        veh_current_geo_type = s.veh_current_geo_type,
        veh_ownrshp_eftfrm = s.veh_ownrshp_eftfrm,
        veh_raise_int_drfbill = s.veh_raise_int_drfbill,
        veh_prev_geo_type = s.veh_prev_geo_type,
        veh_prev_loc = s.veh_prev_loc,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_vehicle s
    WHERE t.veh_ou = s.veh_ou
    AND t.veh_id = s.veh_id;

    INSERT INTO click.d_vehicle(veh_key, veh_ou, veh_id, veh_desc, veh_status, veh_rsn_code, veh_vin, veh_type, veh_own_typ, veh_agency_id, veh_agency_contno, veh_build_date, veh_def_loc, veh_cur_loc, veh_cur_loc_since, veh_trans_typ, veh_fuel_used, veh_steering_type, veh_colour, veh_wt_uom, veh_tare, veh_vehicle_gross, veh_gross_com, veh_dim_uom, veh_length, veh_width, veh_height, veh_created_by, veh_created_date, veh_modified_by, veh_modified_date, veh_timestamp, veh_refrigerated, veh_intransit, veh_route, veh_and, veh_between, veh_category, veh_use_of_haz, veh_in_dim_uom, veh_in_length, veh_in_width, veh_in_height, veh_vol_uom, veh_over_vol, veh_internal_vol, veh_purchase_date, veh_induct_date, veh_rigid, veh_home_geo_type, veh_current_geo_type, veh_ownrshp_eftfrm, veh_raise_int_drfbill, veh_prev_geo_type, veh_prev_loc, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.veh_key, s.veh_ou, s.veh_id, s.veh_desc, s.veh_status, s.veh_rsn_code, s.veh_vin, s.veh_type, s.veh_own_typ, s.veh_agency_id, s.veh_agency_contno, s.veh_build_date, s.veh_def_loc, s.veh_cur_loc, s.veh_cur_loc_since, s.veh_trans_typ, s.veh_fuel_used, s.veh_steering_type, s.veh_colour, s.veh_wt_uom, s.veh_tare, s.veh_vehicle_gross, s.veh_gross_com, s.veh_dim_uom, s.veh_length, s.veh_width, s.veh_height, s.veh_created_by, s.veh_created_date, s.veh_modified_by, s.veh_modified_date, s.veh_timestamp, s.veh_refrigerated, s.veh_intransit, s.veh_route, s.veh_and, s.veh_between, s.veh_category, s.veh_use_of_haz, s.veh_in_dim_uom, s.veh_in_length, s.veh_in_width, s.veh_in_height, s.veh_vol_uom, s.veh_over_vol, s.veh_internal_vol, s.veh_purchase_date, s.veh_induct_date, s.veh_rigid, s.veh_home_geo_type, s.veh_current_geo_type, s.veh_ownrshp_eftfrm, s.veh_raise_int_drfbill, s.veh_prev_geo_type, s.veh_prev_loc, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_vehicle s
    LEFT JOIN click.d_vehicle t
    ON t.veh_ou = s.veh_ou
    AND t.veh_id = s.veh_id
    WHERE t.veh_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_vehicle() OWNER TO proconnect;

--
-- Name: usp_d_vehiclereginfo(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_vehiclereginfo()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_vehiclereginfo t
    SET
        veh_rifo_key = s.veh_rifo_key,
        veh_ou = s.veh_ou,
        veh_id = s.veh_id,
        veh_line_no = s.veh_line_no,
        veh_address = s.veh_address,
        veh_title_holder_name = s.veh_title_holder_name,
        veh_issuing_auth = s.veh_issuing_auth,
        veh_issuing_location = s.veh_issuing_location,
        veh_issuing_date = s.veh_issuing_date,
        veh_exp_date = s.veh_exp_date,
        veh_remarks = s.veh_remarks,
        veh_doc_type = s.veh_doc_type,
        veh_doc_no = s.veh_doc_no,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_vehiclereginfo s
    WHERE t.veh_ou = s.veh_ou
    AND t.veh_id = s.veh_id
    AND t.veh_line_no = s.veh_line_no;

    INSERT INTO click.d_vehiclereginfo(veh_rifo_key, veh_ou, veh_id, veh_line_no, veh_address, veh_title_holder_name, veh_issuing_auth, veh_issuing_location, veh_issuing_date, veh_exp_date, veh_remarks, veh_doc_type, veh_doc_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.veh_rifo_key, s.veh_ou, s.veh_id, s.veh_line_no, s.veh_address, s.veh_title_holder_name, s.veh_issuing_auth, s.veh_issuing_location, s.veh_issuing_date, s.veh_exp_date, s.veh_remarks, s.veh_doc_type, s.veh_doc_no, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_vehiclereginfo s
    LEFT JOIN click.d_vehiclereginfo t
    ON t.veh_ou = s.veh_ou
    AND t.veh_id = s.veh_id
    AND t.veh_line_no = s.veh_line_no
    WHERE t.veh_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_vehiclereginfo() OWNER TO proconnect;

--
-- Name: usp_d_vendor(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_vendor()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_vendor t
    SET
        vendor_key = s.vendor_key,
        vendor_id = s.vendor_id,
        vendor_ou = s.vendor_ou,
        vendor_status = s.vendor_status,
        vendor_name = s.vendor_name,
        vendor_payterm = s.vendor_payterm,
        vendor_reason_code = s.vendor_reason_code,
        vendor_classifcation = s.vendor_classifcation,
        vendor_currency = s.vendor_currency,
        vendor_for_self = s.vendor_for_self,
        vendor_created_by = s.vendor_created_by,
        vendor_created_date = s.vendor_created_date,
        vendor_modified_by = s.vendor_modified_by,
        vendor_modified_date = s.vendor_modified_date,
        vendor_timestamp = s.vendor_timestamp,
        vendor_address1 = s.vendor_address1,
        vendor_address2 = s.vendor_address2,
        vendor_address3 = s.vendor_address3,
        vendor_city = s.vendor_city,
        vendor_state = s.vendor_state,
        vendor_country = s.vendor_country,
        vendor_phone1 = s.vendor_phone1,
        vendor_phone2 = s.vendor_phone2,
        vendor_email = s.vendor_email,
        vendor_fax = s.vendor_fax,
        vendor_url = s.vendor_url,
        vendor_subzone = s.vendor_subzone,
        vendor_timezone = s.vendor_timezone,
        vendor_zone = s.vendor_zone,
        vendor_region = s.vendor_region,
        vendor_postal_code = s.vendor_postal_code,
        vendor_agnt_reg = s.vendor_agnt_reg,
        vendor_agnt_cha = s.vendor_agnt_cha,
        vendor_carrier_road = s.vendor_carrier_road,
        vendor_carrier_rail = s.vendor_carrier_rail,
        vendor_carrier_air = s.vendor_carrier_air,
        vendor_carrier_sea = s.vendor_carrier_sea,
        vendor_sub_cntrct_veh = s.vendor_sub_cntrct_veh,
        vendor_sub_cntrct_emp = s.vendor_sub_cntrct_emp,
        vendor_lat = s.vendor_lat,
        vendor_long = s.vendor_long,
        vendor_reg = s.vendor_reg,
        vendor_dept = s.vendor_dept,
        vendor_ln_business = s.vendor_ln_business,
        vendor_rcti = s.vendor_rcti,
        vendor_gen_from = s.vendor_gen_from,
        vendor_group = s.vendor_group,
        vendor_std_contract = s.vendor_std_contract,
        vendor_final_bill_stage = s.vendor_final_bill_stage,
        vendor_allwdb_billto = s.vendor_allwdb_billto,
        vendor_insrnc_prvdr = s.vendor_insrnc_prvdr,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_vendor s
    WHERE t.vendor_id = s.vendor_id
    AND t.vendor_ou = s.vendor_ou;

    INSERT INTO click.d_vendor(vendor_key, vendor_id, vendor_ou, vendor_status, vendor_name, vendor_payterm, vendor_reason_code, vendor_classifcation, vendor_currency, vendor_for_self, vendor_created_by, vendor_created_date, vendor_modified_by, vendor_modified_date, vendor_timestamp, vendor_address1, vendor_address2, vendor_address3, vendor_city, vendor_state, vendor_country, vendor_phone1, vendor_phone2, vendor_email, vendor_fax, vendor_url, vendor_subzone, vendor_timezone, vendor_zone, vendor_region, vendor_postal_code, vendor_agnt_reg, vendor_agnt_cha, vendor_carrier_road, vendor_carrier_rail, vendor_carrier_air, vendor_carrier_sea, vendor_sub_cntrct_veh, vendor_sub_cntrct_emp, vendor_lat, vendor_long, vendor_reg, vendor_dept, vendor_ln_business, vendor_rcti, vendor_gen_from, vendor_group, vendor_std_contract, vendor_final_bill_stage, vendor_allwdb_billto, vendor_insrnc_prvdr, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.vendor_key, s.vendor_id, s.vendor_ou, s.vendor_status, s.vendor_name, s.vendor_payterm, s.vendor_reason_code, s.vendor_classifcation, s.vendor_currency, s.vendor_for_self, s.vendor_created_by, s.vendor_created_date, s.vendor_modified_by, s.vendor_modified_date, s.vendor_timestamp, s.vendor_address1, s.vendor_address2, s.vendor_address3, s.vendor_city, s.vendor_state, s.vendor_country, s.vendor_phone1, s.vendor_phone2, s.vendor_email, s.vendor_fax, s.vendor_url, s.vendor_subzone, s.vendor_timezone, s.vendor_zone, s.vendor_region, s.vendor_postal_code, s.vendor_agnt_reg, s.vendor_agnt_cha, s.vendor_carrier_road, s.vendor_carrier_rail, s.vendor_carrier_air, s.vendor_carrier_sea, s.vendor_sub_cntrct_veh, s.vendor_sub_cntrct_emp, s.vendor_lat, s.vendor_long, s.vendor_reg, s.vendor_dept, s.vendor_ln_business, s.vendor_rcti, s.vendor_gen_from, s.vendor_group, s.vendor_std_contract, s.vendor_final_bill_stage, s.vendor_allwdb_billto, s.vendor_insrnc_prvdr, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_vendor s
    LEFT JOIN click.d_vendor t
    ON t.vendor_id = s.vendor_id
    AND t.vendor_ou = s.vendor_ou
    WHERE t.vendor_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_vendor() OWNER TO proconnect;

--
-- Name: usp_d_warehouse(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_warehouse()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_warehouse t
    SET
        wh_key = s.wh_key,
        wh_code = s.wh_code,
        wh_ou = s.wh_ou,
        wh_desc = s.wh_desc,
        wh_status = s.wh_status,
        wh_desc_shdw = s.wh_desc_shdw,
        wh_storage_type = s.wh_storage_type,
        nettable = s.nettable,
        finance_book = s.finance_book,
        allocation_method = s.allocation_method,
        site_code = s.site_code,
        address1 = s.address1,
        capital_warehouse = s.capital_warehouse,
        address2 = s.address2,
        city = s.city,
        all_trans_allowed = s.all_trans_allowed,
        state = s.state,
        all_itemtypes_allowed = s.all_itemtypes_allowed,
        zip_code = s.zip_code,
        all_stk_status_allowed = s.all_stk_status_allowed,
        country = s.country,
        created_by = s.created_by,
        created_dt = s.created_dt,
        modified_by = s.modified_by,
        modified_dt = s.modified_dt,
        timestamp_value = s.timestamp_value,
        tran_type = s.tran_type,
        bonded_yn = s.bonded_yn,
        location_code = s.location_code,
        location_desc = s.location_desc,
        address3 = s.address3,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_warehouse s
    WHERE t.wh_code = s.wh_code
    AND t.wh_ou = s.wh_ou;

    INSERT INTO click.d_warehouse(wh_key, wh_code, wh_ou, wh_desc, wh_status, wh_desc_shdw, wh_storage_type, nettable, finance_book, allocation_method, site_code, address1, capital_warehouse, address2, city, all_trans_allowed, state, all_itemtypes_allowed, zip_code, all_stk_status_allowed, country, created_by, created_dt, modified_by, modified_dt, timestamp_value, tran_type, bonded_yn, location_code, location_desc, address3, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.wh_key, s.wh_code, s.wh_ou, s.wh_desc, s.wh_status, s.wh_desc_shdw, s.wh_storage_type, s.nettable, s.finance_book, s.allocation_method, s.site_code, s.address1, s.capital_warehouse, s.address2, s.city, s.all_trans_allowed, s.state, s.all_itemtypes_allowed, s.zip_code, s.all_stk_status_allowed, s.country, s.created_by, s.created_dt, s.modified_by, s.modified_dt, s.timestamp_value, s.tran_type, s.bonded_yn, s.location_code, s.location_desc, s.address3, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_warehouse s
    LEFT JOIN click.d_warehouse t
    ON t.wh_code = s.wh_code
    AND t.wh_ou = s.wh_ou
    WHERE t.wh_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_warehouse() OWNER TO proconnect;

--
-- Name: usp_d_wmsgeozonedetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_wmsgeozonedetail()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_wmsgeozonedetail t
    SET
        geo_zone_key = s.geo_zone_key,
        geo_zone = s.geo_zone,
        geo_zone_ou = s.geo_zone_ou,
        geo_zone_lineno = s.geo_zone_lineno,
        geo_zone_type = s.geo_zone_type,
        geo_zone_type_code = s.geo_zone_type_code,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_wmsgeozonedetail s
    WHERE t.geo_zone = s.geo_zone
    AND t.geo_zone_ou = s.geo_zone_ou
    AND t.geo_zone_lineno = s.geo_zone_lineno
    AND t.geo_zone_type_code = s.geo_zone_type_code;

    INSERT INTO click.d_wmsgeozonedetail(geo_zone_key, geo_zone, geo_zone_ou, geo_zone_lineno, geo_zone_type, geo_zone_type_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.geo_zone_key, s.geo_zone, s.geo_zone_ou, s.geo_zone_lineno, s.geo_zone_type, s.geo_zone_type_code, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_wmsgeozonedetail s
    LEFT JOIN click.d_wmsgeozonedetail t
    ON t.geo_zone = s.geo_zone
    AND t.geo_zone_ou = s.geo_zone_ou
    AND t.geo_zone_lineno = s.geo_zone_lineno
    AND t.geo_zone_type_code = s.geo_zone_type_code
    WHERE t.geo_zone IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_wmsgeozonedetail() OWNER TO proconnect;

--
-- Name: usp_d_wmsquickcodes(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_wmsquickcodes()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_wmsquickcodes t
    SET
        code_key = s.code_key,
        code_ou = s.code_ou,
        code_type = s.code_type,
        code = s.code,
        code_desc = s.code_desc,
        code_default = s.code_default,
        seq_no = s.seq_no,
        status = s.status,
        category = s.category,
        user_flag = s.user_flag,
        code_timestamp = s.code_timestamp,
        langid = s.langid,
        created_date = s.created_date,
        created_by = s.created_by,
        modified_date = s.modified_date,
        modified_by = s.modified_by,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_wmsquickcodes s
    WHERE t.code_ou = s.code_ou
    AND t.code_type = s.code_type
    AND t.code = s.code;

    INSERT INTO click.d_wmsquickcodes(code_key, code_ou, code_type, code, code_desc, code_default, seq_no, status, category, user_flag, code_timestamp, langid, created_date, created_by, modified_date, modified_by, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.code_key, s.code_ou, s.code_type, s.code, s.code_desc, s.code_default, s.seq_no, s.status, s.category, s.user_flag, s.code_timestamp, s.langid, s.created_date, s.created_by, s.modified_date, s.modified_by, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_wmsquickcodes s
    LEFT JOIN click.d_wmsquickcodes t
    ON t.code_ou = s.code_ou
    AND t.code_type = s.code_type
    AND t.code = s.code
    WHERE t.code_ou IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_wmsquickcodes() OWNER TO proconnect;

--
-- Name: usp_d_yard(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_yard()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_yard t
    SET
        yard_key = s.yard_key,
        yard_id = s.yard_id,
        yard_loc_code = s.yard_loc_code,
        yard_ou = s.yard_ou,
        yard_desc = s.yard_desc,
        yard_type = s.yard_type,
        yard_status = s.yard_status,
        yard_reason = s.yard_reason,
        yard_timestamp = s.yard_timestamp,
        yard_created_by = s.yard_created_by,
        yard_created_dt = s.yard_created_dt,
        yard_modified_by = s.yard_modified_by,
        yard_modified_dt = s.yard_modified_dt,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_yard s
    WHERE t.yard_id = s.yard_id
    AND t.yard_loc_code = s.yard_loc_code
    AND t.yard_ou = s.yard_ou;

    INSERT INTO click.d_yard(yard_key, yard_id, yard_loc_code, yard_ou, yard_desc, yard_type, yard_status, yard_reason, yard_timestamp, yard_created_by, yard_created_dt, yard_modified_by, yard_modified_dt, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.yard_key, s.yard_id, s.yard_loc_code, s.yard_ou, s.yard_desc, s.yard_type, s.yard_status, s.yard_reason, s.yard_timestamp, s.yard_created_by, s.yard_created_dt, s.yard_modified_by, s.yard_modified_dt, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_yard s
    LEFT JOIN click.d_yard t
    ON t.yard_id = s.yard_id
    AND t.yard_loc_code = s.yard_loc_code
    AND t.yard_ou = s.yard_ou
    WHERE t.yard_id IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_yard() OWNER TO proconnect;

--
-- Name: usp_d_zone(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_d_zone()
    LANGUAGE plpgsql
    AS $$

BEGIN
    UPDATE click.d_zone t
    SET
        zone_key = s.zone_key,
        zone_code = s.zone_code,
        zone_ou = s.zone_ou,
        zone_loc_code = s.zone_loc_code,
        zone_description = s.zone_description,
        zone_status = s.zone_status,
        zone_reason = s.zone_reason,
        zone_type = s.zone_type,
        zone_pick_strategy = s.zone_pick_strategy,
        zone_pick_req_confirm = s.zone_pick_req_confirm,
        zone_block_picking = s.zone_block_picking,
        zone_pick_label = s.zone_pick_label,
        zone_pick_per_picklist = s.zone_pick_per_picklist,
        zone_pick_by = s.zone_pick_by,
        zone_pick_sequence = s.zone_pick_sequence,
        zone_put_strategy = s.zone_put_strategy,
        zone_put_req_confirm = s.zone_put_req_confirm,
        zone_add_existing_stk = s.zone_add_existing_stk,
        zone_block_putaway = s.zone_block_putaway,
        zone_capacity_check = s.zone_capacity_check,
        zone_mixed_storage = s.zone_mixed_storage,
        zone_mixed_stor_strategy = s.zone_mixed_stor_strategy,
        zone_timestamp = s.zone_timestamp,
        zone_created_by = s.zone_created_by,
        zone_created_date = s.zone_created_date,
        zone_modified_by = s.zone_modified_by,
        zone_modified_date = s.zone_modified_date,
        zone_step = s.zone_step,
        zone_pick = s.zone_pick,
        zone_matchpallet_qty = s.zone_matchpallet_qty,
        zone_batch_allowed = s.zone_batch_allowed,
        zone_uid_allowed = s.zone_uid_allowed,
        zone_pick_stage = s.zone_pick_stage,
        zone_putaway_stage = s.zone_putaway_stage,
        zone_cap_chk = s.zone_cap_chk,
        zone_packing = s.zone_packing,
        zone_adv_pick_strategy = s.zone_adv_pick_strategy,
        zone_adv_pwy_strategy = s.zone_adv_pwy_strategy,
        pcs_noofmnth = s.pcs_noofmnth,
        etlactiveind = s.etlactiveind,
        etljobname = s.etljobname,
        envsourcecd = s.envsourcecd,
        datasourcecd = s.datasourcecd,
        etlupdatedatetime = NOW()
    FROM dwh.d_zone s
    WHERE t.zone_code = s.zone_code
    AND t.zone_ou = s.zone_ou
    AND t.zone_loc_code = s.zone_loc_code;

    INSERT INTO click.d_zone(zone_key, zone_code, zone_ou, zone_loc_code, zone_description, zone_status, zone_reason, zone_type, zone_pick_strategy, zone_pick_req_confirm, zone_block_picking, zone_pick_label, zone_pick_per_picklist, zone_pick_by, zone_pick_sequence, zone_put_strategy, zone_put_req_confirm, zone_add_existing_stk, zone_block_putaway, zone_capacity_check, zone_mixed_storage, zone_mixed_stor_strategy, zone_timestamp, zone_created_by, zone_created_date, zone_modified_by, zone_modified_date, zone_step, zone_pick, zone_matchpallet_qty, zone_batch_allowed, zone_uid_allowed, zone_pick_stage, zone_putaway_stage, zone_cap_chk, zone_packing, zone_adv_pick_strategy, zone_adv_pwy_strategy, pcs_noofmnth, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime)
    SELECT s.zone_key, s.zone_code, s.zone_ou, s.zone_loc_code, s.zone_description, s.zone_status, s.zone_reason, s.zone_type, s.zone_pick_strategy, s.zone_pick_req_confirm, s.zone_block_picking, s.zone_pick_label, s.zone_pick_per_picklist, s.zone_pick_by, s.zone_pick_sequence, s.zone_put_strategy, s.zone_put_req_confirm, s.zone_add_existing_stk, s.zone_block_putaway, s.zone_capacity_check, s.zone_mixed_storage, s.zone_mixed_stor_strategy, s.zone_timestamp, s.zone_created_by, s.zone_created_date, s.zone_modified_by, s.zone_modified_date, s.zone_step, s.zone_pick, s.zone_matchpallet_qty, s.zone_batch_allowed, s.zone_uid_allowed, s.zone_pick_stage, s.zone_putaway_stage, s.zone_cap_chk, s.zone_packing, s.zone_adv_pick_strategy, s.zone_adv_pwy_strategy, s.pcs_noofmnth, s.etlactiveind, s.etljobname, s.envsourcecd, s.datasourcecd, NOW()
    FROM dwh.d_zone s
    LEFT JOIN click.d_zone t
    ON t.zone_code = s.zone_code
    AND t.zone_ou = s.zone_ou
    AND t.zone_loc_code = s.zone_loc_code
    WHERE t.zone_code IS NULL;
END;
$$;


ALTER PROCEDURE click.usp_d_zone() OWNER TO proconnect;

--
-- Name: usp_datavalidation_scriptgenerator(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_datavalidation_scriptgenerator()
    LANGUAGE plpgsql
    AS $$
	
    declare v_max int;
    v_id integer =1;

begin
    truncate only ods.dwh_Data_Count restart identity;
    select max(Row_id)  into v_max   from ods.DataValidation_ScriptGenerator;
    
    --select  381 into v_max;

    while v_id <= v_max
    loop            
            Insert into ods.dwh_Data_Count(sourcetable,dwhtablename,dimension,Period,datacount)
            select *  from ods.usp_target_count(v_id);
            v_id:=v_id+1;
    end loop;
	 	   
		   
		   
END;
$$;


ALTER PROCEDURE click.usp_datavalidation_scriptgenerator() OWNER TO proconnect;

--
-- Name: usp_dimensions(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_dimensions()
    LANGUAGE plpgsql
    AS $$

BEGIN
    CALL click.usp_d_accountadditionalmaster();
    CALL click.usp_d_address();
    CALL click.usp_d_assetaccountmaster();
    CALL click.usp_d_bankaccountmaster();
    CALL click.usp_d_bankcashaccountmaster();
    CALL click.usp_d_bankrefmaster();
    CALL click.usp_d_bintypelocation();
    CALL click.usp_d_bintypes();
    CALL click.usp_d_bulocationmap();
    CALL click.usp_d_businessunit();
    CALL click.usp_d_company();
    CALL click.usp_d_companycurrencymap();
    CALL click.usp_d_consignee();
    CALL click.usp_d_consignor();
    CALL click.usp_d_currency();
    CALL click.usp_d_customer();
    CALL click.usp_d_customerattributes();
    CALL click.usp_d_customergrouphdr();
    CALL click.usp_d_customerlocation();
    CALL click.usp_d_customerlocationinfo();
    CALL click.usp_d_customerlocdiv();
    CALL click.usp_d_customerouinfo();
    CALL click.usp_d_customerportalusermap();
    CALL click.usp_d_custprospectinfo();
    CALL click.usp_d_date();
    CALL click.usp_d_division();
    CALL click.usp_d_divloclist();
    CALL click.usp_d_employeeheader();
    CALL click.usp_d_employeelicense();
    CALL click.usp_d_employeelocation();
    CALL click.usp_d_employeeskills();
    CALL click.usp_d_employeeunavdate();
    CALL click.usp_d_equipment();
    CALL click.usp_d_equipmentgroup();
    CALL click.usp_d_equipmentgroupdtl();
    CALL click.usp_d_exchangerate();
    CALL click.usp_d_financebook();
    CALL click.usp_d_gateemployeemapping();
    CALL click.usp_d_geocitydetail();
    CALL click.usp_d_geocountrydetail();
    CALL click.usp_d_geopostaldetail();
    CALL click.usp_d_georegion();
    CALL click.usp_d_geostatedetail();
    CALL click.usp_d_geosuburbdetail();
    CALL click.usp_d_geosubzone();
    CALL click.usp_d_geozone();
    CALL click.usp_d_itemgrouptype();
    CALL click.usp_d_itemheader();
    CALL click.usp_d_itemsuppliermap();
    CALL click.usp_d_location();
    CALL click.usp_d_locationgeomap();
    CALL click.usp_d_locationoperationsdetail();
    CALL click.usp_d_locationshiftdetails();
    CALL click.usp_d_locationusermapping();
    CALL click.usp_d_locattribute();
    CALL click.usp_d_operationalaccountdetail();
    CALL click.usp_d_opscomponentlookup();
    CALL click.usp_d_oubumap();
    CALL click.usp_d_oumaster();
    CALL click.usp_d_route();
    CALL click.usp_d_shippingpoint();
    CALL click.usp_d_shippingpointcustmap();
    CALL click.usp_d_skills();
    CALL click.usp_d_stage();
    CALL click.usp_d_tariffservice(); 
    --CALL click.usp_d_tarifftransport(); 
    CALL click.usp_d_tarifftype(); 
    CALL click.usp_d_tarifftypegroup(); 
    CALL click.usp_d_thu(); 
    --CALL click.usp_d_thuitemmap(); 
    --CALL click.usp_d_excessitem(); 
    CALL click.usp_d_tmsparameter();
    CALL click.usp_d_uom();
    CALL click.usp_d_uomconversion();
    CALL click.usp_d_vehicle();
    CALL click.usp_d_vehiclereginfo();
    CALL click.usp_d_vendor();
    CALL click.usp_d_warehouse();
    CALL click.usp_d_wmsgeozonedetail();
    CALL click.usp_d_wmsquickcodes();
    CALL click.usp_d_yard();
    CALL click.usp_d_zone();
END;
$$;


ALTER PROCEDURE click.usp_dimensions() OWNER TO proconnect;

--
-- Name: usp_f_asn(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_asn()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	v_maxdate date;
BEGIN

/*
	SELECT (CASE WHEN MAX(COALESCE(asn_modified_date,asn_created_date)) <> NULL 
					THEN MAX(COALESCE(asn_modified_date,asn_created_date))
				ELSE COALESCE(MAX(COALESCE(asn_modified_date,asn_created_date)),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_asn;

	UPDATE click.f_asn ct
	SET
		  asn_hr_key 				= ah.asn_hr_key
		, asn_dtl_key 				= ad. asn_dtl_key
		, gate_exec_dtl_key			= COALESCE(gd.gate_exec_dtl_key,-1)
		, asn_loc_key 				= ah. asn_loc_key
		, asn_date_key 				= ah. asn_date_key
		, asn_cust_key 				= ah. asn_cust_key
		, asn_dtl_itm_hdr_key 		= ad. asn_dtl_itm_hdr_key
		, gate_exec_dtl_veh_key 	= COALESCE(gd.gate_exec_dtl_veh_key,-1)
		, asn_prefdoc_type 			= ah. asn_prefdoc_type
		, asn_prefdoc_no 			= ah. asn_prefdoc_no
		, asn_prefdoc_date 			= ah. asn_prefdoc_date
		, asn_date 					= ah. asn_date
		, asn_status 				= ah. asn_status
		, asn_operation_status 		= ah. asn_operation_status
		, asn_ib_order 				= ah. asn_ib_order
		, asn_ship_frm 				= ah. asn_ship_frm
		, asn_dlv_date 				= ah. asn_dlv_date
		, asn_sup_asn_no 			= ah. asn_sup_asn_no
		, asn_sup_asn_date 			= ah. asn_sup_asn_date
		, asn_sent_by 				= ah. asn_sent_by
		, asn_ship_date 			= ah. asn_ship_date
		, asn_rem 					= ah. asn_rem
		, asn_shp_ref_typ 			= ah. asn_shp_ref_typ
		, asn_shp_ref_no 			= ah. asn_shp_ref_no
		, asn_shp_ref_date 			= ah. asn_shp_ref_date
		, asn_shp_carrier 			= ah. asn_shp_carrier
		, asn_shp_mode 				= ah. asn_shp_mode
		, asn_shp_rem 				= ah. asn_shp_rem
		, asn_cust_code 			= ah. asn_cust_code
		, asn_type 					= ah. asn_type
		, asn_reason_code 			= ah. asn_reason_code
		, asn_gate_no 				= ah. asn_gate_no
		, gate_actual_date 			= gd. gate_actual_date
		, gate_ser_provider 		= gd. gate_ser_provider
		, gate_veh_type 			= gd. gate_veh_type
		, gate_vehicle_no 			= gd. gate_vehicle_no
		, gate_employee 			= gd. gate_employee
		, gate_created_date 		= gd. gate_created_date
		, asn_line_status 			= ad. asn_line_status
		, asn_itm_code 				= ad. asn_itm_code
		, asn_qty 					= ad. asn_qty
		, asn_rec_qty 				= ad. asn_rec_qty
		, asn_acc_qty 				= ad. asn_acc_qty
		, asn_rej_qty 				= ad. asn_rej_qty
		, asn_order_uom 			= ad. asn_order_uom
		, asn_master_uom_qty 		= ad. asn_master_uom_qty
		, asn_modified_date			= ah.asn_modified_date
		, asn_created_date			= ah.asn_created_date
		, etlupdatedatetime 		= NOW()		
	FROM dwh.f_asnheader ah
	INNER JOIN dwh.f_asndetails ad
		ON  ah.asn_hr_key = ad.asn_hr_key
	LEFT JOIN dwh.f_gateexecdetail gd
		ON  gd.gate_loc_code 			= ah.asn_location 
		AND gd.gate_exec_no 			= ah.asn_gate_no 
		AND gd.gate_exec_ou 			= ah.asn_ou
	WHERE	ah.asn_no 					= ct.asn_no 
		AND ah.asn_ou 					= ct.asn_ou 
		AND ah.asn_location 			= ct.asn_location
		AND ad.asn_lineno				= ct.asn_lineno
		AND COALESCE(ah.asn_modified_date,ah.asn_created_date) > v_maxdate;
	*/	
	
	SELECT (CASE WHEN MAX(etlcreatedatetime) <> NULL 
					THEN MAX(etlcreatedatetime)
				ELSE COALESCE(MAX(etlcreatedatetime),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_asn;
	
	IF v_maxdate = '1900-01-01'
	
	THEN
	
	INSERT INTO click.f_asn
	(
		asn_hr_key				, asn_dtl_key				, gate_exec_dtl_key						, asn_loc_key, 
		asn_itm_itemgroup		, asn_itm_class				, activeindicator,
		asn_date_key			, asn_cust_key				, asn_dtl_itm_hdr_key					, gate_exec_dtl_veh_key, 
		asn_ou					, asn_location				, asn_no								, gate_actual_date, 
		asn_prefdoc_type		, asn_prefdoc_no			, asn_prefdoc_date						, asn_date, 
		asn_status				, asn_operation_status		, asn_ib_order							, asn_ship_frm, 
		asn_dlv_date			, asn_sup_asn_no			, asn_sup_asn_date						, asn_sent_by, 
		asn_ship_date			, asn_rem					, asn_shp_ref_typ						, asn_shp_ref_no, 
		asn_shp_ref_date		, asn_shp_carrier			, asn_shp_mode							, asn_shp_rem, 
		asn_cust_code			, asn_type					, asn_reason_code						, asn_gate_no, 		
		gate_ser_provider		, gate_veh_type				, gate_vehicle_no						, gate_employee, 
		gate_created_date		, asn_line_status			, asn_itm_code 							, asn_qty, 
		asn_rec_qty				, asn_acc_qty				, asn_rej_qty							, asn_order_uom, 
		asn_master_uom_qty		, etlcreatedatetime			, etlupdatedatetime						, asn_lineno,
		asn_created_date		, asn_modified_date			, createdatetime						, updatedatetime
	)
	SELECT
		ah.asn_hr_key			, ad.asn_dtl_key			, COALESCE(gd.gate_exec_dtl_key,-1)		, ah.asn_loc_key,
		ad.asn_itm_itemgroup	, ad.asn_itm_class			,(ah.etlactiveind*ad.etlactiveind),
		ah.asn_date_key			, ah.asn_cust_key			, ad.asn_dtl_itm_hdr_key				, COALESCE(gd.gate_exec_dtl_veh_key,-1), 
		ah.asn_ou				, ah.asn_location			, ah.asn_no								, gd.gate_actual_date,			
		ah.asn_prefdoc_type		, ah.asn_prefdoc_no			, ah.asn_prefdoc_date					, ah.asn_date,
		ah.asn_status			, ah.asn_operation_status	, ah.asn_ib_order						, ah.asn_ship_frm,
		ah.asn_dlv_date			, ah.asn_sup_asn_no			, ah.asn_sup_asn_date					, ah.asn_sent_by,
		ah.asn_ship_date		, ah.asn_rem				, ah.asn_shp_ref_typ					, ah.asn_shp_ref_no,
		ah.asn_shp_ref_date		, ah.asn_shp_carrier		, ah.asn_shp_mode						, ah.asn_shp_rem,
		ah.asn_cust_code		, ah.asn_type				, ah.asn_reason_code					, ah.asn_gate_no,
		gd.gate_ser_provider	, gd.gate_veh_type			, gd.gate_vehicle_no					, gd.gate_employee, 
		gd.gate_created_date	, ad.asn_line_status		, ad.asn_itm_code						, ad.asn_qty, 
		ad.asn_rec_qty			, ad.asn_acc_qty			, ad.asn_rej_qty						, ad.asn_order_uom, 
		ad.asn_master_uom_qty	, ad.etlcreatedatetime		, ad.etlupdatedatetime					, ad.asn_lineno,
		ah.asn_created_date		, ah.asn_modified_date		, NOW()::TIMESTAMP						, NULL
	FROM dwh.f_asnheader ah
	INNER JOIN dwh.f_asndetails ad
		ON  ah.asn_hr_key = ad.asn_hr_key
	LEFT JOIN dwh.f_gateexecdetail gd  
		ON  gd.gate_loc_code 	= ah.asn_location 
		AND gd.gate_exec_no 	= ah.asn_gate_no 
		AND gd.gate_exec_ou 	= ah.asn_ou
	WHERE 	1=1;
	
ELSE

-- 	DELETE FROM click.f_asn
-- 	WHERE etlcreatedatetime::DATE >= v_maxdate;
	
	UPDATE click.f_asn ct
	SET
		  asn_hr_key 				= ah.asn_hr_key
		, asn_dtl_key 				= ad. asn_dtl_key
		, activeindicator			= (ah.etlactiveind*ad.etlactiveind)
		, gate_exec_dtl_key			= COALESCE(gd.gate_exec_dtl_key,-1)
		, asn_loc_key 				= ah. asn_loc_key
		, asn_date_key 				= ah. asn_date_key
		, asn_cust_key 				= ah. asn_cust_key
		, asn_dtl_itm_hdr_key 		= ad. asn_dtl_itm_hdr_key
		, gate_exec_dtl_veh_key 	= COALESCE(gd.gate_exec_dtl_veh_key,-1)
		, asn_prefdoc_type 			= ah. asn_prefdoc_type
		, asn_prefdoc_no 			= ah. asn_prefdoc_no
		, asn_prefdoc_date 			= ah. asn_prefdoc_date
		, asn_date 					= ah. asn_date
		, asn_status 				= ah. asn_status
		, asn_operation_status 		= ah. asn_operation_status
		, asn_ib_order 				= ah. asn_ib_order
		, asn_ship_frm 				= ah. asn_ship_frm
		, asn_dlv_date 				= ah. asn_dlv_date
		, asn_sup_asn_no 			= ah. asn_sup_asn_no
		, asn_sup_asn_date 			= ah. asn_sup_asn_date
		, asn_sent_by 				= ah. asn_sent_by
		, asn_ship_date 			= ah. asn_ship_date
		, asn_rem 					= ah. asn_rem
		, asn_shp_ref_typ 			= ah. asn_shp_ref_typ
		, asn_shp_ref_no 			= ah. asn_shp_ref_no
		, asn_shp_ref_date 			= ah. asn_shp_ref_date
		, asn_shp_carrier 			= ah. asn_shp_carrier
		, asn_shp_mode 				= ah. asn_shp_mode
		, asn_shp_rem 				= ah. asn_shp_rem
		, asn_cust_code 			= ah. asn_cust_code
		, asn_type 					= ah. asn_type
		, asn_reason_code 			= ah. asn_reason_code
		, asn_gate_no 				= ah. asn_gate_no
		, gate_actual_date 			= gd. gate_actual_date
		, gate_ser_provider 		= gd. gate_ser_provider
		, gate_veh_type 			= gd. gate_veh_type
		, gate_vehicle_no 			= gd. gate_vehicle_no
		, gate_employee 			= gd. gate_employee
		, gate_created_date 		= gd. gate_created_date
		, asn_line_status 			= ad. asn_line_status
		, asn_itm_code 				= ad. asn_itm_code
		, asn_qty 					= ad. asn_qty
		, asn_rec_qty 				= ad. asn_rec_qty
		, asn_acc_qty 				= ad. asn_acc_qty
		, asn_rej_qty 				= ad. asn_rej_qty
		, asn_order_uom 			= ad. asn_order_uom
		, asn_master_uom_qty 		= ad. asn_master_uom_qty
		, asn_modified_date			= ah.asn_modified_date
		, asn_created_date			= ah.asn_created_date
		, etlupdatedatetime 		= NOW()		
	FROM dwh.f_asnheader ah
	INNER JOIN dwh.f_asndetails ad
		ON  ah.asn_hr_key = ad.asn_hr_key
	LEFT JOIN dwh.f_gateexecdetail gd
		ON  gd.gate_loc_code 			= ah.asn_location 
		AND gd.gate_exec_no 			= ah.asn_gate_no 
		AND gd.gate_exec_ou 			= ah.asn_ou
	WHERE	ah.asn_no 					= ct.asn_no 
		AND ah.asn_ou 					= ct.asn_ou 
		AND ah.asn_location 			= ct.asn_location
		AND ad.asn_lineno				= ct.asn_lineno
		AND COALESCE(ad.etlupdatedatetime,ad.etlcreatedatetime) >= v_maxdate;
		
	INSERT INTO click.f_asn
	(
		asn_hr_key				, asn_dtl_key				, gate_exec_dtl_key						, asn_loc_key,
		asn_itm_itemgroup		, asn_itm_class				, activeindicator,
		asn_date_key			, asn_cust_key				, asn_dtl_itm_hdr_key					, gate_exec_dtl_veh_key, 
		asn_ou					, asn_location				, asn_no								, gate_actual_date, 
		asn_prefdoc_type		, asn_prefdoc_no			, asn_prefdoc_date						, asn_date, 
		asn_status				, asn_operation_status		, asn_ib_order							, asn_ship_frm, 
		asn_dlv_date			, asn_sup_asn_no			, asn_sup_asn_date						, asn_sent_by, 
		asn_ship_date			, asn_rem					, asn_shp_ref_typ						, asn_shp_ref_no, 
		asn_shp_ref_date		, asn_shp_carrier			, asn_shp_mode							, asn_shp_rem, 
		asn_cust_code			, asn_type					, asn_reason_code						, asn_gate_no, 		
		gate_ser_provider		, gate_veh_type				, gate_vehicle_no						, gate_employee, 
		gate_created_date		, asn_line_status			, asn_itm_code 							, asn_qty, 
		asn_rec_qty				, asn_acc_qty				, asn_rej_qty							, asn_order_uom, 
		asn_master_uom_qty		, etlcreatedatetime			, etlupdatedatetime						, asn_lineno,
		asn_created_date		, asn_modified_date			, createdatetime						, updatedatetime
	)
	SELECT
		ah.asn_hr_key			, ad.asn_dtl_key			, COALESCE(gd.gate_exec_dtl_key,-1)		, ah.asn_loc_key,
		ad.asn_itm_itemgroup	, ad.asn_itm_class			, (ah.etlactiveind*ad.etlactiveind),
		ah.asn_date_key			, ah.asn_cust_key			, ad.asn_dtl_itm_hdr_key				, COALESCE(gd.gate_exec_dtl_veh_key,-1), 
		ah.asn_ou				, ah.asn_location			, ah.asn_no								, gd.gate_actual_date,			
		ah.asn_prefdoc_type		, ah.asn_prefdoc_no			, ah.asn_prefdoc_date					, ah.asn_date,
		ah.asn_status			, ah.asn_operation_status	, ah.asn_ib_order						, ah.asn_ship_frm,
		ah.asn_dlv_date			, ah.asn_sup_asn_no			, ah.asn_sup_asn_date					, ah.asn_sent_by,
		ah.asn_ship_date		, ah.asn_rem				, ah.asn_shp_ref_typ					, ah.asn_shp_ref_no,
		ah.asn_shp_ref_date		, ah.asn_shp_carrier		, ah.asn_shp_mode						, ah.asn_shp_rem,
		ah.asn_cust_code		, ah.asn_type				, ah.asn_reason_code					, ah.asn_gate_no,
		gd.gate_ser_provider	, gd.gate_veh_type			, gd.gate_vehicle_no					, gd.gate_employee, 
		gd.gate_created_date	, ad.asn_line_status		, ad.asn_itm_code						, ad.asn_qty, 
		ad.asn_rec_qty			, ad.asn_acc_qty			, ad.asn_rej_qty						, ad.asn_order_uom, 
		ad.asn_master_uom_qty	, ad.etlcreatedatetime		, ad.etlupdatedatetime					, ad.asn_lineno,
		ah.asn_created_date		, ah.asn_modified_date		, NOW()::TIMESTAMP						, NULL
	FROM dwh.f_asnheader ah
	INNER JOIN dwh.f_asndetails ad
		ON  ah.asn_hr_key = ad.asn_hr_key
	LEFT JOIN dwh.f_gateexecdetail gd
		ON  gd.gate_loc_code 	= ah.asn_location 
		AND gd.gate_exec_no 	= ah.asn_gate_no 
		AND gd.gate_exec_ou 	= ah.asn_ou
	WHERE 	COALESCE(ad.etlupdatedatetime,ad.etlcreatedatetime) >= v_maxdate;
	
END IF;
		
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_asn','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

  
END;
$$;


ALTER PROCEDURE click.usp_f_asn() OWNER TO proconnect;

--
-- Name: usp_f_asn_bkp(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_asn_bkp()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	v_maxdate date;
BEGIN

/*
	SELECT (CASE WHEN MAX(COALESCE(asn_modified_date,asn_created_date)) <> NULL 
					THEN MAX(COALESCE(asn_modified_date,asn_created_date))
				ELSE COALESCE(MAX(COALESCE(asn_modified_date,asn_created_date)),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_asn;

	UPDATE click.f_asn ct
	SET
		  asn_hr_key 				= ah.asn_hr_key
		, asn_dtl_key 				= ad. asn_dtl_key
		, gate_exec_dtl_key			= COALESCE(gd.gate_exec_dtl_key,-1)
		, asn_loc_key 				= ah. asn_loc_key
		, asn_date_key 				= ah. asn_date_key
		, asn_cust_key 				= ah. asn_cust_key
		, asn_dtl_itm_hdr_key 		= ad. asn_dtl_itm_hdr_key
		, gate_exec_dtl_veh_key 	= COALESCE(gd.gate_exec_dtl_veh_key,-1)
		, asn_prefdoc_type 			= ah. asn_prefdoc_type
		, asn_prefdoc_no 			= ah. asn_prefdoc_no
		, asn_prefdoc_date 			= ah. asn_prefdoc_date
		, asn_date 					= ah. asn_date
		, asn_status 				= ah. asn_status
		, asn_operation_status 		= ah. asn_operation_status
		, asn_ib_order 				= ah. asn_ib_order
		, asn_ship_frm 				= ah. asn_ship_frm
		, asn_dlv_date 				= ah. asn_dlv_date
		, asn_sup_asn_no 			= ah. asn_sup_asn_no
		, asn_sup_asn_date 			= ah. asn_sup_asn_date
		, asn_sent_by 				= ah. asn_sent_by
		, asn_ship_date 			= ah. asn_ship_date
		, asn_rem 					= ah. asn_rem
		, asn_shp_ref_typ 			= ah. asn_shp_ref_typ
		, asn_shp_ref_no 			= ah. asn_shp_ref_no
		, asn_shp_ref_date 			= ah. asn_shp_ref_date
		, asn_shp_carrier 			= ah. asn_shp_carrier
		, asn_shp_mode 				= ah. asn_shp_mode
		, asn_shp_rem 				= ah. asn_shp_rem
		, asn_cust_code 			= ah. asn_cust_code
		, asn_type 					= ah. asn_type
		, asn_reason_code 			= ah. asn_reason_code
		, asn_gate_no 				= ah. asn_gate_no
		, gate_actual_date 			= gd. gate_actual_date
		, gate_ser_provider 		= gd. gate_ser_provider
		, gate_veh_type 			= gd. gate_veh_type
		, gate_vehicle_no 			= gd. gate_vehicle_no
		, gate_employee 			= gd. gate_employee
		, gate_created_date 		= gd. gate_created_date
		, asn_line_status 			= ad. asn_line_status
		, asn_itm_code 				= ad. asn_itm_code
		, asn_qty 					= ad. asn_qty
		, asn_rec_qty 				= ad. asn_rec_qty
		, asn_acc_qty 				= ad. asn_acc_qty
		, asn_rej_qty 				= ad. asn_rej_qty
		, asn_order_uom 			= ad. asn_order_uom
		, asn_master_uom_qty 		= ad. asn_master_uom_qty
		, asn_modified_date			= ah.asn_modified_date
		, asn_created_date			= ah.asn_created_date
		, etlupdatedatetime 		= NOW()		
	FROM dwh.f_asnheader ah
	INNER JOIN dwh.f_asndetails ad
		ON  ah.asn_hr_key = ad.asn_hr_key
	LEFT JOIN dwh.f_gateexecdetail gd
		ON  gd.gate_loc_code 			= ah.asn_location 
		AND gd.gate_exec_no 			= ah.asn_gate_no 
		AND gd.gate_exec_ou 			= ah.asn_ou
	WHERE	ah.asn_no 					= ct.asn_no 
		AND ah.asn_ou 					= ct.asn_ou 
		AND ah.asn_location 			= ct.asn_location
		AND ad.asn_lineno				= ct.asn_lineno
		AND COALESCE(ah.asn_modified_date,ah.asn_created_date) > v_maxdate;
	*/	
	
	SELECT (CASE WHEN MAX(etlcreatedatetime) <> NULL 
					THEN MAX(etlcreatedatetime)
				ELSE COALESCE(MAX(etlcreatedatetime),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_asn;
	
	IF v_maxdate = '1900-01-01'
	
	THEN
	
	INSERT INTO click.f_asn
	(
		asn_hr_key				, asn_dtl_key				, gate_exec_dtl_key						, asn_loc_key, 
		asn_itm_itemgroup		, asn_itm_class				,
		asn_date_key			, asn_cust_key				, asn_dtl_itm_hdr_key					, gate_exec_dtl_veh_key, 
		asn_ou					, asn_location				, asn_no								, gate_actual_date, 
		asn_prefdoc_type		, asn_prefdoc_no			, asn_prefdoc_date						, asn_date, 
		asn_status				, asn_operation_status		, asn_ib_order							, asn_ship_frm, 
		asn_dlv_date			, asn_sup_asn_no			, asn_sup_asn_date						, asn_sent_by, 
		asn_ship_date			, asn_rem					, asn_shp_ref_typ						, asn_shp_ref_no, 
		asn_shp_ref_date		, asn_shp_carrier			, asn_shp_mode							, asn_shp_rem, 
		asn_cust_code			, asn_type					, asn_reason_code						, asn_gate_no, 		
		gate_ser_provider		, gate_veh_type				, gate_vehicle_no						, gate_employee, 
		gate_created_date		, asn_line_status			, asn_itm_code 							, asn_qty, 
		asn_rec_qty				, asn_acc_qty				, asn_rej_qty							, asn_order_uom, 
		asn_master_uom_qty		, etlcreatedatetime			, etlupdatedatetime						, asn_lineno,
		asn_created_date		, asn_modified_date			, createdatetime						, updatedatetime
	)
	SELECT
		ah.asn_hr_key			, ad.asn_dtl_key			, COALESCE(gd.gate_exec_dtl_key,-1)		, ah.asn_loc_key,
		ad.asn_itm_itemgroup	, ad.asn_itm_class			,
		ah.asn_date_key			, ah.asn_cust_key			, ad.asn_dtl_itm_hdr_key				, COALESCE(gd.gate_exec_dtl_veh_key,-1), 
		ah.asn_ou				, ah.asn_location			, ah.asn_no								, gd.gate_actual_date,			
		ah.asn_prefdoc_type		, ah.asn_prefdoc_no			, ah.asn_prefdoc_date					, ah.asn_date,
		ah.asn_status			, ah.asn_operation_status	, ah.asn_ib_order						, ah.asn_ship_frm,
		ah.asn_dlv_date			, ah.asn_sup_asn_no			, ah.asn_sup_asn_date					, ah.asn_sent_by,
		ah.asn_ship_date		, ah.asn_rem				, ah.asn_shp_ref_typ					, ah.asn_shp_ref_no,
		ah.asn_shp_ref_date		, ah.asn_shp_carrier		, ah.asn_shp_mode						, ah.asn_shp_rem,
		ah.asn_cust_code		, ah.asn_type				, ah.asn_reason_code					, ah.asn_gate_no,
		gd.gate_ser_provider	, gd.gate_veh_type			, gd.gate_vehicle_no					, gd.gate_employee, 
		gd.gate_created_date	, ad.asn_line_status		, ad.asn_itm_code						, ad.asn_qty, 
		ad.asn_rec_qty			, ad.asn_acc_qty			, ad.asn_rej_qty						, ad.asn_order_uom, 
		ad.asn_master_uom_qty	, ad.etlcreatedatetime		, ad.etlupdatedatetime					, ad.asn_lineno,
		ah.asn_created_date		, ah.asn_modified_date		, NOW()::TIMESTAMP						, NULL
	FROM dwh.f_asnheader ah
	INNER JOIN dwh.f_asndetails ad
		ON  ah.asn_hr_key = ad.asn_hr_key
	LEFT JOIN dwh.f_gateexecdetail gd  
		ON  gd.gate_loc_code 	= ah.asn_location 
		AND gd.gate_exec_no 	= ah.asn_gate_no 
		AND gd.gate_exec_ou 	= ah.asn_ou
	WHERE 	1=1;
	
ELSE

	DELETE FROM click.f_asn
	WHERE etlcreatedatetime::DATE >= v_maxdate;
	
		
	INSERT INTO click.f_asn
	(
		asn_hr_key				, asn_dtl_key				, gate_exec_dtl_key						, asn_loc_key,
		asn_itm_itemgroup		, asn_itm_class				,
		asn_date_key			, asn_cust_key				, asn_dtl_itm_hdr_key					, gate_exec_dtl_veh_key, 
		asn_ou					, asn_location				, asn_no								, gate_actual_date, 
		asn_prefdoc_type		, asn_prefdoc_no			, asn_prefdoc_date						, asn_date, 
		asn_status				, asn_operation_status		, asn_ib_order							, asn_ship_frm, 
		asn_dlv_date			, asn_sup_asn_no			, asn_sup_asn_date						, asn_sent_by, 
		asn_ship_date			, asn_rem					, asn_shp_ref_typ						, asn_shp_ref_no, 
		asn_shp_ref_date		, asn_shp_carrier			, asn_shp_mode							, asn_shp_rem, 
		asn_cust_code			, asn_type					, asn_reason_code						, asn_gate_no, 		
		gate_ser_provider		, gate_veh_type				, gate_vehicle_no						, gate_employee, 
		gate_created_date		, asn_line_status			, asn_itm_code 							, asn_qty, 
		asn_rec_qty				, asn_acc_qty				, asn_rej_qty							, asn_order_uom, 
		asn_master_uom_qty		, etlcreatedatetime			, etlupdatedatetime						, asn_lineno,
		asn_created_date		, asn_modified_date			, createdatetime						, updatedatetime
	)
	SELECT
		ah.asn_hr_key			, ad.asn_dtl_key			, COALESCE(gd.gate_exec_dtl_key,-1)		, ah.asn_loc_key,
		ad.asn_itm_itemgroup	, ad.asn_itm_class			,
		ah.asn_date_key			, ah.asn_cust_key			, ad.asn_dtl_itm_hdr_key				, COALESCE(gd.gate_exec_dtl_veh_key,-1), 
		ah.asn_ou				, ah.asn_location			, ah.asn_no								, gd.gate_actual_date,			
		ah.asn_prefdoc_type		, ah.asn_prefdoc_no			, ah.asn_prefdoc_date					, ah.asn_date,
		ah.asn_status			, ah.asn_operation_status	, ah.asn_ib_order						, ah.asn_ship_frm,
		ah.asn_dlv_date			, ah.asn_sup_asn_no			, ah.asn_sup_asn_date					, ah.asn_sent_by,
		ah.asn_ship_date		, ah.asn_rem				, ah.asn_shp_ref_typ					, ah.asn_shp_ref_no,
		ah.asn_shp_ref_date		, ah.asn_shp_carrier		, ah.asn_shp_mode						, ah.asn_shp_rem,
		ah.asn_cust_code		, ah.asn_type				, ah.asn_reason_code					, ah.asn_gate_no,
		gd.gate_ser_provider	, gd.gate_veh_type			, gd.gate_vehicle_no					, gd.gate_employee, 
		gd.gate_created_date	, ad.asn_line_status		, ad.asn_itm_code						, ad.asn_qty, 
		ad.asn_rec_qty			, ad.asn_acc_qty			, ad.asn_rej_qty						, ad.asn_order_uom, 
		ad.asn_master_uom_qty	, ad.etlcreatedatetime		, ad.etlupdatedatetime					, ad.asn_lineno,
		ah.asn_created_date		, ah.asn_modified_date		, NOW()::TIMESTAMP						, NULL
	FROM dwh.f_asnheader ah
	INNER JOIN dwh.f_asndetails ad
		ON  ah.asn_hr_key = ad.asn_hr_key
	LEFT JOIN dwh.f_gateexecdetail gd
		ON  gd.gate_loc_code 	= ah.asn_location 
		AND gd.gate_exec_no 	= ah.asn_gate_no 
		AND gd.gate_exec_ou 	= ah.asn_ou
	WHERE 	ad.etlcreatedatetime::DATE >= v_maxdate;
	
END IF;
		
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_asn','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

  
END;
$$;


ALTER PROCEDURE click.usp_f_asn_bkp() OWNER TO proconnect;

--
-- Name: usp_f_bin_utilization(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_bin_utilization()
    LANGUAGE plpgsql
    AS $$

BEGIN
 
 


INSERT INTO click.f_bin_utilization
(
    ou,	                location,	        customer_code,	       zone,	               bin_id,	
    bin_type,	        bin_volume,	        bin_volume_uom,	       bin_area,	           stock_date,
    item_code,	        bin_on_hand_qty,	item_volume,	       item_volume_uom,	       item_area,
    utilized_volume_pct,utilized_area_pct
)
select 
    a.bin_ou,           a.bin_loc_code,     b.stock_customer,      a.bin_zone,              a.bin_code,
    a.bin_type,         d.bin_typ_volume,   d.bin_typ_vol_uom,
    (d.bin_typ_width)*(d.bin_typ_height) as Bin_Area,              b.stock_date,            b.stock_item,
    b.stock_bin_qty,    (c.itm_volume)*(b.stock_bin_qty) as Item_Volume,                    c.itm_volume_uom ,
    ((c.itm_length)*(c.itm_breadth))*(b.stock_bin_qty) as Item_Area,
    ((((c.itm_volume)*(b.stock_bin_qty))/d.bin_typ_volume)*100) as Utilized_Volume,
    (((c.itm_length)*(c.itm_breadth))/((d.bin_typ_width)*(d.bin_typ_height))*100) as Utilized_Area
from dwh.f_bindetails a
join dwh.f_stockbinhistorydetail b
on  a.bin_dtl_key   = b.bin_dtl_key
join dwh.d_itemheader c
on  b.stock_item_key= c.itm_hdr_key
join dwh.d_bintypes d 
on  a.bin_typ_key  = d.bin_typ_key;

END;
$$;


ALTER PROCEDURE click.usp_f_bin_utilization() OWNER TO proconnect;

--
-- Name: usp_f_binmaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_binmaster()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	
	BEGIN
	
-- 		update click.f_binmaster bm
-- 		set
-- 			  OU						= bt.bin_typ_ou			
-- 			, Division					= bt.bin_typ_div_code			
-- 			, bin_location				= bt.bin_typ_loc_code		
-- 			, Bin_type					= bt.bin_typ_code				
-- 			, Bin_count					= count(bt.bin_typ_code)	
-- 			, Bin_length				= MAX(bt.bin_typ_height)		
-- 			, Bin_breadth				= MAX(bt.bin_typ_width)		
-- 			, Bin_height				= MAX(bt.bin_typ_depth)			
-- 			, bin_typ_dim_uom			= MAX(bt.bin_typ_dim_uom)	
-- 			, Actual_bin_volume			= MAX(bt.bin_typ_vol_actual)	
-- 			, Calculated_bin_volume		= MAX(bt.bin_typ_vol_calc)	
-- 			, Volume_uom				= MAX(bt.bin_typ_vol_uom)	
-- 		FROM 	dwh.d_bintypes bt
-- 		INNER JOIN dwh.f_bindetails bd
-- 			ON	bt.bin_typ_key = bd.bin_typ_key;

		TRUNCATE TABLE click.f_binmaster
		RESTART IDENTITY;

		INSERT INTO click.f_binmaster
			(
			bin_div_key			, bin_typ_key			, bin_dtl_key			, bin_loc_key	,
			OU					, Division				, bin_location			, Bin_type		,
			Bin_count			, Bin_length			, Bin_breadth			, Bin_height	,
			bin_typ_dim_uom		, Actual_bin_volume		, Calculated_bin_volume	,
			Volume_uom			, createddate
			)

		SELECT
			bt.bin_div_key		, bt.bin_typ_key		, bd.bin_dtl_key		, bd.bin_loc_key	,
			bt.bin_typ_ou		, bt.bin_typ_div_code	, bt.bin_typ_loc_code	, bt.bin_typ_code	,		
			count(bd.bin_code)	, bt.bin_typ_height		, bt.bin_typ_width		, bt.bin_typ_depth	,		
			bt.bin_typ_dim_uom	, bt.bin_typ_vol_actual	, bt.bin_typ_vol_calc	,
			bt.bin_typ_vol_uom	, NOW()::TIMESTAMP
			
		FROM dwh.d_bintypes bt
		INNER JOIN dwh.f_bindetails bd
		ON	bt.bin_typ_key = bd.bin_typ_key
		WHERE 1=1
		GROUP BY 
			bt.bin_div_key		, bt.bin_typ_key		, bd.bin_dtl_key		, bd.bin_loc_key	,
			bt.bin_typ_ou		, bt.bin_typ_div_code	, bt.bin_typ_loc_code	, bt.bin_typ_code	,
			bt.bin_typ_height	, bt.bin_typ_width		, bt.bin_typ_depth		,		
			bt.bin_typ_dim_uom	, bt.bin_typ_vol_actual	, bt.bin_typ_vol_calc	,
			bt.bin_typ_vol_uom	;
	
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_binmaster','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

	END;
	
$$;


ALTER PROCEDURE click.usp_f_binmaster() OWNER TO proconnect;

--
-- Name: usp_f_grn(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_grn()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	p_depsource VARCHAR(100);
	v_maxdate date;
BEGIN

		SELECT depsource
		into p_depsource
		from ods.dwhtoclickcontroldtl
		where objectname = 'usp_f_grn'; 

	IF EXISTS 
		 (
			 select 1 from ods.dwhtoclickcontroldtl
			 where objectname = p_depsource
			 and status = 'completed'
			 and CAST(COALESCE(loadenddatetime,loadstartdatetime) AS DATE) >= NOW()::date
		 )
	THEN
/*
	SELECT (CASE WHEN MAX(COALESCE(gr_modified_date,gr_created_date)) <> NULL 
					THEN MAX(COALESCE(gr_modified_date,gr_created_date))
				ELSE COALESCE(MAX(COALESCE(gr_modified_date,gr_created_date)),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_grn;	

	UPDATE click.f_grn ct
	SET
		  gr_pln_key 				= COALESCE(gd.gr_pln_key,-1)
		, gr_dtl_key 				= COALESCE(rd.gr_dtl_key,-1)
		, gr_itm_dtl_key 			= COALESCE(rid.gr_itm_dtl_key,-1)
		, asn_key 					= COALESCE(fa.asn_key,-1)
		, gr_loc_key 				= COALESCE(gd.gr_loc_key,-1)
		, gr_date_key 				= COALESCE(gd.gr_date_key,-1)
		, gr_emp_hdr_key 			= COALESCE(gd.gr_emp_key,-1)
		, gr_itm_dtl_itm_hdr_key 	= COALESCE(rid.gr_itm_dtl_itm_hdr_key,-1)
		, gr_itm_dtl_uom_key 		= COALESCE(rid.gr_itm_dtl_uom_key,-1)
		, gr_itm_dtl_stg_mas_key 	= COALESCE(rid.gr_itm_dtl_stg_mas_key,-1)
		, gr_pln_date 				= gd.gr_pln_date
		, gr_pln_status 			= gd.gr_pln_status
		, gr_po_no 					= gd.gr_po_no
		, gr_po_date 				= gd.gr_po_date
		, gr_asn_no 				= gd.gr_asn_no
		, gr_asn_date 				= gd.gr_asn_date
		, gr_employee 				= gd.gr_employee
		, gr_staging_id 			= gd.gr_staging_id
		, gr_ref_type 				= gd.gr_ref_type
		, gr_item 					= rid.gr_item
		, gr_item_qty 				= rid.gr_item_qty
		, gr_lot_no 				= rid.gr_lot_no
		, gr_acpt_qty 				= rid.gr_acpt_qty
		, gr_rej_qty 				= rid.gr_rej_qty
		, gr_storage_unit 			= rid.gr_storage_unit
		, gr_mas_uom 				= rid.gr_mas_uom
		, gr_su_qty 				= rid.gr_su_qty
		, gr_execution_date 		= rid.gr_execution_date
		, gr_reasoncode 			= rid.gr_reasoncode
		, gr_cross_dock 			= rid.gr_cross_dock
		, gr_stock_status 			= rid.gr_stock_status
		, gr_exec_no 				= rd.gr_exec_no
		, gr_no 					= rd.gr_no
		, gr_emp 					= rd.gr_emp
		, gr_start_date	 			= rd.gr_start_date
		, gr_end_date 				= rd.gr_end_date
		, gr_exec_status 			= rd.gr_exec_status
		, gr_created_by 			= rd.gr_created_by
		, gr_exec_date 				= rd.gr_exec_date
		, gr_gen_from 				= rd.gr_gen_from
		, gr_created_date			= gd.gr_created_date
		, gr_modified_date			= gd.gr_modified_date
		, etlupdatedatetime 		= NOW()
	FROM click.f_asn fa
	LEFT JOIN dwh.f_grplandetail gd		
		ON  fa.asn_no 						= gd.gr_asn_no
		AND fa.asn_location 				= gd.gr_loc_code
		AND fa.asn_ou 						= gd.gr_pln_ou
	LEFT JOIN dwh.f_goodsreceiptdetails rd
		ON  gd.gr_loc_code 					= rd.gr_loc_code
		AND gd.gr_pln_ou 					= rd.gr_pln_ou
		AND gd.gr_pln_no 					= rd.gr_pln_no
	LEFT JOIN dwh.f_goodsreceiptitemdetails rid
		ON  rd.gr_exec_no 					= rid.gr_exec_no
		AND rd.gr_exec_ou 					= rid.gr_exec_ou
		AND rd.gr_loc_code 					= rid.gr_loc_code
		AND rd.gr_po_no 					= rid.gr_po_no
		AND fa.asn_itm_code 				= rid.gr_item
		AND fa.asn_lineno					= rid.gr_exe_asn_line_no			
	WHERE   gd.gr_loc_code 					= ct.gr_loc_code
		AND gd.gr_pln_ou 					= ct.gr_pln_ou
		AND gd.gr_pln_no 					= ct.gr_pln_no
		AND gd.gr_asn_no 					= ct.gr_asn_no
		AND COALESCE(rd.gr_exec_no,'NULL') 	= COALESCE(ct.gr_exec_no,'NULL')
		AND COALESCE(rid.gr_lineno,0)		= COALESCE(ct.gr_lineno,0)
		AND COALESCE(gd.gr_modified_date,gd.gr_created_date) > v_maxdate;
		
		*/
		
-- 	DELETE FROM click.f_grn
-- 	WHERE COALESCE(gr_modified_date,gr_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	SELECT (CASE WHEN MAX(etlcreatedatetime) <> NULL 
					THEN MAX(etlcreatedatetime)
				ELSE COALESCE(MAX(etlcreatedatetime),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_grn;
	
	IF v_maxdate = '1900-01-01'
	THEN
		INSERT INTO click.f_grn
		(
			gr_pln_key								, gr_dtl_key								, gr_itm_dtl_key					, asn_key, 
			gr_loc_key								, gr_date_key								, gr_emp_hdr_key					, gr_itm_dtl_itm_hdr_key, 
			gr_itm_dtl_uom_key						, gr_itm_dtl_stg_mas_key					, gr_loc_code						, gr_pln_no, 
			gr_pln_ou								, gr_pln_date								, gr_pln_status						, gr_po_no, 
			gr_po_date								, gr_asn_no									, gr_asn_date						, gr_employee, 
			gr_staging_id							, gr_ref_type								, gr_item							, gr_item_qty, 
			gr_lot_no								, gr_acpt_qty								, gr_rej_qty						, gr_storage_unit, 
			gr_mas_uom								, gr_su_qty									, gr_itmexecution_date				, gr_reasoncode, 
			gr_cross_dock							, gr_stock_status							, gr_exec_no						, gr_no		, gr_lineno,
			gr_emp									, gr_start_date								, gr_end_date						, gr_exec_status, 
			gr_created_by							, gr_exec_date								, gr_gen_from						, etlcreatedatetime,
			gr_modified_date						, gr_created_date,							activeindicator
		)
		SELECT 
			  COALESCE(gd.gr_pln_key,-1)			, COALESCE(rd.gr_dtl_key,-1)				, COALESCE(rid.gr_itm_dtl_key,-1)	, COALESCE(fa.asn_key,-1)
			, COALESCE(gd.gr_loc_key,-1)			, COALESCE(gd.gr_date_key,-1)				, COALESCE(rd.gr_emp_hdr_key,-1)	, COALESCE(rid.gr_itm_dtl_itm_hdr_key,-1)
			, COALESCE(rid.gr_itm_dtl_uom_key,-1)	, COALESCE(rid.gr_itm_dtl_stg_mas_key,-1)	, gd.gr_loc_code					, gd.gr_pln_no
			, gd.gr_pln_ou							, gd.gr_pln_date							, gd.gr_pln_status					, gd.gr_po_no
			, gd.gr_po_date							, gd.gr_asn_no								, gd.gr_asn_date					, gd.gr_employee
			, gd.gr_staging_id						, gd.gr_ref_type							, rid.gr_item						, rid.gr_item_qty
			, rid.gr_lot_no							, rid.gr_acpt_qty							, rid.gr_rej_qty					, rid.gr_storage_unit
			, rid.gr_mas_uom						, rid.gr_su_qty								, rid.gr_execution_date				, rid.gr_reasoncode
			, rid.gr_cross_dock						, rid.gr_stock_status						, rd.gr_exec_no						, rd.gr_no	,rid.gr_lineno
			, rd.gr_emp								, rd.gr_start_date							, rd.gr_end_date					, rd.gr_exec_status
			, rd.gr_created_by						, rd.gr_exec_date							, rd.gr_gen_from					, NOW()
			, gd.gr_modified_date					, gd.gr_created_date,					(gd.etlactiveind,fa.activeindicator)
		FROM dwh.f_grplandetail gd	 
		INNER JOIN click.f_asn fa
			ON  fa.asn_loc_key					= gd.gr_loc_key
			AND fa.asn_no 						= gd.gr_asn_no  -- need to bring gr_asn_key in f_grplandetail
	-- 		AND fa.asn_location 				= gd.gr_loc_code
	-- 		AND fa.asn_ou 						= gd.gr_pln_ou
		LEFT JOIN dwh.f_goodsreceiptdetails rd
			ON  gd.gr_loc_key					= rd.gr_loc_key
			AND gd.gr_pln_no 					= rd.gr_pln_no  -- need to bring gr_pln_key in f_goodsreceiptdetails
	-- 		AND gd.gr_loc_code 					= rd.gr_loc_code
	-- 		AND gd.gr_pln_ou 					= rd.gr_pln_ou		
		LEFT JOIN dwh.f_goodsreceiptitemdetails rid
			ON	rd.gr_dtl_key					= rid.gr_dtl_key
			AND fa.asn_dtl_itm_hdr_key 			= rid.gr_itm_dtl_itm_hdr_key
			AND rd.gr_po_no 					= rid.gr_po_no		
			AND fa.asn_lineno					= rid.gr_exe_asn_line_no
	-- 		ON  rd.gr_exec_no 					= rid.gr_exec_no
	-- 		AND rd.gr_exec_ou 					= rid.gr_exec_ou
	-- 		AND rd.gr_loc_code 					= rid.gr_loc_code
	WHERE 	1=1;
	
	ELSE	
		
		UPDATE click.f_grn ct
	SET
		  gr_pln_key 				= COALESCE(gd.gr_pln_key,-1)
		, gr_dtl_key 				= COALESCE(rd.gr_dtl_key,-1)
		, gr_itm_dtl_key 			= COALESCE(rid.gr_itm_dtl_key,-1)
		, asn_key 					= COALESCE(fa.asn_key,-1)
		, gr_loc_key 				= COALESCE(gd.gr_loc_key,-1)
		, gr_date_key 				= COALESCE(gd.gr_date_key,-1)
		, gr_emp_hdr_key 			= COALESCE(gd.gr_emp_key,-1)
		, gr_itm_dtl_itm_hdr_key 	= COALESCE(rid.gr_itm_dtl_itm_hdr_key,-1)
		, gr_itm_dtl_uom_key 		= COALESCE(rid.gr_itm_dtl_uom_key,-1)
		, gr_itm_dtl_stg_mas_key 	= COALESCE(rid.gr_itm_dtl_stg_mas_key,-1)
		, gr_pln_date 				= gd.gr_pln_date
		, gr_pln_status 			= gd.gr_pln_status
		, gr_po_no 					= gd.gr_po_no
		, gr_po_date 				= gd.gr_po_date
		, gr_asn_no 				= gd.gr_asn_no
		, gr_asn_date 				= gd.gr_asn_date
		, gr_employee 				= gd.gr_employee
		, gr_staging_id 			= gd.gr_staging_id
		, gr_ref_type 				= gd.gr_ref_type
		, gr_item 					= rid.gr_item
		, gr_item_qty 				= rid.gr_item_qty
		, gr_lot_no 				= rid.gr_lot_no
		, gr_acpt_qty 				= rid.gr_acpt_qty
		, gr_rej_qty 				= rid.gr_rej_qty
		, gr_storage_unit 			= rid.gr_storage_unit
		, gr_mas_uom 				= rid.gr_mas_uom
		, gr_su_qty 				= rid.gr_su_qty
		, gr_execution_date 		= rid.gr_execution_date
		, gr_reasoncode 			= rid.gr_reasoncode
		, gr_cross_dock 			= rid.gr_cross_dock
		, gr_stock_status 			= rid.gr_stock_status
		, gr_exec_no 				= rd.gr_exec_no
		, gr_no 					= rd.gr_no
		, gr_emp 					= rd.gr_emp
		, gr_start_date	 			= rd.gr_start_date
		, gr_end_date 				= rd.gr_end_date
		, gr_exec_status 			= rd.gr_exec_status
		, gr_created_by 			= rd.gr_created_by
		, gr_exec_date 				= rd.gr_exec_date
		, gr_gen_from 				= rd.gr_gen_from
		, gr_created_date			= gd.gr_created_date
		, gr_modified_date			= gd.gr_modified_date
		, activeindicator			= (gd.etlactiveind,fa.activeindicator)
		, etlupdatedatetime 		= NOW()
	FROM click.f_asn fa
	INNER JOIN dwh.f_grplandetail gd		
		ON  fa.asn_no 						= gd.gr_asn_no
		AND fa.asn_location 				= gd.gr_loc_code
		AND fa.asn_ou 						= gd.gr_pln_ou
	LEFT JOIN dwh.f_goodsreceiptdetails rd
		ON  gd.gr_loc_code 					= rd.gr_loc_code
		AND gd.gr_pln_ou 					= rd.gr_pln_ou
		AND gd.gr_pln_no 					= rd.gr_pln_no
	LEFT JOIN dwh.f_goodsreceiptitemdetails rid
		ON  rd.gr_exec_no 					= rid.gr_exec_no
		AND rd.gr_exec_ou 					= rid.gr_exec_ou
		AND rd.gr_loc_code 					= rid.gr_loc_code
		AND rd.gr_po_no 					= rid.gr_po_no
		AND fa.asn_itm_code 				= rid.gr_item
		AND fa.asn_lineno					= rid.gr_exe_asn_line_no			
	WHERE   gd.gr_loc_code 					= ct.gr_loc_code
		AND gd.gr_pln_ou 					= ct.gr_pln_ou
		AND gd.gr_pln_no 					= ct.gr_pln_no
		AND gd.gr_asn_no 					= ct.gr_asn_no
		AND COALESCE(rd.gr_exec_no,'NULL') 	= COALESCE(ct.gr_exec_no,'NULL')
		AND COALESCE(rid.gr_lineno,0)		= COALESCE(ct.gr_lineno,0)
		AND COALESCE(gd.etlupdatedatetime,gd.etlcreatedatetime) >= v_maxdate;
		
		INSERT INTO click.f_grn
		(
			gr_pln_key								, gr_dtl_key								, gr_itm_dtl_key					, asn_key, 
			gr_loc_key								, gr_date_key								, gr_emp_hdr_key					, gr_itm_dtl_itm_hdr_key, 
			gr_itm_dtl_uom_key						, gr_itm_dtl_stg_mas_key					, gr_loc_code						, gr_pln_no, 
			gr_pln_ou								, gr_pln_date								, gr_pln_status						, gr_po_no, 
			gr_po_date								, gr_asn_no									, gr_asn_date						, gr_employee, 
			gr_staging_id							, gr_ref_type								, gr_item							, gr_item_qty, 
			gr_lot_no								, gr_acpt_qty								, gr_rej_qty						, gr_storage_unit, 
			gr_mas_uom								, gr_su_qty									, gr_itmexecution_date				, gr_reasoncode, 
			gr_cross_dock							, gr_stock_status							, gr_exec_no						, gr_no		, gr_lineno,
			gr_emp									, gr_start_date								, gr_end_date						, gr_exec_status, 
			gr_created_by							, gr_exec_date								, gr_gen_from						, etlcreatedatetime,
			gr_modified_date						, gr_created_date,							activeindicator
		)
		SELECT 
			  COALESCE(gd.gr_pln_key,-1)			, COALESCE(rd.gr_dtl_key,-1)				, COALESCE(rid.gr_itm_dtl_key,-1)	, COALESCE(fa.asn_key,-1)
			, COALESCE(gd.gr_loc_key,-1)			, COALESCE(gd.gr_date_key,-1)				, COALESCE(rd.gr_emp_hdr_key,-1)	, COALESCE(rid.gr_itm_dtl_itm_hdr_key,-1)
			, COALESCE(rid.gr_itm_dtl_uom_key,-1)	, COALESCE(rid.gr_itm_dtl_stg_mas_key,-1)	, gd.gr_loc_code					, gd.gr_pln_no
			, gd.gr_pln_ou							, gd.gr_pln_date							, gd.gr_pln_status					, gd.gr_po_no
			, gd.gr_po_date							, gd.gr_asn_no								, gd.gr_asn_date					, gd.gr_employee
			, gd.gr_staging_id						, gd.gr_ref_type							, rid.gr_item						, rid.gr_item_qty
			, rid.gr_lot_no							, rid.gr_acpt_qty							, rid.gr_rej_qty					, rid.gr_storage_unit
			, rid.gr_mas_uom						, rid.gr_su_qty								, rid.gr_execution_date				, rid.gr_reasoncode
			, rid.gr_cross_dock						, rid.gr_stock_status						, rd.gr_exec_no						, rd.gr_no	,rid.gr_lineno
			, rd.gr_emp								, rd.gr_start_date							, rd.gr_end_date					, rd.gr_exec_status
			, rd.gr_created_by						, rd.gr_exec_date							, rd.gr_gen_from					, NOW()
			, gd.gr_modified_date					, gd.gr_created_date,						(gd.etlactiveind,fa.activeindicator)
		FROM dwh.f_grplandetail gd	 
		INNER JOIN click.f_asn fa
			ON  fa.asn_loc_key					= gd.gr_loc_key
			AND fa.asn_no 						= gd.gr_asn_no  -- need to bring gr_asn_key in f_grplandetail
	-- 		AND fa.asn_location 				= gd.gr_loc_code
	-- 		AND fa.asn_ou 						= gd.gr_pln_ou
		LEFT JOIN dwh.f_goodsreceiptdetails rd
			ON  gd.gr_loc_key					= rd.gr_loc_key
			AND gd.gr_pln_no 					= rd.gr_pln_no  -- need to bring gr_pln_key in f_goodsreceiptdetails
	-- 		AND gd.gr_loc_code 					= rd.gr_loc_code
	-- 		AND gd.gr_pln_ou 					= rd.gr_pln_ou		
		LEFT JOIN dwh.f_goodsreceiptitemdetails rid
			ON	rd.gr_dtl_key					= rid.gr_dtl_key
			AND fa.asn_dtl_itm_hdr_key 			= rid.gr_itm_dtl_itm_hdr_key
			AND rd.gr_po_no 					= rid.gr_po_no		
			AND fa.asn_lineno					= rid.gr_exe_asn_line_no
		WHERE COALESCE(gd.etlupdatedatetime,gd.etlcreatedatetime) >= v_maxdate;
	END IF;	
    ELSE	
	p_errorid   := 0;
		IF p_depsource IS NULL
			THEN 
			 	p_errordesc := 'The Dependent source cannot be NULL.';
			ELSE
				p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source.';
			END IF;
		CALL ods.usp_etlerrorinsert('DWH','f_grn','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	END IF;
	
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_grn','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);	
	
END;
$$;


ALTER PROCEDURE click.usp_f_grn() OWNER TO proconnect;

--
-- Name: usp_f_grn_bkp(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_grn_bkp()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	p_depsource VARCHAR(100);
	v_maxdate date;
BEGIN

		SELECT depsource
		into p_depsource
		from ods.dwhtoclickcontroldtl
		where objectname = 'usp_f_grn'; 

	IF EXISTS 
		 (
			 select 1 from ods.dwhtoclickcontroldtl
			 where objectname = p_depsource
			 and status = 'completed'
			 and CAST(COALESCE(loadenddatetime,loadstartdatetime) AS DATE) >= NOW()::date
		 )
	THEN
/*
	SELECT (CASE WHEN MAX(COALESCE(gr_modified_date,gr_created_date)) <> NULL 
					THEN MAX(COALESCE(gr_modified_date,gr_created_date))
				ELSE COALESCE(MAX(COALESCE(gr_modified_date,gr_created_date)),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_grn;	

	UPDATE click.f_grn ct
	SET
		  gr_pln_key 				= COALESCE(gd.gr_pln_key,-1)
		, gr_dtl_key 				= COALESCE(rd.gr_dtl_key,-1)
		, gr_itm_dtl_key 			= COALESCE(rid.gr_itm_dtl_key,-1)
		, asn_key 					= COALESCE(fa.asn_key,-1)
		, gr_loc_key 				= COALESCE(gd.gr_loc_key,-1)
		, gr_date_key 				= COALESCE(gd.gr_date_key,-1)
		, gr_emp_hdr_key 			= COALESCE(gd.gr_emp_key,-1)
		, gr_itm_dtl_itm_hdr_key 	= COALESCE(rid.gr_itm_dtl_itm_hdr_key,-1)
		, gr_itm_dtl_uom_key 		= COALESCE(rid.gr_itm_dtl_uom_key,-1)
		, gr_itm_dtl_stg_mas_key 	= COALESCE(rid.gr_itm_dtl_stg_mas_key,-1)
		, gr_pln_date 				= gd.gr_pln_date
		, gr_pln_status 			= gd.gr_pln_status
		, gr_po_no 					= gd.gr_po_no
		, gr_po_date 				= gd.gr_po_date
		, gr_asn_no 				= gd.gr_asn_no
		, gr_asn_date 				= gd.gr_asn_date
		, gr_employee 				= gd.gr_employee
		, gr_staging_id 			= gd.gr_staging_id
		, gr_ref_type 				= gd.gr_ref_type
		, gr_item 					= rid.gr_item
		, gr_item_qty 				= rid.gr_item_qty
		, gr_lot_no 				= rid.gr_lot_no
		, gr_acpt_qty 				= rid.gr_acpt_qty
		, gr_rej_qty 				= rid.gr_rej_qty
		, gr_storage_unit 			= rid.gr_storage_unit
		, gr_mas_uom 				= rid.gr_mas_uom
		, gr_su_qty 				= rid.gr_su_qty
		, gr_execution_date 		= rid.gr_execution_date
		, gr_reasoncode 			= rid.gr_reasoncode
		, gr_cross_dock 			= rid.gr_cross_dock
		, gr_stock_status 			= rid.gr_stock_status
		, gr_exec_no 				= rd.gr_exec_no
		, gr_no 					= rd.gr_no
		, gr_emp 					= rd.gr_emp
		, gr_start_date	 			= rd.gr_start_date
		, gr_end_date 				= rd.gr_end_date
		, gr_exec_status 			= rd.gr_exec_status
		, gr_created_by 			= rd.gr_created_by
		, gr_exec_date 				= rd.gr_exec_date
		, gr_gen_from 				= rd.gr_gen_from
		, gr_created_date			= gd.gr_created_date
		, gr_modified_date			= gd.gr_modified_date
		, etlupdatedatetime 		= NOW()
	FROM click.f_asn fa
	LEFT JOIN dwh.f_grplandetail gd		
		ON  fa.asn_no 						= gd.gr_asn_no
		AND fa.asn_location 				= gd.gr_loc_code
		AND fa.asn_ou 						= gd.gr_pln_ou
	LEFT JOIN dwh.f_goodsreceiptdetails rd
		ON  gd.gr_loc_code 					= rd.gr_loc_code
		AND gd.gr_pln_ou 					= rd.gr_pln_ou
		AND gd.gr_pln_no 					= rd.gr_pln_no
	LEFT JOIN dwh.f_goodsreceiptitemdetails rid
		ON  rd.gr_exec_no 					= rid.gr_exec_no
		AND rd.gr_exec_ou 					= rid.gr_exec_ou
		AND rd.gr_loc_code 					= rid.gr_loc_code
		AND rd.gr_po_no 					= rid.gr_po_no
		AND fa.asn_itm_code 				= rid.gr_item
		AND fa.asn_lineno					= rid.gr_exe_asn_line_no			
	WHERE   gd.gr_loc_code 					= ct.gr_loc_code
		AND gd.gr_pln_ou 					= ct.gr_pln_ou
		AND gd.gr_pln_no 					= ct.gr_pln_no
		AND gd.gr_asn_no 					= ct.gr_asn_no
		AND COALESCE(rd.gr_exec_no,'NULL') 	= COALESCE(ct.gr_exec_no,'NULL')
		AND COALESCE(rid.gr_lineno,0)		= COALESCE(ct.gr_lineno,0)
		AND COALESCE(gd.gr_modified_date,gd.gr_created_date) > v_maxdate;
		
		*/
		
	DELETE FROM click.f_grn
	WHERE COALESCE(gr_modified_date,gr_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

	INSERT INTO click.f_grn
	(
		gr_pln_key								, gr_dtl_key								, gr_itm_dtl_key					, asn_key, 
		gr_loc_key								, gr_date_key								, gr_emp_hdr_key					, gr_itm_dtl_itm_hdr_key, 
		gr_itm_dtl_uom_key						, gr_itm_dtl_stg_mas_key					, gr_loc_code						, gr_pln_no, 
		gr_pln_ou								, gr_pln_date								, gr_pln_status						, gr_po_no, 
		gr_po_date								, gr_asn_no									, gr_asn_date						, gr_employee, 
		gr_staging_id							, gr_ref_type								, gr_item							, gr_item_qty, 
		gr_lot_no								, gr_acpt_qty								, gr_rej_qty						, gr_storage_unit, 
		gr_mas_uom								, gr_su_qty									, gr_itmexecution_date				, gr_reasoncode, 
		gr_cross_dock							, gr_stock_status							, gr_exec_no						, gr_no		, gr_lineno,
		gr_emp									, gr_start_date								, gr_end_date						, gr_exec_status, 
		gr_created_by							, gr_exec_date								, gr_gen_from						, etlcreatedatetime,
		gr_modified_date						, gr_created_date
	)
	SELECT 
		  COALESCE(gd.gr_pln_key,-1)			, COALESCE(rd.gr_dtl_key,-1)				, COALESCE(rid.gr_itm_dtl_key,-1)	, COALESCE(fa.asn_key,-1)
		, COALESCE(gd.gr_loc_key,-1)			, COALESCE(gd.gr_date_key,-1)				, COALESCE(rd.gr_emp_hdr_key,-1)	, COALESCE(rid.gr_itm_dtl_itm_hdr_key,-1)
		, COALESCE(rid.gr_itm_dtl_uom_key,-1)	, COALESCE(rid.gr_itm_dtl_stg_mas_key,-1)	, gd.gr_loc_code					, gd.gr_pln_no
		, gd.gr_pln_ou							, gd.gr_pln_date							, gd.gr_pln_status					, gd.gr_po_no
		, gd.gr_po_date							, gd.gr_asn_no								, gd.gr_asn_date					, gd.gr_employee
		, gd.gr_staging_id						, gd.gr_ref_type							, rid.gr_item						, rid.gr_item_qty
		, rid.gr_lot_no							, rid.gr_acpt_qty							, rid.gr_rej_qty					, rid.gr_storage_unit
		, rid.gr_mas_uom						, rid.gr_su_qty								, rid.gr_execution_date				, rid.gr_reasoncode
		, rid.gr_cross_dock						, rid.gr_stock_status						, rd.gr_exec_no						, rd.gr_no	,rid.gr_lineno
		, rd.gr_emp								, rd.gr_start_date							, rd.gr_end_date					, rd.gr_exec_status
		, rd.gr_created_by						, rd.gr_exec_date							, rd.gr_gen_from					, NOW()
		, gd.gr_modified_date					, gd.gr_created_date
	FROM dwh.f_grplandetail gd	 
	INNER JOIN click.f_asn fa
		ON  fa.asn_loc_key					= gd.gr_loc_key
		AND fa.asn_no 						= gd.gr_asn_no  -- need to bring gr_asn_key in f_grplandetail
-- 		AND fa.asn_location 				= gd.gr_loc_code
-- 		AND fa.asn_ou 						= gd.gr_pln_ou
	LEFT JOIN dwh.f_goodsreceiptdetails rd
		ON  gd.gr_loc_key					= rd.gr_loc_key
		AND gd.gr_pln_no 					= rd.gr_pln_no  -- need to bring gr_pln_key in f_goodsreceiptdetails
-- 		AND gd.gr_loc_code 					= rd.gr_loc_code
-- 		AND gd.gr_pln_ou 					= rd.gr_pln_ou		
	LEFT JOIN dwh.f_goodsreceiptitemdetails rid
		ON	rd.gr_dtl_key					= rid.gr_dtl_key
		AND fa.asn_dtl_itm_hdr_key 			= rid.gr_itm_dtl_itm_hdr_key
		AND rd.gr_po_no 					= rid.gr_po_no		
		AND fa.asn_lineno					= rid.gr_exe_asn_line_no
-- 		ON  rd.gr_exec_no 					= rid.gr_exec_no
-- 		AND rd.gr_exec_ou 					= rid.gr_exec_ou
-- 		AND rd.gr_loc_code 					= rid.gr_loc_code
		
	WHERE COALESCE(gd.gr_modified_date,gd.gr_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

    ELSE	
	p_errorid   := 0;
		IF p_depsource IS NULL
			THEN 
			 	p_errordesc := 'The Dependent source cannot be NULL.';
			ELSE
				p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source.';
			END IF;
		CALL ods.usp_etlerrorinsert('DWH','f_grn','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	END IF;
	
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_grn','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);	
	
END;
$$;


ALTER PROCEDURE click.usp_f_grn_bkp() OWNER TO proconnect;

--
-- Name: usp_f_pnd_inb_actvity(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_pnd_inb_actvity()
    LANGUAGE plpgsql
    AS $$

DECLARE 
   p_errorid integer;
	p_errordesc character varying;
BEGIN
	
-- 	update click.f_pnd_inb_actvity t
-- 	set
-- 		ou				=a.inb_ou,
-- 		location_code	=a.inb_loc_code,
-- 		Location_Name	=b.loc_desc,
-- 		Customer_Code	=a.inb_custcode,
-- 		order_no		=a.inb_orderno,
-- 		order_date		=a.inb_orderdate,
-- 		asn_no			=c.asn_no,
-- 		asn_date		=c.asn_date,
-- 		order_type		=c.asn_prefdoc_type,
-- 		asn_type		=c.asn_type,
-- 		invoice_no		=c.asn_prefdoc_no,
-- 		invoice_date	=c.asn_prefdoc_date,
-- 		asn_status      =COALESCE(c.asn_status,'pend'),
-- 		grn_status		=COALESCE(d.gr_exec_status,'pend'),
-- 		gr_exec_end_date=d.gr_end_date,
-- 		putaway_status	=COALESCE(e.pway_exec_status,'pend'),
-- 		modified_date	=now()
-- 		from dwh.f_inboundheader a
-- 		inner join dwh.d_location b
-- 		on b.loc_key=a.inb_loc_key
-- 		left join click.f_asn c
-- 		on c.asn_ib_order=a.inb_orderno
-- 		and c.asn_loc_key=a.inb_loc_key
-- 		left join click.f_grn d
-- 		on d.gr_po_no=c.asn_prefdoc_no
-- 		and d.gr_loc_key=c.asn_loc_key
-- 		left join click.f_putaway e
-- 		on e.pway_po_no=d.gr_po_no
-- 		and e.pway_pln_dtl_loc_key=d.gr_loc_key
-- 		where e.pway_exec_status not in('CMPLTD','SHTCLS');
		
		delete from click.f_pnd_inb_actvity 
		where order_date::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
		
		INSERT INTO click.f_pnd_inb_actvity
		(
			loc_key,               cust_key,					OU, 		    location_code, 	    Location_Name, 
			Customer_Code, 			order_no,                 order_date,	     asn_no,			 asn_date,		
			order_type,				asn_type,                 invoice_no,	     invoice_date,		  asn_status,	
			grn_status,				gr_exec_end_date,         putaway_status,     created_date
		)
		
		select 
			a.inb_loc_key,        a.asn_cust_key,            a.inb_ou,		     a.inb_loc_code,  	   b.loc_desc,	
			a.inb_custcode,       a.inb_orderno,             a.inb_orderdate,	 c.asn_no,			   c.asn_date,		
			c.asn_prefdoc_type,	  c.asn_type,                c.asn_prefdoc_no,   c.asn_prefdoc_date,   COALESCE(c.asn_status,'pend') as asn_status,
			COALESCE(d.gr_exec_status,'pend') as GRN_STATUS, d.gr_end_date,   COALESCE(e.pway_exec_status,'pend') AS PUTAWAY_STATUS, now()
		
		from dwh.f_inboundheader a
		inner join dwh.d_location b
		on b.loc_key=a.inb_loc_key
		left join click.f_asn c
		on c.asn_ib_order=a.inb_orderno
		and c.asn_loc_key=a.inb_loc_key
		left join click.f_grn d
		on d.gr_po_no=c.asn_prefdoc_no
		and d.gr_loc_key=c.asn_loc_key
		left join click.f_putaway e
		on e.pway_po_no=d.gr_po_no
		and e.pway_pln_dtl_loc_key=d.gr_loc_key
		where e.pway_exec_status not in('CMPLTD','SHTCLS');
		
			EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_pnd_inb_actvity','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

		
	
END;
$$;


ALTER PROCEDURE click.usp_f_pnd_inb_actvity() OWNER TO proconnect;

--
-- Name: usp_f_pnd_oub_activity(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_pnd_oub_activity()
    LANGUAGE plpgsql
    AS $$
	DECLARE 
		p_errorid integer;
		p_errordesc character varying;
		v_maxdate date;
	BEGIN

/*	SELECT 
		(
			CASE WHEN MAX(etlcreatedatetime) <> NULL
				 THEN MAX(etlcreatedatetime)
				 ELSE COALESCE(MAX(etlcreatedatetime),'1900-01-01')
			END
		)::DATE
		INTO v_maxdate
		FROM click.f_pnd_oub_activity;
	
	IF v_maxdate = '1900-01-01'
	THEN

		INSERT INTO click.f_pnd_oub_activity
			(
				obh_loc_key		, obh_cust_key		, obd_itm_key		,
				ou				, oub_date			, oub_loc			, customer		,
				order_no		, order_status		, invoice_type		, invoice_no	, 
				service_type	, line_no			, item_code			, item_qty		,
				wave_status		, 
				pick_status		, 
				pack_status		,
				wave_pln_end_date		,
				pick_exec_ml_end_date	,
				etlcreatedatetime		, etlupdatedatetime	, createdate
			)

		SELECT
			OBH.obh_loc_key			, OBH.obh_cust_key		, OBI.obd_itm_key		,
			OBH.oub_ou				, OBH.oub_orderdate		, OBH.oub_loc_code		, OBH.oub_cust_code		,
			OBH.oub_outbound_ord	, OBH.oub_ob_status		, OBH.oub_prim_rf_dc_typ, OBH.oub_prim_rf_dc_no	,
			OBH.oub_shipment_type	, OBI.oub_itm_lineno	, OBI.oub_item_code		, OBI.oub_itm_order_qty	,
			COALESCE(WH.wave_status, 'PENDING')				,
			COALESCE(PH.pick_exec_status, 'PENDING')		,
			COALESCE(PEH.pack_exec_status, 'PENDING')		,
			MAX(WH.wave_pln_end_date)		,
			MAX(PD.pick_exec_ml_end_date)	,
			MAX(OBH.etlcreatedatetime)		, MAX(OBH.etlupdatedatetime)	, NOW()

		FROM dwh.f_outboundheader OBH
		INNER JOIN dwh.f_outbounditemdetail OBI
			ON	OBH.obh_hr_key		= OBI.obh_hr_key
		LEFT JOIN dwh.f_wavedetail WD
			ON  WD.wave_loc_key  	= OBH.obh_loc_key
			AND WD.wave_cust_key 	= OBH.obh_cust_key
			AND  WD.wave_so_no		= OBH.oub_prim_rf_dc_no
		LEFT JOIN dwh.f_waveheader WH
			ON  WD.wave_hdr_key		= WH.wave_hdr_key	
		LEFT JOIN dwh.f_pickingdetail PD
			ON	WD.wave_loc_key		= PD.pick_loc_key
			AND	WD.wave_so_no		= PD.pick_so_no 
		LEFT JOIN dwh.f_pickingheader PH
			ON	PH.pick_hdr_key		= PD.pick_hdr_key
		LEFT JOIN dwh.f_packexecthudetail PETD
			ON	PETD.pack_so_no			= PD.pick_so_no
			AND PETD.pack_so_line_no	= PD.pick_so_line_no
		LEFT JOIN dwh.f_packexecheader PEH
			ON	PETD.pack_exec_hdr_key	= PEH.pack_exe_hdr_key

		WHERE	PEH.pack_exec_status NOT IN ('CMPD', 'STCLS')

		GROUP BY
			OBH.obh_loc_key			, OBH.obh_cust_key		, OBI.obd_itm_key		,
			OBH.oub_ou				, OBH.oub_orderdate		, OBH.oub_loc_code		, OBH.oub_cust_code		,
			OBH.oub_outbound_ord	, OBH.oub_ob_status		, OBH.oub_prim_rf_dc_typ, OBH.oub_prim_rf_dc_no	,
			OBH.oub_shipment_type	, OBI.oub_itm_lineno	, OBI.oub_item_code		, OBI.oub_itm_order_qty	,
			COALESCE(WH.wave_status, 'PENDING')		,
			COALESCE(PH.pick_exec_status, 'PENDING'),
			COALESCE(PEH.pack_exec_status, 'PENDING');

	ELSE

		DELETE FROM click.f_pnd_oub_activity
		WHERE etlcreatedatetime::DATE >= v_maxdate;
*/

		TRUNCATE TABLE click.f_pnd_oub_activity 
		RESTART IDENTITY;
		
		
		INSERT INTO click.f_pnd_oub_activity
			(
				obh_loc_key		, obh_cust_key		, obd_itm_key		,
				ou				, oub_date			, oub_loc			, customer		,
				order_no		, order_status		, invoice_type		, invoice_no	, 
				service_type	, line_no			, item_code			, item_qty		,
				wave_status		, 
				pick_status		, 
				pack_status		,
				wave_pln_end_date		,
				pick_exec_ml_end_date	,
				etlcreatedatetime		, etlupdatedatetime	, createdate
			)
	
		SELECT
			OBH.obh_loc_key			, OBH.obh_cust_key		, OBI.obd_itm_key		,
			OBH.oub_ou				, OBH.oub_orderdate		, OBH.oub_loc_code		, OBH.oub_cust_code		,
			OBH.oub_outbound_ord	, OBH.oub_ob_status		, OBH.oub_prim_rf_dc_typ, OBH.oub_prim_rf_dc_no	,
			OBH.oub_shipment_type	, OBI.oub_itm_lineno	, OBI.oub_item_code		, OBI.oub_itm_order_qty	,
			COALESCE(WH.wave_status, 'PENDING')				,
			COALESCE(PH.pick_exec_status, 'PENDING')		,
			COALESCE(PEH.pack_exec_status, 'PENDING')		,
			MAX(WH.wave_pln_end_date)		,
			MAX(PD.pick_exec_ml_end_date)	,
			MAX(OBH.etlcreatedatetime)		, MAX(OBH.etlupdatedatetime)	, NOW()
			
		FROM dwh.f_outboundheader OBH
		INNER JOIN dwh.f_outbounditemdetail OBI
			ON	OBH.obh_hr_key		= OBI.obh_hr_key
		LEFT JOIN dwh.f_wavedetail WD
			ON  WD.wave_loc_key  	= OBH.obh_loc_key
			AND WD.wave_cust_key 	= OBH.obh_cust_key
			AND  WD.wave_so_no		= OBH.oub_prim_rf_dc_no
		LEFT JOIN dwh.f_waveheader WH
			ON  WD.wave_hdr_key		= WH.wave_hdr_key
		LEFT JOIN dwh.f_pickingdetail PD
			ON	WD.wave_loc_key		= PD.pick_loc_key
			AND	WD.wave_so_no		= PD.pick_so_no
		LEFT JOIN dwh.f_pickingheader PH
			ON	PH.pick_hdr_key		= PD.pick_hdr_key
		LEFT JOIN dwh.f_packexecthudetail PETD
			ON PETD.pack_exec_loc_key	= PD.pick_loc_key
			AND PETD.pack_so_no			= PD.pick_so_no
			AND PETD.pack_so_line_no	= PD.pick_so_line_no
		LEFT JOIN dwh.f_packexecheader PEH
			ON	PETD.pack_exec_hdr_key	= PEH.pack_exe_hdr_key
		WHERE	PEH.pack_exec_status NOT IN ('CMPD', 'STCLS')
-- 			AND	OBH.etlcreatedatetime::DATE >= v_maxdate
			
		GROUP BY
			OBH.obh_loc_key			, OBH.obh_cust_key		, OBI.obd_itm_key		,
			OBH.oub_ou				, OBH.oub_orderdate		, OBH.oub_loc_code		, OBH.oub_cust_code		,
			OBH.oub_outbound_ord	, OBH.oub_ob_status		, OBH.oub_prim_rf_dc_typ, OBH.oub_prim_rf_dc_no	,
			OBH.oub_shipment_type	, OBI.oub_itm_lineno	, OBI.oub_item_code		, OBI.oub_itm_order_qty	,
			COALESCE(WH.wave_status, 'PENDING')		,
			COALESCE(PH.pick_exec_status, 'PENDING'),
			COALESCE(PEH.pack_exec_status, 'PENDING');
	
-- 	END IF;
		
		EXCEPTION WHEN others THEN       

		GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;

		CALL ods.usp_etlerrorinsert('DWH','f_pnd_oub_activity','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
  
	END;
	
$$;


ALTER PROCEDURE click.usp_f_pnd_oub_activity() OWNER TO proconnect;

--
-- Name: usp_f_putaway(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_putaway()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	p_depsource VARCHAR(100);
	v_maxdate date;
BEGIN

		SELECT 	depsource
		INTO 	p_depsource
		FROM 	ods.dwhtoclickcontroldtl
		WHERE 	objectname = 'usp_f_putaway'; 

	IF EXISTS 
		 (
			 SELECT 1 FROM ods.dwhtoclickcontroldtl
			 WHERE	objectname = p_depsource
			 AND	status = 'completed'
			 AND	CAST(COALESCE(loadenddatetime,loadstartdatetime) AS DATE) >= NOW()::DATE
		 )
	THEN

/*
	SELECT (CASE WHEN MAX(COALESCE(modified_date,created_date)) <> NULL 
					THEN MAX(COALESCE(modified_date,created_date))
				ELSE COALESCE(MAX(COALESCE(modified_date,created_date)),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_putaway;
		
	UPDATE click.f_putaway pw
	SET
		 pway_pln_dtl_key 						= COALESCE(pd.pway_pln_dtl_key,-1)
		,pway_pln_itm_dtl_key 					= COALESCE(rd.pway_pln_itm_dtl_key,-1)
		,pway_itm_dtl_key 						= COALESCE(pid.pway_itm_dtl_key,-1)
		,pway_exe_dtl_key 						= COALESCE(ped.pway_exe_dtl_key,-1)
		,grn_key 								= COALESCE(gr.grn_key,-1)
		,pway_pln_dtl_loc_key 					= COALESCE(pd.pway_pln_dtl_loc_key,-1)
		,pway_pln_dtl_date_key 					= COALESCE(pd.pway_pln_dtl_date_key,-1)
		,pway_pln_dtl_stg_mas_key 				= COALESCE(pd.pway_pln_dtl_stg_mas_key,-1)
		,pway_pln_dtl_emp_hdr_key 				= COALESCE(pd.pway_pln_dtl_emp_hdr_key,-1)
		,pway_pln_itm_dtl_itm_hdr_key 			= COALESCE(rd.pway_pln_itm_dtl_itm_hdr_key,-1)
		,pway_pln_itm_dtl_zone_key 				= COALESCE(rd.pway_pln_itm_dtl_zone_key,-1)
		,pway_loc_code 							= pd.pway_loc_code
		,pway_pln_no 							= pd.pway_pln_no
		,pway_pln_ou 							= pd.pway_pln_ou
		,pway_pln_date 							= pd.pway_pln_date
		,pway_pln_status 						= pd.pway_pln_status
		,pway_stag_id 							= pd.pway_stag_id
		,pway_mhe_id 							= pd.pway_mhe_id
		,pway_employee_id 						= pd.pway_employee_id
		,pway_lineno							= rd.pway_lineno
		,pway_po_no 							= rd.pway_po_no
		,pway_item 								= rd.pway_item
		,pway_zone 								= rd.pway_zone
		,pway_allocated_qty 					= rd.pway_allocated_qty
		,pway_allocated_bin 					= rd.pway_allocated_bin
		,pway_gr_no 							= rd.pway_gr_no
		,pway_su_type 							= rd.pway_su_type
		,pway_su 								= rd.pway_su
		,pway_from_staging_id 					= rd.pway_from_staging_id
		,pway_cross_dock 						= rd.pway_cross_dock
		,pway_stock_status 						= rd.pway_stock_status
		,pway_exec_no 							= ped.pway_exec_no
		,pway_exec_ou 							= ped.pway_exec_ou
		,pway_exec_status 						= ped.pway_exec_status
		,pway_exec_start_date 					= ped.pway_exec_start_date
		,pway_exec_end_date 					= ped.pway_exec_end_date
		,pway_created_by 						= ped.pway_created_by
		,pway_created_date 						= ped.pway_created_date
		,pway_gen_from 							= ped.pway_gen_from
		,pway_exec_lineno 						= pid.pway_exec_lineno
		,pway_po_sr_no 							= pid.pway_po_sr_no
		,pway_uid 								= pid.pway_uid
		,pway_rqs_conformation 					= pid.pway_rqs_conformation
		,pway_actual_bin 						= pid.pway_actual_bin
		,pway_actual_bin_qty 					= pid.pway_actual_bin_qty
		,pway_reason		 					= pid.pway_reason
		,created_date							= pd.pway_created_date
		,modified_date							= pd.pway_modified_date
		,etlupdatedatetime 						= NOW()	
	FROM dwh.f_putawayplanitemdetail rd	
	LEFT JOIN click.f_grn gr
		ON  gr.gr_loc_code						= rd.pway_loc_code
		AND gr.gr_pln_ou 						= rd.pway_pln_ou
		AND gr.gr_no							= rd.pway_gr_no
		AND gr.gr_lineno						= rd.pway_gr_lineno
	LEFT JOIN dwh.f_putawayplandetail pd
		ON  pd.pway_pln_no 						= rd.pway_pln_no
		AND pd.pway_loc_code 					= rd.pway_loc_code
		AND pd.pway_pln_ou 						= rd.pway_pln_ou
	LEFT JOIN dwh.F_PutawayItemDetail pid	
		ON  pd.pway_loc_code 					= pid.pway_loc_code
		AND rd.pway_gr_no						= pid.pway_gr_no
		AND pd.pway_pln_ou 						= pid.pway_exec_ou
		AND rd.pway_lineno						= pid.pway_exec_lineno		
	LEFT JOIN dwh.f_putawayexecdetail ped	
		ON  pd.pway_pln_no 						= ped.pway_pln_no
		AND pd.pway_loc_code 					= ped.pway_loc_code
		AND pd.pway_pln_ou 						= ped.pway_pln_ou
		AND ped.pway_exec_no 					= pid.pway_exec_no
	WHERE   pw.pway_loc_code					= pd.pway_loc_code
		AND pw.pway_pln_no						= pd.pway_pln_no
		AND pw.pway_pln_ou						= pd.pway_pln_ou
		AND COALESCE(pw.pway_lineno,0)			= COALESCE(rd.pway_lineno,'0')
		AND COALESCE(pw.pway_po_no,'NULL')		= COALESCE(gr.gr_po_no,'NULL')
		AND COALESCE(pw.pway_item,'NULL')		= COALESCE(rd.pway_item,'NULL')
		AND COALESCE(pw.pway_gr_no,'NULL')		= COALESCE(rd.pway_gr_no,'NULL')
		AND COALESCE(pw.pway_exec_no,'NULL')	= COALESCE(pid.pway_exec_no,'NULL')
		AND COALESCE(pd.pway_modified_date,pd.pway_created_date) > v_maxdate; */
		
-- 	DELETE FROM click.f_putaway
-- 	WHERE COALESCE(modified_date,created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	SELECT (CASE WHEN MAX(etlcreatedatetime) <> NULL 
					THEN MAX(etlcreatedatetime)
				ELSE COALESCE(MAX(etlcreatedatetime),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_putaway;
	
	IF v_maxdate = '1900-01-01'
	THEN		
	INSERT INTO click.f_putaway
	(
		pway_pln_dtl_key							, pway_pln_itm_dtl_key						, pway_itm_dtl_key								, pway_exe_dtl_key, 
		grn_key										, pway_pln_dtl_loc_key							, pway_pln_dtl_date_key, 
		pway_pln_dtl_stg_mas_key					, pway_pln_dtl_emp_hdr_key					, pway_pln_itm_dtl_itm_hdr_key					, pway_pln_itm_dtl_zone_key, 
		pway_loc_code								, pway_pln_no								, pway_pln_ou									, pway_pln_date, 
		pway_pln_status								, pway_stag_id								, pway_mhe_id									, pway_employee_id, 
		pway_lineno									, pway_po_no								, pway_item										, pway_zone, 
		pway_allocated_qty							, pway_allocated_bin						, pway_gr_no									, pway_su_type, 
		pway_su										, pway_from_staging_id						, pway_cross_dock								, pway_stock_status, 
		pway_exec_no								, pway_exec_ou								, pway_exec_status								, pway_exec_start_date, 
		pway_exec_end_date							, pway_created_by							, pway_created_date								, pway_gen_from, 
		pway_exec_lineno							, pway_po_sr_no								, pway_uid										, pway_rqs_conformation, 
		pway_actual_bin								, pway_actual_bin_qty						, pway_reason									, etlcreatedatetime,
		created_date								, modified_date	,					activeindicator						
	)
	SELECT  
		COALESCE(pd.pway_pln_dtl_key,-1)			, COALESCE(rd.pway_pln_itm_dtl_key,-1)		, COALESCE(pid.pway_itm_dtl_key,-1)				, COALESCE(ped.pway_exe_dtl_key,-1), 
		COALESCE(gr.grn_key,-1)						, COALESCE(pd.pway_pln_dtl_loc_key,-1)		, COALESCE(pd.pway_pln_dtl_date_key,-1), 
		COALESCE(pd.pway_pln_dtl_stg_mas_key,-1)	, COALESCE(pd.pway_pln_dtl_emp_hdr_key,-1)	, COALESCE(rd.pway_pln_itm_dtl_itm_hdr_key,-1)	, COALESCE(rd.pway_pln_itm_dtl_zone_key,-1), 
		pd.pway_loc_code							, pd.pway_pln_no							, pd.pway_pln_ou								, pd.pway_pln_date, 
		pd.pway_pln_status							, pd.pway_stag_id							, pd.pway_mhe_id								, pd.pway_employee_id, 
		rd.pway_lineno								, rd.pway_po_no								, rd.pway_item									, rd.pway_zone, 
		rd.pway_allocated_qty						, rd.pway_allocated_bin						, rd.pway_gr_no									, rd.pway_su_type, 
		rd.pway_su									, rd.pway_from_staging_id					, rd.pway_cross_dock							, rd.pway_stock_status, 
		ped.pway_exec_no							, ped.pway_exec_ou							, ped.pway_exec_status							, ped.pway_exec_start_date, 
		ped.pway_exec_end_date						, ped.pway_created_by						, ped.pway_created_date							, ped.pway_gen_from, 
		pid.pway_exec_lineno						, pid.pway_po_sr_no							, pid.pway_uid									, pid.pway_rqs_conformation, 
		pid.pway_actual_bin							, pid.pway_actual_bin_qty					, pid.pway_reason								, NOW(),
		pd.pway_created_date						, pd.pway_modified_date,					(rd.etlactiveind,gr.activeindicator)
	FROM dwh.f_putawayplanitemdetail rd	
	LEFT JOIN click.f_grn gr
		ON  gr.gr_loc_key						= rd.pway_pln_itm_dtl_loc_key
		AND gr.gr_no							= rd.pway_gr_no
		AND gr.gr_lineno						= rd.pway_gr_lineno
		--AND gr.gr_pln_ou 						= rd.pway_pln_ou
		--AND gr.gr_loc_code					= rd.pway_loc_code
	LEFT JOIN dwh.f_putawayplandetail pd
		ON  pd.pway_pln_dtl_key 				= rd.pway_pln_dtl_key
		--AND pd.pway_loc_code					= rd.pway_loc_code
		--AND pd.pway_pln_no 					= rd.pway_pln_no
		--AND pd.pway_pln_ou 					= rd.pway_pln_ou
	LEFT JOIN dwh.f_putawayexecdetail ped
		ON	pd.pway_pln_dtl_key					= ped.pway_pln_dtl_key
-- 		ON  pd.pway_pln_no 						= ped.pway_pln_no
-- 		AND pd.pway_loc_code 					= ped.pway_loc_code
-- 		AND pd.pway_pln_ou 						= ped.pway_pln_ou
	LEFT JOIN dwh.F_PutawayItemDetail pid	
		ON  ped.pway_exe_dtl_key 				= pid.pway_exe_dtl_key
		AND rd.pway_gr_no						= pid.pway_gr_no
		AND rd.pway_lineno						= pid.pway_exec_lineno
		--AND pd.pway_pln_ou 					= pid.pway_exec_ou
	WHERE 1=1;
	ELSE	
	UPDATE click.f_putaway pw
	SET
		 pway_pln_dtl_key 						= COALESCE(pd.pway_pln_dtl_key,-1)
		,pway_pln_itm_dtl_key 					= COALESCE(rd.pway_pln_itm_dtl_key,-1)
		,pway_itm_dtl_key 						= COALESCE(pid.pway_itm_dtl_key,-1)
		,pway_exe_dtl_key 						= COALESCE(ped.pway_exe_dtl_key,-1)
		,grn_key 								= COALESCE(gr.grn_key,-1)
		,pway_pln_dtl_loc_key 					= COALESCE(pd.pway_pln_dtl_loc_key,-1)
		,pway_pln_dtl_date_key 					= COALESCE(pd.pway_pln_dtl_date_key,-1)
		,pway_pln_dtl_stg_mas_key 				= COALESCE(pd.pway_pln_dtl_stg_mas_key,-1)
		,pway_pln_dtl_emp_hdr_key 				= COALESCE(pd.pway_pln_dtl_emp_hdr_key,-1)
		,pway_pln_itm_dtl_itm_hdr_key 			= COALESCE(rd.pway_pln_itm_dtl_itm_hdr_key,-1)
		,pway_pln_itm_dtl_zone_key 				= COALESCE(rd.pway_pln_itm_dtl_zone_key,-1)
		,pway_loc_code 							= pd.pway_loc_code
		,pway_pln_no 							= pd.pway_pln_no
		,pway_pln_ou 							= pd.pway_pln_ou
		,pway_pln_date 							= pd.pway_pln_date
		,pway_pln_status 						= pd.pway_pln_status
		,pway_stag_id 							= pd.pway_stag_id
		,pway_mhe_id 							= pd.pway_mhe_id
		,pway_employee_id 						= pd.pway_employee_id
		,pway_lineno							= rd.pway_lineno
		,pway_po_no 							= rd.pway_po_no
		,pway_item 								= rd.pway_item
		,pway_zone 								= rd.pway_zone
		,pway_allocated_qty 					= rd.pway_allocated_qty
		,pway_allocated_bin 					= rd.pway_allocated_bin
		,pway_gr_no 							= rd.pway_gr_no
		,pway_su_type 							= rd.pway_su_type
		,pway_su 								= rd.pway_su
		,pway_from_staging_id 					= rd.pway_from_staging_id
		,pway_cross_dock 						= rd.pway_cross_dock
		,pway_stock_status 						= rd.pway_stock_status
		,pway_exec_no 							= ped.pway_exec_no
		,pway_exec_ou 							= ped.pway_exec_ou
		,pway_exec_status 						= ped.pway_exec_status
		,pway_exec_start_date 					= ped.pway_exec_start_date
		,pway_exec_end_date 					= ped.pway_exec_end_date
		,pway_created_by 						= ped.pway_created_by
		,pway_created_date 						= ped.pway_created_date
		,pway_gen_from 							= ped.pway_gen_from
		,pway_exec_lineno 						= pid.pway_exec_lineno
		,pway_po_sr_no 							= pid.pway_po_sr_no
		,pway_uid 								= pid.pway_uid
		,pway_rqs_conformation 					= pid.pway_rqs_conformation
		,pway_actual_bin 						= pid.pway_actual_bin
		,pway_actual_bin_qty 					= pid.pway_actual_bin_qty
		,pway_reason		 					= pid.pway_reason
		,created_date							= pd.pway_created_date
		,modified_date							= pd.pway_modified_date
		,activeindicator						= (rd.etlactiveind,gr.activeindicator)
		,etlupdatedatetime 						= NOW()	
	FROM dwh.f_putawayplanitemdetail rd	
	INNER JOIN click.f_grn gr
		ON  gr.gr_loc_code						= rd.pway_loc_code
		AND gr.gr_pln_ou 						= rd.pway_pln_ou
		AND gr.gr_no							= rd.pway_gr_no
		AND gr.gr_lineno						= rd.pway_gr_lineno
	LEFT JOIN dwh.f_putawayplandetail pd
		ON  pd.pway_pln_no 						= rd.pway_pln_no
		AND pd.pway_loc_code 					= rd.pway_loc_code
		AND pd.pway_pln_ou 						= rd.pway_pln_ou
	LEFT JOIN dwh.F_PutawayItemDetail pid	
		ON  pd.pway_loc_code 					= pid.pway_loc_code
		AND rd.pway_gr_no						= pid.pway_gr_no
		AND pd.pway_pln_ou 						= pid.pway_exec_ou
		AND rd.pway_lineno						= pid.pway_exec_lineno		
	LEFT JOIN dwh.f_putawayexecdetail ped	
		ON  pd.pway_pln_no 						= ped.pway_pln_no
		AND pd.pway_loc_code 					= ped.pway_loc_code
		AND pd.pway_pln_ou 						= ped.pway_pln_ou
		AND ped.pway_exec_no 					= pid.pway_exec_no
	WHERE   pw.pway_loc_code					= pd.pway_loc_code
		AND pw.pway_pln_no						= pd.pway_pln_no
		AND pw.pway_pln_ou						= pd.pway_pln_ou
		AND COALESCE(pw.pway_lineno,0)			= COALESCE(rd.pway_lineno,'0')
		AND COALESCE(pw.pway_po_no,'NULL')		= COALESCE(gr.gr_po_no,'NULL')
		AND COALESCE(pw.pway_item,'NULL')		= COALESCE(rd.pway_item,'NULL')
		AND COALESCE(pw.pway_gr_no,'NULL')		= COALESCE(rd.pway_gr_no,'NULL')
		AND COALESCE(pw.pway_exec_no,'NULL')	= COALESCE(pid.pway_exec_no,'NULL')
		AND COALESCE(pd.etlupdatedatetime,pd.etlcreatedatetime) >= v_maxdate;
		
	INSERT INTO click.f_putaway
	(
		pway_pln_dtl_key							, pway_pln_itm_dtl_key						, pway_itm_dtl_key								, pway_exe_dtl_key, 
		grn_key										, pway_pln_dtl_loc_key							, pway_pln_dtl_date_key, 
		pway_pln_dtl_stg_mas_key					, pway_pln_dtl_emp_hdr_key					, pway_pln_itm_dtl_itm_hdr_key					, pway_pln_itm_dtl_zone_key, 
		pway_loc_code								, pway_pln_no								, pway_pln_ou									, pway_pln_date, 
		pway_pln_status								, pway_stag_id								, pway_mhe_id									, pway_employee_id, 
		pway_lineno									, pway_po_no								, pway_item										, pway_zone, 
		pway_allocated_qty							, pway_allocated_bin						, pway_gr_no									, pway_su_type, 
		pway_su										, pway_from_staging_id						, pway_cross_dock								, pway_stock_status, 
		pway_exec_no								, pway_exec_ou								, pway_exec_status								, pway_exec_start_date, 
		pway_exec_end_date							, pway_created_by							, pway_created_date								, pway_gen_from, 
		pway_exec_lineno							, pway_po_sr_no								, pway_uid										, pway_rqs_conformation, 
		pway_actual_bin								, pway_actual_bin_qty						, pway_reason									, etlcreatedatetime,
		created_date								, modified_date,						activeindicator						
	)
	SELECT  
		COALESCE(pd.pway_pln_dtl_key,-1)			, COALESCE(rd.pway_pln_itm_dtl_key,-1)		, COALESCE(pid.pway_itm_dtl_key,-1)				, COALESCE(ped.pway_exe_dtl_key,-1), 
		COALESCE(gr.grn_key,-1)						, COALESCE(pd.pway_pln_dtl_loc_key,-1)		, COALESCE(pd.pway_pln_dtl_date_key,-1), 
		COALESCE(pd.pway_pln_dtl_stg_mas_key,-1)	, COALESCE(pd.pway_pln_dtl_emp_hdr_key,-1)	, COALESCE(rd.pway_pln_itm_dtl_itm_hdr_key,-1)	, COALESCE(rd.pway_pln_itm_dtl_zone_key,-1), 
		pd.pway_loc_code							, pd.pway_pln_no							, pd.pway_pln_ou								, pd.pway_pln_date, 
		pd.pway_pln_status							, pd.pway_stag_id							, pd.pway_mhe_id								, pd.pway_employee_id, 
		rd.pway_lineno								, rd.pway_po_no								, rd.pway_item									, rd.pway_zone, 
		rd.pway_allocated_qty						, rd.pway_allocated_bin						, rd.pway_gr_no									, rd.pway_su_type, 
		rd.pway_su									, rd.pway_from_staging_id					, rd.pway_cross_dock							, rd.pway_stock_status, 
		ped.pway_exec_no							, ped.pway_exec_ou							, ped.pway_exec_status							, ped.pway_exec_start_date, 
		ped.pway_exec_end_date						, ped.pway_created_by						, ped.pway_created_date							, ped.pway_gen_from, 
		pid.pway_exec_lineno						, pid.pway_po_sr_no							, pid.pway_uid									, pid.pway_rqs_conformation, 
		pid.pway_actual_bin							, pid.pway_actual_bin_qty					, pid.pway_reason								, NOW(),
		pd.pway_created_date						, pd.pway_modified_date,					(rd.etlactiveind,gr.activeindicator)
	FROM dwh.f_putawayplanitemdetail rd	
	INNER JOIN click.f_grn gr
		ON  gr.gr_loc_key						= rd.pway_pln_itm_dtl_loc_key
		AND gr.gr_no							= rd.pway_gr_no
		AND gr.gr_lineno						= rd.pway_gr_lineno
		--AND gr.gr_pln_ou 						= rd.pway_pln_ou
		--AND gr.gr_loc_code					= rd.pway_loc_code
	LEFT JOIN dwh.f_putawayplandetail pd
		ON  pd.pway_pln_dtl_key 				= rd.pway_pln_dtl_key
		--AND pd.pway_loc_code					= rd.pway_loc_code
		--AND pd.pway_pln_no 					= rd.pway_pln_no
		--AND pd.pway_pln_ou 					= rd.pway_pln_ou
	LEFT JOIN dwh.f_putawayexecdetail ped
		ON	pd.pway_pln_dtl_key					= ped.pway_pln_dtl_key
-- 		ON  pd.pway_pln_no 						= ped.pway_pln_no
-- 		AND pd.pway_loc_code 					= ped.pway_loc_code
-- 		AND pd.pway_pln_ou 						= ped.pway_pln_ou
	LEFT JOIN dwh.F_PutawayItemDetail pid	
		ON  ped.pway_exe_dtl_key 				= pid.pway_exe_dtl_key
		AND rd.pway_gr_no						= pid.pway_gr_no
		AND rd.pway_lineno						= pid.pway_exec_lineno
	WHERE COALESCE(pd.etlupdatedatetime,pd.etlcreatedatetime) >= v_maxdate;
	END IF;
	
    ELSE	
	p_errorid   := 0;
		IF p_depsource IS NULL
			THEN 
			 	p_errordesc := 'The Dependent source cannot be NULL.';
			ELSE
				p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source.';
			END IF;
		CALL ods.usp_etlerrorinsert('DWH','f_putaway','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	END IF;

		
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_putaway','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	
END;
$$;


ALTER PROCEDURE click.usp_f_putaway() OWNER TO proconnect;

--
-- Name: usp_f_putaway_bkp(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_putaway_bkp()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	p_depsource VARCHAR(100);
	v_maxdate date;
BEGIN

		SELECT 	depsource
		INTO 	p_depsource
		FROM 	ods.dwhtoclickcontroldtl
		WHERE 	objectname = 'usp_f_putaway'; 

	IF EXISTS 
		 (
			 SELECT 1 FROM ods.dwhtoclickcontroldtl
			 WHERE	objectname = p_depsource
			 AND	status = 'completed'
			 AND	CAST(COALESCE(loadenddatetime,loadstartdatetime) AS DATE) >= NOW()::DATE
		 )
	THEN

/*
	SELECT (CASE WHEN MAX(COALESCE(modified_date,created_date)) <> NULL 
					THEN MAX(COALESCE(modified_date,created_date))
				ELSE COALESCE(MAX(COALESCE(modified_date,created_date)),'1900-01-01') END)::DATE
	INTO v_maxdate
	FROM click.f_putaway;
		
	UPDATE click.f_putaway pw
	SET
		 pway_pln_dtl_key 						= COALESCE(pd.pway_pln_dtl_key,-1)
		,pway_pln_itm_dtl_key 					= COALESCE(rd.pway_pln_itm_dtl_key,-1)
		,pway_itm_dtl_key 						= COALESCE(pid.pway_itm_dtl_key,-1)
		,pway_exe_dtl_key 						= COALESCE(ped.pway_exe_dtl_key,-1)
		,grn_key 								= COALESCE(gr.grn_key,-1)
		,pway_pln_dtl_loc_key 					= COALESCE(pd.pway_pln_dtl_loc_key,-1)
		,pway_pln_dtl_date_key 					= COALESCE(pd.pway_pln_dtl_date_key,-1)
		,pway_pln_dtl_stg_mas_key 				= COALESCE(pd.pway_pln_dtl_stg_mas_key,-1)
		,pway_pln_dtl_emp_hdr_key 				= COALESCE(pd.pway_pln_dtl_emp_hdr_key,-1)
		,pway_pln_itm_dtl_itm_hdr_key 			= COALESCE(rd.pway_pln_itm_dtl_itm_hdr_key,-1)
		,pway_pln_itm_dtl_zone_key 				= COALESCE(rd.pway_pln_itm_dtl_zone_key,-1)
		,pway_loc_code 							= pd.pway_loc_code
		,pway_pln_no 							= pd.pway_pln_no
		,pway_pln_ou 							= pd.pway_pln_ou
		,pway_pln_date 							= pd.pway_pln_date
		,pway_pln_status 						= pd.pway_pln_status
		,pway_stag_id 							= pd.pway_stag_id
		,pway_mhe_id 							= pd.pway_mhe_id
		,pway_employee_id 						= pd.pway_employee_id
		,pway_lineno							= rd.pway_lineno
		,pway_po_no 							= rd.pway_po_no
		,pway_item 								= rd.pway_item
		,pway_zone 								= rd.pway_zone
		,pway_allocated_qty 					= rd.pway_allocated_qty
		,pway_allocated_bin 					= rd.pway_allocated_bin
		,pway_gr_no 							= rd.pway_gr_no
		,pway_su_type 							= rd.pway_su_type
		,pway_su 								= rd.pway_su
		,pway_from_staging_id 					= rd.pway_from_staging_id
		,pway_cross_dock 						= rd.pway_cross_dock
		,pway_stock_status 						= rd.pway_stock_status
		,pway_exec_no 							= ped.pway_exec_no
		,pway_exec_ou 							= ped.pway_exec_ou
		,pway_exec_status 						= ped.pway_exec_status
		,pway_exec_start_date 					= ped.pway_exec_start_date
		,pway_exec_end_date 					= ped.pway_exec_end_date
		,pway_created_by 						= ped.pway_created_by
		,pway_created_date 						= ped.pway_created_date
		,pway_gen_from 							= ped.pway_gen_from
		,pway_exec_lineno 						= pid.pway_exec_lineno
		,pway_po_sr_no 							= pid.pway_po_sr_no
		,pway_uid 								= pid.pway_uid
		,pway_rqs_conformation 					= pid.pway_rqs_conformation
		,pway_actual_bin 						= pid.pway_actual_bin
		,pway_actual_bin_qty 					= pid.pway_actual_bin_qty
		,pway_reason		 					= pid.pway_reason
		,created_date							= pd.pway_created_date
		,modified_date							= pd.pway_modified_date
		,etlupdatedatetime 						= NOW()	
	FROM dwh.f_putawayplanitemdetail rd	
	LEFT JOIN click.f_grn gr
		ON  gr.gr_loc_code						= rd.pway_loc_code
		AND gr.gr_pln_ou 						= rd.pway_pln_ou
		AND gr.gr_no							= rd.pway_gr_no
		AND gr.gr_lineno						= rd.pway_gr_lineno
	LEFT JOIN dwh.f_putawayplandetail pd
		ON  pd.pway_pln_no 						= rd.pway_pln_no
		AND pd.pway_loc_code 					= rd.pway_loc_code
		AND pd.pway_pln_ou 						= rd.pway_pln_ou
	LEFT JOIN dwh.F_PutawayItemDetail pid	
		ON  pd.pway_loc_code 					= pid.pway_loc_code
		AND rd.pway_gr_no						= pid.pway_gr_no
		AND pd.pway_pln_ou 						= pid.pway_exec_ou
		AND rd.pway_lineno						= pid.pway_exec_lineno		
	LEFT JOIN dwh.f_putawayexecdetail ped	
		ON  pd.pway_pln_no 						= ped.pway_pln_no
		AND pd.pway_loc_code 					= ped.pway_loc_code
		AND pd.pway_pln_ou 						= ped.pway_pln_ou
		AND ped.pway_exec_no 					= pid.pway_exec_no
	WHERE   pw.pway_loc_code					= pd.pway_loc_code
		AND pw.pway_pln_no						= pd.pway_pln_no
		AND pw.pway_pln_ou						= pd.pway_pln_ou
		AND COALESCE(pw.pway_lineno,0)			= COALESCE(rd.pway_lineno,'0')
		AND COALESCE(pw.pway_po_no,'NULL')		= COALESCE(gr.gr_po_no,'NULL')
		AND COALESCE(pw.pway_item,'NULL')		= COALESCE(rd.pway_item,'NULL')
		AND COALESCE(pw.pway_gr_no,'NULL')		= COALESCE(rd.pway_gr_no,'NULL')
		AND COALESCE(pw.pway_exec_no,'NULL')	= COALESCE(pid.pway_exec_no,'NULL')
		AND COALESCE(pd.pway_modified_date,pd.pway_created_date) > v_maxdate; */
		
	DELETE FROM click.f_putaway
	WHERE COALESCE(modified_date,created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
		
	INSERT INTO click.f_putaway
	(
		pway_pln_dtl_key							, pway_pln_itm_dtl_key						, pway_itm_dtl_key								, pway_exe_dtl_key, 
		grn_key										, pway_pln_dtl_loc_key							, pway_pln_dtl_date_key, 
		pway_pln_dtl_stg_mas_key					, pway_pln_dtl_emp_hdr_key					, pway_pln_itm_dtl_itm_hdr_key					, pway_pln_itm_dtl_zone_key, 
		pway_loc_code								, pway_pln_no								, pway_pln_ou									, pway_pln_date, 
		pway_pln_status								, pway_stag_id								, pway_mhe_id									, pway_employee_id, 
		pway_lineno									, pway_po_no								, pway_item										, pway_zone, 
		pway_allocated_qty							, pway_allocated_bin						, pway_gr_no									, pway_su_type, 
		pway_su										, pway_from_staging_id						, pway_cross_dock								, pway_stock_status, 
		pway_exec_no								, pway_exec_ou								, pway_exec_status								, pway_exec_start_date, 
		pway_exec_end_date							, pway_created_by							, pway_created_date								, pway_gen_from, 
		pway_exec_lineno							, pway_po_sr_no								, pway_uid										, pway_rqs_conformation, 
		pway_actual_bin								, pway_actual_bin_qty						, pway_reason									, etlcreatedatetime,
		created_date								, modified_date							
	)
	SELECT  
		COALESCE(pd.pway_pln_dtl_key,-1)			, COALESCE(rd.pway_pln_itm_dtl_key,-1)		, COALESCE(pid.pway_itm_dtl_key,-1)				, COALESCE(ped.pway_exe_dtl_key,-1), 
		COALESCE(gr.grn_key,-1)						, COALESCE(pd.pway_pln_dtl_loc_key,-1)		, COALESCE(pd.pway_pln_dtl_date_key,-1), 
		COALESCE(pd.pway_pln_dtl_stg_mas_key,-1)	, COALESCE(pd.pway_pln_dtl_emp_hdr_key,-1)	, COALESCE(rd.pway_pln_itm_dtl_itm_hdr_key,-1)	, COALESCE(rd.pway_pln_itm_dtl_zone_key,-1), 
		pd.pway_loc_code							, pd.pway_pln_no							, pd.pway_pln_ou								, pd.pway_pln_date, 
		pd.pway_pln_status							, pd.pway_stag_id							, pd.pway_mhe_id								, pd.pway_employee_id, 
		rd.pway_lineno								, rd.pway_po_no								, rd.pway_item									, rd.pway_zone, 
		rd.pway_allocated_qty						, rd.pway_allocated_bin						, rd.pway_gr_no									, rd.pway_su_type, 
		rd.pway_su									, rd.pway_from_staging_id					, rd.pway_cross_dock							, rd.pway_stock_status, 
		ped.pway_exec_no							, ped.pway_exec_ou							, ped.pway_exec_status							, ped.pway_exec_start_date, 
		ped.pway_exec_end_date						, ped.pway_created_by						, ped.pway_created_date							, ped.pway_gen_from, 
		pid.pway_exec_lineno						, pid.pway_po_sr_no							, pid.pway_uid									, pid.pway_rqs_conformation, 
		pid.pway_actual_bin							, pid.pway_actual_bin_qty					, pid.pway_reason								, NOW(),
		pd.pway_created_date						, pd.pway_modified_date
	FROM dwh.f_putawayplanitemdetail rd	
	LEFT JOIN click.f_grn gr
		ON  gr.gr_loc_key						= rd.pway_pln_itm_dtl_loc_key
		AND gr.gr_no							= rd.pway_gr_no
		AND gr.gr_lineno						= rd.pway_gr_lineno
		--AND gr.gr_pln_ou 						= rd.pway_pln_ou
		--AND gr.gr_loc_code					= rd.pway_loc_code
	LEFT JOIN dwh.f_putawayplandetail pd
		ON  pd.pway_pln_dtl_key 				= rd.pway_pln_dtl_key
		--AND pd.pway_loc_code					= rd.pway_loc_code
		--AND pd.pway_pln_no 					= rd.pway_pln_no
		--AND pd.pway_pln_ou 					= rd.pway_pln_ou
	LEFT JOIN dwh.f_putawayexecdetail ped
		ON	pd.pway_pln_dtl_key					= ped.pway_pln_dtl_key
-- 		ON  pd.pway_pln_no 						= ped.pway_pln_no
-- 		AND pd.pway_loc_code 					= ped.pway_loc_code
-- 		AND pd.pway_pln_ou 						= ped.pway_pln_ou
	LEFT JOIN dwh.F_PutawayItemDetail pid	
		ON  ped.pway_exe_dtl_key 				= pid.pway_exe_dtl_key
		AND rd.pway_gr_no						= pid.pway_gr_no
		AND rd.pway_lineno						= pid.pway_exec_lineno
		--AND pd.pway_pln_ou 					= pid.pway_exec_ou
	WHERE COALESCE(pd.pway_modified_date,pd.pway_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
	
    ELSE	
	p_errorid   := 0;
		IF p_depsource IS NULL
			THEN 
			 	p_errordesc := 'The Dependent source cannot be NULL.';
			ELSE
				p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source.';
			END IF;
		CALL ods.usp_etlerrorinsert('DWH','f_putaway','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	END IF;

		
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_putaway','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	
END;
$$;


ALTER PROCEDURE click.usp_f_putaway_bkp() OWNER TO proconnect;

--
-- Name: usp_f_shipment_details(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_shipment_details()
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_errorid integer;
	p_errordesc character varying;

BEGIN

--TRUNCATE ONLY click.f_shipment_details RESTART IDENTITY;
DELETE FROM click.f_shipment_details 
WHERE trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE;

INSERT INTO click.f_shipment_details
(		br_key,						ship_loc_key,				ship_customer_key,
	    ouinstance,			     	br_request_id,			    br_customer_id,			        br_customer_ref_no,				   br_status,
	    service_type,			    sub_service_type,		    trip_plan_id,			        trip_plan_status,				   vehicle_type,
	    vehicle_id,			     	agent_id,				    agent_resource,			        loc,							   from_city,
	    from_state,			     	to_city,				    to_state,				        leg_behaviour,					   trip_plan_date,
	    trip_plan_end_date,	     	trip_plan_seq,			    dispatch_doc_no,		        dispatch_doc_type,				   veh_in_dim_uom,
	    Veh_Volume,			     	Planned_TripStart,		    Planned_Arrived,		        Planned_TakenOver_HandedOver,	   Planned_Departed,
	    Planned_TripEnd,		    Actual_TripStart,		    Actual_Arrived,			        Actual_TakenOver_HandedOver,	   Actual_Departed,
	    Actual_TripEnd,		     	br_invoice_value,		    OnTime_Pickup_Delivery,	        ShipmentDays,					   createddatetime,					
	  	trip_plan_DateKey,		    trip_Exec_DateKey,			Trip_Volume,					Trip_Volume_uom,
		trip_plan_createddate,		from_pincode,				to_pincode
)
 SELECT   
		 br_key,					 br_loc_key,				br_customer_key,
		 br_ouinstance,				     br_request_id,			    br_customer_id,				    br_customer_ref_no,					br_status,
		 br_service_type,		     br_sub_service_type,	    plpth_trip_plan_id,			    plpth_trip_plan_status,				plpth_vehicle_type,		
		 plpth_vehicle_id,		     plpth_agent_id,		    plpth_agent_resource,	    	plpth_location,						brsd_from_city,
		 brsd_from_state,		     brsd_to_city,			    brsd_to_state,				    plptd_leg_behaviour,				plpth_trip_plan_date,
		 plpth_trip_plan_end_date,	 plptd_trip_plan_seq,		ddh_dispatch_doc_no,			ddh_dispatch_doc_type,				veh_in_dim_uom,
		 VehicleVolumne,			 PlannedTripStart,			PlannedArrived,					Planned_TakenOver_HandedOver,		Planned_Departed,
		 Planned_TripEnd,			 ActualTripStart,			ActualArrived,					Actual_TakenOver_HandedOver,		Actual_Departed,
		 Actual_TripEnd,			 br_invoice_value,			CASE WHEN Actual_TakenOver_HandedOver  <= Planned_TakenOver_HandedOver THEN 1 ELSE 0 END AS OnTime_Pickup_Delivery,
		 NULL AS ShipmentDays,		 CURRENT_DATE AS CreatedDate,								trip_plan_DateKey,					COALESCE(TO_CHAR(Actual_TakenOver_HandedOver, 'YYYYMMDD')::INTEGER,-1) as trip_exec_DateKey,
		 tltd_volume,				 tltd_volume_uom,			
		 trip_plan_createddate,		 brsd_from_postal_code,		brsd_to_postal_code
FROM(
	SELECT 	 
		 a.br_key,					 a.br_loc_key,				a.br_customer_key,
		 a.br_ouinstance,			 a.br_request_id,			a.br_customer_id,				a.br_customer_ref_no,				a.br_status,
		 a.br_service_type,			 a.br_sub_service_type  
		,H.plpth_trip_plan_id,           H.plpth_trip_plan_status,			H.plpth_vehicle_type,
		 H.plpth_vehicle_id,		 CASE WHEN a.br_service_type = 'DD' THEN f.veh_agency_id ELSE H.plpth_agent_id END,
		 H.plpth_agent_resource,			H.plpth_location,					b.brsd_from_city,
		 b.brsd_from_state,			 b.brsd_to_city,			b.brsd_to_state,				d.plptd_leg_behaviour, 				plpth_start_time::DATE AS plpth_trip_plan_date , 
		 H.plpth_trip_plan_end_date::DATE AS plpth_trip_plan_end_date,
		 d.plptd_trip_plan_seq,		 c.ddh_dispatch_doc_no,		c.ddh_dispatch_doc_type,		f.veh_in_dim_uom,
		 COALESCE(veh_in_length,0)*COALESCE(veh_in_width,0)*COALESCE(veh_in_height,0) AS VehicleVolumne,
		 PlannedTripStart AS PlannedTripStart,			PlannedArrived AS PlannedArrived,
		 CASE WHEN plptd_leg_behaviour = 'Pick' THEN PlannedTakenOver
			  WHEN plptd_leg_behaviour = 'Dvry' THEN PlannedHandedOver
			  END AS Planned_TakenOver_HandedOver,
		 CASE WHEN plptd_leg_behaviour = 'Pick' THEN PlannedPickDepart
			  WHEN plptd_leg_behaviour = 'Dvry' THEN PlannedDeliveryDepart
			  END AS Planned_Departed,
		PlannedTripEnd::DATE AS Planned_TripEnd,               ActualTripStart AS ActualTripStart,							ActualArrived::DATE AS ActualArrived,
		CASE  WHEN plptd_leg_behaviour = 'Pick' THEN ActualTakenOver
			  WHEN plptd_leg_behaviour = 'Dvry' THEN ActualHandedOver
			  END AS Actual_TakenOver_HandedOver,
		CASE  WHEN plptd_leg_behaviour = 'Pick' THEN ActualPickDepart
			  WHEN plptd_leg_behaviour = 'Dvry' THEN ActualDeliveryDepart
			  END AS Actual_Departed,
		ActualTripEnd AS Actual_TripEnd,					a.br_invoice_value,
		COALESCE(H.plpth_trip_plan_DateKey,-1)	trip_plan_datekey,
		tlog.tltd_volume,tlog.tltd_volume_uom,
		COALESCE(plpth_last_modified_date,plpth_created_date) as trip_plan_createddate,
		b.brsd_from_postal_code as brsd_from_postal_code	,	b.brsd_to_postal_code as brsd_to_postal_code
	FROM dwh.F_tripplanningheader H
	INNER JOIN dwh.f_tripplanningdetail D
	ON  D.plpth_hdr_key = H.plpth_hdr_key
	INNER JOIN dwh.f_bookingrequest a 
	ON  a.br_ouinstance		=	D.plptd_ouinstance
	AND a.br_request_id		=	D.plptd_bk_req_id
	INNER JOIN dwh.f_brshipmentdetail b 
	ON	a.br_key		=	b.brsd_br_key
	INNER JOIN dwh.f_dispatchdocheader c 
	ON  D.plptd_ouinstance		=	c.ddh_ouinstance
	AND D.plptd_bk_req_id		=	c.ddh_reference_doc_no
	LEFT JOIN dwh.d_vehicle f 
	ON  H.plpth_vehicle_key =  f.veh_key 			
	LEFT JOIN tmp.f_triplogthudetail_tmp tlog
	ON	d.plptd_ouinstance 			=	tlog.tltd_ouinstance 
	AND	d.plptd_trip_plan_id		=	tlog.tltd_trip_plan_id 
	AND	d.plptd_trip_plan_seq		=	tlog.tltd_trip_sequence 
	AND d.plptd_trip_plan_line_no	=	tlog.tltd_trip_plan_line_id
	LEFT JOIN tmp.f_triplogeventdetail_Act g	
	ON	G.tled_ouinstance	 =  D.plptd_ouinstance 
	AND G.tled_trip_plan_id	 =	D.plptd_trip_plan_id
	AND G.tled_leg_no		 =	D.plptd_trip_plan_seq
	LEFT JOIN tmp.f_triplogeventdetail_pln P
	ON	P.tled_ouinstance	 =  D.plptd_ouinstance 
	AND P.tled_trip_plan_id	 =	D.plptd_trip_plan_id
	AND P.tled_leg_no		 =	D.plptd_trip_plan_seq
	WHERE plpth_trip_plan_status NOT IN ('DL')
	AND trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE
	--AND EXTRACT(YEAR FROM COALESCE(plpth_last_modified_date::DATE,plpth_created_date::DATE)) = 2019 -->= (CURRENT_DATE - INTERVAL '1 YEARS')::DATE
	--limit 10--AND tlog.tltd_trip_plan_id = 'TP/GAW/22/00001721'	
)a1;
	
-- For Updating the agent id
--For PTL trips
/*
UPDATE click.f_shipment_details_test d 
set agent_id = a.plpth_agent_id
from dwh.f_tripplanningheader a 
where  d.ouinstance		=	a.plpth_ouinstance	
and   d.trip_plan_id	=	a.plpth_trip_plan_id
and COALESCE(a.plpth_agent_id,'') <> ''
and d.service_type 		= 'PTL';

--For DD Trips

UPDATE click.f_shipment_details_test d 
set agent_id = b.veh_agency_id
from  dwh.f_tripplanningheader a 
join dwh.d_vehicle b 
on	  b.veh_ou		= a.plpth_ouinstance
and	  b.veh_id		= a.plpth_vehicle_id
Where d.ouinstance		=	a.plpth_ouinstance	
and   d.trip_plan_id	=	a.plpth_trip_plan_id
and COALESCE(a.plpth_vehicle_id,'') <> ''
and COALESCE(b.veh_agency_id,'') <> ''
and d.service_type 		= 'DD';
*/
--For FTL Trips
/*
UPDATE click.f_shipment_details_test f 
set agent_id = c.vrvel_vendor_id
from click.f_shipment_details_test f 
JOIN dwh.F_TenderRequirementDetail a 
on	  f.ouinstance		=	a.trd_ouinstance
and   f.trip_plan_id	=	a.trd_ref_doc_no
JOIN dwh.F_VehicleRequirements   
on    trd_ouinstance    = trvr_ouinstance
and   trd_tender_req_no = trvr_tender_req_no  
and   trd_ref_doc_no    = trvr_ref_doc_no
join dwh.F_VehicleEquipResponseDetail 
on    trd_ouinstance      = vrve_ouinstance
and   trvr_tender_req_no  = vrve_tend_req_no          
join dwh.F_VehicleEquipLicenseDetail 
on    vrve_ouinstance     = vrvel_ouinstance
and   vrve_tend_req_no    = vrvel_tend_req_no
and   vrve_line_no        = vrvel_resp_line_no
and   vrve_vendor_id      = vrvel_vendor_id
where COALESCE(vrve_confirm_qty,0)  <> 0
AND   vrve_resp_for        = 'vehicle'
and   trvr_ref_doc_type    in ('TP','Trip Plan')
and	  service_type = 'FTL'
*/

-- For Updating the shipment days 
	TRUNCATE TABLE tmp.f_shipment_details_pick_tmp;
	INSERT INTO tmp.f_shipment_details_pick_tmp(
	ouinstance, trip_plan_id, trip_plan_seq, br_request_Id, Actual_Departed, agent_id, from_pincode, to_pincode
	)
	SELECT ouinstance, trip_plan_id, trip_plan_seq, br_request_Id, Actual_Departed, agent_id, from_pincode, to_pincode
	FROM click.f_shipment_details 
	WHERE trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE
	--WHERE EXTRACT(YEAR FROM trip_plan_createddate::DATE) =  2019
	AND leg_behaviour = 'pick'; 

	UPDATE click.f_shipment_details d
	SET ShipmentDays = DATE_PART('day', d.Actual_Departed::timestamp - a1.Actual_Departed::timestamp) + 1
	FROM tmp.f_shipment_details_pick_tmp  a1
	WHERE d.ouinstance		=	a1.ouinstance	
	AND   d.trip_plan_id	=	a1.trip_plan_id
	AND   d.br_request_Id	=	a1.br_request_Id
	AND   trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE
	--AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019
	AND d.leg_behaviour = 'Dvry';

/*
UPDATE click.f_shipment_details_test d
SET trip_Exec_DateKey = COALESCE(trip_Exec_DateKey.DateKey,-1)
FROM dwh.d_date trip_Exec_DateKey
WHERE d.Actual_TakenOver_HandedOver = trip_Exec_DateKey.dateactual;
*/
/*

UPDATE click.f_shipment_details_test d
SET Trip_Volume	= tlog.tltd_volume,	Trip_Volume_uom	= tlog.tltd_volume_uom
FROM tmp.f_triplogthudetail_tmp tlog
/*(
		SELECT a.tltd_ouinstance,	a.tltd_trip_plan_id,	a.tltd_trip_sequence,	 a.tltd_dispatch_doc_no,		
			   SUM(tltd_volume) AS tltd_volume,				a.tltd_volume_uom
		FROM dwh.f_triplogthudetail a 	
			JOIN click.f_shipment_details_test d
				ON  d.ouinstance			=	a.tltd_ouinstance 
				AND	d.trip_plan_id			=	a.tltd_trip_plan_id 
				AND	d.trip_plan_seq			=	a.tltd_trip_sequence 
				AND d.dispatch_doc_no		=	a.tltd_dispatch_doc_no 
		GROUP BY a.tltd_ouinstance,a.tltd_trip_plan_id,a.tltd_trip_sequence,a.tltd_dispatch_doc_no,a.tltd_volume_uom 
	)a
	*/
WHERE 	d.ouinstance			=	tlog.tltd_ouinstance 
AND	d.trip_plan_id			=	tlog.tltd_trip_plan_id 
AND	d.trip_plan_seq			=	tlog.tltd_trip_sequence 
AND d.dispatch_doc_no		=	tlog.tltd_dispatch_doc_no;
*/

UPDATE click.f_shipment_details d
SET draft_bill_total_value		=	e.draft_bill_total_value,
    draft_bill_approved_date	=   e.draft_bill_approved_date::DATE,
	draft_bill_no				=	e.draft_bill_no,			
	draft_bill_volume			=	e.draft_bill_volume,		
	draft_bill_contract			=	f.draft_bill_contract_id,	
	draft_bill_line_status		=	e.draft_bill_line_status
FROM dwh.f_triplogagentdetail a
	JOIN dwh.f_draftbilldetail e
			ON	a.tlad_ag_ref_doc_no	=	e.draft_bill_triggerring_no
			AND	a.tlad_trip_plan_id		=	e.draft_bill_ref_doc_no
			AND	a.tlad_ouinstance		=	e.draft_bill_ou
	JOIN dwh.f_draftbillheader f
			ON	e.draft_bill_hdr_key			=	f.draft_bill_hdr_key		
	JOIN dwh.f_contractheader c
			ON  c.cont_ou 			    =	f.draft_bill_ou
			AND	c.cont_id			    =	f.draft_bill_cONtract_id
			AND c.cont_vendor_id	    =	f.draft_bill_supplier
			AND c.cont_type			    =	'buy'
WHERE  d.ouinstance			=	a.tlad_ouinstance 
		AND	d.trip_plan_id			=	a.tlad_trip_plan_id 
		AND d.dispatch_doc_no		=	a.tlad_dispatch_doc_no
		--AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019;
		AND   trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE;

UPDATE click.f_shipment_details d
SET podflag = CASE WHEN tpad_attachment_file_name IS NOT NULL THEN 1 ELSE 0 END
FROM dwh.f_trippodattachmentdetail a
WHERE	d.ouinstance 			= a.tpad_ouinstance
AND 	d.trip_plan_id 			= a.tpad_Trip_id
AND 	d.dispatch_doc_no 		= COALESCE(a.tpad_dispatch_doc_no,a.tpad_doc_no)
--AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019;
AND trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE;

update click.f_shipment_details
set podflag = 0 
where podflag IS NULL
AND trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE;
--UPDATING Expected_DatetoDeliver OPEN
		
	UPDATE	click.f_shipment_details sh
	SET		Expected_DatetoDeliver	= a1.Actual_Departed + (interval '1' day * tms.tat) + (interval '1' day)
	FROM	tmp.f_shipment_details_pick_tmp a1
	INNER JOIN dwh.D_TMSDeliveryTAT tms
	ON		a1.agent_id			= tms.agent_code
	AND		a1.from_pincode		= tms.shipfrom_pincode
	AND		a1.to_pincode		= tms.shipto_pincode
	WHERE	a1.ouinstance		= sh.ouinstance
	AND		a1.trip_plan_id		= sh.trip_plan_id
	AND		a1.br_request_Id	= sh.br_request_Id
	--AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019
	AND		sh.trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE
	AND		sh.leg_behaviour	= 'Dvry';

	UPDATE	click.f_shipment_details sh
	SET		Expected_DatetoDeliver	= a1.Actual_Departed + (interval '1' day * tms.tat) + (interval '1' day)
	FROM	tmp.f_shipment_details_pick_tmp a1
	INNER JOIN dwh.D_TMSDeliveryTAT tms
	ON		a1.agent_id			= tms.agent_code
	AND		a1.from_pincode		= tms.shipfrom_pincode::character varying
	AND		a1.to_pincode		= tms.shipto_pincode::character varying
	WHERE	a1.ouinstance		= sh.ouinstance
	AND		a1.trip_plan_id		= sh.trip_plan_id
	AND		a1.br_request_Id	= sh.br_request_Id
	AND		tms.agent_code		= 'SCM00085'
	AND		sh.Expected_DatetoDeliver is null
	--AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019
	AND		sh.trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE
	AND		sh.leg_behaviour	= 'Dvry';
	
	UPDATE	click.f_shipment_details sh
	SET		Expected_DatetoDeliver		= a1.actual_departed + (interval '2' day)
	FROM	tmp.f_shipment_details_pick_tmp a1
	WHERE	a1.ouinstance		= sh.ouinstance
	AND		a1.trip_plan_id		= sh.trip_plan_id
	AND		a1.br_request_Id	= sh.br_request_Id
	--AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019
	AND		trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE
	AND		Expected_DatetoDeliver is null
	AND		sh.leg_behaviour	= 'Dvry';
	
--UPDATING Expected_DatetoDeliver CLOSED

--ON_TIME_DELIVERY_FLAG UPDATE OPEN

	UPDATE	click.f_shipment_details
	SET		OnTimeDelvry_count	= CASE WHEN
										( leg_behaviour = 'Dvry' AND Expected_DatetoDeliver >= Actual_TripEnd )
										THEN 1
										ELSE 0
										END
	--WHERE EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019									
	WHERE	trip_plan_createddate::DATE >= (CURRENT_DATE - INTERVAL '90 DAYS')::DATE;
	
--ON_TIME_DELIVERY_FLAG UPDATE OPEN

	
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','usp_f_shipment_details','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

  

END;
$$;


ALTER PROCEDURE click.usp_f_shipment_details() OWNER TO proconnect;

--
-- Name: usp_f_skumaster(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_skumaster()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	v_maxdate date;
BEGIN

	SELECT (
			CASE WHEN MAX(COALESCE(etlupdatedatetime,etlcreatedatetime)) <> NULL
				 THEN MAX(COALESCE(etlupdatedatetime,etlcreatedatetime))
				 ELSE '1900-01-01' END
		   )::DATE
	INTO v_maxdate
	FROM click.f_skumaster;
	
-- 		UPDATE click.f_skumaster sm
-- 		SET				
-- 				 customer_name			= cus.customer_name
-- 				, sku_code				= it.itm_code
-- 				, customer_code			= it.itm_customer
-- 				, sku_name				= it.itm_long_desc	
-- 				, sku_type				= it.itm_type		
-- 				, sku_length			= it.itm_length		
-- 				, sku_breadth	 		= it.itm_breadth
-- 				, sku_height 			= it.itm_height		
-- 				, lbh_uom				= it.itm_uom		
-- 				, wght_in_kg			= it.Itm_weight		
-- 				, sku_wght_uom	 		= it.itm_weight_uom	
-- 				, actual_vol_wght		= it.itm_volume_weight			--itm_volume_calc	= (itm_length * itm_breadth * itm_height),
-- 				, calc_vol_wght	 		= (it.itm_volume_calc /5000)
-- 				, vol_wght_diff 		= ((it.itm_volume_calc /5000)-it.itm_weight)
-- 				, Wght_diff_percentage	= case when (it.itm_weight <> 0)
-- 											then (((((it.itm_volume_calc /5000)-it.itm_weight))/it.Itm_weight)*100)
-- 											else -99999.99 end
-- 				, stack_height			= ex.ex_itm_stack_height
-- 				, stack_count			= ex.ex_itm_stack_count
-- 				, ex_itm_loc_code		= ex.ex_itm_loc_code
-- 				, etlcreatedatetime		= it.etlcreatedatetime
-- 				, etlupdatedatetime		= it.etlupdatedatetime
-- 				, updateddate			= NOW()::timestamp
-- 		FROM dwh.d_itemheader it
-- 		LEFT JOIN dwh.d_excessitemsuconvdetail ex
-- 			ON	it.itm_hdr_key	= ex.ex_itm_hdr_key
-- 		LEFT JOIN dwh.d_customer cus
-- 			ON	it.itm_ou		= cus.customer_ou
-- 			AND	it.itm_customer	= cus.customer_id
-- 		WHERE	it.itm_ou		= sm.sku_ou
-- 			AND it.itm_hdr_key	= sm.itm_hdr_key
-- 			AND ex.d_ex_itm_key = sm.d_ex_itm_key
-- 			AND ex.ex_itm_line_no	= sm.ex_itm_line_no
-- 			AND cus.customer_key	= sm.customer_key	
-- 			AND (COALESCE(it.etlupdatedatetime,it.etlcreatedatetime))::date >= v_maxdate;
-- 			--ou,item cd,locat,cust,line for unique key.


		Delete from click.f_skumaster sm
		using	dwh.d_itemheader it	,
				dwh.d_excessitemsuconvdetail ex
		where	it.itm_hdr_key	= sm.itm_hdr_key
		and 	ex.d_ex_itm_key	= sm.d_ex_itm_key
		AND		COALESCE(it.itm_modified_dt,it.itm_Created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;


		INSERT INTO click.f_skumaster
			(
				customer_key		, itm_hdr_key		, ex_location_key,
				ex_itm_loc_code		,
				sku_ou				, customer_code		, customer_name	, sku_code		,
				sku_name			, sku_type			, sku_length	, sku_breadth	, 
				sku_height 			, lbh_uom			, wght_in_kg	, sku_wght_uom	, 
				actual_vol_wght		, 
				calc_vol_wght		, 
				vol_wght_diff		,
				Wght_diff_percentage,
				stack_height	 	, stack_count		,
				d_ex_itm_key		, ex_itm_line_no	,
				etlcreatedatetime	, etlupdatedatetime	, createddate
			)

		SELECT 
				cus.customer_key		, it.itm_hdr_key		, ex.ex_location_key,
				ex.ex_itm_loc_code		,
				it.itm_ou				, it.itm_customer		, cus.customer_name	, it.itm_code		,
				it.itm_long_desc		, it.itm_type			, it.itm_length		, it.itm_breadth	,
				it.itm_height			, it.itm_uom			, it.Itm_weight		, it.itm_weight_uom	, 
				it.Itm_volume_weight	, 
				(it.itm_volume_calc /5000),
				((it.itm_volume_calc /5000)-it.Itm_weight)	,
				case when (it.itm_weight <> 0) then (((((it.itm_volume_calc /5000)-it.itm_weight))/it.Itm_weight)*100) else -99999.99 end case ,
				ex.ex_itm_stack_height	, ex.ex_itm_stack_count	,
				ex.d_ex_itm_key			, ex.ex_itm_line_no		,
				it.etlcreatedatetime	, it.etlupdatedatetime	, NOW()::timestamp
		FROM dwh.d_excessitemsuconvdetail ex
		INNER JOIN dwh.d_itemheader it
			ON	it.itm_hdr_key	= ex.ex_itm_hdr_key
		INNER JOIN dwh.d_customer cus
			ON	it.itm_ou		= cus.customer_ou
			AND	it.itm_customer	= cus.customer_id
		LEFT JOIN click.f_skumaster sm
			ON	it.itm_ou		= sm.sku_ou
			AND it.itm_hdr_key	= sm.itm_hdr_key
			AND ex.d_ex_itm_key = sm.d_ex_itm_key
			AND ex.ex_itm_line_no 	= sm.ex_itm_line_no
			AND cus.customer_key 	= sm.customer_key
			WHERE COALESCE(it.itm_modified_dt,it.itm_Created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
-- 			AND (COALESCE(it.etlupdatedatetime,it.etlcreatedatetime))::date >= v_maxdate ;
			
			--ou,item cd,locat,cust,line for unique key.

	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_skumaster','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

	END;
	
$$;


ALTER PROCEDURE click.usp_f_skumaster() OWNER TO proconnect;

--
-- Name: usp_f_sla_shipment(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_sla_shipment()
    LANGUAGE plpgsql
    AS $$
	declare 
		p_errorid integer;
		p_errordesc character varying;
begin

	insert into click.f_sla_shipment
	(
		shipment_dtl_key,				customer_key,					br_key,							loc_key,			vendor_key,
		sla_ou,                         sla_customer_id,                sla_br_id,                      sla_cust_ref_no,        
		sla_service_type,               sla_sub_service_type,           sla_location,                   agent_id,                                          
		agent_name,						opening_time,                   cutofftime,                     order_date_time,        		
		actual_delivered_date_time,     dispatch_exptd_date_time,       delivery_exptd_date_time,		
		createddate
	)
	select 
		coalesce(a.shipment_dtl_key,-1),coalesce(a.ship_customer_key,-1),coalesce(a.br_key,-1),			coalesce(a.ship_loc_key,-1),					coalesce(e.vendor_key,-1),
		a.ouinstance,					a.br_customer_id,				a.br_request_id,				a.br_customer_ref_no,
		a.service_type,					a.sub_service_type,				a.loc,							a.agent_id,
		e.vendor_name,					max(d.openingtime),				max(d.cutofftime),				max(coalesce(b.oub_orderdate , b.oub_modified_date))::timestamp as order_date_time,
		a.actual_departed::timestamp as actual_delivered_date_time,
		(case 
		when max(coalesce(b.oub_modified_date,b.oub_created_date))::time < max(d.cutofftime)
		then 
		max(coalesce(b.oub_modified_date,b.oub_created_date))::timestamp + (max(c.disptat) || ' minutes')::interval
		else 
		((max(coalesce(b.oub_modified_date,b.oub_created_date))+ interval '1 day')::date ||' '||(max(d.openingtime)))::timestamp + (max(c.disptat) || ' minutes')::interval 
		end 
		)as dis_expected_closure_time ,
		a.expected_datetodeliver as del_expected_closure_time,			now()::timestamp
	from click.f_shipment_details_bkb22122022 a
	inner join dwh.f_outboundheader b
	on  a.ouinstance        = b.oub_ou
	and a.loc               = left(b.oub_loc_code,6)
	and a.br_customer_ref_no= b.oub_prim_rf_dc_no
	left join dwh.d_wmsoutboundtat c
	on  c.ou           = b.oub_ou
	and c.locationcode = b.oub_loc_code
	and c.ordertype    = b.oub_order_type 
	and c.servicetype  = b.oub_shipment_type
	left join dwh.d_outboundlocshiftdetail d
	on  c.ou            = d.ou
	and c.locationcode  = d.locationcode
	and c.ordertype     = d.ordertype 
	and c.servicetype   = d.servicetype
	left join dwh.d_vendor e
	on  a.ouinstance	= e.vendor_ou
	and a.agent_id		= e.vendor_id
    where a.leg_behaviour='dvry'
	group by 	coalesce(a.shipment_dtl_key,-1),    coalesce(a.ship_customer_key,-1),   coalesce(a.br_key,-1),	coalesce(a.ship_loc_key,-1),    coalesce(e.vendor_key,-1),
                a.ouinstance,				        a.br_customer_id,		            a.br_request_id,		a.br_customer_ref_no,		    a.service_type,
				a.sub_service_type,			        a.loc,					            a.agent_id,				e.vendor_name,				    a.leg_behaviour,			
				a.actual_departed,			        a.expected_datetodeliver;

-----------------------------------------------------------------------------------------------------------------------------
	
    CREATE TEMP TABLE f_sla_shipment_pick_tmp
    AS SELECT ouinstance,br_customer_id,br_request_id,br_customer_ref_no,actual_departed
    FROM click.f_shipment_details 
    WHERE leg_behaviour = 'pick';
    --AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) =  2019; 

    UPDATE click.f_sla_shipment d
    SET actual_dispatched_date_time = DATE_PART('day', d.Actual_Departed::timestamp - a1.Actual_Departed::timestamp) + 1
    FROM tmp.f_sla_shipment_pick_tmp  a1
    WHERE d.ouinstance        =    a1.ouinstance    
    AND   d.br_customer_id    =    a1.br_customer_id
    AND   d.br_request_id     =    a1.br_request_id
    and   d.br_customer_ref_no=    a1.br_customer_ref_no;
   -- AND EXTRACT(YEAR FROM trip_plan_createddate::DATE) = 2019;
    
    
        
	update click.f_sla_shipment sla
	set 	dispatch_ontime_flag = (case when actual_dispatched_date_time::date <= dispatch_exptd_date_time then 1
										  when actual_dispatched_date_time::date >  dispatch_exptd_date_time then 0 
										  else null
									 end),
			deliver_ontime_flag =	(case when actual_delivered_date_time::date <= delivery_exptd_date_time then 1 
										  when actual_delivered_date_time::date >  delivery_exptd_date_time then 0 
										  else null
									 end)
	where extract(year from order_date_time::date)  = 2022;
	--where sla.order_date_time >= (now() - interval '3 months')::date;
	
	
	update click.f_sla_shipment sla
	set sla_category 	= (case when deliver_ontime_flag is null and dispatch_ontime_flag is not null and now()::date <= delivery_exptd_date_time then 'in transit'
								when deliver_ontime_flag is null and dispatch_ontime_flag is not null and now()::date >  delivery_exptd_date_time then 'un delivered'
						   end)
	where extract(year from order_date_time::date)  = 2022
	and sla_category is null;
	--where sla.order_date_time >= (now() - interval '3 months')::date;
	

	update click.f_sla_shipment sla
	set sla_category 	= (case when deliver_ontime_flag = 0  then 'breach'
								when deliver_ontime_flag = 1  then 'achieved'
						   end)
	where extract(year from order_date_time::date)  = 2022
	and sla_category is null;
	--where sla.sla_orderdate >= (now() - interval '3 months')::date;
	
	
	exception when others then       
	get stacked diagnostics p_errorid = returned_sqlstate, p_errordesc = message_text;
	call ods.usp_etlerrorinsert('click','f_sla_shipment','click',null,'de-normalized','sp_exceptionhandling',p_errorid,p_errordesc,null);
	
end;
$$;


ALTER PROCEDURE click.usp_f_sla_shipment() OWNER TO proconnect;

--
-- Name: usp_f_triplogplannedeventdetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_triplogplannedeventdetail()
    LANGUAGE plpgsql
    AS $_$

DECLARE 
    p_errorid integer;
	p_errordesc character varying;

BEGIN

TRUNCATE TABLE tmp.f_triplogeventdetail_pln;
INSERT INTO tmp.f_triplogeventdetail_pln (tled_ouinstance,tled_trip_plan_id,tled_trip_plan_line_no,tled_bkr_id,tled_leg_no,
									 PlannedTripStart,PlannedArrived,PlannedHandedOver,PlannedTakenOver,PlannedPickDepart,
									  PlannedDeliveryDepart,PlannedTripEnd)
SELECT  tled_ouinstance,            tled_trip_plan_id,              tled_trip_plan_line_no,
					tled_bkr_id,                tled_leg_no,                    TRIP_START AS PlannedTripStart,
					ARVD AS PlannedArrived,      HANDEDOVER AS PlannedHandedOver,   TAKENOVER AS PlannedTakenOver,
					DEP AS PlannedPickDepart,    DEPTD AS PlannedDeliveryDepart,  TRIP_END AS PlannedTripEnd
			FROM crosstab
			(
			  $$
                SELECT DENSE_RANK() OVER (ORDER BY tled_ouinstance, tled_trip_plan_id, tled_trip_plan_line_no, tled_bkr_id, tled_leg_no )::INT AS row_name,
						tled_ouinstance,	  tled_trip_plan_id,	 tled_trip_plan_line_no, 	  tled_bkr_id, 	  tled_leg_no, 
						tled_event_id, 
						MAX(tled_planned_datetime) AS tled_planned_datetime
                FROM dwh.f_triplogeventdetail log
				INNER JOIN dwh.F_tripplanningheader e 
				ON  log.plpth_hdr_key = e.plpth_hdr_key
				INNER JOIN dwh.f_tripplanningdetail d
				ON  log.plpth_hdr_key = d.plpth_hdr_key
				WHERE COALESCE(plpth_last_modified_date::DATE,plpth_created_date::DATE) >= (CURRENT_DATE - INTERVAL '90 days')::DATE
				AND plpth_trip_plan_status NOT IN ('DL')
                GROUP  BY tled_ouinstance,tled_trip_plan_id,tled_trip_plan_line_no, tled_bkr_id,tled_leg_no,tled_event_id
                ORDER BY 1, 2
			  $$,
			  $$
                VALUES ('TRIP_START'),('ARVD'), ('HANDEDOVER'), ('TAKENOVER'), ('DEP'), ('DEPTD'), ('TRIP_END')
			  $$
			) AS PIVOTTABLE 
			(
				row_name INT,
				tled_ouinstance INT ,
				tled_trip_plan_id CHARACTER VARYING,
				tled_trip_plan_line_no CHARACTER VARYING,
				tled_bkr_id CHARACTER VARYING,
				tled_leg_no INTEGER,
				TRIP_START   TIMESTAMP,
				ARVD TIMESTAMP,
				HANDEDOVER  TIMESTAMP,
				TAKENOVER  TIMESTAMP,
				DEP  TIMESTAMP,
				DEPTD  TIMESTAMP,
				TRIP_END  TIMESTAMP
			);

TRUNCATE TABLE tmp.f_triplogeventdetail_act;
INSERT INTO tmp.f_triplogeventdetail_act (tled_ouinstance,tled_trip_plan_id,tled_trip_plan_line_no,tled_bkr_id,tled_leg_no,
			 ActualTripStart,ActualArrived,ActualHandedOver,ActualTakenOver,ActualPickDepart,
									  ActualDeliveryDepart,ActualTripEnd)
SELECT  tled_ouinstance,            tled_trip_plan_id,              tled_trip_plan_line_no,
					tled_bkr_id,                tled_leg_no,                    TRIP_START AS ActualTripStart,
					ARVD AS ActualArrived,      HANDEDOVER AS ActualHandedOver, TAKENOVER AS ActualTakenOver,
					DEP AS ActualPickDepart,    DEPTD AS ActualDeliveryDepart,  TRIP_END AS ActualTripEnd
			FROM crosstab
			(
			  $$
                SELECT DENSE_RANK() OVER (ORDER BY tled_ouinstance, tled_trip_plan_id, tled_trip_plan_line_no, tled_bkr_id, tled_leg_no )::INT AS row_name,
						tled_ouinstance,	tled_trip_plan_id,		tled_trip_plan_line_no, 	tled_bkr_id,	 tled_leg_no, 
						tled_event_id, 
						MAX(tled_actual_date_time) AS tled_actual_date_time
                FROM dwh.f_triplogeventdetail log
				INNER JOIN dwh.F_tripplanningheader e 
				ON  log.plpth_hdr_key = e.plpth_hdr_key
				INNER JOIN dwh.f_tripplanningdetail d
				ON  log.plpth_hdr_key = d.plpth_hdr_key
				WHERE COALESCE(plpth_last_modified_date::DATE,plpth_created_date::DATE) >= (CURRENT_DATE - INTERVAL '90 days')::DATE
				AND plpth_trip_plan_status NOT IN ('DL')
                GROUP  BY tled_ouinstance,tled_trip_plan_id,tled_trip_plan_line_no,tled_bkr_id,tled_leg_no,tled_event_id
                ORDER BY 1, 2
			  $$,
			  $$
                VALUES ('TRIP_START'),('ARVD'), ('HANDEDOVER'), ('TAKENOVER'), ('DEP'), ('DEPTD'), ('TRIP_END')
			  $$
			) AS PIVOTTABLE 
			(
				row_name INT,
				tled_ouinstance INT ,
				tled_trip_plan_id CHARACTER VARYING,
				tled_trip_plan_line_no CHARACTER VARYING,
				tled_bkr_id CHARACTER VARYING,
				tled_leg_no INTEGER,
				TRIP_START   TIMESTAMP,
				ARVD TIMESTAMP,
				HANDEDOVER  TIMESTAMP,
				TAKENOVER  TIMESTAMP,
				DEP  TIMESTAMP,
				DEPTD  TIMESTAMP,
				TRIP_END  TIMESTAMP 
			);

TRUNCATE TABLE tmp.f_triplogthudetail_tmp;
INSERT INTO tmp.f_triplogthudetail_tmp (tltd_ouinstance,tltd_trip_plan_id,tltd_trip_sequence,tltd_dispatch_doc_no,
										tltd_trip_plan_line_id,tltd_volume,tltd_volume_uom)
	SELECT tl.tltd_ouinstance,	tl.tltd_trip_plan_id,	tl.tltd_trip_sequence,	 tl.tltd_dispatch_doc_no,		
				 tl.tltd_trip_plan_line_id,  SUM(tl.tltd_volume) AS tltd_volume,				tl.tltd_volume_uom
	FROM dwh.f_triplogthudetail tl 
	INNER JOIN dwh.F_tripplanningheader e 
	ON  tl.plpth_hdr_key = e.plpth_hdr_key
	INNER JOIN dwh.f_tripplanningdetail d
	ON  tl.plpth_hdr_key = d.plpth_hdr_key
	WHERE COALESCE(plpth_last_modified_date::DATE,plpth_created_date::DATE) >= (CURRENT_DATE - INTERVAL '90 days')::DATE
	AND plpth_trip_plan_status NOT IN ('DL')
	GROUP BY tl.tltd_ouinstance,tl.tltd_trip_plan_id,tl.tltd_trip_sequence,tl.tltd_dispatch_doc_no,tl.tltd_trip_plan_line_id,tl.tltd_volume_uom;

	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','usp_f_triplogplannedeventdetail','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

  

END;
$_$;


ALTER PROCEDURE click.usp_f_triplogplannedeventdetail() OWNER TO proconnect;

--
-- Name: usp_f_wh_space_detail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wh_space_detail()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
    
BEGIN

        TRUNCATE TABLE click.f_wh_space_detail
		RESTART IDENTITY;
        
        
        INSERT INTO click.f_wh_space_detail
	    (
			loc_key,                div_key,            OU,               		Division,                   Division_Name,          
            Location_Name,          Location_code,      Customer_Name,    		Customer_Code,              Super_BuildUp,          
            CarpeT_Area,            IB_staging_area,    OB_staging_area,  		Office_area,                Others,                 
            Storage_area,           Area_UOM,           Customer_IB_area, 		Customer_OB_area,           Customer_Office_area,   
            Customer_storage_area,  Customer_other_area,Customer_Total_area,	Customer_area_uom,	        Not_Allocated,          
            Status, 			    createddate
		)
		select 
			COALESCE(a.loc_pop_loc_key,-1), COALESCE(b.div_key,-1),a.loc_pop_ou,				e.div_code,					d.div_desc,				
            b.loc_desc,				a.loc_pop_code,             g.clo_cust_name,		g.clo_cust_code,			e.div_tot_area,			
            e.div_storg_area,		e.div_tot_stag_area,        e.div_outbound_area,	e.div_office_area,			e.div_other_area,
			(COALESCE(e.div_storg_area,0))-(COALESCE(e.div_tot_stag_area,0)+COALESCE(e.div_outbound_area,0)+COALESCE(e.div_office_area,0)+COALESCE(e.div_other_area,0)) as Storage_Area,
			e.div_area_uom,			a.loc_pop_tot_stag_area,	a.loc_outbound_area,	a.loc_office_area,			a.loc_pop_storg_area,
			a.loc_other_area,		(COALESCE(a.loc_pop_storg_area,0)+COALESCE(a.loc_other_area,0))as Customer_Total_Area,
			a.loc_pop_area_uom,		((COALESCE(e.div_storg_area,0))-(COALESCE(a.loc_pop_storg_area,0)+COALESCE(a.loc_other_area,0))) as Not_Allocated,
			(CASE
				WHEN (((COALESCE(e.div_storg_area,0))-(COALESCE(a.loc_pop_storg_area,0)+COALESCE(a.loc_other_area,0))))=0 Then 'Good'
				WHEN (((COALESCE(e.div_storg_area,0))-(COALESCE(a.loc_pop_storg_area,0)+COALESCE(a.loc_other_area,0))))<0 Then 'Conflict'
				WHEN (((COALESCE(e.div_storg_area,0))-(COALESCE(a.loc_pop_storg_area,0)+COALESCE(a.loc_other_area,0))))>0 Then 'Free Space'
			END) as Status, 		NOW()::TIMESTAMP
		from  dwh.f_locationareadetail a
		left join  dwh.d_location b
		on    a.loc_pop_loc_key = b.loc_key
		left join  dwh.d_division d
		on    d.div_key         = b.div_key
		left join  dwh.f_divisionareadetail e
		on    d.div_key         = e.div_key
		left join  dwh.d_customerLocDiv f
		on    b.loc_ou 			= f.wms_customer_ou
		and   b.loc_code 		= f.wms_customer_code
		left join  dwh.d_customerlocationinfo g
		on    g.clo_cust_code 	= f.wms_customer_id;
        
    EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','f_wh_space_detail','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);


END;
$$;


ALTER PROCEDURE click.usp_f_wh_space_detail() OWNER TO proconnect;

--
-- Name: usp_f_wmsibsummary(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsibsummary()
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_errorid integer;
	p_errordesc character varying;
	p_depsource VARCHAR(100);
	
BEGIN

		SELECT 	depsource
		INTO 	p_depsource
		FROM 	ods.dwhtoclickcontroldtl
		WHERE 	objectname = 'usp_f_wmsibsummary'; 

	IF EXISTS 
		 (
			 SELECT 1 FROM ods.dwhtoclickcontroldtl
			 WHERE	objectname = p_depsource
			 AND	status = 'completed'
			 AND	CAST(COALESCE(loadenddatetime,loadstartdatetime) AS DATE) >= NOW()::DATE
		 )
	THEN

 	TRUNCATE TABLE click.f_wmsinboundsummary RESTART IDENTITY;
	
--	DELETE FROM click.f_wmsinboundsummary WHERE asn_createddate >= (NOW() - INTERVAL '12 MONTHS')::DATE;

	INSERT INTO click.f_wmsinboundsummary
	(
		ou_id, 				customer_key, 		customer_id, 		datekey, 	asn_date,		 		item_group, 
		item_class, 		loc_key, 			loc_code, 			asn_type, 			inb_type,			grn_status,
		pway_status,		
		totalinbound,		
		grn_hht_ind,		
		pway_hht_ind
	
	)
	SELECT 
		fa.asn_ou,			fa.asn_cust_key,	fa.asn_cust_code,	d.datekey,
		(COALESCE(fa.asn_modified_date,fa.asn_created_date))::DATE,	i.itm_itemgroup,
		i.itm_class,		fa.asn_loc_key,		fa.asn_location,	fa.asn_prefdoc_type,fa.asn_type,		fg.gr_pln_status,
		fp.pway_pln_status,		
		COALESCE(COUNT(DISTINCT fa.asn_no),0) totalinbound,
		COALESCE(CASE WHEN MIN(fg.gr_gen_from) = 'WMS_MOB' THEN 1 ELSE 0 END,0) AS grn_hht,
		COALESCE(CASE WHEN MIN(fp.pway_gen_from) = 'WMS_MOB' THEN 1 ELSE 0 END,0) AS Pway_hht
	FROM click.f_asn fa
	INNER JOIN dwh.d_itemheader i
		ON  fa.asn_dtl_itm_hdr_key 	= i.itm_hdr_key
	INNER JOIN click.d_date d
		ON dateactual = (COALESCE(fa.asn_modified_date,fa.asn_created_date))::DATE
	LEFT JOIN click.f_grn fg
		ON  fa.asn_key				= fg.asn_key
	LEFT JOIN click.f_putaway fp
		ON  fg.grn_key 				= fp.grn_key
	WHERE 	fa.asn_status NOT IN('FR','UA','CNL')	
-- 	COALESCE(fa.asn_modified_date,fa.asn_created_date)::DATE >= (NOW() - INTERVAL '12 MONTHS')::DATE 
-- 	AND 	
	GROUP BY
		fa.asn_ou,			fa.asn_cust_key,	fa.asn_cust_code,	datekey,(COALESCE(fa.asn_modified_date,fa.asn_created_date)),
		i.itm_itemgroup,
		i.itm_class,		fa.asn_loc_key,		fa.asn_location,	fa.asn_prefdoc_type,fa.asn_type,		fg.gr_pln_status,
		fp.pway_pln_status;
		
		
	/*Update ReceivedLine, ReceivedVolume and ReceivedUnit column in Summary Table*/	
	
	UPDATE click.f_wmsinboundsummary wis
	SET
		receivedlinecount 	= COALESCE(s.receivedline,0),
		CUMvolume 			= COALESCE(s.CUMreceivedvolume,0),
		CUCMvolume 			= COALESCE(s.CUCMreceivedvolume,0),
		receivedunit 		= COALESCE(s.receivedunit,0)
	FROM
	(
		SELECT 
		
		asn_ou,				asn_cust_key,		datekey,	itm_itemgroup,	itm_class,		
		asn_loc_key,		asn_prefdoc_type,	asn_type,		gr_pln_status,
		pway_pln_status,
		SUM(receivedline) receivedline,
		SUM(CUMreceivedvolume) CUMreceivedvolume,
		SUM(CUCMreceivedvolume) CUCMreceivedvolume,
		SUM(receivedunit) receivedunit 
		FROM
		(
			SELECT
				fa.asn_ou,			fa.asn_cust_key,	d.datekey,	i.itm_itemgroup,	i.itm_class,		
				fa.asn_loc_key,		fa.asn_prefdoc_type,fa.asn_type,		fg.gr_pln_status,
				fp.pway_pln_status,			
				COALESCE(COUNT(DISTINCT fg.gr_lineno),0) receivedline,
				CASE WHEN itm_volume_uom ='CUM' THEN COALESCE(SUM(itm_volume_calc),0) END CUMreceivedvolume,
				CASE WHEN itm_volume_uom ='CUCM' THEN COALESCE(SUM(itm_volume_calc),0) END CUCMreceivedvolume,
				COALESCE(SUM(fg.gr_item_qty),0) receivedunit
			FROM click.f_asn fa
			INNER JOIN dwh.d_itemheader i
				ON  fa.asn_dtl_itm_hdr_key 	= i.itm_hdr_key
			INNER JOIN click.d_date d
			ON dateactual = (COALESCE(fa.asn_modified_date,fa.asn_created_date))::DATE
			LEFT JOIN click.f_grn fg
				ON  fa.asn_key				= fg.asn_key
			LEFT JOIN click.f_putaway fp
				ON  fg.grn_key 				= fp.grn_key
			
			WHERE fa.asn_status NOT IN('FR','UA','CNL')
			GROUP BY
				fa.asn_ou,			fa.asn_cust_key,	d.datekey,	i.itm_itemgroup,	i.itm_class,		
				fa.asn_loc_key,		fa.asn_prefdoc_type,fa.asn_type,		fg.gr_pln_status,
				fp.pway_pln_status,	itm_volume_uom	
				
		) sq
		GROUP BY
				asn_ou,				asn_cust_key,		datekey,	itm_itemgroup,	itm_class,		
				asn_loc_key,		asn_prefdoc_type,	asn_type,		gr_pln_status,
				pway_pln_status
	) s
	WHERE 	wis.ou_id 							= s.asn_ou
		AND wis.customer_key 					= s.asn_cust_key
		AND wis.datekey 						= s.datekey
		AND COALESCE(wis.item_group,'NULL') 	= COALESCE(s.itm_itemgroup,'NULL')
		AND COALESCE(wis.item_class,'NULL') 	= COALESCE(s.itm_class,'NULL')
		AND wis.loc_key 						= s.asn_loc_key
		AND COALESCE(wis.asn_type,'NULL') 		= COALESCE(s.asn_prefdoc_type,'NULL')
		AND COALESCE(wis.inb_type,'NULL') 		= COALESCE(s.asn_type,'NULL')	
		AND COALESCE(wis.grn_status,'NULL') 	= COALESCE(s.gr_pln_status,'NULL')	
		AND COALESCE(wis.pway_status,'NULL') 	= COALESCE(s.pway_pln_status,'NULL');	
			
    ELSE	
	p_errorid   := 0;
		IF p_depsource IS NULL
			THEN 
			 	p_errordesc := 'The Dependent source cannot be NULL.';
			ELSE
				p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source.';
			END IF;
		CALL ods.usp_etlerrorinsert('DWH','usp_f_wmsibsummary','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	END IF;

		
	EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert('DWH','usp_f_wmsibsummary','DWtoClick',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

END;
$$;


ALTER PROCEDURE click.usp_f_wmsibsummary() OWNER TO proconnect;

--
-- Name: usp_f_wmsinboundsladetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsinboundsladetail()
    LANGUAGE plpgsql
    AS $$
DECLARE 
		p_errorid integer;
		p_errordesc character varying;
		p_depsource VARCHAR(100);
BEGIN

SELECT 	depsource
		INTO 	p_depsource
		FROM 	ods.dwhtoclickcontroldtl
		WHERE 	objectname = 'usp_f_wmsinboundsladetail'; 

	IF EXISTS 
		 (
			 SELECT 1 FROM ods.dwhtoclickcontroldtl
			 WHERE	objectname = p_depsource
			 AND	status = 'completed'
			 AND	CAST(COALESCE(loadenddatetime,loadstartdatetime) AS DATE) >= NOW()::DATE
		 )
	THEN

	TRUNCATE TABLE click.f_inboundsladetail RESTART IDENTITY;
		--DELETE FROM click.f_inboundsladetail WHERE sla_dateactual >= (NOW() - INTERVAL '12 MONTHS')::DATE;
		INSERT INTO click.f_inboundsladetail
			(
				sla_ouid, 			sla_customerkey, 	sla_customerid,     sla_datekey, 			sla_dateactual, 	
				sla_lockey, 		sla_loccode, 		sla_preftype, 		sla_asntype,			sla_grnstatus,			
				sla_prefdocno,		sla_pwaystatus,		sla_supasnno,
				sla_grexpclstime,	sla_pwayexpclstime,	sla_prexpclstime,	sla_ordtime,
				sla_cutofftime,		sla_Putawayexecdate,sla_grexecdate,		asn_timediff_inmin,		grn_timediff_inmin,
				pway_timediff_inmin,	sla_Equipmentflag
			)
		SELECT
				fa.asn_ou,		fa.asn_cust_key,	fa.asn_cust_code,	fa.asn_date_key,	MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::DATE,      
				fa.asn_loc_key, fa.asn_location,	fa.asn_prefdoc_type,fa.asn_type,		fg.gr_pln_status,	
				asn_prefdoc_no, fp.pway_pln_status,	fa.asn_sup_asn_no,
			(CASE WHEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp + (MAX(grtat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(fa.asn_modified_date,fa.asn_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(grtat) || ' Minutes')::INTERVAL 
			END )
			GRExpectedClosureTime,
			(CASE WHEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp + (MAX(putawaytat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(putawaytat) || ' Minutes')::INTERVAL 
			END )
			PAExpectedClosureTime ,
			(CASE WHEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME < MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN (MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::DATE || (' 23:59:00.000'))::TIMESTAMP
				WHEN  MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME >= MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN ((MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))+ INTERVAL '1 DAY')::DATE + MAX(cutofftime))::TIMESTAMP 
			 	WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME < MAX(cutofftime) 
			 THEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME >= MAX(cutofftime) 
			 THEN 
			 ((MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				END)ExpClosureDateTime,
				MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::TIME,
				MAX(tat.cutofftime),	MAX(fp.pway_exec_end_date)::timestamp,	MAX(fg.gr_itmexecution_date)::timestamp,
			ABS(CASE WHEN MIN(fa.asn_gate_no) IS NOT NULL 
			THEN DATE_PART('minute', MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp - MAX(fa.gate_actual_date)::timestamp) 
			ELSE DATE_PART('minute', MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp - MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp) END) AS asntime,
		ABS(CASE WHEN MAX(fg.gr_itmexecution_date) IS NOT NULL
			THEN DATE_PART('minute', MAX(fg.gr_itmexecution_date)::timestamp - MIN(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp) 
			ELSE 0 END) AS grntime,
		ABS(CASE WHEN MAX(fp.pway_exec_end_date) IS NOT NULL 
			THEN DATE_PART('minute', MAX(fp.pway_exec_end_date)::timestamp - MAX(fg.gr_itmexecution_date)::timestamp) 
			ELSE 0 END) AS pwaytime,
			CASE WHEN pway_mhe_id IS NOT NULL THEN 1 ELSE 0 END
		FROM click.f_asn fa
		LEFT JOIN click.f_grn fg
			ON  fa.asn_key				= fg.asn_key
		LEFT JOIN dwh.d_inboundtat tat
			ON  fa.asn_location			= tat.locationcode
			AND fa.asn_ou				= tat.ou
			AND fa.asn_prefdoc_type		= tat.ordertype
			AND fa.asn_type				= tat.servicetype
		LEFT JOIN click.f_putaway fp
			ON  fg.grn_key 				= fp.grn_key
		WHERE fa.asn_status 				NOT IN('FR','UA','CNL')
-- 		COALESCE(fa.asn_modified_date,fa.asn_created_date)::DATE 		>= (NOW() - INTERVAL '12 MONTHS')::DATE 
-- 		AND 
		GROUP BY
			fa.asn_ou,		fa.asn_cust_key,	fa.asn_cust_code,	fa.asn_date_key,	
			fa.asn_loc_key, fa.asn_location,	fa.asn_prefdoc_type,fa.asn_sup_asn_no,fa.asn_type,		fg.gr_pln_status,	
			asn_prefdoc_no, fp.pway_pln_status;
			
		/*Update grontime, pwayontime and prontime column in Summary Table*/	
		UPDATE click.f_inboundsladetail wis
		SET
		sla_grontime 	= (CASE WHEN sla_grexecdate 	 <= sla_grexpclstime 	THEN 1 
						   WHEN sla_grexecdate 	 > sla_grexpclstime THEN 0 ELSE NULL END),
		sla_pwayontime 	= (CASE WHEN sla_Putawayexecdate <= sla_pwayexpclstime 	THEN 1 
						   WHEN sla_Putawayexecdate > sla_pwayexpclstime 	THEN 0 ELSE NULL END),
		sla_prontime 	= (CASE WHEN sla_Putawayexecdate <= sla_prexpclstime 	THEN 1
						   WHEN sla_Putawayexecdate > sla_prexpclstime THEN 0 ELSE NULL END);	
		--WHERE sla_dateactual >= (NOW() - INTERVAL '12 MONTHS')::DATE;
		
		UPDATE click.f_inboundsladetail wis
		SET
			sla_category 	= (
								CASE WHEN sla_prontime IN (0,1) AND Remarks IS NOT NULL THEN 'Remarks'
								END
								)				
		FROM dwh.f_deliverydelayreason dr
		WHERE wis.sla_lockey			= dr.wms_loc_key
		AND  wis.sla_supasnno		= dr.invoiceno;
-- 		wis.sla_dateactual >= (NOW() - INTERVAL '12 MONTHS')::DATE
-- 		AND 

		
		UPDATE click.f_inboundsladetail wis
		SET	sla_category 	=(CASE WHEN sla_prontime = 1 AND sla_ordtime >= sla_cutofftime THEN 'Premium'
									ELSE 'Achieved' END);
		--WHERE sla_dateactual >= (NOW() - INTERVAL '12 MONTHS')::DATE;
		
			
		UPDATE click.f_inboundsladetail wis
		SET
			sla_category 	= (
								CASE WHEN sla_prontime = 0 THEN 'Breach'
								END
								);				
		--WHERE sla_dateactual >= (NOW() - INTERVAL '12 MONTHS')::DATE;

		UPDATE click.f_inboundsladetail 
		SET sla_category 	= 'Achived'	
		WHERE sla_prontime IS NULL
		AND sla_prexpclstime IS NULL
		AND sla_grexecdate IS NOT NULL;			
-- 			wis.sla_dateactual >= (NOW() - INTERVAL '12 MONTHS')::DATE

	END IF;
		EXCEPTION WHEN others THEN       

		GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;

		CALL ods.usp_etlerrorinsert('CLICK','usp_f_wmsinboundsladetailFull','Click',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);		
			
END;
$$;


ALTER PROCEDURE click.usp_f_wmsinboundsladetail() OWNER TO proconnect;

--
-- Name: usp_f_wmsinboundsladetailday(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsinboundsladetailday()
    LANGUAGE plpgsql
    AS $$
DECLARE 
		p_errorid integer;
		p_errordesc character varying;
		p_depsource VARCHAR(100);
BEGIN

SELECT 	depsource
		INTO 	p_depsource
		FROM 	ods.dwhtoclickcontroldtl
		WHERE 	objectname = 'usp_f_wmsinboundsladetail'; 

	IF EXISTS 
		 (
			 SELECT 1 FROM ods.dwhtoclickcontroldtl
			 WHERE	objectname = p_depsource
			 AND	status = 'completed'
			 AND	CAST(COALESCE(loadenddatetime,loadstartdatetime) AS DATE) >= NOW()::DATE
		 )
	THEN

		DELETE FROM click.f_inboundsladetail WHERE sla_dateactual >= (CURRENT_DATE)::DATE;
		INSERT INTO click.f_inboundsladetail
			(
				sla_ouid, 			sla_customerkey, 	sla_customerid,     sla_datekey, 			sla_dateactual, 	
				sla_lockey, 		sla_loccode, 		sla_preftype, 		sla_asntype,			sla_grnstatus,			
				sla_prefdocno,		sla_pwaystatus,		sla_supasnno,
				sla_grexpclstime,	sla_pwayexpclstime,	sla_prexpclstime,	sla_ordtime,
				sla_cutofftime,		sla_Putawayexecdate,sla_grexecdate
			)
	SELECT
				fa.asn_ou,		fa.asn_cust_key,	fa.asn_cust_code,	fa.asn_date_key,	MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::DATE,      
				fa.asn_loc_key, fa.asn_location,	fa.asn_prefdoc_type,fa.asn_type,		fg.gr_pln_status,	
				asn_prefdoc_no, fp.pway_pln_status,	fa.asn_sup_asn_no,
			(CASE WHEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp + (MAX(grtat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(fa.asn_modified_date,fa.asn_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(grtat) || ' Minutes')::INTERVAL 
			END )
			GRExpectedClosureTime,
			(CASE WHEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::timestamp + (MAX(putawaytat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(putawaytat) || ' Minutes')::INTERVAL 
			END )
			PAExpectedClosureTime ,
			(CASE WHEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME < MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN (MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::DATE || (' 23:59:00.000'))::TIMESTAMP
				WHEN  MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME >= MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN ((MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))+ INTERVAL '1 DAY')::DATE + MAX(cutofftime))::TIMESTAMP 
			 	WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME < MAX(cutofftime) 
			 THEN MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))::TIME >= MAX(cutofftime) 
			 THEN 
			 ((MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				END)ExpClosureDateTime,
				MAX(COALESCE(fa.asn_modified_date,fa.asn_created_date,'1900-01-01'))::TIME,
				MAX(tat.cutofftime),	MAX(fp.pway_exec_end_date)::timestamp,	MAX(fg.gr_itmexecution_date)::timestamp
		FROM click.f_asn fa
		LEFT JOIN click.f_grn fg
			ON  fa.asn_key				= fg.asn_key
		LEFT JOIN dwh.d_inboundtat tat
			ON  fa.asn_location			= tat.locationcode
			AND fa.asn_ou				= tat.ou
			AND fa.asn_prefdoc_type		= tat.ordertype
			AND fa.asn_type				= tat.servicetype
		LEFT JOIN click.f_putaway fp
			ON  fg.grn_key 				= fp.grn_key
		WHERE COALESCE(fa.asn_modified_date,fa.asn_created_date)::DATE	>= (CURRENT_DATE)::DATE
		AND fa.asn_status 				NOT IN('FR','UA','CNL')
		GROUP BY
			fa.asn_ou,		fa.asn_cust_key,	fa.asn_cust_code,	fa.asn_date_key,	
			fa.asn_loc_key, fa.asn_location,	fa.asn_prefdoc_type,fa.asn_sup_asn_no,fa.asn_type,		fg.gr_pln_status,	
			asn_prefdoc_no, fp.pway_pln_status;
			
			/*Update grontime, pwayontime and prontime column in Summary Table*/	
		UPDATE click.f_inboundsladetail wis
		SET
		sla_grontime 	= (CASE WHEN sla_grexecdate 	 <= sla_grexpclstime 	THEN 1 
						   WHEN sla_grexecdate 	 > sla_grexpclstime THEN 0 ELSE NULL END),
		sla_pwayontime 	= (CASE WHEN sla_Putawayexecdate <= sla_pwayexpclstime 	THEN 1 
						   WHEN sla_Putawayexecdate > sla_pwayexpclstime 	THEN 0 ELSE NULL END),
		sla_prontime 	= (CASE WHEN sla_Putawayexecdate <= sla_prexpclstime 	THEN 1
						   WHEN sla_Putawayexecdate > sla_prexpclstime THEN 0 ELSE NULL END)		
		WHERE sla_dateactual >= (CURRENT_DATE)::DATE;
		
		
		UPDATE click.f_inboundsladetail wis
		SET
			sla_category 	= (
								CASE WHEN sla_prontime IN (0,1) AND Remarks IS NOT NULL THEN 'Remarks'
								END
								)				
		FROM dwh.f_deliverydelayreason dr
		WHERE	wis.sla_dateactual >= (CURRENT_DATE)::DATE
		AND fa.asn_loc_key			= dr.wms_loc_key
		AND  fa.asn_sup_asn_no		= dr.invoiceno;
		
		UPDATE click.f_inboundsladetail wis
		SET	sla_category 	=(CASE WHEN sla_prontime = 1 AND sla_ordtime >= sla_cutofftime THEN 'Premium'
									ELSE 'Achieved' END)
		WHERE sla_dateactual >= (CURRENT_DATE)::DATE;
		
			
		UPDATE click.f_inboundsladetail wis
		SET
			sla_category 	=  (
								CASE WHEN sla_prontime = 0 AND Remarks IS NULL THEN 'Breach' END
							   )				
		WHERE	wis.sla_dateactual >= (CURRENT_DATE)::DATE;


		UPDATE click.f_inboundsladetail 
		SET sla_category 	= 'Achived'	
		WHERE sla_dateactual >= (CURRENT_DATE)::DATE
		AND sla_prontime IS NULL
		AND sla_prexpclstime IS NULL
		AND sla_grexecdate IS NOT NULL;			
	END IF;
		EXCEPTION WHEN others THEN       

		GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;

		CALL ods.usp_etlerrorinsert('CLICK','usp_f_wmsinboundsladetailday','Click',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	
			
END;
$$;


ALTER PROCEDURE click.usp_f_wmsinboundsladetailday() OWNER TO proconnect;

--
-- Name: usp_f_wmsoutboundorddetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsoutboundorddetail()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
BEGIN

DELETE FROM click.f_outboundsladetail sla
USING click.f_outboundorderdetail ord
WHERE sla.sla_ordkey = ord.ord_key
AND ord.ord_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE;

DELETE FROM click.f_outboundpickpackdetail pick
USING click.f_outboundorderdetail ord
WHERE pick.pickpack_ordkey = ord.ord_key
AND ord.ord_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE;

DELETE FROM click.f_outboundorderdetail 
WHERE ord_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE;

INSERT INTO click.f_outboundorderdetail
(
	ord_lockey,
	ord_custkey,
	ord_datekey,
	ord_custcode,
	ord_ou,
	ord_loccode,
	ord_refdoctype,
	ord_ordertype ,
	ord_obstatus ,
	ord_orderdate,
	ord_shipmentmode ,
	ord_shipmenttype ,
	ord_subservicetype,
	ord_state ,
    ord_city ,
    ord_postcode,
	ord_refdocno,
	ord_itmlineno,
	ord_ordqty,
	ord_balqty,
	ord_issueqty,
	ord_processqty,
	ord_itmvolume,
	ord_itmwgt,
	ord_wavestatus,
	ord_waveallocrule,
	ord_waveqty
)
SELECT 	obh_loc_key,	
		obh_cust_key,	
		oub_orderdatekey,
		oub_cust_code,
		oub_ou,	
		obh.oub_loc_code,	
		obh.oub_prim_rf_dc_typ,	
		obh.oub_order_type,	
		obh.oub_ob_status,	
		COALESCE(obh.oub_modified_date,obh.oub_created_date)::DATE,	
		obh.oub_shipment_mode,	
		obh.oub_shipment_type,
		obh.oub_subservice_type,	
		obh.oub_state,	
		obh.oub_city,	
		obh.oub_postcode,
		oub_prim_rf_dc_no,
		COUNT(oub_itm_lineno),
		SUM(COALESCE(oub_itm_order_qty,0)),
		SUM(COALESCE(oub_itm_balqty,0)),
		SUM(COALESCE(oub_itm_issueqty,0)),
		SUM(COALESCE(oub_itm_processqty,0)),
		SUM(obd.oub_itm_volume),
		SUM(obd.oub_itm_weight),
		wh.wave_status,
		wh.wave_alloc_rule,
		SUM(wave_qty)
FROM  dwh.F_OutboundHeader obh
INNER JOIN dwh.F_OutboundItemDetail obd
ON	obh.obh_hr_key = obd.obh_hr_key
AND obh.oub_orderdate::DATE  >= (NOW() - INTERVAL '3 MONTHS')::DATE
LEFT JOIN dwh.f_wavedetail wd
ON  wd.wave_ou 		 = obh.oub_ou
AND wd.wave_loc_key  = obh.obh_loc_key
AND wd.wave_cust_key = obh.obh_cust_key
AND wd.wave_item_key = obd.obd_itm_key
AND wd.wave_so_no 	 = obh.oub_prim_rf_dc_no
LEFT JOIN dwh.f_waveheader wh
ON  wd.wave_hdr_key = wh.wave_hdr_key
GROUP BY 
		obh_loc_key,	
		oub_orderdatekey,
		obh_cust_key,	
		oub_cust_code,
		oub_ou,	
		obh.oub_loc_code,	
		obh.oub_prim_rf_dc_typ,	
		obh.oub_order_type,	
		obh.oub_ob_status,	
		COALESCE(obh.oub_modified_date,obh.oub_created_date)::DATE,	
		obh.oub_shipment_mode,	
		obh.oub_shipment_type,
		obh.oub_subservice_type,	
		obh.oub_state,	
		obh.oub_city,	
		obh.oub_postcode,
		oub_prim_rf_dc_no,
		wh.wave_status,
		wh.wave_alloc_rule;
		
	EXCEPTION WHEN others THEN       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert('CLICK','f_wmsoutboundorddetail','CLICK',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
	

END;
$$;


ALTER PROCEDURE click.usp_f_wmsoutboundorddetail() OWNER TO proconnect;

--
-- Name: usp_f_wmsoutboundpickpackdetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsoutboundpickpackdetail()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
BEGIN

INSERT INTO click.f_outboundpickpackdetail(
	pickpack_ou,
	pickpack_lockey,
	pickpack_ordkey,
	pickpack_refdocno,
	pickexecstatus,
	picklineno,
	pickqty,
	pickemployee ,
	pickmechine ,
	pickhttflag ,
	pickthuwgt	
)
SELECT 
		sum1.ord_ou,
		sum1.ord_lockey,
		sum1.ord_key,
		sum1.ord_refdocno,
		PickH.pick_exec_status,
		COUNT(PickD.pick_lineno),
		SUM(PickD.pick_qty),
		COUNT(PickH.pick_employee),
		COUNT(PickH.pick_mhe),
		CASE WHEN PickH.pick_gen_from = 'WMS_MOB' THEN 1 ELSE 0 END HTTFlag,
		SUM(PickD.pick_exec_thu_wt)
FROM click.f_outboundorderdetail sum1
INNER JOIN dwh.f_pickingdetail PickD
ON  sum1.ord_ou =  PickD.pick_exec_ou
AND sum1.ord_lockey = PickD.pick_loc_key
AND sum1.ord_refdocno = PickD.pick_so_no
INNER JOIN dwh.f_pickingheader PickH
ON PickH.pick_hdr_key = PickD.pick_hdr_key
--WHERE pickD.pick_so_no = 'W310000070'
GROUP BY 
sum1.ord_ou,
sum1.ord_lockey,
sum1.ord_key,
sum1.ord_refdocno,
PickH.pick_exec_status,
PickH.pick_gen_from;

UPDATE click.f_outboundpickpackdetail t1
SET packexecstatus  = p1.packexecstatus,
	packlineno	 = p1.totlineno,
	packqty		 = p1.totpackqty,
	packtolqty 	 = p1.tottolqty,
	packemployee = p1.totemp
FROM 
	(	SELECT 
			sum1.ord_ou,
			sum1.ord_lockey,
			sum1.ord_key,
			sum1.ord_refdocno,
			PackH.pack_exec_status as packexecstatus,
			COUNT(PackD.pack_thu_lineno) as totlineno,
			SUM(PackD.pack_thu_pack_qty) as totpackqty,
			SUM(PackD.pack_tolerance_qty) as tottolqty,
			COUNT(PackH.pack_employee)	 as totemp
		FROM click.f_outboundorderdetail sum1
		LEFT JOIN dwh.F_PackExecTHUDetail PackD
		ON  sum1.ord_ou = PackD.pack_exec_ou
		AND sum1.ord_lockey  = PackD.pack_exec_loc_key
		AND sum1.ord_refdocno = PackD.pack_so_no
		LEFT JOIN dwh.F_PackExecHeader PackH
		ON PackH.pack_exe_hdr_key = PackD.pack_exec_hdr_key
		GROUP BY 
		sum1.ord_ou,
		sum1.ord_lockey,
		sum1.ord_key,
		sum1.ord_refdocno,
		PackH.pack_exec_status
	) P1
WHERE 	t1.pickpack_ordkey		=	p1.ord_key;
		
	EXCEPTION WHEN others THEN       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert('CLICK','f_wmsoutboundpickpackdetail','CLICK',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);
			

END;
$$;


ALTER PROCEDURE click.usp_f_wmsoutboundpickpackdetail() OWNER TO proconnect;

--
-- Name: usp_f_wmsoutboundsladetail(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsoutboundsladetail()
    LANGUAGE plpgsql
    AS $$
	DECLARE 
		p_errorid integer;
		p_errordesc character varying;
BEGIN

DELETE FROM click.f_outboundsladetail 
WHERE extract(year from sla_orderdate::Date) = 2022;
--sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE;
--extract(year from sla_orderdate::Date) = 2022;
INSERT INTO click.f_outboundsladetail
(	
    sla_ou,
	sla_lockey,
	sla_ordkey,
	sla_loccode,
	sla_ordertype,
	sla_shipmenttype,
	sla_sono,
	sla_orderdate,
	sla_ordtime,
	sla_cutofftime,
	sla_pickexecdt,
	sla_packexecdt,
	sla_pickexpdt,
	sla_packexpdt,
	sla_processexpdt
)
SELECT 
			obh.oub_ou,
			obh.obh_loc_key,
			obh.obh_hr_key,
			obh.oub_loc_code,
			obh.oub_order_type,
			obh.oub_shipment_type,
			obh.oub_prim_rf_dc_no,
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date) :: DATE),
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date)::TIME),
			MAX(cutofftime),
			MAX(pick_exec_end_date),
			MAX(pack_exec_end_date),
			(CASE WHEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::timestamp + (MAX(picktat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(picktat) || ' Minutes')::INTERVAL 
			END )as PickExpclsdt,
			(CASE WHEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::timestamp + (MAX(packtat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(packtat) || ' Minutes')::INTERVAL 
			END )
			as PackExpclsdt,
			(CASE WHEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN (MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::DATE || (' 23:59:00.000'))::TIMESTAMP
				WHEN  MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME >= MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN ((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE + MAX(cutofftime))::TIMESTAMP 
			 	WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime) 
			 THEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME >= MAX(cutofftime) 
			 THEN 
			 ((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				END) ExpClosureDateTime
		FROM dwh.F_OutboundHeader obh
		INNER JOIN dwh.f_pickingdetail PickD
		ON  obh.oub_ou =  PickD.pick_exec_ou
		AND obh.obh_loc_key = PickD.pick_loc_key
		AND obh.oub_prim_rf_dc_no = PickD.pick_so_no
		INNER JOIN dwh.f_pickingheader PickH
		ON PickH.pick_hdr_key = PickD.pick_hdr_key
		INNER JOIN dwh.F_PackExecTHUDetail PackD
		ON  PackD.pack_exec_ou = PickD.pick_exec_ou
		AND PackD.pack_exec_loc_key  = PickD.pick_loc_key
		AND PackD.pack_so_no = pickD.pick_so_no
		INNER JOIN dwh.F_PackExecHeader PackH
		ON PackH.pack_exe_hdr_key = PackD.pack_exec_hdr_key
		LEFT JOIN dwh.D_WMSOutboundTAT TAT
		ON TAT.ou = obh.oub_ou
		AND TAT.locationcode = obh.oub_loc_code
		AND TAT.ordertype = obh.oub_order_type 
		AND TAT.servicetype = obh.oub_shipment_type
		LEFT JOIN dwh.D_OutboundLocShiftDetail shift
		ON TAT.ou = shift.ou
		AND TAT.locationcode = shift.locationcode
		AND TAT.ordertype = shift.ordertype 
		AND TAT.servicetype = shift.servicetype
		WHERE obh.oub_ob_status <> 'CN'
		--AND extract(year from COALESCE(obh.oub_modified_date,obh.oub_created_date)::Date) = 2022
		AND COALESCE(obh.oub_modified_date,obh.oub_created_date)::Date  >= (NOW() - INTERVAL '3 MONTHS')::DATE
		GROUP BY 
			obh.oub_ou,
			obh.obh_loc_key,
			obh.obh_hr_key,
			obh.oub_loc_code,
			obh.oub_order_type,
			obh.oub_shipment_type,
			obh.oub_prim_rf_dc_no;
			
UPDATE click.f_outboundsladetail SLA
SET 	sla_pickontimeflag = 	CASE WHEN sla_pickexecdt <= sla_pickexpdt THEN 1 
								WHEN sla_pickexecdt > sla_pickexpdt THEN 0
								ELSE NULL END,
		sla_packontimeflag =	CASE WHEN sla_packexecdt <= sla_packexpdt THEN 1 
								WHEN sla_packexecdt > sla_packexpdt THEN 0
								ELSE NULL END,
		sla_procontimeflag = 	CASE WHEN sla_packexecdt <= sla_processexpdt THEN 1 
								WHEN sla_packexecdt > sla_processexpdt THEN 0
								ELSE NULL END 	
--WHERE extract(year from sla_orderdate::Date)  = 2022;
WHERE SLA.sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE;

UPDATE click.f_outboundsladetail SLA
SET SLA_Category 	= (CASE WHEN SLA_ProcONTimeFlag in (0,1) AND Remarks IS NOT NULL 
					   THEN 'Remarks' END
					   )
FROM dwh.F_DeliveryDelayReason DEL
--WHERE extract(year from sla_orderdate::Date)  = 2022
WHERE SLA.sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE
AND DEL.tranou = SLA.sla_ou
AND DEL.locationcode = SLA.sla_loccode
AND DEL.invoiceno = SLA.sla_sono;

UPDATE click.f_outboundsladetail SLA
SET SLA_Category 	= (	CASE WHEN (sla_procontimeflag = 1) AND sla_ordtime >= sla_cutofftime THEN 'Premium'
							ELSE 'Achived'
						END)
WHERE SLA.sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE
AND SLA_Category IS NULL;
--extract(year from sla_orderdate::Date)  = 2022
--WHERE SLA.sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE;

UPDATE click.f_outboundsladetail SLA
SET SLA_Category = CASE WHEN SLA_ProcONTimeFlag = 0 THEN 'Breach' END
WHERE SLA.sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE
AND SLA_Category IS NULL;

UPDATE click.f_outboundsladetail 
SET SLA_Category 	= 'Achived'	
--WHERE extract(year from sla_orderdate::Date)  = 2022
WHERE sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE
AND sla_procontimeflag IS NULL
AND sla_processexpdt IS NULL
AND sla_packexecdt IS NOT NULL;

		EXCEPTION WHEN others THEN       

		GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;

		CALL ods.usp_etlerrorinsert('CLICK','f_outboundsladetail','Click',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

END;
$$;


ALTER PROCEDURE click.usp_f_wmsoutboundsladetail() OWNER TO proconnect;

--
-- Name: usp_f_wmsoutboundsladetailday(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsoutboundsladetailday()
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_errorid integer;
	p_errordesc character varying;
BEGIN

DELETE FROM click.f_outboundsladetail 
WHERE sla_orderdate >= (CURRENT_DATE)::DATE;
--extract(year from sla_orderdate::Date) = 2022;
INSERT INTO click.f_outboundsladetail
(
    sla_ou,
	sla_lockey,
	sla_ordkey,
	sla_loccode,
	sla_ordertype,
	sla_shipmenttype,
	sla_sono,
	sla_orderdate,
	sla_ordtime,
	sla_cutofftime,
	sla_pickexecdt,
	sla_packexecdt,
	sla_pickexpdt,
	sla_packexpdt,
	sla_processexpdt
)
SELECT 
			obh.oub_ou,
			obh.obh_loc_key,
			obh.obh_hr_key,
			obh.oub_loc_code,
			obh.oub_order_type,
			obh.oub_shipment_type,
			obh.oub_prim_rf_dc_no,
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date) :: DATE),
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date)::TIME),
			MAX(cutofftime),
			MAX(pick_exec_end_date),
			MAX(pack_exec_end_date),
			(CASE WHEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::timestamp + (MAX(picktat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(picktat) || ' Minutes')::INTERVAL 
			END )as PickExpclsdt,
			(CASE WHEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime)
			THEN 
			MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::timestamp + (MAX(packtat) || ' Minutes')::INTERVAL
			ELSE 
			((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(packtat) || ' Minutes')::INTERVAL 
			END )
			as PackExpclsdt,
			(CASE WHEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN (MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::DATE || (' 23:59:00.000'))::TIMESTAMP
				WHEN  MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME >= MAX(cutofftime) AND MAX(processtat)::INT = 0 
				THEN ((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE + MAX(cutofftime))::TIMESTAMP 
			 	WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME < MAX(cutofftime) 
			 THEN MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				WHEN  MAX(processtat)::INT <> 0 AND MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))::TIME >= MAX(cutofftime) 
			 THEN 
			 ((MAX(COALESCE(obh.oub_modified_date,obh.oub_created_date))+ INTERVAL '1 DAY')::DATE ||' '||(MAX(openingtime)))::TIMESTAMP + (MAX(processtat) || ' Minutes')::INTERVAL 
				END) ExpClosureDateTime
		FROM dwh.F_OutboundHeader obh
		INNER JOIN dwh.f_pickingdetail PickD
		ON  obh.oub_ou =  PickD.pick_exec_ou
		AND obh.obh_loc_key = PickD.pick_loc_key
		AND obh.oub_prim_rf_dc_no = PickD.pick_so_no
		INNER JOIN dwh.f_pickingheader PickH
		ON PickH.pick_hdr_key = PickD.pick_hdr_key
		INNER JOIN dwh.F_PackExecTHUDetail PackD
		ON  PackD.pack_exec_ou = PickD.pick_exec_ou
		AND PackD.pack_exec_loc_key  = PickD.pick_loc_key
		AND PackD.pack_so_no = pickD.pick_so_no
		INNER JOIN dwh.F_PackExecHeader PackH
		ON PackH.pack_exe_hdr_key = PackD.pack_exec_hdr_key
		LEFT JOIN dwh.D_WMSOutboundTAT TAT
		ON TAT.ou = obh.oub_ou
		AND TAT.locationcode = obh.oub_loc_code
		AND TAT.ordertype = obh.oub_order_type 
		AND TAT.servicetype = obh.oub_shipment_type
		INNER JOIN dwh.D_OutboundLocShiftDetail shift
		ON TAT.ou = shift.ou
		AND TAT.locationcode = shift.locationcode
		AND TAT.ordertype = shift.ordertype 
		AND TAT.servicetype = shift.servicetype
		WHERE obh.oub_ob_status <> 'CN'
		--AND extract(year from COALESCE(obh.oub_modified_date,obh.oub_created_date)::Date) = 2022
		AND COALESCE(obh.oub_modified_date,obh.oub_created_date)::Date  >= (CURRENT_DATE)::DATE
		GROUP BY 
			obh.oub_ou,
			obh.obh_loc_key,
			obh.obh_hr_key,
			obh.oub_loc_code,
			obh.oub_order_type,
			obh.oub_shipment_type,
			obh.oub_prim_rf_dc_no;
			
UPDATE click.f_outboundsladetail SLA
SET 	sla_pickontimeflag = 	CASE WHEN sla_pickexecdt <= sla_pickexpdt THEN 1 
								WHEN sla_pickexecdt > sla_pickexpdt THEN 0
								ELSE NULL END,
		sla_packontimeflag =	CASE WHEN sla_packexecdt <= sla_packexpdt THEN 1 
								WHEN sla_packexecdt > sla_packexpdt THEN 0
								ELSE NULL END,
		sla_procontimeflag = 	CASE WHEN sla_packexecdt <= sla_processexpdt THEN 1 
								WHEN sla_packexecdt > sla_processexpdt THEN 0
								ELSE NULL END 	 	
--WHERE extract(year from sla_orderdate::Date) = 2022;
WHERE SLA.sla_orderdate >= (CURRENT_DATE)::DATE;

UPDATE click.f_outboundsladetail SLA
SET SLA_Category 	= (CASE WHEN SLA_ProcONTimeFlag in (0,1) AND Remarks IS NOT NULL 
					   THEN 'Remarks' END
					   )
FROM dwh.F_DeliveryDelayReason DEL
--WHERE extract(year from sla_orderdate::Date)  = 2022
WHERE SLA.sla_orderdate >= (CURRENT_DATE)::DATE
AND DEL.tranou = SLA.sla_ou
AND DEL.locationcode = SLA.sla_loccode
AND DEL.invoiceno = SLA.sla_sono;

UPDATE click.f_outboundsladetail SLA
SET SLA_Category 	= (	CASE WHEN (sla_procontimeflag = 1) AND sla_ordtime >= sla_cutofftime THEN 'Premium'
							ELSE 'Achived'
						END)
WHERE SLA.sla_orderdate >= (CURRENT_DATE)::DATE
AND SLA_Category IS NULL;
--extract(year from sla_orderdate::Date)  = 2022
--WHERE SLA.sla_orderdate >= (NOW() - INTERVAL '3 MONTHS')::DATE;

UPDATE click.f_outboundsladetail SLA
SET SLA_Category = CASE WHEN SLA_ProcONTimeFlag = 0 THEN 'Breach' END
WHERE SLA.sla_orderdate >= (CURRENT_DATE)::DATE
AND SLA_Category IS NULL;

UPDATE click.f_outboundsladetail 
SET SLA_Category 	= 'Achived'	
--WHERE extract(year from sla_orderdate::Date)  = 2022
WHERE sla_orderdate >= (CURRENT_DATE)::DATE
AND sla_procontimeflag IS NULL
AND sla_processexpdt IS NULL
AND sla_packexecdt IS NOT NULL;

	EXCEPTION WHEN others THEN       
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert('CLICK','f_wmsoutboundsladetailday','CLICK',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);

END;
$$;


ALTER PROCEDURE click.usp_f_wmsoutboundsladetailday() OWNER TO proconnect;

--
-- Name: usp_f_wmsoutboundsummary(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_f_wmsoutboundsummary()
    LANGUAGE plpgsql
    AS $$
	DECLARE 
		p_errorid integer;
		p_errordesc character varying;
BEGIN

DELETE FROM click.f_outboundpickpackdetail pick
USING click.f_outboundorderdetail ord
WHERE pick.pickpack_ordkey = ord.ord_key
AND ord.ord_orderdate >= (NOW() - INTERVAL '90 days')::DATE;

DELETE FROM click.f_outboundorderdetail 
WHERE ord_orderdate >= (NOW() - INTERVAL '90 days')::DATE;

INSERT INTO click.f_outboundorderdetail
(
	ord_lockey,
	ord_custkey,
	ord_datekey,
	ord_custcode,
	ord_ou,
	ord_loccode,
	ord_refdoctype,
	ord_ordertype ,
	ord_obstatus ,
	ord_orderdate,
	ord_shipmentmode ,
	ord_shipmenttype ,
	ord_subservicetype,
	ord_state ,
    ord_city ,
    ord_postcode,
	ord_sono,
	ord_itmlineno,
	ord_ordqty,
	ord_balqty,
	ord_issueqty,
	ord_processqty,
	ord_itmvolume,
	ord_itmwgt,
	ord_wavestatus,
	ord_waveallocrule,
	ord_waveqty
)
SELECT 	obh_loc_key,	
		obh_cust_key,	
		oub_orderdatekey,
		oub_cust_code,
		oub_ou,	
		obh.oub_loc_code,	
		obh.oub_prim_rf_dc_typ,	
		obh.oub_order_type,	
		obh.oub_ob_status,	
		COALESCE(obh.oub_modified_date,obh.oub_created_date)::DATE,	
		obh.oub_shipment_mode,	
		obh.oub_shipment_type,
		obh.oub_subservice_type,	
		obh.oub_state,	
		obh.oub_city,	
		obh.oub_postcode,
		oub_prim_rf_dc_no,
		COUNT(oub_itm_lineno),
		SUM(COALESCE(oub_itm_order_qty,0)),
		SUM(COALESCE(oub_itm_balqty,0)),
		SUM(COALESCE(oub_itm_issueqty,0)),
		SUM(COALESCE(oub_itm_processqty,0)),
		SUM(obd.oub_itm_volume),
		SUM(obd.oub_itm_weight),
		wh.wave_status,
		wh.wave_alloc_rule,
		SUM(wave_qty)
FROM  dwh.F_OutboundHeader obh
INNER JOIN dwh.F_OutboundItemDetail obd
ON	obh.obh_hr_key = obd.obh_hr_key
LEFT JOIN dwh.f_wavedetail wd
ON  wd.wave_ou 		 = obh.oub_ou
AND wd.wave_loc_key  = obh.obh_loc_key
AND wd.wave_cust_key = obh.obh_cust_key
AND wd.wave_item_key = obd.obd_itm_key
AND wd.wave_so_no 	 = obh.oub_prim_rf_dc_no
LEFT JOIN dwh.f_waveheader wh
ON  wd.wave_hdr_key = wh.wave_hdr_key
WHERE obh.oub_ob_status <> 'CN'
AND COALESCE(obh.oub_modified_date,obh.oub_created_date)::date >= (NOW() - INTERVAL '90 days')::DATE
GROUP BY 
		obh_loc_key,	
		oub_orderdatekey,
		obh_cust_key,	
		oub_cust_code,
		oub_ou,	
		obh.oub_loc_code,	
		obh.oub_prim_rf_dc_typ,	
		obh.oub_order_type,	
		obh.oub_ob_status,	
		COALESCE(obh.oub_modified_date,obh.oub_created_date)::DATE,	
		obh.oub_shipment_mode,	
		obh.oub_shipment_type,
		obh.oub_subservice_type,	
		obh.oub_state,	
		obh.oub_city,	
		obh.oub_postcode,
		oub_prim_rf_dc_no,
		wh.wave_status,
		wh.wave_alloc_rule;
		
--TRUNCATE TABLE click.f_outboundpickpackdetail;
INSERT INTO click.f_outboundpickpackdetail(
	pickpack_ou,
	pickpack_lockey,
	pickpack_ordkey,
	pickpack_sono,
	pickexecstatus,
	picklineno,
	pickqty,
	pickemployee ,
	pickmechine ,
	pickhttflag ,
	pickthuwgt	
)
SELECT 
		sum1.ord_ou,
		sum1.ord_lockey,
		sum1.ord_key,
		sum1.ord_sono,
		PickH.pick_exec_status,
		COUNT(distinct PickD.pick_lineno),
		SUM(PickD.pick_qty),
		COUNT(distinct PickH.pick_employee),
		COUNT(distinct PickH.pick_mhe),
		CASE WHEN PickH.pick_gen_from = 'WMS_MOB' THEN 1 ELSE 0 END HTTFlag,
		SUM(PickD.pick_exec_thu_wt)
FROM click.f_outboundorderdetail sum1
INNER JOIN dwh.f_pickingdetail PickD
ON  sum1.ord_ou =  PickD.pick_exec_ou
AND sum1.ord_lockey = PickD.pick_loc_key
AND sum1.ord_sono = PickD.pick_so_no
INNER JOIN dwh.f_pickingheader PickH
ON PickH.pick_hdr_key = PickD.pick_hdr_key
WHERE sum1.ord_orderdate >= (NOW() - INTERVAL '90 days')::DATE
--WHERE pickD.pick_so_no = 'W310000070'
GROUP BY 
sum1.ord_ou,
sum1.ord_lockey,
sum1.ord_key,
sum1.ord_sono,
PickH.pick_exec_status,
PickH.pick_gen_from;

UPDATE click.f_outboundpickpackdetail t1
SET packexecstatus  = p1.packexecstatus,
	packlineno	 = p1.totlineno,
	packqty		 = p1.totpackqty,
	packtolqty 	 = p1.tottolqty,
	packemployee = p1.totemp
FROM 
	(	SELECT 
			sum1.ord_ou,
			sum1.ord_lockey,
			sum1.ord_key,
			sum1.ord_sono,
			PackH.pack_exec_status as packexecstatus,
			COUNT(distinct PackD.pack_thu_lineno) as totlineno,
			SUM(PackD.pack_thu_pack_qty) as totpackqty,
			SUM(PackD.pack_tolerance_qty) as tottolqty,
			COUNT(distinct PackH.pack_employee)	 as totemp
		FROM click.f_outboundorderdetail sum1
		LEFT JOIN dwh.F_PackExecTHUDetail PackD
		ON  sum1.ord_ou = PackD.pack_exec_ou
		AND sum1.ord_lockey  = PackD.pack_exec_loc_key
		AND sum1.ord_sono = PackD.pack_so_no
		LEFT JOIN dwh.F_PackExecHeader PackH
		ON PackH.pack_exe_hdr_key = PackD.pack_exec_hdr_key
	 	WHERE sum1.ord_orderdate >= (NOW() - INTERVAL '90 days')::DATE
		GROUP BY 
		sum1.ord_ou,
		sum1.ord_lockey,
		sum1.ord_key,
		sum1.ord_sono,
		PackH.pack_exec_status
	) P1
WHERE 	t1.pickpack_ordkey		=	p1.ord_key;

--TRUNCATE TABLE click.f_wmsoutboundsummary;
 DELETE FROM click.f_wmsoutboundsummary
 WHERE oub_orderdate >= (NOW() - INTERVAL '90 days')::DATE;

INSERT INTO click.f_wmsoutboundsummary(
		oub_ou ,
		oub_customerkey ,
		oub_datekey ,
		oub_locationkey ,
		oub_loccode ,
		oub_custcode ,
		oub_primrfdctyp ,
		oub_ordertype ,
		oub_obstatus ,
		oub_shipmentmode ,
		oub_orderdate,
		oub_shipmenttype,
		oub_subservicetype ,
		oub_state ,
		oub_city ,
		oub_postcode,
		oub_totoutboundord,
		oub_totoutboundline ,
		oub_totordqty,
		oub_totbalqty ,
		oub_totisuqty ,
		oub_totprosqty ,
		oub_totoutboundvol ,
		oub_totoutboundwgt,
		oub_wavestatus,
		oub_waveallocrule,
		oub_pickexecstatus,
		oub_packexecstatus,
		oub_waveqty,
		oub_totpickline,
		oub_totpickqty ,
		oub_totpickemp ,
		oub_totpickmechines ,
		oub_totpickhht ,
		oub_totpickthuwgt,
		oub_totpackline,
		oub_totpackqty ,
		oub_totpacktolqty ,
		oub_totpackemp
)

SELECT 	a.ord_ou,
		a.ord_custkey,
		a.ord_datekey,
		a.ord_lockey,
		a.ord_loccode,
		a.ord_custcode,
		a.ord_refdoctype,
		a.ord_ordertype ,
		a.ord_obstatus ,
		a.ord_shipmentmode ,
		a.ord_orderdate,
		a.ord_shipmenttype ,
		a.ord_subservicetype ,
		a.ord_state ,
		a.ord_city ,
		a.ord_postcode,
		COUNT(distinct ord_sono),
		MAX(ord_itmLineno),
		MAX(ord_ordqty),
		MAX(ord_balqty),
		MAX(ord_issueqty),
		MAX(ord_processqty),
		MAX(ord_itmvolume),
		MAX(ord_itmwgt),
		a.ord_wavestatus,
		a.ord_waveallocrule,
		b.pickexecstatus,
		b.packexecstatus,
		MAX(ord_waveqty),
		MAX(b.picklineno),
		MAX(b.pickqty),
		MAX(b.pickemployee),
		MAX(b.pickmechine),
		MAX(b.pickhttflag),
		MAX(b.pickthuwgt),
		MAX(b.packlineno),
		MAX(b.packqty),
		MAX(b.packtolqty),
		MAX(b.packemployee)
FROM click.f_outboundorderdetail a
LEFT JOIN click.f_outboundpickpackdetail b
ON  a.ord_key		= 	b.pickpack_ordkey
GROUP BY 	a.ord_ou,
			a.ord_custkey,
			a.ord_datekey,
			a.ord_lockey,
			a.ord_loccode,
			a.ord_custcode,
			a.ord_refdoctype,
			a.ord_ordertype ,
			a.ord_obstatus ,
			a.ord_shipmentmode ,
			a.ord_orderdate,
			a.ord_shipmenttype ,
			a.ord_subservicetype ,
			a.ord_state ,
			a.ord_city ,
			a.ord_postcode,
			a.ord_wavestatus,
			a.ord_waveallocrule,
			b.pickexecstatus,
			b.packexecstatus;
			--,c.sla_category;
			
	EXCEPTION WHEN others THEN       

		GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;

		CALL ods.usp_etlerrorinsert('CLICK','f_wmsoutboundsummary','Click',NULL,'De-Normalized','sp_ExceptionHandling',p_errorid,p_errordesc,null);			
		
END;
$$;


ALTER PROCEDURE click.usp_f_wmsoutboundsummary() OWNER TO proconnect;

--
-- Name: usp_update(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_update()
    LANGUAGE plpgsql
    AS $$


DECLARE
  v_min INTEGER;
 v_max INTEGER;
 v_amendno_f INTEGER;
 v_createddate character varying(100);
 v_br_ouinstance INTEGER;
 v_br_request_id character varying(72);
 v_amend_no_stg INTEGER;
 v_rowid INTEGER;

BEGIN

-- UPDATE	click.F_Shipment_details csd
-- SET		from_pinicode	= brsd_from_postal_code,
-- 		to_pinicode		= brsd_to_postal_code,
-- 		br_key			= brsd_br_key
-- FROM	dwh.F_BRShipmentDetail dsd
-- WHERE	csd.ouinstance		= dsd.brsd_ouinstance
-- AND		csd.br_request_id	= dsd.brsd_br_id;



CREATE TEMP TABLE BOOKING_HISTORY
(
	ROW_ID  INTEGER GENERATED ALWAYS AS IDENTITY,
	rowid_stg integer,
    created_date character varying(100),
	br_ouinstance INTEGER,
	br_request_id character varying(72) ,
 	br_status varchar(50) ,
	amend_no INTEGER
);
  
  
  INSERT INTO BOOKING_HISTORY
  (rowid_stg,created_date,br_ouinstance,br_request_id,br_status,amend_no)
  SELECT row_id,created_date,br_ouinstance,br_request_id,br_status,AMEND_NO
  FROM STG.stg_tms_br_booking_request_reason_hist
  where amend_no is null
  --and br_request_id in('BR/WB4/22/00002917')
  order by 1;
  
  

 
  
  SELECT MIN(ROW_ID), MAX(ROW_ID) INTO v_min, v_max FROM BOOKING_HISTORY;
   
  
  
  WHILE(v_min<=v_max)
  loop
	  
	 
	   select created_date,br_ouinstance,br_request_id, rowid_stg
	  INTO  v_createddate,v_br_ouinstance,v_br_request_id, v_rowid
	  FROM BOOKING_HISTORY
	  WHERE ROW_ID=v_min;
	  
	 
	  IF EXISTS(SELECT 1 FROM dwh.f_bookingRequestReasonHistory 
			    WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				
				
			   )
	  THEN
	
		  select max(amend_no)
		  into v_amendno_f
		  from dwh.f_bookingRequestReasonHistory
		  where  br_ouinstance=v_br_ouinstance
		  and br_request_id=v_br_request_id ;
	  
				UPDATE stg.stg_tms_br_booking_request_reason_hist
	  			SET amend_no=v_amendno_f +1 
	  			WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				and created_date=v_createddate ;
		
	  END IF;
	  
	 
	  
	  if EXISTS(SELECT 1 FROM STG.stg_tms_br_booking_request_reason_hist 
			    WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
			   and amend_no is not null
				
			   )
	  
	 	THEN
			  select max(amend_no)
			  into v_amend_no_stg
			  from STG.stg_tms_br_booking_request_reason_hist 
			  where  br_ouinstance=v_br_ouinstance
			  and br_request_id=v_br_request_id 
	 		  and amend_no is not null;
	  
		  
			UPDATE stg.stg_tms_br_booking_request_reason_hist
	  			SET amend_no=v_amend_no_stg +1 
	  			WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				and created_date=v_createddate
				AND row_id= v_rowid;
		 
	 	 else
	  	 
	  		UPDATE stg.stg_tms_br_booking_request_reason_hist
	  			SET amend_no= 1 
	  			WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				and created_date=v_createddate
				and row_id=v_rowid;
	      end if;
	    
	   v_min= v_min +1;
	  
	  	
	  
  end loop;

END;
$$;


ALTER PROCEDURE click.usp_update() OWNER TO proconnect;

--
-- Name: usp_update_dimension_key(); Type: PROCEDURE; Schema: click; Owner: proconnect
--

CREATE PROCEDURE click.usp_update_dimension_key()
    LANGUAGE plpgsql
    AS $$

BEGIN

UPDATE dwh.f_goodsreceiptitemdetails t
SET    gr_itm_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1),
       gr_item = Trim(t.gr_item)
FROM   dwh.d_itemheader i
WHERE  Trim(t.gr_item) = i.itm_code
       AND t.gr_exec_ou = i.itm_ou
       AND t.gr_itm_dtl_itm_hdr_key = -1;

UPDATE dwh.f_putawayplanitemdetail t
SET    pway_pln_itm_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.pway_item = i.itm_code
       AND t.pway_pln_ou = i.itm_ou
       AND t.pway_pln_itm_dtl_itm_hdr_key = -1;

UPDATE dwh.f_binexecitemdetail t
SET    bin_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.bin_item = i.itm_code
       AND t.bin_exec_ou = i.itm_ou
       AND t.bin_itm_hdr_key = -1;

UPDATE dwh.f_binexecdetail t
SET    bin_exec_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.bin_item = i.itm_code
       AND t.bin_exec_ou = i.itm_ou
       AND t.bin_exec_itm_hdr_key = -1;

UPDATE dwh.f_putawaybincapacity t
SET    pway_bin_cap_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.pway_item = i.itm_code
       AND t.pway_pln_ou = i.itm_ou
       AND t.pway_bin_cap_itm_hdr_key = -1;

UPDATE dwh.f_allocitemdetailshistory t
SET    allc_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.allc_item_code = i.itm_code
       AND t.allc_ouinstid = i.itm_ou
       AND t.allc_itm_hdr_key = -1;

UPDATE dwh.f_asndetails t
SET    asn_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.asn_itm_code = i.itm_code
       AND t.asn_ou = i.itm_ou
       AND t.asn_dtl_itm_hdr_key = -1;

UPDATE dwh.f_draftbillexecdetail t
SET    draft_bill_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.exec_item_code = i.itm_code
       AND t.exec_ou = i.itm_ou
       AND t.draft_bill_itm_hdr_key = -1;

UPDATE dwh.f_gritemtrackingdetail t
SET    gr_itm_tk_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.stk_item = i.itm_code
       AND t.stk_ou = i.itm_ou
       AND t.gr_itm_tk_dtl_itm_hdr_key = -1;

UPDATE dwh.f_grthulotdetail t
SET    gr_lot_thu_item_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.gr_item_code = i.itm_code
       AND t.gr_exec_ou = i.itm_ou
       AND t.gr_lot_thu_item_key = -1;

UPDATE dwh.f_inbounddetail t
SET    inb_itm_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.inb_item_code = i.itm_code
       AND t.inb_ou = i.itm_ou
       AND t.inb_itm_dtl_itm_hdr_key = -1;

UPDATE dwh.f_inbounditemamenddetail t
SET    inb_itm_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.inb_item_code = i.itm_code
       AND t.inb_ou = i.itm_ou
       AND t.inb_itm_key = -1;

UPDATE dwh.f_inboundscheduleitemamenddetail t
SET    inb_itm_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.inb_item_code = i.itm_code
       AND t.inb_ou = i.itm_ou
       AND t.inb_itm_key = -1;

UPDATE dwh.f_inboundscheduleitemdetail t
SET    inb_itm_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.inb_item_code = i.itm_code
       AND t.inb_ou = i.itm_ou
       AND t.inb_itm_key = -1;

UPDATE dwh.f_itemallocdetail t
SET    allc_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.allc_item_code = i.itm_code
       AND t.allc_ouinstid = i.itm_ou
       AND t.allc_itm_hdr_key = -1;

UPDATE dwh.f_lotmasterdetail t
SET    lot_mst_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.lm_item_code = i.itm_code
       AND t.lm_lotno_ou = i.itm_ou
       AND t.lot_mst_dtl_itm_hdr_key = -1;

UPDATE dwh.f_lottrackingdetail t
SET    stk_item_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.stk_item = i.itm_code
       AND t.stk_ou = i.itm_ou
       AND t.stk_item_key = -1;

UPDATE dwh.f_outbounditemdetail t
SET    obd_itm_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.oub_item_code = i.itm_code
       AND t.oub_itm_ou = i.itm_ou
       AND t.obd_itm_key = -1;

UPDATE dwh.f_outboundlotsrldetail t
SET    oub_itm_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.oub_item_code = i.itm_code
       AND t.oub_lotsl_ou = i.itm_ou
       AND t.oub_itm_key = -1;

UPDATE dwh.f_outboundschdetail t
SET    oub_itm_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.oub_sch_item_code = i.itm_code
       AND t.oub_sch_ou = i.itm_ou
       AND t.oub_itm_key = -1;

UPDATE dwh.f_pickplandetails t
SET    pick_pln_item_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.pick_item_code = i.itm_code
       AND t.pick_pln_ou = i.itm_ou
       AND t.pick_pln_item_key = -1;

UPDATE dwh.f_putawayitemdetail t
SET    pway_itm_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.pway_item = i.itm_code
       AND t.pway_exec_ou = i.itm_ou
       AND t.pway_itm_dtl_itm_hdr_key = -1;

UPDATE dwh.f_stockbalanceseriallevel t
SET    sbs_level_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.sbs_item_code = i.itm_code
       AND t.sbs_ouinstid = i.itm_ou
       AND t.sbs_level_itm_hdr_key = -1;

UPDATE dwh.f_stockbalancestorageunitlotlevel t
SET    sbl_lot_level_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.sbl_item_code = i.itm_code
       AND t.sbl_ouinstid = i.itm_ou
       AND t.sbl_lot_level_itm_hdr_key = -1;

UPDATE dwh.f_stockbinhistorydetail t
SET    stock_item_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.stock_item = i.itm_code
       AND t.stock_ou = i.itm_ou
       AND t.stock_item_key = -1;

UPDATE dwh.f_stockconversiondetail t
SET    stk_con_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.stk_con_item_code = i.itm_code
       AND t.stk_con_proposal_ou = i.itm_ou
       AND t.stk_con_dtl_itm_hdr_key = -1;

UPDATE dwh.f_stock_lottrackingdaywise_detail t
SET    stk_item_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.stk_item = i.itm_code
       AND t.stk_ou = i.itm_ou
       AND t.stk_item_key = -1;

UPDATE dwh.f_stockuiditemtrackingdetail t
SET    stk_itm_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.stk_item = i.itm_code
       AND t.stk_ou = i.itm_ou
       AND t.stk_itm_dtl_itm_hdr_key = -1;

UPDATE dwh.f_wavedetail t
SET    wave_item_key = COALESCE(i.itm_hdr_key, -1)
FROM   dwh.d_itemheader i
WHERE  t.wave_item_code = i.itm_code
       AND t.wave_ou = i.itm_ou
       AND t.wave_item_key = -1; 
	   
	   
--VENDOR 

UPDATE dwh.f_asnheader t
SET    asn_supp_key = COALESCE(v.vendor_key, -1),
       asn_supp_code = Trim(t.asn_supp_code)
FROM   dwh.d_vendor V
WHERE  Trim(t.asn_supp_code) = V.vendor_id
       AND t.asn_ou = V.vendor_ou
       AND t.asn_supp_key = -1;

UPDATE dwh.f_grheader t
SET    gr_vendor_key = COALESCE(v.vendor_key, -1),
       suppcode = Trim(t.suppcode)
FROM   dwh.d_vendor V
WHERE  Trim(t.suppcode) = v.vendor_id
       AND t.ouinstid = v.vendor_ou
       AND t.gr_vendor_key = -1;

UPDATE dwh.f_purchaseheader t
SET    po_supp_key = COALESCE(v.vendor_key, -1),
       suppliercode = Trim(t.suppliercode)
FROM   dwh.d_vendor V
WHERE  Trim(t.suppliercode) = V.vendor_id
       AND t.poou = V.vendor_ou
       AND t.po_supp_key = -1;

UPDATE dwh.f_purchasereqdetail t
SET    preqm_dtl_vendor_key = COALESCE(v.vendor_key, -1),
       prqit_pref_supplier_code = Trim(t.prqit_pref_supplier_code)
FROM   dwh.d_vendor V
WHERE  Trim(t.prqit_pref_supplier_code) = v.vendor_id
       AND t.prqit_prou = v.vendor_ou
       AND t.preqm_dtl_vendor_key = -1;

UPDATE dwh.f_sadadjvoucherhdr t
SET    sadadjvoucherhdr_vendor_key = COALESCE(v.vendor_key, -1),
       supp_code = Trim(t.supp_code)
FROM   dwh.d_vendor V
WHERE  Trim(t.supp_code) = v.vendor_id
       AND t.ou_id = v.vendor_ou
       AND t.sadadjvoucherhdr_vendor_key = -1;

UPDATE dwh.f_sidochdr t
SET    sidochdr_vendor_key = COALESCE(v.vendor_key, -1),
       supplier_code = Trim(t.supplier_code)
FROM   dwh.d_vendor V
WHERE  Trim(t.supplier_code) = v.vendor_id
       AND t.tran_ou = v.vendor_ou
       AND t.sidochdr_vendor_key = -1;

UPDATE dwh.f_triplogthudetail t
SET    tltd_vendor_key = COALESCE(v.vendor_key, -1),
       tltd_vendor_id = Trim(t.tltd_vendor_id)
FROM   dwh.d_vendor V
WHERE  Trim(t.tltd_vendor_id) = v.vendor_id
       AND t.tltd_ouinstance = v.vendor_ou
       AND t.tltd_vendor_key = -1;

UPDATE dwh.f_tripresourcescheduledetail t
SET    trsd_vendor_key = COALESCE(v.vendor_key, -1),
       trsd_vendor_id = Trim(t.trsd_vendor_id)
FROM   dwh.d_vendor V
WHERE  Trim(t.trsd_vendor_id) = v.vendor_id
       AND t.trsd_ouinstance = v.vendor_ou
       AND t.trsd_vendor_key = -1;

UPDATE dwh.f_vehicleequiplicensedetail t
SET    vrvel_vendor_key = COALESCE(v.vendor_key, -1),
       vrvel_vendor_id = Trim(t.vrvel_vendor_id)
FROM   dwh.d_vendor V
WHERE  Trim(t.vrvel_vendor_id) = v.vendor_id
       AND t.vrvel_ouinstance = v.vendor_ou
       AND t.vrvel_vendor_key = -1;

UPDATE dwh.f_vehicleequipresponsedetail t
SET    vrve_vendor_key = COALESCE(v.vendor_key, -1),
       vrve_vendor_id = Trim(t.vrve_vendor_id)
FROM   dwh.d_vendor V
WHERE  Trim(t.vrve_vendor_id) = v.vendor_id
       AND t.vrve_ouinstance = v.vendor_ou
       AND t.vrve_vendor_key = -1;

--EQUIPMENT 
UPDATE dwh.f_gateexecdetail t
SET    gate_exec_dtl_eqp_key = COALESCE(eq.eqp_key, -1),
       gate_equip_no = Trim(t.gate_equip_no)
FROM   dwh.d_equipment eq
WHERE  Trim(t.gate_equip_no) = eq.eqp_equipment_id
       AND t.gate_exec_ou = eq.eqp_ou
       AND t.gate_exec_dtl_eqp_key = -1;

UPDATE dwh.f_gateplandetail t
SET    gate_pln_dtl_eqp_key = COALESCE(e.eqp_key, -1),
       gate_equip_no = Trim(t.gate_equip_no)
FROM   dwh.d_equipment e
WHERE  Trim(t.gate_equip_no) = e.eqp_equipment_id
       AND t.gate_pln_ou = e.eqp_ou
       AND t.gate_pln_dtl_eqp_key = -1;

UPDATE dwh.f_loadingheader t
SET    loading_hdr_eqp_key = COALESCE(eq.eqp_key, -1),
       loading_equip_no = Trim(t.loading_equip_no)
FROM   dwh.d_equipment eq
WHERE  Trim(t.loading_equip_no) = eq.eqp_equipment_id
       AND t.loading_exec_ou = eq.eqp_ou
       AND t.loading_hdr_eqp_key = -1;

UPDATE dwh.f_putawayempequipmap t
SET    pway_eqp_map_eqp_key = COALESCE(eq.eqp_key, -1),
       putaway_euip_code = Trim(t.putaway_euip_code)
FROM   dwh.d_equipment eq
WHERE  Trim(t.putaway_euip_code) = eq.eqp_equipment_id
       AND t.putaway_ou = eq.eqp_ou
       AND t.pway_eqp_map_eqp_key = -1;

UPDATE dwh.f_putawayexecdetail t
SET    pway_exe_dtl_eqp_key = COALESCE(eq.eqp_key, -1),
       pway_mhe_id = Trim(t.pway_mhe_id)
FROM   dwh.d_equipment eq
WHERE  Trim(t.pway_mhe_id) = eq.eqp_equipment_id
       AND t.pway_pln_ou = eq.eqp_ou
       AND t.pway_exe_dtl_eqp_key = -1;

--WAREHOUSE 
UPDATE dwh.f_allocitemdetailshistory t
SET    allc_wh_key = COALESCE(w.wh_key, -1),
       allc_wh_no = Trim(t.allc_wh_no)
FROM   dwh.d_warehouse w
WHERE  Trim(t.allc_wh_no) = w.wh_code
       AND t.allc_ouinstid = w.wh_ou
       AND t.allc_doc_ou = w.wh_ou
       AND t.allc_wh_key = -1;

UPDATE dwh.f_itemallocdetail t
SET    allc_wh_key = COALESCE(w.wh_key, -1),
       allc_wh_no = Trim(t.allc_wh_no)
FROM   dwh.d_warehouse w
WHERE  Trim(t.allc_wh_no) = w.wh_code
       AND t.allc_ouinstid = w.wh_ou
       AND t.allc_doc_ou = w.wh_ou
       AND t.allc_wh_key = -1;

UPDATE dwh.f_lotmasterdetail t
SET    lot_mst_dtl_wh_key = COALESCE(w.wh_key, -1),
       lm_wh_code = Trim(t.lm_wh_code)
FROM   dwh.d_warehouse w
WHERE  Trim(t.lm_wh_code) = w.wh_code
       AND t.lm_lotno_ou = w.wh_ou
       AND t.lot_mst_dtl_wh_key = -1;

UPDATE dwh.f_purchasedetails t
SET    po_dtl_wh_key = COALESCE(w.wh_key, -1),
       warehousecode = Trim(t.warehousecode)
FROM   dwh.d_warehouse w
WHERE  Trim(t.warehousecode) = w.wh_code
       AND t.poou = w.wh_ou
       AND t.po_dtl_wh_key = -1;

UPDATE dwh.f_purchasereqdetail t
SET    preqm_dtl_wh_key = COALESCE(w.wh_key, -1),
       prqit_warehousecode = Trim(t.prqit_warehousecode)
FROM   dwh.d_warehouse w
WHERE  Trim(t.prqit_warehousecode) = w.wh_code
       AND t.prqit_prou = w.wh_ou
       AND t.preqm_dtl_wh_key = -1;

UPDATE dwh.f_stockbalanceseriallevel t
SET    sbs_level_wh_key = COALESCE(w.wh_key, -1),
       sbs_wh_code = Trim(t.sbs_wh_code)
FROM   dwh.d_warehouse w
WHERE  Trim(t.sbs_wh_code) = w.wh_code
       AND t.sbs_ouinstid = w.wh_ou
       AND t.sbs_level_wh_key = -1;

UPDATE dwh.f_stockbalancestorageunitlotlevel t
SET    sbl_lot_level_wh_key = COALESCE(w.wh_key, -1),
       sbl_wh_code = Trim(t.sbl_wh_code)
FROM   dwh.d_warehouse w
WHERE  Trim(t.sbl_wh_code) = w.wh_code
       AND t.sbl_ouinstid = w.wh_ou
       AND t.sbl_lot_level_wh_key = -1;

--UOM 
UPDATE dwh.f_asndetails t
SET    asn_dtl_uom_key = COALESCE(u.uom_key, -1),
       asn_order_uom = Trim(t.asn_order_uom)
FROM   dwh.d_uom u
WHERE  Trim(t.asn_order_uom) = u.mas_uomcode
       AND t.asn_ou = u.mas_ouinstance
       AND t.asn_dtl_uom_key = -1;

UPDATE dwh.f_goodsreceiptitemdetails t
SET    gr_itm_dtl_uom_key = COALESCE(u.uom_key, -1),
       gr_mas_uom = Trim(t.gr_mas_uom)
FROM   dwh.d_uom u
WHERE  Trim(t.gr_mas_uom) = u.mas_uomcode
       AND t.gr_exec_ou = u.mas_ouinstance
       AND t.gr_itm_dtl_uom_key = -1;

UPDATE dwh.f_itemallocdetail t
SET    allc_uom_key = COALESCE(u.uom_key, -1),
       allc_mas_uom = Trim(t.allc_mas_uom)
FROM   dwh.d_uom u
WHERE  Trim(t.allc_mas_uom) = u.mas_uomcode
       AND t.allc_ouinstid = u.mas_ouinstance
       AND t.allc_doc_ou = u.mas_ouinstance
       AND t.allc_uom_key = -1;

UPDATE dwh.f_purchasedetails t
SET    po_dtl_uom_key = COALESCE(u.uom_key, -1),
       puom = Trim(t.puom)
FROM   dwh.d_uom u
WHERE  Trim(t.puom) = u.mas_uomcode
       AND t.poou = u.mas_ouinstance
       AND t.po_dtl_uom_key = -1;

UPDATE dwh.f_purchasereqdetail t
SET    preqm_dtl_uom_key = COALESCE(u.uom_key, -1),
       prqit_puom = Trim(t.prqit_puom)
FROM   dwh.d_uom u
WHERE  Trim(t.prqit_puom) = u.mas_uomcode
       AND t.prqit_prou = u.mas_ouinstance
       AND t.preqm_dtl_uom_key = -1;

UPDATE dwh.f_sdinexpensedtl t
SET    uom_key = COALESCE(u.uom_key, -1),
       uom = Trim(t.uom)
FROM   dwh.d_uom u
WHERE  Trim(t.uom) = u.mas_uomcode
       AND t.uom_key = -1;

--STAGE 
UPDATE dwh.f_draftbillexecdetail t
SET    draft_bill_stg_mas_key = COALESCE(st.stg_mas_key, -1),
       exec_stage = Trim(t.exec_stage)
FROM   dwh.d_stage st
WHERE  Trim(t.exec_stage) = st.stg_mas_id
       AND t.exec_ou = st.stg_mas_ou
       AND t.draft_bill_stg_mas_key = -1;

UPDATE dwh.f_goodsreceiptdetails t
SET    gr_stg_mas_key = COALESCE(st.stg_mas_key, -1),
       gr_staging_id = Trim(t.gr_staging_id)
FROM   dwh.d_stage st
WHERE  Trim(t.gr_staging_id) = st.stg_mas_id
       AND t.gr_loc_code = st.stg_mas_loc
       AND t.gr_pln_ou = st.stg_mas_ou
       AND t.gr_stg_mas_key = -1;

UPDATE dwh.f_goodsreceiptitemdetails t
SET    gr_itm_dtl_stg_mas_key = COALESCE(st.stg_mas_key, -1),
       gr_stag_id = Trim(t.gr_stag_id)
FROM   dwh.d_stage st
WHERE  Trim(t.gr_stag_id) = st.stg_mas_id
       AND t.gr_loc_code = st.stg_mas_loc
       AND t.gr_exec_ou = st.stg_mas_ou
       AND t.gr_itm_dtl_stg_mas_key = -1;

UPDATE dwh.f_itemallocdetail t
SET    allc_stg_mas_key = COALESCE(st.stg_mas_key, -1),
       allc_staging_id_crosdk = Trim(t.allc_staging_id_crosdk)
FROM   dwh.d_stage st
WHERE  Trim(t.allc_staging_id_crosdk) = st.stg_mas_id
       AND t.allc_ouinstid = st.stg_mas_ou
       AND t.allc_doc_ou = st.stg_mas_ou
       AND t.allc_wh_no = st.stg_mas_loc
       AND t.allc_stg_mas_key = -1;

UPDATE dwh.f_loadingdetail t
SET    loading_dtl_stg_mas_key = COALESCE(st.stg_mas_key, -1)
FROM   dwh.d_stage st
WHERE  Trim(t.loading_stage) = st.stg_mas_id
       AND t.loading_exec_ou = st.stg_mas_ou
       AND t.loading_loc_code = st.stg_mas_loc
       AND t.loading_dtl_stg_mas_key = -1;

UPDATE dwh.f_putawayexecdetail t
SET    pway_exe_dtl_stg_mas_key = COALESCE(st.stg_mas_key, -1),
       pway_stag_id = Trim(t.pway_stag_id)
FROM   dwh.d_stage st
WHERE  Trim(t.pway_stag_id) = st.stg_mas_id
       AND t.pway_pln_ou = st.stg_mas_ou
       AND t.pway_loc_code = st.stg_mas_loc
       AND t.pway_exe_dtl_stg_mas_key = -1;

UPDATE dwh.f_putawayplandetail t
SET    pway_pln_dtl_stg_mas_key = COALESCE(st.stg_mas_key, -1),
       pway_stag_id = Trim(t.pway_stag_id)
FROM   dwh.d_stage st
WHERE  Trim(t.pway_stag_id) = st.stg_mas_id
       AND t.pway_pln_ou = st.stg_mas_ou
       AND t.pway_loc_code = st.stg_mas_loc
       AND t.pway_pln_dtl_stg_mas_key = -1;

--CONSIGNEE 
UPDATE dwh.f_brconsignmentconsigneedetail t
SET    brccd_consignee_hdr_key = COALESCE(c.consignee_hdr_key, -1),
       ccd_consignee_id = Trim(t.ccd_consignee_id)
FROM   dwh.d_consignee c
WHERE  Trim(t.ccd_consignee_id) = c.consignee_id
       AND t.ccd_ouinstance = c.consignee_ou
       AND t.brccd_consignee_hdr_key = -1;

UPDATE dwh.f_dispatchdocheader t
SET    ddh_consignee_hdr_key = COALESCE(c.consignee_hdr_key, -1),
       ddh_consignee_id = Trim(t.ddh_consignee_id)
FROM   dwh.d_consignee c
WHERE  Trim(t.ddh_consignee_id) = c.consignee_id
       AND t.ddh_ouinstance = c.consignee_ou
       AND t.ddh_consignee_hdr_key = -1;

--VECHILE 
UPDATE dwh.f_dispatchheader t
SET    dispatch_hdr_veh_key = COALESCE(v.veh_key, -1),
       dispatch_vehicle_code = Trim(t.dispatch_vehicle_code)
FROM   dwh.d_vehicle v
WHERE  Trim(t.dispatch_vehicle_code) = v.veh_id
       AND t.dispatch_ld_sheet_ou = v.veh_ou
       AND t.dispatch_hdr_veh_key = -1;

UPDATE dwh.f_gateexecdetail t
SET    gate_exec_dtl_veh_key = COALESCE(v.veh_key, -1),
       gate_vehicle_no = Trim(t.gate_vehicle_no)
FROM   dwh.d_vehicle v
WHERE  Trim(t.gate_vehicle_no) = v.veh_id
       AND t.gate_exec_ou = v.veh_ou
       AND t.gate_exec_dtl_veh_key = -1;

UPDATE dwh.f_gateplandetail t
SET    gate_pln_dtl_veh_key = COALESCE(v.veh_key, -1),
       gate_vehicle_no = Trim(t.gate_vehicle_no)
FROM   dwh.d_vehicle v
WHERE  Trim(t.gate_vehicle_no) = v.veh_id
       AND t.gate_pln_ou = v.veh_ou
       AND t.gate_pln_dtl_veh_key = -1;

UPDATE dwh.f_loadingheader t
SET    loading_hdr_veh_key = COALESCE(v.veh_key, -1),
       loading_veh_no = Trim(t.loading_veh_no)
FROM   dwh.d_vehicle v
WHERE  Trim(t.loading_veh_no) = v.veh_id
       AND t.loading_exec_ou = v.veh_ou
       AND t.loading_hdr_veh_key = -1;

--ROUTE 
UPDATE dwh.f_bookingrequest t
SET    br_rou_key = COALESCE(r.rou_key, -1),
       br_route_id = Trim(t.br_route_id)
FROM   dwh.d_route r
WHERE  Trim(t.br_route_id) = r.rou_route_id
       AND t.br_ouinstance = r.rou_ou
       AND t.br_rou_key = -1; 

--d_thu;

UPDATE dwh.f_allocitemdetailshistory f
SET     allc_thu_key  	   = COALESCE(th.thu_key,-1),
        allc_thu_id        = TRIM(f.allc_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.allc_thu_id)   = th.thu_id 
AND     f.allc_ouinstid       = th.thu_ou
AND     f.allc_doc_ou     	  = th.thu_ou
AND     f.allc_thu_key = -1;

UPDATE dwh.f_asndetails f
SET     asn_dtl_thu_key  	   = COALESCE(th.thu_key,-1),
        asn_thu_id             = TRIM(f.asn_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.asn_thu_id)   = th.thu_id 
AND     f.asn_ou       		 = th.thu_ou
AND     f.asn_dtl_thu_key = -1;

UPDATE dwh.f_binexecdetail f
SET     bin_exec_thu_key  	   = COALESCE(th.thu_key,-1),
        bin_thu_id             = TRIM(f.bin_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.bin_thu_id)   = th.thu_id 
AND     f.bin_exec_ou        = th.thu_ou
AND     f.bin_exec_thu_key = -1;

UPDATE dwh.f_binexecitemdetail f									--- bin_thu_id is added 
SET     bin_thu_key  	   = COALESCE(th.thu_key,-1),
        bin_thu_id         = TRIM(f.bin_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.bin_thu_id)  = th.thu_id 
AND     f.bin_exec_ou       = th.thu_ou
AND     f.bin_thu_key = -1;

UPDATE dwh.f_brconsignmentdetail f
SET     brcd_thu_key  	   = COALESCE(th.thu_key,-1),
        cd_thu_id          = TRIM(f.cd_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.cd_thu_id)   = th.thu_id 
AND     f.cd_ouinstance     = th.thu_ou
AND     f.brcd_thu_key = -1;

UPDATE dwh.f_dispatchdetail f
SET     dispatch_dtl_thu_key  	   = COALESCE(th.thu_key,-1),
        dispatch_thu_id            = TRIM(f.dispatch_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.dispatch_thu_id)   = th.thu_id 
AND     f.dispatch_ld_sheet_ou    = th.thu_ou
AND     f.dispatch_dtl_thu_key = -1;

UPDATE dwh.f_dispatchdocthudetail f
SET     ddh_thu_key  	   = COALESCE(th.thu_key,-1),
        ddtd_thu_id        = TRIM(f.ddtd_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.ddtd_thu_id)   = th.thu_id 
AND     f.ddtd_ouinstance       = th.thu_ou
AND     f.ddh_thu_key = -1;

UPDATE dwh.f_draftbillexecdetail f
SET     draft_bill_thu_key  	= COALESCE(th.thu_key,-1),
        exec_thu_id             = TRIM(f.exec_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.exec_thu_id)   = th.thu_id 
AND     f.exec_ou       	  = th.thu_ou
AND     f.draft_bill_thu_key = -1;

UPDATE dwh.f_goodsreceiptitemdetails f
SET     gr_itm_dtl_thu_key    = COALESCE(th.thu_key,-1),
        gr_thu_id             = TRIM(f.gr_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.gr_thu_id)   = th.thu_id 
AND     f.gr_exec_ou        = th.thu_ou
AND     f.gr_itm_dtl_thu_key = -1;

UPDATE dwh.f_grthuheader f
SET     gr_thu_key  	   = COALESCE(th.thu_key,-1),
        gr_thu_id          = TRIM(f.gr_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.gr_thu_id)   = th.thu_id 
AND     f.gr_exec_ou        = th.thu_ou
AND     f.gr_thu_key = -1;

UPDATE dwh.f_grthulotdetail f
SET     gr_lot_thu_key  	   = COALESCE(th.thu_key,-1),
        gr_thu_id              = TRIM(f.gr_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.gr_thu_id)   = th.thu_id 
AND     f.gr_exec_ou        = th.thu_ou
AND     f.gr_lot_thu_key = -1;

UPDATE dwh.f_itemallocdetail f
SET     allc_thu_key  	   = COALESCE(th.thu_key,-1),
        allc_thu_id        = TRIM(f.allc_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.allc_thu_id)    = th.thu_id 
AND     f.allc_ouinstid        = th.thu_ou
AND     f.allc_doc_ou          = th.thu_ou
AND     f.allc_thu_key = -1;

UPDATE dwh.f_loadingdetail f
SET     loading_dtl_thu_key  	   = COALESCE(th.thu_key,-1),
        loading_thu_id             = TRIM(f.loading_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.loading_thu_id)   = th.thu_id 
AND     f.loading_exec_ou        = th.thu_ou
AND     f.loading_dtl_thu_key = -1;

UPDATE dwh.f_pickplandetails f
SET     pick_pln_thu_key  	   = COALESCE(th.thu_key,-1),
        pick_thu_id        = TRIM(f.pick_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.pick_thu_id)   = th.thu_id 
AND     f.pick_pln_ou       = th.thu_ou
AND     f.pick_pln_thu_key = -1;

UPDATE dwh.f_stockbalancestorageunitlotlevel f
SET     sbl_lot_level_thu_key  	= COALESCE(th.thu_key,-1),
        sbl_thu_id              = TRIM(f.sbl_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.sbl_thu_id)   = th.thu_id 
AND     f.sbl_ouinstid       = th.thu_ou
AND     f.sbl_lot_level_thu_key = -1;

UPDATE dwh.f_stockbinhistorydetail f
SET     stock_thu_key            = COALESCE(th.thu_key,-1),
        stock_thu_id             = TRIM(f.stock_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.stock_thu_id)   = th.thu_id 
AND     f.stock_ou             = th.thu_ou
AND     f.stock_thu_key = -1;

UPDATE dwh.f_stockrejecteddetail f
SET     rejstk_dtl_thu_key    = COALESCE(th.thu_key,-1),
        rejstk_thuid          = TRIM(f.rejstk_thuid)
FROM dwh.d_thu th       
WHERE   TRIM(f.rejstk_thuid)   = th.thu_id 
AND     f.rejstk_ou            = th.thu_ou
AND     f.rejstk_dtl_thu_key = -1;

UPDATE dwh.f_stockuiditemtrackingdetail f
SET     stk_itm_dtl_thu_key  	= COALESCE(th.thu_key,-1),
        stk_thu_id              = TRIM(f.stk_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.stk_thu_id)   = th.thu_id 
AND     f.stk_ou             = th.thu_ou
AND     f.stk_itm_dtl_thu_key = -1;

UPDATE dwh.f_stockuidtrackingdetail f
SET     stk_trc_dtl_thu_key  	   = COALESCE(th.thu_key,-1),
        stk_thu_id        		   = TRIM(f.stk_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.stk_thu_id)     = th.thu_id 
AND     f.stk_ou        	   = th.thu_ou
AND     f.stk_trc_dtl_thu_key = -1;

UPDATE dwh.f_tripthudetail f
SET     plttd_thu_key  	   = COALESCE(th.thu_key,-1),
        plttd_thu_id       = TRIM(f.plttd_thu_id)
FROM dwh.d_thu th       
WHERE   TRIM(f.plttd_thu_id)   = th.thu_id 
AND     f.plttd_ouinstance     = th.thu_ou
AND     f.plttd_thu_key = -1;

--currency;

UPDATE dwh.f_aplanacqproposalhdr f
SET     pln_pro_curr_key  	 = COALESCE(c.curr_key,-1),
        currency_code        = TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.pln_pro_curr_key = -1;

UPDATE dwh.f_bookingrequest f
SET     br_curr_key  	 	= COALESCE(c.curr_key,-1),
        br_currency         = TRIM(f.br_currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.br_currency)  = c.iso_curr_code 
AND     f.br_curr_key = -1;

UPDATE dwh.f_brconsignmentdetail f
SET     brcd_curr_key  	   = COALESCE(c.curr_key,-1),
        cd_currency        = TRIM(f.cd_currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.cd_currency)  = c.iso_curr_code 
AND     f.brcd_curr_key = -1;

UPDATE dwh.f_dispatchdocheader f
SET     ddh_curr_key  	    = COALESCE(c.curr_key,-1),
        ddh_currency        = TRIM(f.ddh_currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.ddh_currency)  = c.iso_curr_code 
AND     f.ddh_curr_key = -1;

UPDATE dwh.f_draftbillheader f
SET     draft_curr_key  	 = COALESCE(c.curr_key,-1),
        draft_bill_currency  = TRIM(f.draft_bill_currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.draft_bill_currency)  = c.iso_curr_code 
AND     f.draft_curr_key = -1;

UPDATE dwh.f_fbpaccountbalance f
SET     fbp_act_curr_key  	 	= COALESCE(c.curr_key,-1),
        currency_code           = TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.fbp_act_curr_key = -1;

UPDATE dwh.f_fbppostedtrndtl f
SET     fbp_trn_curr_key  	   = COALESCE(c.curr_key,-1),
        currency_code        = TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.fbp_trn_curr_key = -1;

UPDATE dwh.f_grheader f
SET     gr_curr_key  	    = COALESCE(c.curr_key,-1),
        currency            = TRIM(f.currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency)  = c.iso_curr_code 
AND     f.gr_curr_key = -1;

UPDATE dwh.f_purchaseheader f
SET     po_cur_key  	  = COALESCE(c.curr_key,-1),
        pocurrency        = TRIM(f.pocurrency)
FROM dwh.d_currency c      
WHERE   TRIM(f.pocurrency)  = c.iso_curr_code 
AND     f.po_cur_key = -1;

UPDATE dwh.f_purchasereqheader f
SET     preqm_hr_curr_key  	 	= COALESCE(c.curr_key,-1),
        preqm_currency          = TRIM(f.preqm_currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.preqm_currency)  = c.iso_curr_code 
AND     f.preqm_hr_curr_key = -1;

UPDATE dwh.f_rppostingsdtl f
SET     rppostingsdtl_curr_key  	   = COALESCE(c.curr_key,-1),
        currency_code        		   = TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.rppostingsdtl_curr_key = -1;

UPDATE dwh.f_rptacctinfodtl f
SET     rptacctinfodtl_curr_key  	    = COALESCE(c.curr_key,-1),
        currency        				= TRIM(f.currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency)  = c.iso_curr_code 
AND     f.rptacctinfodtl_curr_key = -1;

UPDATE dwh.f_sadadjvcrdocdtl f
SET     sadadjvcrdocdtl_curr_key  	 = COALESCE(c.curr_key,-1),
        au_cr_doc_cur  				 = TRIM(f.au_cr_doc_cur)
FROM dwh.d_currency c      
WHERE   TRIM(f.au_cr_doc_cur)  = c.iso_curr_code 
AND     f.sadadjvcrdocdtl_curr_key = -1;

UPDATE dwh.f_sadadjvdrdocdtl f
SET     sadadjvdrdocdtl_curr_key  	 	= COALESCE(c.curr_key,-1),
        au_dr_doc_cur           		= TRIM(f.au_dr_doc_cur)
FROM dwh.d_currency c      
WHERE   TRIM(f.au_dr_doc_cur)  = c.iso_curr_code 
AND     f.sadadjvdrdocdtl_curr_key = -1;

UPDATE dwh.f_sadadjvoucherhdr f
SET     sadadjvoucherhdr_curr_key  	   = COALESCE(c.curr_key,-1),
        currency_code        		   = TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.sadadjvoucherhdr_curr_key = -1;

UPDATE dwh.f_sidochdr f
SET     sidochdr_currency_key  	    = COALESCE(c.curr_key,-1),
        tran_currency               = TRIM(f.tran_currency)
FROM dwh.d_currency c      
WHERE   TRIM(f.tran_currency)  = c.iso_curr_code 
AND     f.sidochdr_currency_key = -1;

UPDATE dwh.f_surfbpostingsdtl f
SET     surf_trn_curr_key  	 	= COALESCE(c.curr_key,-1),
        currency_code           = TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.surf_trn_curr_key = -1;

UPDATE dwh.f_surreceiptdtl f
SET     surreceiptdtl_curr_key  	   = COALESCE(c.curr_key,-1),
        currency_code        		   = TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.surreceiptdtl_curr_key = -1;

UPDATE dwh.f_surreceipthdr f
SET     surreceipthdr_curr_key  	    = COALESCE(c.curr_key,-1),
        currency_code            		= TRIM(f.currency_code)
FROM dwh.d_currency c      
WHERE   TRIM(f.currency_code)  = c.iso_curr_code 
AND     f.surreceipthdr_curr_key = -1;

--d_location;

UPDATE dwh.f_asnadditionaldetail f
SET     asn_pop_loc_key  = COALESCE(l.loc_key,-1),
        asn_pop_loc      = TRIM(f.asn_pop_loc)
FROM dwh.d_location l        
WHERE   TRIM(f.asn_pop_loc)      = l.loc_code 
AND     f.asn_pop_ou     		 = l.loc_ou
AND     f.asn_pop_loc_key = -1;

UPDATE dwh.f_asndetails f
SET     asn_dtl_loc_key   = COALESCE(l.loc_key,-1),
        asn_location      = TRIM(f.asn_location)
FROM dwh.d_location l        
WHERE   TRIM(f.asn_location) = l.loc_code 
AND     f.asn_ou     		 = l.loc_ou
AND     f.asn_dtl_loc_key = -1;

UPDATE dwh.f_asnheader f
SET     asn_loc_key      = COALESCE(l.loc_key,-1),
        asn_location      = TRIM(f.asn_location)
FROM dwh.d_location l        
WHERE   TRIM(f.asn_location)     = l.loc_code 
AND     f.asn_ou     		 	 = l.loc_ou
AND     f.asn_loc_key = -1;

UPDATE dwh.f_bindetails f
SET     bin_loc_key  = COALESCE(l.loc_key,-1),
        bin_loc_code      = TRIM(f.bin_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.bin_loc_code)      = l.loc_code 
AND     f.bin_ou     		 = l.loc_ou
AND     f.bin_loc_key = -1;

UPDATE dwh.f_binexecdetail f
SET     bin_exec_loc_key  = COALESCE(l.loc_key,-1),
        bin_loc_code      = TRIM(f.bin_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.bin_loc_code)     = l.loc_code 
AND     f.bin_exec_ou     		 = l.loc_ou
AND     f.bin_exec_loc_key = -1;

UPDATE dwh.f_binexechdr f
SET     bin_loc_key   = COALESCE(l.loc_key,-1),
        bin_loc_code      = TRIM(f.bin_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.bin_loc_code) = l.loc_code 
AND     f.bin_exec_ou     		 = l.loc_ou
AND     f.bin_loc_key = -1;

UPDATE dwh.f_binexecitemdetail f
SET     bin_loc_key      = COALESCE(l.loc_key,-1),
        bin_loc_code      = TRIM(f.bin_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.bin_loc_code)     = l.loc_code 
AND     f.bin_exec_ou     		 = l.loc_ou
AND     f.bin_loc_key = -1;

UPDATE dwh.f_binplandetails f
SET     bin_loc_dl_key  = COALESCE(l.loc_key,-1),
        bin_loc_code      = TRIM(f.bin_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.bin_loc_code)      = l.loc_code 
AND     f.bin_pln_ou     		  = l.loc_ou
AND     f.bin_loc_dl_key = -1;

UPDATE dwh.f_binplanheader f
SET     bin_loc_key  	  = COALESCE(l.loc_key,-1),
        bin_loc_code      = TRIM(f.bin_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.bin_loc_code)     = l.loc_code 
AND     f.bin_pln_ou     		 = l.loc_ou
AND     f.bin_loc_key = -1;

UPDATE dwh.f_bookingrequest f
SET     br_loc_key   			  = COALESCE(l.loc_key,-1),
        br_customer_location      = TRIM(f.br_customer_location)
FROM dwh.d_location l        
WHERE   TRIM(f.br_customer_location) = l.loc_code 
AND     f.br_ouinstance     		 = l.loc_ou
AND     f.br_loc_key = -1;

UPDATE dwh.f_brplanningprofiledetail f
SET     brppd_loc_key      = COALESCE(l.loc_key,-1),
        brppd_ship_from_id = TRIM(f.brppd_ship_from_id)
FROM dwh.d_location l        
WHERE   TRIM(f.brppd_ship_from_id)     = l.loc_code 
AND     f.brppd_ouinstance     		   = l.loc_ou
AND     f.brppd_loc_key = -1;

UPDATE dwh.f_dispatchconsdetail f
SET     disp_con_loc_key  = COALESCE(l.loc_key,-1),
        disp_location      = TRIM(f.disp_location)
FROM dwh.d_location l        
WHERE   TRIM(f.disp_location)      = l.loc_code 
AND     f.disp_ou     		 = l.loc_ou
AND     f.disp_con_loc_key = -1;

UPDATE dwh.f_dispatchdetail f
SET     dispatch_dtl_loc_key  = COALESCE(l.loc_key,-1),
        dispatch_loc_code      = TRIM(f.dispatch_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.dispatch_loc_code)     = l.loc_code 
AND     f.dispatch_ld_sheet_ou     	  = l.loc_ou
AND     f.dispatch_dtl_loc_key = -1;

UPDATE dwh.f_dispatchdocheader f
SET     ddh_loc_key  	  = COALESCE(l.loc_key,-1),
        ddh_location      = TRIM(f.ddh_location)
FROM dwh.d_location l        
WHERE   TRIM(f.ddh_location) = l.loc_code 
AND     f.ddh_ouinstance     = l.loc_ou
AND     f.ddh_loc_key = -1;

UPDATE dwh.f_dispatchheader f
SET     dispatch_hdr_loc_key      = COALESCE(l.loc_key,-1),
        dispatch_loc_code         = TRIM(f.dispatch_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.dispatch_loc_code)     = l.loc_code 
AND     f.dispatch_ld_sheet_ou     	  = l.loc_ou
AND     f.dispatch_hdr_loc_key = -1;

UPDATE dwh.f_dispatchloaddetail f
SET     disp_load_loc_key  = COALESCE(l.loc_key,-1),
        disp_location      = TRIM(f.disp_location)
FROM dwh.d_location l        
WHERE   TRIM(f.disp_location)      = l.loc_code 
AND     f.disp_ou     		  	   = l.loc_ou
AND     f.disp_load_loc_key = -1;

UPDATE dwh.f_draftbillexecdetail f
SET     draft_bill_loc_key  = COALESCE(l.loc_key,-1),
        exec_loc_code       = TRIM(f.exec_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.exec_loc_code)   = l.loc_code 
AND     f.exec_ou     		 	= l.loc_ou
AND     f.draft_bill_loc_key = -1;

UPDATE dwh.f_draftbillheader f
SET     draft_loc_key   		= COALESCE(l.loc_key,-1),
        draft_bill_location     = TRIM(f.draft_bill_location)
FROM dwh.d_location l        
WHERE   TRIM(f.draft_bill_location) = l.loc_code 
AND     f.draft_bill_ou     		= l.loc_ou
AND     f.draft_loc_key = -1;

UPDATE dwh.f_draftbillsuppliercontractdetail f
SET     draft_bill_location_key      = COALESCE(l.loc_key,-1),
        draft_bill_location          = TRIM(f.draft_bill_location)
FROM dwh.d_location l        
WHERE   TRIM(f.draft_bill_location)     = l.loc_code 
AND     f.draft_bill_ou     		 	= l.loc_ou
AND     f.draft_bill_location_key = -1;

UPDATE dwh.f_gateexecdetail f
SET     gate_exec_dtl_loc_key  = COALESCE(l.loc_key,-1),
        gate_loc_code      	   = TRIM(f.gate_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gate_loc_code)      = l.loc_code 
AND     f.gate_exec_ou     		   = l.loc_ou
AND     f.gate_exec_dtl_loc_key = -1;

UPDATE dwh.f_gateplandetail f
SET     gate_pln_dtl_loc_key  = COALESCE(l.loc_key,-1),
        gate_loc_code      = TRIM(f.gate_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gate_loc_code)     = l.loc_code 
AND     f.gate_pln_ou     		  = l.loc_ou
AND     f.gate_pln_dtl_loc_key = -1;

UPDATE dwh.f_goodsempequipmap f
SET     gr_loc_key   	= COALESCE(l.loc_key,-1),
        gr_loc_cod      = TRIM(f.gr_loc_cod)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_cod) 		 = l.loc_code 
AND     f.gr_ou     		 	 = l.loc_ou
AND     f.gr_loc_key = -1;

UPDATE dwh.f_goodsissuedetails f
SET     gi_loc_key      = COALESCE(l.loc_key,-1),
        gi_loc_code     = TRIM(f.gi_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gi_loc_code)     = l.loc_code 
AND     f.gi_ou     		    = l.loc_ou
AND     f.gi_loc_key = -1;

UPDATE dwh.f_goodsreceiptdetails f
SET     gr_loc_key  	 = COALESCE(l.loc_key,-1),
        gr_loc_code      = TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)      = l.loc_code 
AND     f.gr_exec_ou     		 = l.loc_ou
AND     f.gr_loc_key = -1;

UPDATE dwh.f_goodsreceiptitemdetails f
SET     gr_itm_dtl_loc_key  	  = COALESCE(l.loc_key,-1),
        gr_loc_code      		  = TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)     = l.loc_code 
AND     f.gr_exec_ou     		= l.loc_ou
AND     f.gr_itm_dtl_loc_key = -1;

UPDATE dwh.f_gritemtrackingdetail f
SET     gr_itm_tk_dtl_loc_key   	= COALESCE(l.loc_key,-1),
        stk_location      			= TRIM(f.stk_location)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_location) = l.loc_code 
AND     f.stk_ou      		 = l.loc_ou
AND     f.gr_itm_tk_dtl_loc_key = -1;

UPDATE dwh.f_grplandetail f
SET     gr_loc_key      = COALESCE(l.loc_key,-1),
        gr_loc_code 	= TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)     = l.loc_code 
AND     f.gr_pln_ou      		= l.loc_ou
AND     f.gr_loc_key = -1;

UPDATE dwh.f_grserialinfo f
SET     gr_loc_key  	 = COALESCE(l.loc_key,-1),
        gr_loc_code      = TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)      = l.loc_code 
AND     f.gr_exec_ou     		 = l.loc_ou
AND     f.gr_loc_key = -1;

UPDATE dwh.f_grthudetail f
SET     gr_loc_key  	 = COALESCE(l.loc_key,-1),
        gr_loc_code      = TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)     = l.loc_code 
AND     f.gr_pln_ou     	    = l.loc_ou
AND     f.gr_loc_key = -1;

UPDATE dwh.f_grthuheader f
SET     gr_loc_key  	  = COALESCE(l.loc_key,-1),
        gr_loc_code       = TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)  = l.loc_code 
AND     f.gr_exec_ou         = l.loc_ou
AND     f.gr_loc_key = -1;

UPDATE dwh.f_grthulotdetail f
SET     gr_lot_loc_key      = COALESCE(l.loc_key,-1),
        gr_loc_code         = TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)     = l.loc_code 
AND     f.gr_exec_ou     	    = l.loc_ou
AND     f.gr_lot_loc_key = -1;

UPDATE dwh.f_inboundamendheader f
SET     inb_loc_key  	  = COALESCE(l.loc_key,-1),
        inb_loc_code      = TRIM(f.inb_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.inb_loc_code)       = l.loc_code 
AND     f.inb_ou     		  	   = l.loc_ou
AND     f.inb_loc_key = -1;

UPDATE dwh.f_inbounddetail f
SET     inb_itm_dtl_loc_key  = COALESCE(l.loc_key,-1),
        inb_loc_code      	 = TRIM(f.inb_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.inb_loc_code)      = l.loc_code 
AND     f.inb_ou     		 	  = l.loc_ou
AND     f.inb_itm_dtl_loc_key = -1;

UPDATE dwh.f_inboundheader f
SET     inb_loc_key   	  = COALESCE(l.loc_key,-1),
        inb_loc_code      = TRIM(f.inb_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.inb_loc_code) = l.loc_code 
AND     f.inb_ou     		 = l.loc_ou
AND     f.inb_loc_key = -1;

UPDATE dwh.f_inbounditemamenddetail f
SET     inb_loc_key      = COALESCE(l.loc_key,-1),
        inb_loc_code     = TRIM(f.inb_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.inb_loc_code)     = l.loc_code 
AND     f.inb_ou     		 	 = l.loc_ou
AND     f.inb_loc_key = -1;

UPDATE dwh.f_inboundorderbindetail f
SET     inb_loc_key  		 = COALESCE(l.loc_key,-1),
        in_ord_location      = TRIM(f.in_ord_location)
FROM dwh.d_location l        
WHERE   TRIM(f.in_ord_location)  = l.loc_code 
AND     f.in_ord_ou     		 = l.loc_ou
AND     f.inb_loc_key = -1;

UPDATE dwh.f_inboundscheduleitemamenddetail f
SET     inb_loc_key  	  = COALESCE(l.loc_key,-1),
        inb_loc_code      = TRIM(f.inb_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.inb_loc_code)     = l.loc_code 
AND     f.inb_ou     		 	 = l.loc_ou
AND     f.inb_loc_key = -1;

UPDATE dwh.f_inboundscheduleitemdetail f
SET     inb_loc_key   = COALESCE(l.loc_key,-1),
        inb_loc_code      = TRIM(f.inb_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.inb_loc_code) = l.loc_code 
AND     f.inb_ou     		 = l.loc_ou
AND     f.inb_loc_key = -1;

UPDATE dwh.f_internalorderheader f
SET     in_ord_hdr_loc_key      = COALESCE(l.loc_key,-1),
        in_ord_location      = TRIM(f.in_ord_location)
FROM dwh.d_location l        
WHERE   TRIM(f.in_ord_location)  = l.loc_code 
AND     f.in_ord_ou     		 = l.loc_ou
AND     f.in_ord_hdr_loc_key = -1;

UPDATE dwh.f_loadingdetail f
SET     loading_dtl_loc_key  = COALESCE(l.loc_key,-1),
        loading_loc_code      = TRIM(f.loading_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.loading_loc_code)      = l.loc_code 
AND     f.loading_exec_ou     		  = l.loc_ou
AND     f.loading_dtl_loc_key = -1;

UPDATE dwh.f_loadingheader f
SET     loading_hdr_loc_key   = COALESCE(l.loc_key,-1),
        loading_loc_code      = TRIM(f.loading_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.loading_loc_code)     = l.loc_code 
AND     f.loading_exec_ou     		 = l.loc_ou
AND     f.loading_hdr_loc_key = -1;

UPDATE dwh.f_lottrackingdetail f
SET     stk_loc_key   			  = COALESCE(l.loc_key,-1),
        stk_location      		  = TRIM(f.stk_location)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_location) = l.loc_code 
AND     f.stk_ou     		 = l.loc_ou
AND     f.stk_loc_key = -1;

UPDATE dwh.f_outbounddocdetail f
SET     obd_loc_key      = COALESCE(l.loc_key,-1),
        oub_doc_loc_code = TRIM(f.oub_doc_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.oub_doc_loc_code)     = l.loc_code 
AND     f.oub_doc_ou     		     = l.loc_ou
AND     f.obd_loc_key = -1;

UPDATE dwh.f_outboundheader f
SET     obh_loc_key  	  = COALESCE(l.loc_key,-1),
        oub_loc_code      = TRIM(f.oub_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.oub_loc_code) = l.loc_code 
AND     f.oub_ou     		 = l.loc_ou
AND     f.obh_loc_key = -1;

UPDATE dwh.f_outbounditemdetail f
SET     obd_loc_key  		  = COALESCE(l.loc_key,-1),
        oub_itm_loc_code      = TRIM(f.oub_itm_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.oub_itm_loc_code)     = l.loc_code 
AND     f.oub_itm_ou     	  		 = l.loc_ou
AND     f.obd_loc_key = -1;

UPDATE dwh.f_outboundlotsrldetail f
SET     oub_loc_key  	  		= COALESCE(l.loc_key,-1),
        oub_lotsl_loc_code      = TRIM(f.oub_lotsl_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.oub_lotsl_loc_code)  = l.loc_code 
AND     f.oub_lotsl_ou     			= l.loc_ou
AND     f.oub_loc_key = -1;

UPDATE dwh.f_outboundschdetail f
SET     oub_loc_key      		 = COALESCE(l.loc_key,-1),
        oub_sch_loc_code         = TRIM(f.oub_sch_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.oub_sch_loc_code)      = l.loc_code 
AND     f.oub_sch_ou     	  		  = l.loc_ou
AND     f.oub_loc_key = -1;

UPDATE dwh.f_outboundvasheader f
SET     oub_loc_key  	  = COALESCE(l.loc_key,-1),
        oub_loc_code      = TRIM(f.oub_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.oub_loc_code)       = l.loc_code 
AND     f.oub_ou     		  	   = l.loc_ou
AND     f.oub_loc_key = -1;

UPDATE dwh.f_pickingdetail f
SET     pick_loc_key  		= COALESCE(l.loc_key,-1),
        pick_loc_code       = TRIM(f.pick_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pick_loc_code)   = l.loc_code 
AND     f.pick_exec_ou     		= l.loc_ou
AND     f.pick_loc_key = -1;

UPDATE dwh.f_pickingheader f
SET     pick_loc_key   		= COALESCE(l.loc_key,-1),
        pick_loc_code       = TRIM(f.pick_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pick_loc_code)   = l.loc_code 
AND     f.pick_exec_ou     		= l.loc_ou
AND     f.pick_loc_key = -1;

UPDATE dwh.f_pickplandetails f
SET     pick_pln_loc_key       = COALESCE(l.loc_key,-1),
        pick_loc_code          = TRIM(f.pick_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pick_loc_code)       = l.loc_code 
AND     f.pick_pln_ou     		 	= l.loc_ou
AND     f.pick_pln_loc_key = -1;

UPDATE dwh.f_pickplanheader f
SET     pick_pln_loc_key  		= COALESCE(l.loc_key,-1),
        pick_loc_code      	    = TRIM(f.pick_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pick_loc_code)      = l.loc_code 
AND     f.pick_pln_ou     		   = l.loc_ou
AND     f.pick_pln_loc_key = -1;

UPDATE dwh.f_pickrulesheader f
SET     pick_loc_key  	   = COALESCE(l.loc_key,-1),
        pick_loc_code      = TRIM(f.pick_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pick_loc_code)     = l.loc_code 
AND     f.pick_ou     		  	  = l.loc_ou
AND     f.pick_loc_key = -1;

UPDATE dwh.f_planningheader f
SET     plph_loc_key   			   = COALESCE(l.loc_key,-1),
        plph_plan_location_no      = TRIM(f.plph_plan_location_no)
FROM dwh.d_location l        
WHERE   TRIM(f.plph_plan_location_no) 	 = l.loc_code 
AND     f.plph_ouinstance     		 	 = l.loc_ou
AND     f.plph_loc_key = -1;

UPDATE dwh.f_pogritemdetail f
SET     gr_po_loc_key      = COALESCE(l.loc_key,-1),
        gr_loc_code        = TRIM(f.gr_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.gr_loc_code)     = l.loc_code 
AND     f.gr_pln_ou     		= l.loc_ou
AND     f.gr_po_loc_key = -1;

UPDATE dwh.f_purchasedetails f
SET     po_dtl_loc_key  	 = COALESCE(l.loc_key,-1),
        location      		 = TRIM(f.location)
FROM dwh.d_location l        
WHERE   TRIM(f.location)      = l.loc_code 
AND     f.poou     		 	  = l.loc_ou
AND     f.po_dtl_loc_key = -1;

UPDATE dwh.f_purchaseheader f
SET     po_loc_key  	  	  = COALESCE(l.loc_key,-1),
        location      		  = TRIM(f.location)
FROM dwh.d_location l        
WHERE   TRIM(f.location)     = l.loc_code 
AND     f.poou     			 = l.loc_ou
AND     f.po_loc_key = -1;

UPDATE dwh.f_purchasereqdetail f
SET     preqm_dtl_loc_key   	= COALESCE(l.loc_key,-1),
        prqit_location      	= TRIM(f.prqit_location)
FROM dwh.d_location l        
WHERE   TRIM(f.prqit_location)   = l.loc_code 
AND     f.prqit_prou      		 = l.loc_ou
AND     f.preqm_dtl_loc_key = -1;

UPDATE dwh.f_putawaybincapacity f
SET     pway_bin_cap_loc_key      = COALESCE(l.loc_key,-1),
        pway_loc_code 			  = TRIM(f.pway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pway_loc_code)     = l.loc_code 
AND     f.pway_pln_ou      		  = l.loc_ou
AND     f.pway_bin_cap_loc_key = -1;

UPDATE dwh.f_putawayempequipmap f
SET     pway_eqp_map_loc_key  	 = COALESCE(l.loc_key,-1),
        putaway_loc_code      	 = TRIM(f.putaway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.putaway_loc_code)      = l.loc_code 
AND     f.putaway_ou     		 	  = l.loc_ou
AND     f.pway_eqp_map_loc_key = -1;

UPDATE dwh.f_putawayexecdetail f
SET     pway_exe_dtl_loc_key  	 = COALESCE(l.loc_key,-1),
        pway_loc_code            = TRIM(f.pway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pway_loc_code)     = l.loc_code 
AND     f.pway_exec_ou     	      = l.loc_ou
AND     f.pway_exe_dtl_loc_key = -1;

UPDATE dwh.f_putawayexecserialdetail f
SET     pway_exec_serial_dtl_loc_key  	  = COALESCE(l.loc_key,-1),
        pway_loc_code       			  = TRIM(f.pway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pway_loc_code)  = l.loc_code 
AND     f.pway_exec_ou         = l.loc_ou
AND     f.pway_exec_serial_dtl_loc_key = -1;

UPDATE dwh.f_putawayitemdetail f
SET     pway_itm_dtl_loc_key      = COALESCE(l.loc_key,-1),
        pway_loc_code             = TRIM(f.pway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pway_loc_code)     = l.loc_code 
AND     f.pway_exec_ou     	      = l.loc_ou
AND     f.pway_itm_dtl_loc_key = -1;

UPDATE dwh.f_putawayplandetail f
SET     pway_pln_dtl_loc_key  	  = COALESCE(l.loc_key,-1),
        pway_loc_code      		  = TRIM(f.pway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pway_loc_code)          = l.loc_code 
AND     f.pway_pln_ou     		  	   = l.loc_ou
AND     f.pway_pln_dtl_loc_key = -1;

UPDATE dwh.f_putawayplanitemdetail f
SET     pway_pln_itm_dtl_loc_key  = COALESCE(l.loc_key,-1),
        pway_loc_code      		  = TRIM(f.pway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pway_loc_code)    = l.loc_code 
AND     f.pway_pln_ou     		 = l.loc_ou
AND     f.pway_pln_itm_dtl_loc_key = -1;

UPDATE dwh.f_putawayserialdetail f
SET     pway_serial_dtl_loc_key   = COALESCE(l.loc_key,-1),
        pway_loc_code      		  = TRIM(f.pway_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.pway_loc_code) 	 = l.loc_code 
AND     f.pway_pln_ou     		 = l.loc_ou
AND     f.pway_serial_dtl_loc_key = -1;

UPDATE dwh.f_stockbinhistorydetail f
SET     stock_loc_key       = COALESCE(l.loc_key,-1),
        stock_location      = TRIM(f.stock_location)
FROM dwh.d_location l        
WHERE   TRIM(f.stock_location)     = l.loc_code 
AND     f.stock_ou     		 	   = l.loc_ou
AND     f.stock_loc_key = -1;

UPDATE dwh.f_stockconversiondetail f
SET     stk_con_dtl_loc_key   = COALESCE(l.loc_key,-1),
        stk_con_loc_code      = TRIM(f.stk_con_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_con_loc_code)      = l.loc_code 
AND     f.stk_con_proposal_ou     	  = l.loc_ou
AND     f.stk_con_dtl_loc_key = -1;

UPDATE dwh.f_stockconversionheader f
SET     stk_con_loc_key  	  = COALESCE(l.loc_key,-1),
        stk_con_loc_code      = TRIM(f.stk_con_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_con_loc_code)     = l.loc_code 
AND     f.stk_con_proposal_ou     	 = l.loc_ou
AND     f.stk_con_loc_key = -1;

UPDATE dwh.f_stock_lottrackingdaywise_detail f
SET     stk_loc_key   		= COALESCE(l.loc_key,-1),
        stk_location        = TRIM(f.stk_location)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_location) = l.loc_code 
AND     f.stk_ou     		 = l.loc_ou
AND     f.stk_loc_key = -1;

UPDATE dwh.f_stockrejecteddetail f
SET     rejstk_dtl_loc_key      = COALESCE(l.loc_key,-1),
        rejstk_loc_code      	= TRIM(f.rejstk_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.rejstk_loc_code)     = l.loc_code 
AND     f.rejstk_ou     		 	= l.loc_ou
AND     f.rejstk_dtl_loc_key = -1;

UPDATE dwh.f_stockstoragebalancedetail f
SET     stk_su_loc_key 	  = COALESCE(l.loc_key,-1),
        stk_location      = TRIM(f.stk_location)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_location)      = l.loc_code 
AND     f.stk_ou     		  	  = l.loc_ou
AND     f.stk_su_loc_key = -1;

UPDATE dwh.f_stockuiditemtrackingdetail f
SET     stk_itm_dtl_loc_key  	  = COALESCE(l.loc_key,-1),
        stk_location      		  = TRIM(f.stk_location)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_location)     = l.loc_code 
AND     f.stk_ou     		     = l.loc_ou
AND     f.stk_itm_dtl_loc_key = -1;

UPDATE dwh.f_stockuidtrackingdetail f
SET     stk_trc_dtl_loc_key   	= COALESCE(l.loc_key,-1),
        stk_location      		= TRIM(f.stk_location)
FROM dwh.d_location l        
WHERE   TRIM(f.stk_location) = l.loc_code 
AND     f.stk_ou     		 = l.loc_ou
AND     f.stk_trc_dtl_loc_key = -1;

UPDATE dwh.f_wavedetail f
SET     wave_loc_key        = COALESCE(l.loc_key,-1),
        wave_loc_code 		= TRIM(f.wave_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.wave_loc_code)     = l.loc_code 
AND     f.wave_ou     		      = l.loc_ou
AND     f.wave_loc_key = -1;

UPDATE dwh.f_waveheader f
SET     wave_loc_key  		= COALESCE(l.loc_key,-1),
        wave_loc_code       = TRIM(f.wave_loc_code)
FROM dwh.d_location l        
WHERE   TRIM(f.wave_loc_code)      = l.loc_code 
AND     f.wave_ou     		 	   = l.loc_ou
AND     f.wave_loc_key = -1;

--d_zone;

UPDATE dwh.f_allocitemdetailshistory f
SET     allc_zone_key  	    = COALESCE(z.zone_key,-1),
        allc_zone_no        = TRIM(f.allc_zone_no),
		allc_wh_no     	  	= TRIM(allc_wh_no)
FROM dwh.d_zone z      
WHERE   TRIM(f.allc_zone_no)  = z.zone_code 
AND     f.allc_ouinstid       = z.zone_ou
AND     f.allc_doc_ou     	  = z.zone_ou
AND     TRIM(f.allc_wh_no) 	  = z.zone_loc_code
AND     f.allc_zone_key = -1;

UPDATE dwh.f_bindetails f
SET     bin_zone_key  	     = COALESCE(z.zone_key,-1),
        bin_zone             = TRIM(f.bin_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.bin_zone)     = z.zone_code 
AND     f.bin_ou       		 = z.zone_ou
AND     f.bin_loc_code     	 = z.zone_loc_code
AND     f.bin_zone_key = -1;

UPDATE dwh.f_itemallocdetail f
SET     allc_zone_key  	     = COALESCE(z.zone_key,-1),
        allc_zone_no             = TRIM(f.allc_zone_no)
FROM dwh.d_zone z       
WHERE   TRIM(f.allc_zone_no)     = z.zone_code 
AND     f.allc_ouinstid       	 = z.zone_ou
AND     f.allc_doc_ou     	     = z.zone_ou
AND     f.allc_wh_no     	     = z.zone_loc_code
AND     f.allc_zone_key = -1;

UPDATE dwh.f_putawayempequipmap f
SET     pway_eqp_map_zone_key  	 = COALESCE(z.zone_key,-1),
        putaway_zone             = TRIM(f.putaway_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.putaway_zone)     = z.zone_code 
AND     f.putaway_ou       		 = z.zone_ou
AND     f.pway_eqp_map_zone_key = -1;

UPDATE dwh.f_putawayexecserialdetail f
SET     pway_exec_serial_dtl_zone_key  	    = COALESCE(z.zone_key,-1),
        pway_zone                           = TRIM(f.pway_zone)
FROM dwh.d_zone z      
WHERE   TRIM(f.pway_zone)   = z.zone_code 
AND     f.pway_exec_ou      = z.zone_ou
AND     f.pway_loc_code     = z.zone_loc_code
AND     f.pway_exec_serial_dtl_zone_key = -1;

UPDATE dwh.f_putawayitemdetail f
SET     pway_itm_dtl_zone_key  	     = COALESCE(z.zone_key,-1),
        pway_zone             		 = TRIM(f.pway_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.pway_zone)     = z.zone_code 
AND     f.pway_exec_ou        = z.zone_ou
AND     f.pway_loc_code       = z.zone_loc_code
AND     f.pway_itm_dtl_zone_key = -1;

UPDATE dwh.f_putawayplanitemdetail f
SET     pway_pln_itm_dtl_zone_key  	     = COALESCE(z.zone_key,-1),
        pway_zone             			 = TRIM(f.pway_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.pway_zone)        = z.zone_code 
AND     f.pway_pln_ou       	 = z.zone_ou
AND     f.pway_loc_code     	 = z.zone_loc_code
AND     f.pway_pln_itm_dtl_zone_key = -1;

UPDATE dwh.f_putawayserialdetail f
SET     pway_serial_dtl_zone_key  	 = COALESCE(z.zone_key,-1),
        pway_zone                    = TRIM(f.pway_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.pway_zone)     = z.zone_code 
AND     f.pway_pln_ou         = z.zone_ou
AND     f.pway_serial_dtl_zone_key = -1;

UPDATE dwh.f_stockbalanceseriallevel f
SET     sbs_level_zone_key  	    = COALESCE(z.zone_key,-1),
        sbs_zone                    = TRIM(f.sbs_zone)
FROM dwh.d_zone z      
WHERE   TRIM(f.sbs_zone)    = z.zone_code 
AND     f.sbs_ouinstid      = z.zone_ou
AND     f.sbs_level_zone_key = -1;

UPDATE dwh.f_stockbalancestorageunitlotlevel f
SET     sbl_lot_level_zone_key  	 = COALESCE(z.zone_key,-1),
        sbl_zone             		 = TRIM(f.sbl_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.sbl_zone)      = z.zone_code 
AND     f.sbl_ouinstid        = z.zone_ou
AND     f.sbl_lot_level_zone_key = -1;

UPDATE dwh.f_stockconversiondetail f
SET     stk_con_dtl_zone_key  	     = COALESCE(z.zone_key,-1),
        stk_con_zone             	 = TRIM(f.stk_con_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.stk_con_zone)        = z.zone_code 
AND     f.stk_con_proposal_ou       = z.zone_ou
AND     f.stk_con_loc_code     	    = z.zone_loc_code
AND     f.stk_con_dtl_zone_key = -1;

UPDATE dwh.f_stockuidtrackingdetail f
SET     stk_trc_dtl_zone_key  	 = COALESCE(z.zone_key,-1),
        stk_zone                 = TRIM(f.stk_zone)
FROM dwh.d_zone z       
WHERE   TRIM(f.stk_zone)     = z.zone_code 
AND     f.stk_ou             = z.zone_ou
AND     f.stk_location     	 = z.zone_loc_code
AND     f.stk_trc_dtl_zone_key = -1;


END;
$$;


ALTER PROCEDURE click.usp_update_dimension_key() OWNER TO proconnect;

--
-- Name: d_stock_balance(); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.d_stock_balance()
    LANGUAGE plpgsql
    AS $$

DECLARE
v_min integer;
v_max integer;
stk_bal integer;
in_qty int;
out_qty int;
in_out int;
date_aging1 timestamp without time zone;
date_aging2 timestamp without time zone;
no_of_days_Aging integer;

begin

CREATE TEMP TABLE STOCK_BALANCE
(
	row_id integer GENERATED ALWAYS AS IDENTITY,
	wms_stock_date timestamp without time zone,
	wms_stock_location character varying(50),
	wms_stock_zone character varying(50),
	wms_stock_bin_type character varying(50),
	wms_stock_bin character varying(50),
	wms_stock_in_qty integer,
	wms_stock_out_qty integer,
	stk_balance integer,
	aging_in_days integer
);

insert into STOCK_BALANCE(wms_stock_date,wms_stock_location,wms_stock_zone,wms_stock_bin_type,wms_stock_bin,wms_stock_in_qty,wms_stock_out_qty)
select stock_date,stock_location,stock_zone,stock_bin_type,stock_bin, sum(stock_in_qty),sum(stock_out_qty)
 from dwh.f_stockbinhistorydetail  
where stock_location='MH008P0148'
and stock_zone='NGD' and stock_bin_type='HL2'
and stock_bin='MB-08-C3'
group by stock_date,stock_location,stock_zone,stock_bin_type,stock_bin;

select min(row_id), max(row_id),0
into v_min, v_max,stk_bal
from STOCK_BALANCE;

while(v_min<=v_max)
loop

	select wms_stock_in_qty, wms_stock_out_qty, wms_stock_date
	into in_qty, out_qty, date_aging1
	from STOCK_BALANCE
	where row_id=v_min;
	
	if v_min>=2
	Then
		select stk_balance,wms_stock_date
		into stk_bal, date_aging2
		from STOCK_BALANCE
		where row_id=v_min-1;
	end if;
	
	no_of_days_Aging=DATE_PART('day',date_aging1-date_aging2);
	 in_out= in_qty-out_qty ;
	
	if no_of_days_Aging is null
	Then
		update STOCK_BALANCE set aging_in_days=0 where row_id=v_min;
	end if;
	
	if no_of_days_aging is not null
	Then
		update STOCK_BALANCE set aging_in_days=no_of_days_Aging where row_id=v_min;
	end if;
	
	
	if stk_bal=0
	Then
		if in_qty>0 and out_qty=0 and in_out>0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
		if in_qty=0 and out_qty=0 and in_out=0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
		if in_qty=0 and out_qty>0 and in_out<0
		Then
			update STOCK_BALANCE set stk_balance=0 where row_id=v_min ;
		end if;
		
		if in_qty>0 and out_qty>0 and in_out=0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
		if in_qty>0 and out_qty>0 and in_out>0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
	end if;
	
	if stk_bal >0
	Then
	
		if in_qty>0 and out_qty>0 and in_out>0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
		if in_qty>0 and out_qty>0 and in_out=0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
		if in_qty=0 and out_qty=0 and in_out=0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
		if in_qty>0 and out_qty=0 and in_out>0
		Then
			update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
		end if;
		
		if in_qty=0 and out_qty>0 and in_out<0
		Then
			 stk_bal=stk_bal + in_out ;
			
			if stk_bal>0
			Then
				update STOCK_BALANCE set stk_balance=stk_bal where row_id=v_min ;
			else
				update STOCK_BALANCE set stk_balance=0 where row_id=v_min ;
			end if;	
		end if;
		
		if in_qty>0 and out_qty>0
		
		Then
			if in_out<0
			Then 
				 stk_bal=stk_bal +in_out ;

				if stk_bal >0
				Then
				update STOCK_BALANCE set stk_balance=stk_bal where row_id=v_min ;
				else
				update STOCK_BALANCE set stk_balance=0 where row_id=v_min ;
				end if;
			end if;
		
			
			if in_out>0
			Then
				update STOCK_BALANCE set stk_balance=stk_bal + in_out where row_id=v_min ;
			end if;
		end if;
	end if;
	
	v_min=v_min +1 ;
	
end loop;



TRUNCATE table dwh.d_daily_stock_balance;
insert into dwh.d_daily_stock_balance
(
	wms_stock_date,wms_stock_location,wms_stock_zone,wms_stock_bin_type,wms_stock_bin,
	wms_stock_in_qty,wms_stock_out_qty,stk_balance,aging_in_days,created_date
)
select wms_stock_date,wms_stock_location,wms_stock_zone,wms_stock_bin_type,wms_stock_bin,
		wms_stock_in_qty,wms_stock_out_qty,stk_balance, aging_in_days,now()
		from STOCK_BALANCE;

end;
$$;


ALTER PROCEDURE dwh.d_stock_balance() OWNER TO proconnect;

--
-- Name: usp_booking_his_amendno_update(); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_booking_his_amendno_update()
    LANGUAGE plpgsql
    AS $$


DECLARE
  v_min INTEGER;
 v_max INTEGER;
 v_amendno_f INTEGER;
 v_createddate character varying(100);
 v_br_ouinstance INTEGER;
 v_br_request_id character varying(72);
 v_amend_no_stg INTEGER;
 v_rowid INTEGER;

BEGIN

-- UPDATE	click.F_Shipment_details csd
-- SET		from_pinicode	= brsd_from_postal_code,
-- 		to_pinicode		= brsd_to_postal_code,
-- 		br_key			= brsd_br_key
-- FROM	dwh.F_BRShipmentDetail dsd
-- WHERE	csd.ouinstance		= dsd.brsd_ouinstance
-- AND		csd.br_request_id	= dsd.brsd_br_id;



CREATE TEMP TABLE BOOKING_HISTORY
(
	ROW_ID  INTEGER GENERATED ALWAYS AS IDENTITY,
	rowid_stg integer,
    created_date character varying(100),
	br_ouinstance INTEGER,
	br_request_id character varying(72) ,
 	br_status varchar(50) ,
	amend_no INTEGER
);
  
  
  INSERT INTO BOOKING_HISTORY
  (rowid_stg,created_date,br_ouinstance,br_request_id,br_status,amend_no)
  SELECT row_id,created_date,br_ouinstance,br_request_id,br_status,AMEND_NO
  FROM STG.stg_tms_br_booking_request_reason_hist
  where amend_no is null
  --and br_request_id in('BR/WB4/22/00002917')
  order by 1;
  
  

 
  
  SELECT MIN(ROW_ID), MAX(ROW_ID) INTO v_min, v_max FROM BOOKING_HISTORY;
   
  
  
  WHILE(v_min<=v_max)
  loop
	  
	 
	   select created_date,br_ouinstance,br_request_id, rowid_stg
	  INTO  v_createddate,v_br_ouinstance,v_br_request_id, v_rowid
	  FROM BOOKING_HISTORY
	  WHERE ROW_ID=v_min;
	  
	 
	  IF EXISTS(SELECT 1 FROM dwh.f_bookingRequestReasonHistory 
			    WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				
				
			   )
	  THEN
	
		  select max(amend_no)
		  into v_amendno_f
		  from dwh.f_bookingRequestReasonHistory
		  where  br_ouinstance=v_br_ouinstance
		  and br_request_id=v_br_request_id ;
	  
				UPDATE stg.stg_tms_br_booking_request_reason_hist
	  			SET amend_no=v_amendno_f +1 
	  			WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				and created_date=v_createddate ;
		
	  END IF;
	  
	 
	  
	  if EXISTS(SELECT 1 FROM STG.stg_tms_br_booking_request_reason_hist 
			    WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
			   and amend_no is not null
				
			   )
	  
	 	THEN
			  select max(amend_no)
			  into v_amend_no_stg
			  from STG.stg_tms_br_booking_request_reason_hist 
			  where  br_ouinstance=v_br_ouinstance
			  and br_request_id=v_br_request_id 
	 		  and amend_no is not null;
	  
		  
			UPDATE stg.stg_tms_br_booking_request_reason_hist
	  			SET amend_no=v_amend_no_stg +1 
	  			WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				and created_date=v_createddate
				AND row_id= v_rowid;
		 
	 	 else
	  	 
	  		UPDATE stg.stg_tms_br_booking_request_reason_hist
	  			SET amend_no= 1 
	  			WHERE br_ouinstance=v_br_ouinstance
				and br_request_id=v_br_request_id
				and created_date=v_createddate
				and row_id=v_rowid;
	      end if;
	    
	   v_min= v_min +1;
	  
	  	
	  
  end loop;

END;
$$;


ALTER PROCEDURE dwh.usp_booking_his_amendno_update() OWNER TO proconnect;

--
-- Name: usp_d_accountadditionalmaster(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_accountadditionalmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_ard_addn_account_mst;

    UPDATE dwh.d_accountAdditionalMaster t
    SET
        timestamp             = s.timestamp,
        account_code          = s.account_code,
        effective_to          = s.effective_to,
        resou_id              = s.resou_id,
        usage_type            = s.usage_type,
        ard_type              = s.ard_type,
        flag                  = s.flag,
        createdby             = s.createdby,
        createddate           = s.createddate,
        modifiedby            = s.modifiedby,
        modifieddate          = s.modifieddate,
        etlactiveind          = 1,
        etljobname            = p_etljobname,
        envsourcecd           = p_envsourcecd,
        datasourcecd          = p_datasourcecd,
        etlupdatedatetime     = NOW()
    FROM stg.stg_ard_addn_account_mst s
    WHERE t.company_code		= s.company_code
    AND t.fb_id					= s.fb_id
    AND t.usage_id				= s.usage_id
    AND t.effective_from		= s.effective_from
    AND t.currency_code			= s.currency_code
    AND t.drcr_flag				= s.drcr_flag
    AND t.dest_fbid				= s.dest_fbid
    AND t.child_company			= s.child_company
    AND t.dest_company			= s.dest_company
    AND t.sequence_no			= s.sequence_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_accountAdditionalMaster
    (
        company_code, fb_id, usage_id, effective_from, currency_code, drcr_flag, dest_fbid, child_company, 
		dest_company, sequence_no, timestamp, account_code, effective_to, resou_id, usage_type, ard_type, flag, 
		createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.company_code, s.fb_id, s.usage_id, s.effective_from, s.currency_code, s.drcr_flag, s.dest_fbid, s.child_company, 
		s.dest_company, s.sequence_no, s.timestamp, s.account_code, s.effective_to, s.resou_id, s.usage_type, s.ard_type, s.flag, 
		s.createdby, s.createddate, s.modifiedby, s.modifieddate, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_ard_addn_account_mst s
    LEFT JOIN dwh.d_accountAdditionalMaster t
    ON s.company_code = t.company_code
    AND s.fb_id = t.fb_id
    AND s.usage_id = t.usage_id
    AND s.effective_from = t.effective_from
    AND s.currency_code = t.currency_code
    AND s.drcr_flag = t.drcr_flag
    AND s.dest_fbid = t.dest_fbid
    AND s.child_company = t.child_company
    AND s.dest_company = t.dest_company
    AND s.sequence_no = t.sequence_no
    WHERE t.company_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_ard_addn_account_mst
    (
        company_code, fb_id, usage_id, effective_from, currency_code, drcr_flag, dest_fbid, child_company, dest_company, sequence_no, timestamp, account_code, effective_to, resou_id, usage_type, ard_type, flag, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    )
    SELECT
        company_code, fb_id, usage_id, effective_from, currency_code, drcr_flag, dest_fbid, child_company, dest_company, sequence_no, timestamp, account_code, effective_to, resou_id, usage_type, ard_type, flag, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    FROM stg.stg_ard_addn_account_mst;
	
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_accountadditionalmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_address(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_address(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_emod_addr_mst;

	UPDATE dwh.d_address t
    SET 
		atimestamp    		=      s.atimestamp,      
		address1	  		=      s.address1,
		address2 	  		=	   s.address2,
		address3  	  		=      s.address3,
		address_desc  		=	   s.address_desc,
		city                =      s.city, 
		state   			=	   s.state,
		country       		=	   s.country,
		phone_no      		=	   s.phone_no,
		url           		=	   s.url,
		zip_code      		=	   s.zip_code,
		createdby     		=	   s.createdby,
		createddate   		=	   s.createddate,
		modifiedby    		=	   s.modifiedby,
		modifieddate  		=	   s.modifieddate,
		state_code    		=	   s.state_code,
		etlactiveind 		= 	   1,
		etljobname 			= 	   p_etljobname,
		envsourcecd 		= 	   p_envsourcecd ,
		datasourcecd 		= 	   p_datasourcecd ,
		etlupdatedatetime 	= 	   NOW()
		
    FROM stg.stg_emod_addr_mst s
    WHERE t.address_id  	= 	   s.address_id;

    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_address
	(
		address_id, 		atimestamp, 		address1, 		 	address2, 
		address3, 			address_desc, 		city, 			 	state, 
		country, 			phone_no, 			url, 			 	zip_code, 
		createdby, 			createddate, 		modifiedby,      	modifieddate, 
		state_code, 		etlactiveind, 		etljobname,      	envsourcecd, 
		datasourcecd,       etlcreatedatetime
	)
	
    SELECT 
		s.address_id, 		s.atimestamp, 		s.address1, 		s.address2, 
		s.address3, 		s.address_desc, 	s.city, 			s.state, 
		s.country, 			s.phone_no, 		s.url, 			 	s.zip_code, 
		s.createdby, 		s.createddate, 		s.modifiedby,      	s.modifieddate, 
		s.state_code, 		1, 					p_etljobname,      	p_envsourcecd, 
		p_datasourcecd,     now()
	FROM stg.stg_emod_addr_mst s
    LEFT JOIN dwh.d_address t
    ON 	s.address_id  		= 	t.address_id
    WHERE t.address_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_emod_addr_mst
	(
		address_id, 		atimestamp, 		address1, 		address2, 		
		address3,			address_desc, 		city, 			state, 		
		country, 			phone_no,			fax, 			telex, 				
		url, 				mail_stop, 			zip_code, 		createdby, 
		createddate, 		modifiedby,		 	modifieddate, 	state_code,
        email_id, 			etlcreateddatetime	
	)
	SELECT 
		address_id, 		atimestamp, 		address1, 		address2, 		
		address3,			address_desc, 		city, 			state, 		
		country, 			phone_no,			fax, 			telex, 				
		url, 				mail_stop, 			zip_code, 		createdby, 
		createddate, 		modifiedby,		 	modifieddate, 	state_code,
        email_id, 			etlcreateddatetime
	FROM stg.stg_emod_addr_mst;

    END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
  
END;
$$;


ALTER PROCEDURE dwh.usp_d_address(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_assetaccountmaster(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_assetaccountmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_ard_asset_account_mst;

    UPDATE dwh.d_assetAccountMaster t
    SET
        timestamp             = s.timestamp,
        account_code          = s.account_code,
        effective_to          = s.effective_to,
        resou_id              = s.resou_id,
        createdby             = s.createdby,
        createddate           = s.createddate,
        modifiedby            = s.modifiedby,
        modifieddate          = s.modifieddate,
        etlactiveind          = 1,
        etljobname            = p_etljobname,
        envsourcecd           = p_envsourcecd,
        datasourcecd          = p_datasourcecd,
        etlupdatedatetime     = NOW()
    FROM stg.stg_ard_asset_account_mst s
    WHERE t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.asset_class = s.asset_class
    AND t.asset_usage = s.asset_usage
    AND t.effective_from = s.effective_from
    AND t.sequence_no = s.sequence_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_assetAccountMaster
    (
        company_code, fb_id, asset_class, asset_usage, effective_from, sequence_no, timestamp, account_code, effective_to, resou_id, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.company_code, s.fb_id, s.asset_class, s.asset_usage, s.effective_from, s.sequence_no, s.timestamp, s.account_code, s.effective_to, s.resou_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_ard_asset_account_mst s
    LEFT JOIN dwh.d_assetAccountMaster t
    ON s.company_code = t.company_code
    AND s.fb_id = t.fb_id
    AND s.asset_class = t.asset_class
    AND s.asset_usage = t.asset_usage
    AND s.effective_from = t.effective_from
    AND s.sequence_no = t.sequence_no
    WHERE t.company_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_ard_asset_account_mst
    (
        company_code, fb_id, asset_class, asset_usage, effective_from, sequence_no, timestamp, account_code, effective_to, resou_id, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    )
    SELECT
        company_code, fb_id, asset_class, asset_usage, effective_from, sequence_no, timestamp, account_code, effective_to, resou_id, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    FROM stg.stg_ard_asset_account_mst;

   END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_assetaccountmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_astaxyearhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_astaxyearhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_as_taxyear_hdr;

    UPDATE dwh.D_astaxyearhdr t
    SET
        a_timestamp            = s.timestamp,
        taxyr_desc           = s.taxyr_desc,
        taxyr_startdt        = s.taxyr_startdt,
        taxyr_enddt          = s.taxyr_enddt,
        frequency            = s.frequency,
        taxyr_status         = s.taxyr_status,
        resou_id             = s.resou_id,
        rescomp_code         = s.rescomp_code,
        createdby            = s.createdby,
        createddate          = s.createddate,
        modifiedby           = s.modifiedby,
        modifieddate         = s.modifieddate,
        etlactiveind         = 1,
        etljobname           = p_etljobname,
        envsourcecd          = p_envsourcecd,
        datasourcecd         = p_datasourcecd,
        etlupdatedatetime    = NOW()
    FROM stg.stg_as_taxyear_hdr s
    WHERE t.taxyr_code = s.taxyr_code;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_astaxyearhdr
    (
        taxyr_code	, a_timestamp		, taxyr_desc	, taxyr_startdt	, taxyr_enddt, 
		frequency	, taxyr_status	, resou_id		, rescomp_code	, createdby, 
		createddate	, modifiedby	, modifieddate	, 
		etlactiveind, etljobname	, envsourcecd	, datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.taxyr_code	, s.timestamp	, s.taxyr_desc	, s.taxyr_startdt	, s.taxyr_enddt, 
		s.frequency		, s.taxyr_status, s.resou_id	, s.rescomp_code	, s.createdby, 
		s.createddate	, s.modifiedby	, s.modifieddate,
				1		, p_etljobname	, p_envsourcecd	, p_datasourcecd	, NOW()
    FROM stg.stg_as_taxyear_hdr s
    LEFT JOIN dwh.D_astaxyearhdr t
    ON s.taxyr_code = t.taxyr_code
    WHERE t.taxyr_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    INSERT INTO raw.raw_as_taxyear_hdr
    (
        taxyr_code	, timestamp		, taxyr_desc	, taxyr_startdt		, taxyr_enddt, 
		frequency	, taxyr_status	, resou_id		, rescomp_code		, createdby, 
		createddate	, modifiedby	, modifieddate	, etlcreateddatetime
    )
    SELECT
        taxyr_code	, timestamp		, taxyr_desc	, taxyr_startdt		, taxyr_enddt, 
		frequency	, taxyr_status	, resou_id		, rescomp_code		, createdby, 
		createddate	, modifiedby	, modifieddate	, etlcreateddatetime
	FROM stg.stg_as_taxyear_hdr;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid	, p_targetobject, p_dataflowflag, 
								p_batchid	, p_taskname	, 'sp_ExceptionHandling', 
								p_errorid	, p_errordesc	, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_d_astaxyearhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_bankaccountmaster(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_bankaccountmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;
BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_bnkdef_acc_mst;

	UPDATE dwh.d_bankaccountmaster t
    SET 
		btimestamp 				= s.btimestamp,
		flag 					= s.flag,
		currency_code 			= s.currency_code,
		credit_limit 			= s.credit_limit,
		draw_limit 				= s.draw_limit,
		status 					= s.status,
		effective_from 			= s.effective_from,
		creation_ou 			= s.creation_ou,
		createdby 				= s.createdby,
		createddate 			= s.createddate,
		acctrf 					= s.acctrf,
		neft 					= s.neft,
		rtgs 					= s.rtgs,
		restpostingaftrrecon 	= s.restpostingaftrrecon,
		echeq 					= s.echeq,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_bnkdef_acc_mst s
    WHERE t.company_code  		= s.company_code
	AND t.bank_ref_no 			= s.bank_ref_no
	AND t.bank_acc_no 			= s.bank_acc_no
	AND t.serial_no 			= s.serial_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_bankaccountmaster
	(
		company_code,		bank_ref_no,	bank_acc_no,			serial_no,			btimestamp,
		flag,				currency_code,	credit_limit,			draw_limit,			status,
		effective_from,		creation_ou,	createdby,				createddate,		acctrf,
		neft,				rtgs,			restpostingaftrrecon,	echeq,				etlactiveind,
        etljobname, 		envsourcecd, 	datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
		s.company_code,		s.bank_ref_no,		s.bank_acc_no,			s.serial_no,		s.btimestamp,
		s.flag,				s.currency_code,	s.credit_limit,			s.draw_limit,		s.status,
		s.effective_from,	s.creation_ou,		s.createdby,			s.createddate,		s.acctrf,
		s.neft,				s.rtgs,				s.restpostingaftrrecon,	s.echeq,			1,
		p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()
	FROM stg.stg_bnkdef_acc_mst s
    LEFT JOIN dwh.d_bankaccountmaster t
    ON 	s.company_code  		= t.company_code
	AND s.bank_ref_no 			= t.bank_ref_no
	AND s.bank_acc_no 			= t.bank_acc_no
	AND s.serial_no 			= t.serial_no 
    WHERE t.company_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN
	
	INSERT INTO raw.raw_bnkdef_acc_mst
	(
		company_code, bank_ref_no, bank_acc_no, serial_no, btimestamp,
        flag, currency_code, credit_limit, draw_limit, status, 
        effective_from, effective_to, creation_ou, modification_ou, createdby,
        createddate, modifiedby, modifieddate, iban, bsrno,
        micrcode, acctrf, neft, rtgs, 
        restpostingaftrrecon, echeq, etlcreateddatetime
	
	)
	SELECT 
		 company_code, bank_ref_no, bank_acc_no, serial_no, btimestamp,
        flag, currency_code, credit_limit, draw_limit, status, 
        effective_from, effective_to, creation_ou, modification_ou, createdby,
        createddate, modifiedby, modifieddate, iban, bsrno,
        micrcode, acctrf, neft, rtgs, 
        restpostingaftrrecon, echeq, etlcreateddatetime
	FROM stg.stg_bnkdef_acc_mst;
	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_bankaccountmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_bankcashaccountmaster(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_bankcashaccountmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_ard_bnkcsh_account_mst;

    UPDATE dwh.d_bankCashAccountMaster t
    SET
        timestamp                 = s.timestamp,
        bankptt_account           = s.bankptt_account,
        bankcharge_account        = s.bankcharge_account,
        effective_to              = s.effective_to,
        resou_id                  = s.resou_id,
        flag                      = s.flag,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_ard_bnkcsh_account_mst s
    WHERE t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.bank_ptt_code = s.bank_ptt_code
    AND t.effective_from = s.effective_from
    AND t.sequence_no = s.sequence_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_bankCashAccountMaster
    (
        company_code, fb_id, bank_ptt_code, effective_from, sequence_no, timestamp, bankptt_account, bankcharge_account, effective_to, resou_id, flag, createdby, createddate, modifiedby, modifieddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.company_code, s.fb_id, s.bank_ptt_code, s.effective_from, s.sequence_no, s.timestamp, s.bankptt_account, s.bankcharge_account, s.effective_to, s.resou_id, s.flag, s.createdby, s.createddate, s.modifiedby, s.modifieddate, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_ard_bnkcsh_account_mst s
    LEFT JOIN dwh.d_bankCashAccountMaster t
    ON s.company_code = t.company_code
    AND s.fb_id = t.fb_id
    AND s.bank_ptt_code = t.bank_ptt_code
    AND s.effective_from = t.effective_from
    AND s.sequence_no = t.sequence_no
    WHERE t.company_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_ard_bnkcsh_account_mst
    (
        company_code, fb_id, bank_ptt_code, effective_from, sequence_no, timestamp, bankptt_account, bankcharge_account, effective_to, resou_id, flag, createdby, createddate, modifiedby, modifieddate, interim_account, etlcreateddatetime
    )
    SELECT
        company_code, fb_id, bank_ptt_code, effective_from, sequence_no, timestamp, bankptt_account, bankcharge_account, effective_to, resou_id, flag, createdby, createddate, modifiedby, modifieddate, interim_account, etlcreateddatetime
    FROM stg.stg_ard_bnkcsh_account_mst;

   END IF;
   
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_bankcashaccountmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_bankrefmaster(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_bankrefmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_emod_bank_ref_mst;

	UPDATE dwh.d_bankrefmaster t
    SET 
		btimestamp       = s.btimestamp       ,
		bank_ptt_flag    = s.bank_ptt_flag   ,
		bank_type        = s.bank_type       ,
		bank_name        = s.bank_name       ,
		address1         = s.address1        ,
		address2         = s.address2        ,
		address3         = s.address3        ,
		city             = s.city            ,
		state            = s.state           ,
		country          = s.country         ,
		clearing_no      = s.clearing_no     ,
		swift_no         = s.swift_no        ,
		zip_code         = s.zip_code        ,
		creation_ou      = s.creation_ou     ,
		modification_ou  = s.modification_ou ,
		effective_from   = s.effective_from  ,
		createdby        = s.createdby       ,
		createddate      = s.createddate     ,
		modifiedby       = s.modifiedby      ,
		modifieddate     = s.modifieddate    ,
		createdin        = s.createdin       ,
		ifsccode         = s.ifsccode        ,
		long_description = s.long_description,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_emod_bank_ref_mst s
    WHERE t.bank_ref_no  		= s.bank_ref_no
	AND t.bank_status 			= s.bank_status;
	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_bankrefmaster
	(
		bank_ref_no,         bank_status,         btimestamp,          bank_ptt_flag,           bank_type,
        bank_name,           address1,            address2,            address3,                city,
        state,               country,             clearing_no,         swift_no,                zip_code,
        creation_ou,         modification_ou,     effective_from,      createdby,               createddate,
        modifiedby,          modifieddate,        createdin,           ifsccode,                long_description,
		etlactiveind,        etljobname, 		  envsourcecd, 	       datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
        s.bank_ref_no,         s.bank_status,         s.btimestamp,          s.bank_ptt_flag,           s.bank_type,
        s.bank_name,           s.address1,            s.address2,            s.address3,                s.city,
        s.state,               s.country,             s.clearing_no,         s.swift_no,                s.zip_code,
        s.creation_ou,         s.modification_ou,     s.effective_from,      s.createdby,               s.createddate,
        s.modifiedby,          s.modifieddate,        s.createdin,           s.ifsccode,                s.long_description,
        1,                     p_etljobname,		  p_envsourcecd,	     p_datasourcecd,			NOW()
	FROM stg.stg_emod_bank_ref_mst s
    LEFT JOIN dwh.d_bankrefmaster t
    ON 	t.bank_ref_no  		= s.bank_ref_no
	AND t.bank_status 		= s.bank_status 
    WHERE t.bank_ref_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
	
	INSERT INTO raw.raw_emod_bank_ref_mst
	(
	    bank_ref_no, bank_status, btimestamp, bank_ptt_flag, bank_type,
        bank_name, address1, address2, address3, city, 
        state, country, clearing_no, swift_no, phone_no, 
        telex, mail_stop, zip_code, fax, email_id, 
        creation_ou, modification_ou, effective_from, effective_to, createdby,
        createddate, modifiedby, modifieddate, bsrno, createdin,
        escrowaccount, ifsccode, long_description,etlcreateddatetime		
	)
	SELECT 
		bank_ref_no, bank_status, btimestamp, bank_ptt_flag, bank_type,
        bank_name, address1, address2, address3, city, 
        state, country, clearing_no, swift_no, phone_no, 
        telex, mail_stop, zip_code, fax, email_id, 
        creation_ou, modification_ou, effective_from, effective_to, createdby,
        createddate, modifiedby, modifieddate, bsrno, createdin,
        escrowaccount, ifsccode, long_description,etlcreateddatetime	
	FROM stg.stg_emod_bank_ref_mst;
	
END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
			select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_bankrefmaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_bintypelocation(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_bintypelocation(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_bin_type_storage_dtl;

	UPDATE dwh.d_binTypeLocation t
    SET 		
	bin_typ_storage_unit	=	s.wms_bin_typ_storage_unit,
	etlactiveind 			=	1,
	etljobname 				=	p_etljobname,
	envsourcecd 			=	p_envsourcecd ,
	datasourcecd 			=	p_datasourcecd ,
	etlupdatedatetime 		=	NOW()	
    FROM stg.stg_wms_bin_type_storage_dtl s
	WHERE	t.bin_typ_loc_code		=	s.wms_bin_typ_loc_code	
	AND		t.bin_typ_code			=	s.wms_bin_typ_code
	AND		t.bin_typ_lineno		=	s.wms_bin_typ_lineno
	AND		t.bin_typ_ou			=	s.wms_bin_typ_ou	;

    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_binTypeLocation 
	(	bin_typ_loc_code,	bin_typ_code			,	bin_typ_lineno	,
		bin_typ_ou		,	bin_typ_storage_unit	,	etlactiveind 	,		
		etljobname 		,	envsourcecd 			,	datasourcecd	,
		etlcreatedatetime
	)

    SELECT
		s.wms_bin_typ_loc_code	,	s.wms_bin_typ_code			,	s.wms_bin_typ_lineno,
		s.wms_bin_typ_ou		,	s.wms_bin_typ_storage_unit	,	1				,
		p_etljobname			,	p_envsourcecd				,	p_datasourcecd	, 
		now()
	FROM stg.stg_wms_bin_type_storage_dtl s
	LEFT JOIN dwh.d_binTypeLocation t
    ON 		t.bin_typ_loc_code		=	s.wms_bin_typ_loc_code	
	AND		t.bin_typ_code			=	s.wms_bin_typ_code
	AND		t.bin_typ_lineno		=	s.wms_bin_typ_lineno
	AND		t.bin_typ_ou			=	s.wms_bin_typ_ou
    WHERE 	t.bin_typ_code IS NULL;
    

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_bin_type_storage_dtl
	(
			wms_bin_typ_ou		,	wms_bin_typ_code		,	wms_bin_typ_loc_code,
			wms_bin_typ_lineno	,	wms_bin_typ_storage_unit,	etlcreateddatetime
	)

	SELECT 
			s.wms_bin_typ_ou		,	s.wms_bin_typ_code		,	s.wms_bin_typ_loc_code,
			s.wms_bin_typ_lineno	,	s.wms_bin_typ_storage_unit,	etlcreateddatetime
	FROM stg.stg_wms_bin_type_storage_dtl s;
	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
		
END;
$$;


ALTER PROCEDURE dwh.usp_d_bintypelocation(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_bintypes(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_bintypes(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_bin_type_hdr;

	UPDATE dwh.D_BinTypes t
    SET 
		bin_div_key				= COALESCE(d.div_key,-1),
		bin_typ_desc 			= s. wms_bin_typ_desc,
		bin_typ_status 			= s. wms_bin_typ_status,
		bin_typ_Width 			= s. wms_bin_typ_Width,
		bin_typ_Height 			= s. wms_bin_typ_Height,
		bin_typ_Depth 			= s. wms_bin_typ_Depth,
		bin_typ_dim_uom 		= s. wms_bin_typ_dim_uom,
		bin_typ_Volume 			= s. wms_bin_typ_Volume,
		bin_typ_Vol_uom 		= s. wms_bin_typ_Vol_uom,
		bin_typ_max_per_wt 		= s. wms_bin_typ_max_per_wt,
		bin_typ_max_wt_uom 		= s. wms_bin_typ_max_wt_uom,
		bin_typ_cap_indicator 	= s. wms_bin_typ_cap_indicator,
		bin_timestamp 			= s. wms_bin_timestamp,
		bin_created_by 			= s. wms_bin_created_by,
		bin_created_dt 			= s. wms_bin_created_dt,
		bin_modified_by 		= s. wms_bin_modified_by,
		bin_modified_dt 		= s. wms_bin_modified_dt,
		bin_one_bin_one_pal 	= s. wms_bin_one_bin_one_pal,
		bin_typ_one_bin 		= s. wms_bin_typ_one_bin,
		bin_typ_area 			= s. wms_bin_typ_area,
		bin_typ_area_uom 		= s. wms_bin_typ_area_uom,
		bin_typ_vol_actual		= (case when s.wms_bin_typ_vol_uom='CUM' then s.wms_bin_typ_volume*1000000 else s.wms_bin_typ_volume end),
		bin_typ_div_code		= left(s.wms_bin_typ_loc_code,6),
		bin_typ_vol_calc		= ((case when bin_typ_dim_uom='METER' then bin_typ_depth*100 else bin_typ_depth end)*
								   (case when bin_typ_dim_uom='METER' then bin_typ_width*100 else bin_typ_width end)*
								   (case when bin_typ_dim_uom='METER' then bin_typ_height*100 else bin_typ_height end)),
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_bin_type_hdr s
	LEFT JOIN dwh.d_division d
	ON	d.div_code			= left(s.wms_bin_typ_loc_code,6)
	AND	d.div_ou			= s.wms_bin_typ_ou
    WHERE t.bin_typ_ou 		= s.wms_bin_typ_ou
	AND t.bin_typ_code 		= s.wms_bin_typ_code
	AND t.bin_typ_loc_code 	= s.wms_bin_typ_loc_code;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_BinTypes

	(
		bin_div_key,
		bin_typ_ou,					bin_typ_code,				bin_typ_loc_code,
		bin_typ_desc,				bin_typ_status,				bin_typ_Width,				bin_typ_Height,			bin_typ_Depth,
		bin_typ_dim_uom,			bin_typ_Volume,				bin_typ_Vol_uom,			bin_typ_max_per_wt,		bin_typ_max_wt_uom,
		bin_typ_cap_indicator,		bin_timestamp,				bin_created_by,				bin_created_dt,			bin_modified_by,
		bin_modified_dt,			bin_one_bin_one_pal,		bin_typ_one_bin,			bin_typ_area,			bin_typ_area_uom,
		bin_typ_vol_actual,		
		bin_typ_div_code,
		bin_typ_vol_calc,
		etlactiveind,		        etljobname,			 		envsourcecd, 				datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
	
		COALESCE(d.div_key,-1),
		s.wms_bin_typ_ou,				s.wms_bin_typ_code,				s.wms_bin_typ_loc_code,	
		s.wms_bin_typ_desc,				s.wms_bin_typ_status,			s.wms_bin_typ_Width,			s.wms_bin_typ_Height,		s.wms_bin_typ_Depth,
		s.wms_bin_typ_dim_uom,			s.wms_bin_typ_Volume,			s.wms_bin_typ_Vol_uom,			s.wms_bin_typ_max_per_wt,	s.wms_bin_typ_max_wt_uom,
		s.wms_bin_typ_cap_indicator,	s.wms_bin_timestamp,			s.wms_bin_created_by,			s.wms_bin_created_dt,		s.wms_bin_modified_by,	
		s.wms_bin_modified_dt, 			s.wms_bin_one_bin_one_pal,		s.wms_bin_typ_one_bin,			s.wms_bin_typ_area,			s.wms_bin_typ_area_uom,	
		(case when s.wms_bin_typ_vol_uom='CUM' then s.wms_bin_typ_volume*1000000 else s.wms_bin_typ_volume end),
		left(s.wms_bin_typ_loc_code,6),
		((case when bin_typ_dim_uom='METER' then bin_typ_depth*100 else bin_typ_depth end)*(case when bin_typ_dim_uom='METER' then bin_typ_width*100 else bin_typ_width end)*(case when bin_typ_dim_uom='METER' then bin_typ_height*100 else bin_typ_height end)),
					1			,		p_etljobname,				p_envsourcecd,					p_datasourcecd,				NOW()

	FROM stg.stg_wms_bin_type_hdr s
	LEFT JOIN dwh.d_division d
	ON	d.div_code			= left(s.wms_bin_typ_loc_code,6)
	AND	d.div_ou			= s.wms_bin_typ_ou
    LEFT JOIN dwh.D_BinTypes t
    ON 	s.wms_bin_typ_ou 		= t.bin_typ_ou
	AND s.wms_bin_typ_code 		= t.bin_typ_code
	AND s.wms_bin_typ_loc_code	= t.bin_typ_loc_code 
    WHERE t.bin_typ_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
  
	
	INSERT INTO raw.raw_wms_bin_type_hdr
	(
	wms_bin_typ_ou, wms_bin_typ_code, wms_bin_typ_loc_code, wms_bin_typ_desc, wms_bin_typ_status,
    wms_bin_typ_width, wms_bin_typ_height, wms_bin_typ_depth, wms_bin_typ_dim_uom, wms_bin_typ_volume,
    wms_bin_typ_vol_uom, wms_bin_typ_max_per_wt, wms_bin_typ_max_wt_uom, wms_bin_typ_cap_indicator, wms_bin_typ_user_def1, 
        wms_bin_typ_user_def2, wms_bin_typ_user_def3, wms_bin_timestamp, wms_bin_created_by, wms_bin_created_dt, 
        wms_bin_modified_by, wms_bin_modified_dt, wms_bin_one_bin_one_pal, wms_bin_typ_permitted_uids, wms_bin_typ_one_bin,
        wms_bin_typ_area, wms_bin_typ_area_uom, wms_bin_typ_qty_capacity, wms_bin_typ_prmtd_no_ethu, etlcreateddatetime

	)
	SELECT 
	wms_bin_typ_ou, wms_bin_typ_code, wms_bin_typ_loc_code, wms_bin_typ_desc, wms_bin_typ_status,
    wms_bin_typ_width, wms_bin_typ_height, wms_bin_typ_depth, wms_bin_typ_dim_uom, wms_bin_typ_volume,
    wms_bin_typ_vol_uom, wms_bin_typ_max_per_wt, wms_bin_typ_max_wt_uom, wms_bin_typ_cap_indicator, wms_bin_typ_user_def1, 
        wms_bin_typ_user_def2, wms_bin_typ_user_def3, wms_bin_timestamp, wms_bin_created_by, wms_bin_created_dt, 
        wms_bin_modified_by, wms_bin_modified_dt, wms_bin_one_bin_one_pal, wms_bin_typ_permitted_uids, wms_bin_typ_one_bin,
        wms_bin_typ_area, wms_bin_typ_area_uom, wms_bin_typ_qty_capacity, wms_bin_typ_prmtd_no_ethu, etlcreateddatetime

	FROM stg.stg_wms_bin_type_hdr;	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_bintypes(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_bulocationmap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_bulocationmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_emod_lo_bu_map;

	UPDATE dwh.d_bulocationmap t
    SET 
		btimestamp			= s.btimestamp     ,
		lo_name				= s.lo_name       ,
		map_status			= s.map_status    ,
		effective_from		= s.effective_from,
		map_by				= s.map_by        ,
		map_date			= s.map_date      ,
		createdby			= s.createdby     ,
		createddate			= s.createddate   ,
		modifiedby			= s.modifiedby    ,
		modifieddate		= s.modifieddate  ,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_emod_lo_bu_map s
    WHERE t.lo_id  		= s.lo_id
	AND t.bu_id 			= s.bu_id
    AND t.company_code 			= s.company_code
    AND t.serial_no 			= s.serial_no;
	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_bulocationmap
	(
		lo_id,			bu_id,			company_code,			serial_no,			btimestamp,
		lo_name,		map_status,		effective_from,			map_by,				map_date,
		createdby,		createddate,	modifiedby,				modifieddate,
        etlactiveind,   etljobname,     envsourcecd, 	        datasourcecd, 		etlcreatedatetime
	)
	
    SELECT 
        s.lo_id,			s.bu_id,			s.company_code,			    s.serial_no,			s.btimestamp,
		s.lo_name,		    s.map_status,		s.effective_from,			s.map_by,				s.map_date,
		s.createdby,		s.createddate,	    s.modifiedby,				s.modifieddate,
        1,                  p_etljobname,		p_envsourcecd,	            p_datasourcecd,			NOW()
	FROM stg.stg_emod_lo_bu_map s
    LEFT JOIN dwh.d_bulocationmap t
    ON 	t.lo_id  		= s.lo_id
	AND t.bu_id 			= s.bu_id
    AND t.company_code 			= s.company_code
    AND t.serial_no 			= s.serial_no 
    WHERE t.lo_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
 
	
	INSERT INTO raw.raw_emod_lo_bu_map
	(
	    lo_id, bu_id, company_code, serial_no, btimestamp, 
        lo_name, map_status, effective_from, effective_to, map_by,
        map_date, unmap_by, unmap_date, createdby, createddate, 
        modifiedby, modifieddate,etlcreateddatetime
	)
	SELECT 
		lo_id, bu_id, company_code, serial_no, btimestamp, 
        lo_name, map_status, effective_from, effective_to, map_by,
        map_date, unmap_by, unmap_date, createdby, createddate, 
        modifiedby, modifieddate,etlcreateddatetime
	FROM stg.stg_emod_lo_bu_map;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_bulocationmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_businessunit(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_businessunit(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_emod_bu_mst;

	UPDATE dwh.d_businessunit t
    SET 
		btimestamp		    = s.btimestamp   ,
		bu_name				= s.bu_name     ,
		status				= s.status      ,
		address_id			= s.address_id  ,
		effective_from		= s.effective_from,
		createdby			= s.createdby   ,
        etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_emod_bu_mst s
    WHERE t.company_code  		= s.company_code
	AND t.bu_id 			= s.bu_id
    AND t.serial_no 			= s.serial_no;
   
	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_businessunit
	(
		company_code,			bu_id,			serial_no,			btimestamp,			bu_name,
        status,					address_id,		effective_from,		createdby,
        etlactiveind,           etljobname,     envsourcecd, 	    datasourcecd, 		etlcreatedatetime
	)
	
    SELECT 
        s.company_code,			    s.bu_id,			s.serial_no,			s.btimestamp,			s.bu_name,
		s.status,					s.address_id,		s.effective_from,		s.createdby,
        1,                          p_etljobname,		p_envsourcecd,	        p_datasourcecd,			NOW()
	FROM stg.stg_emod_bu_mst s
    LEFT JOIN dwh.d_businessunit t
    ON 	t.company_code  		= s.company_code
	AND t.bu_id 			= s.bu_id
    AND t.serial_no 			= s.serial_no
    WHERE t.company_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_emod_bu_mst
	(
	    company_code, bu_id, serial_no, btimestamp, bu_name, 
        status, address_id, effective_from, effective_to, createdby,
        createddate, modifiedby, modifieddate,etlcreateddatetime
	)
	SELECT 
		company_code, bu_id, serial_no, btimestamp, bu_name, 
        status, address_id, effective_from, effective_to, createdby,
        createddate, modifiedby, modifieddate, etlcreateddatetime
	FROM stg.stg_emod_bu_mst;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_businessunit(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_company(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_company(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_emod_company_mst;

	UPDATE dwh.d_Company t
    SET 
         ctimestamp         = s.ctimestamp,
         company_name       = s.company_name,
         address1           = s.address1,
         address2           = s.address2,
         address3           = s.address3,
         city               = s.city,
         country            = s.country,
         zip_code           = s.zip_code,
         phone_no           = s.phone_no,
         state              = s.state,
         company_url        = s.company_url,
         par_comp_code      = s.par_comp_code,
         base_currency      = s.base_currency,
         status             = s.status,
         effective_from     = s.effective_from,
         para_base_flag     = s.para_base_flag,
         reg_date           = s.reg_date,
         createdby          = s.createdby,
         createddate        = s.createddate,
         modifiedby         = s.modifiedby,
         modifieddate       = s.modifieddate,
         company_id         = s.company_id,
		 etlactiveind 		= 1,
		 etljobname 		= p_etljobname,
		 envsourcecd 		= p_envsourcecd ,
		 datasourcecd 		= p_datasourcecd ,
		 etlupdatedatetime 	= NOW()	
    FROM stg.stg_emod_company_mst s
    WHERE t.company_code  		= s.company_code
	AND t.serial_no 			= s.serial_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_Company
	(
		company_code,     address2,      phone_no,           status,              createddate,
		serial_no,        address3,       state,              effective_from,      modifiedby,
		ctimestamp,       city,           company_url,        para_base_flag,      modifieddate,
		company_name,     country,        par_comp_code,      reg_date,            company_id,
		address1,         zip_code,       base_currency,      createdby,		   etlactiveind,
        etljobname, 	  envsourcecd,    datasourcecd, 	  etlcreatedatetime
	)
	
    SELECT 
		s.company_code,     s.address2,       s.phone_no,           s.status,              s.createddate,
		s.serial_no,        s.address3,       s.state,              s.effective_from,      s.modifiedby,
		s.ctimestamp,        s.city,           s.company_url,        s.para_base_flag,      s.modifieddate,
		s.company_name,     s.country,        s.par_comp_code,      s.reg_date,            s.company_id,
		s.address1,         s.zip_code,       s.base_currency,      s.createdby,			1,
		p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()
	FROM stg.stg_emod_company_mst s
    LEFT JOIN dwh.d_Company t
    ON 	s.company_code  		= t.company_code
	AND s.serial_no 			= t.serial_no
    WHERE t.company_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
 
	
	INSERT INTO raw.raw_emod_company_mst
	(
	    company_code, serial_no, ctimestamp, company_name, address1, 
        address2, address3, city, country, zip_code,
        phone_no, state, company_url, mail_stop, telex,
        par_comp_code, fax_no, base_currency, parcur_cr_date, parcur_dl_date,
        status, effective_from, effective_to, para_base_flag, reg_date, 
        createdby, createddate, modifiedby, modifieddate, company_id, 
        latitude, longitude, etlcreateddatetime

	)
	SELECT 
		 company_code, serial_no, ctimestamp, company_name, address1, 
        address2, address3, city, country, zip_code,
        phone_no, state, company_url, mail_stop, telex,
        par_comp_code, fax_no, base_currency, parcur_cr_date, parcur_dl_date,
        status, effective_from, effective_to, para_base_flag, reg_date, 
        createdby, createddate, modifiedby, modifieddate, company_id, 
        latitude, longitude, etlcreateddatetime
	FROM stg.stg_emod_company_mst;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_company(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_companycurrencymap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_companycurrencymap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
    ON	d.sourceid		= h.sourceid
    WHERE d.sourceid	= p_sourceId
    AND	d.dataflowflag	= p_dataflowflag
    AND	d.targetobject	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_emod_company_currency_map;

    UPDATE dwh.D_CompanyCurrencyMap t
    SET
        timestamp             = s.timestamp,
        map_status            = s.map_status,
        effective_from        = s.effective_from,
        map_by                = s.map_by,
        map_date              = s.map_date,
        currency_flag         = s.currency_flag,
        createdby             = s.createdby,
        createddate           = s.createddate,
        etlactiveind          = 1,
        etljobname            = p_etljobname,
        envsourcecd           = p_envsourcecd,
        datasourcecd          = p_datasourcecd,
        etlupdatedatetime     = NOW()
    FROM stg.stg_emod_company_currency_map s
    WHERE	t.serial_no		= s.serial_no
    AND		t.company_code	= s.company_code
    AND		t.currency_code	= s.currency_code;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_CompanyCurrencyMap
    (
        serial_no		, company_code		, currency_code		,
		timestamp		, map_status		, effective_from	,
		map_by			, map_date			, currency_flag		,
		createdby		, createddate		,
		etlactiveind	, etljobname		, envsourcecd		,
		datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.serial_no		, s.company_code	, s.currency_code	,
		s.timestamp		, s.map_status		, s.effective_from	,
		s.map_by		, s.map_date		, s.currency_flag	,
		s.createdby		, s.createddate		,
				1		, p_etljobname		, p_envsourcecd		,
		p_datasourcecd	, NOW()
    FROM stg.stg_emod_company_currency_map s
    LEFT JOIN dwh.D_CompanyCurrencyMap t
    ON	s.serial_no		=	t.serial_no
    AND	s.company_code	=	t.company_code
    AND	s.currency_code	=	t.currency_code
    WHERE t.serial_no IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_emod_company_currency_map
    (
        serial_no		, company_code		, currency_code	,
		timestamp		, map_status		, effective_from,
		effective_to	, map_by			, map_date		,
		unmap_by		, unmap_date		, currency_flag	,
		createdby		, createddate		, modifiedby	,
		modifieddate	, etlcreateddatetime
    )
    SELECT
        serial_no		, company_code		, currency_code	,
		timestamp		, map_status		, effective_from,
		effective_to	, map_by			, map_date		, 
		unmap_by		, unmap_date		, currency_flag	,
		createdby		, createddate		, modifiedby	,
		modifieddate	, etlcreateddatetime
    FROM stg.stg_emod_company_currency_map;
	
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_d_companycurrencymap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_consignee(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_consignee(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
        
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_consignee_hdr;

    UPDATE dwh.d_consignee t
    SET 
        consignee_desc       =       s.wms_consignee_desc,
        consignee_status       =       s.wms_consignee_status,
        consignee_currency       =       s.wms_consignee_currency,
        consignee_address1       =       s.wms_consignee_address1,
        consignee_address2       =       s.wms_consignee_address2,
        consignee_city       =       s.wms_consignee_city,
        consignee_state       =       s.wms_consignee_state,
        consignee_country       =       s.wms_consignee_country,
        consignee_postalcode       =       s.wms_consignee_postalcode,
        consignee_phone1       =       s.wms_consignee_phone1,
        consignee_customer_id       =       s.wms_consignee_customer_id,
        consignee_created_by       =       s.wms_consignee_created_by,
        consignee_created_date       =       s.wms_consignee_created_date,
        consignee_modified_by       =       s.wms_consignee_modified_by,
        consignee_modified_date       =       s.wms_consignee_modified_date,
        consignee_timestamp       =       s.wms_consignee_timestamp,
        consignee_zone       =       s.wms_consignee_zone,
        consignee_timezone       =       s.wms_consignee_timezone,
        etlactiveind           =     1,
        etljobname             =     p_etljobname,
        envsourcecd            =     p_envsourcecd,
        datasourcecd           =     p_datasourcecd,
        etlupdatedatetime      =     NOW()  
    FROM stg.stg_wms_consignee_hdr s
    WHERE t.consignee_id=  s.wms_consignee_id
    AND  t.consignee_ou =s.wms_consignee_ou;
   
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_consignee
    ( consignee_id, consignee_ou, consignee_desc, consignee_status, consignee_currency, consignee_address1, consignee_address2, consignee_city, consignee_state, consignee_country, consignee_postalcode, consignee_phone1, consignee_customer_id, consignee_created_by, consignee_created_date, consignee_modified_by, consignee_modified_date, consignee_timestamp, consignee_zone, consignee_timezone, etlactiveind,
        etljobname,         envsourcecd,    datasourcecd,       etlcreatedatetime
    )
    
    SELECT 
        s.wms_consignee_id, s.wms_consignee_ou, s.wms_consignee_desc, s.wms_consignee_status, s.wms_consignee_currency, s.wms_consignee_address1, s.wms_consignee_address2, s.wms_consignee_city, s.wms_consignee_state, s.wms_consignee_country, s.wms_consignee_postalcode, s.wms_consignee_phone1, s.wms_consignee_customer_id, s.wms_consignee_created_by, s.wms_consignee_created_date, s.wms_consignee_modified_by, s.wms_consignee_modified_date, s.wms_consignee_timestamp, s.wms_consignee_zone, s.wms_consignee_timezone, 
        1,      p_etljobname,       p_envsourcecd,      p_datasourcecd,         now()

    FROM stg.stg_wms_consignee_hdr s
    LEFT JOIN dwh.d_consignee t
    ON s.wms_consignee_id = t.consignee_id  
    AND    s.wms_consignee_ou  = t. consignee_ou     
    WHERE t.consignee_id  IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_wms_consignee_hdr

    (
        wms_consignee_id, wms_consignee_ou, wms_consignee_desc, wms_consignee_status, wms_consignee_currency,
        wms_consignee_payterm, wms_consignee_reasoncode, wms_consignee_address1, wms_consignee_address2, wms_consignee_address3, 
        wms_consignee_uniqueaddressid, wms_consignee_city, wms_consignee_state, wms_consignee_country, wms_consignee_postalcode,
        wms_consignee_phone1, wms_consignee_phone2, wms_consignee_email, wms_consignee_customer_id, wms_consignee_created_by,
        wms_consignee_created_date, wms_consignee_modified_by, wms_consignee_modified_date, wms_consignee_timestamp, wms_consignee_userdefined1,
        wms_consignee_userdefined2, wms_consignee_userdefined3, wms_consignee_zone, wms_consignee_subzone, 
        wms_consignee_region, wms_consignee_timezone, wms_consignee_latitude, wms_consignee_longitude, wms_consignee_geofencerange,
        wms_consignee_uom, wms_consignee_geofencename, wms_consignee_url, wms_consignee_fax, wms_consignee_shippointid, 
        wms_consignee_time_ordering, wms_consignee_timeslot, etlcreateddatetime
    )
    SELECT
        wms_consignee_id, wms_consignee_ou, wms_consignee_desc, wms_consignee_status, wms_consignee_currency,
        wms_consignee_payterm, wms_consignee_reasoncode, wms_consignee_address1, wms_consignee_address2, wms_consignee_address3, 
        wms_consignee_uniqueaddressid, wms_consignee_city, wms_consignee_state, wms_consignee_country, wms_consignee_postalcode,
        wms_consignee_phone1, wms_consignee_phone2, wms_consignee_email, wms_consignee_customer_id, wms_consignee_created_by,
        wms_consignee_created_date, wms_consignee_modified_by, wms_consignee_modified_date, wms_consignee_timestamp, wms_consignee_userdefined1,
        wms_consignee_userdefined2, wms_consignee_userdefined3, wms_consignee_zone, wms_consignee_subzone, 
        wms_consignee_region, wms_consignee_timezone, wms_consignee_latitude, wms_consignee_longitude, wms_consignee_geofencerange,
        wms_consignee_uom, wms_consignee_geofencename, wms_consignee_url, wms_consignee_fax, wms_consignee_shippointid, 
        wms_consignee_time_ordering, wms_consignee_timeslot, etlcreateddatetime
    FROM stg.stg_wms_consignee_hdr; 
	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
  
    
    --SELECT COUNT(*) INTO InsCnt FROM dwh.usp_d_consignee;
END;
$$;


ALTER PROCEDURE dwh.usp_d_consignee(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_consignor(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_consignor(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_consignor_hdr;

	UPDATE dwh.d_consignor t
    SET 
		 consignor_desc 			= s.wms_consignor_desc
		,consignor_status 			= s.wms_consignor_status
		,consignor_currency 		= s.wms_consignor_currency
		,consignor_address1 		= s.wms_consignor_address1
		,consignor_address2 		= s.wms_consignor_address2
		,consignor_address3 		= s.wms_consignor_address3
		,consignor_city 			= s.wms_consignor_city
		,consignor_state 			= s.wms_consignor_state
		,consignor_country 			= s.wms_consignor_country
		,consignor_postalcode 		= s.wms_consignor_postalcode
		,consignor_phone1 			= s.wms_consignor_phone1
		,consignor_customer_id 		= s.wms_consignor_customer_id
		,consignor_created_by 		= s.wms_consignor_created_by
		,consignor_created_date 	= s.wms_consignor_created_date
		,consignor_modified_by 		= s.wms_consignor_modified_by
		,consignor_modified_date	= s.wms_consignor_modified_date
		,consignor_timestamp 		= s.wms_consignor_timestamp
		,etlactiveind 				= 1
		,etljobname 				= p_etljobname
		,envsourcecd 				= p_envsourcecd 
		,datasourcecd 				= p_datasourcecd
		,etlupdatedatetime 			= NOW()
    FROM stg.stg_wms_consignor_hdr s
    WHERE t.consignor_id  			= s.wms_consignor_id
	AND t.consignor_ou 				= s.wms_consignor_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_consignor
	(
		 consignor_id			,consignor_ou			,consignor_desc			,consignor_status		,consignor_currency
		,consignor_address1		,consignor_address2		,consignor_address3		,consignor_city			,consignor_state
		,consignor_country		,consignor_postalcode	,consignor_phone1		,consignor_customer_id	,consignor_created_by
		,consignor_created_date	,consignor_modified_by	,consignor_modified_date,consignor_timestamp
		,etlactiveind			,etljobname				,envsourcecd			,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		 s.wms_consignor_id				,s.wms_consignor_ou				,s.wms_consignor_desc			,s.wms_consignor_status			,s.wms_consignor_currency
		,s.wms_consignor_address1		,s.wms_consignor_address2		,s.wms_consignor_address3		,s.wms_consignor_city			,s.wms_consignor_state
		,s.wms_consignor_country		,s.wms_consignor_postalcode		,s.wms_consignor_phone1			,s.wms_consignor_customer_id	,s.wms_consignor_created_by
		,s.wms_consignor_created_date	,s.wms_consignor_modified_by	,s.wms_consignor_modified_date	,s.wms_consignor_timestamp	
		,1								,p_etljobname					,p_envsourcecd					,p_datasourcecd					,NOW()
	FROM stg.stg_wms_consignor_hdr s
    LEFT JOIN dwh.d_consignor t
    ON 	s.wms_consignor_id  		= t.consignor_id
	AND s.wms_consignor_ou 			= t.consignor_ou
    WHERE t.consignor_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_consignor_hdr
	(
		wms_consignor_id, 				wms_consignor_ou, 			wms_consignor_desc, 		wms_consignor_status, 		wms_consignor_currency, 
		wms_consignor_payterm, 			wms_consignor_reasoncode, 	wms_consignor_address1, 	wms_consignor_address2, 	wms_consignor_address3, 
		wms_consignor_uniqueaddressid, 	wms_consignor_city, 		wms_consignor_state, 		wms_consignor_country, 		wms_consignor_postalcode, 
		wms_consignor_phone1, 			wms_consignor_fax, 			wms_consignor_contactperson,wms_consignor_customer_id, 	wms_consignor_created_by, 
		wms_consignor_created_date,	 	wms_consignor_modified_by, 	wms_consignor_modified_date,wms_consignor_timestamp, 	wms_consignor_userdefined1, 
		wms_consignor_userdefined2, 	wms_consignor_userdefined3, wms_consignor_zone, 		wms_consignor_subzone, 		wms_consignor_region, 
		wms_consignor_timezone, 		wms_consignor_latitude, 	wms_consignor_longitude, 	wms_consignor_geofencerange,wms_consignor_geofencename, 
		wms_consignor_phone2, 			wms_consignor_url, 			wms_consignor_email, 		wms_consignor_uom,			etlcreateddatetime
	)
	SELECT 
		wms_consignor_id, 				wms_consignor_ou, 			wms_consignor_desc, 		wms_consignor_status, 		wms_consignor_currency, 
		wms_consignor_payterm, 			wms_consignor_reasoncode, 	wms_consignor_address1, 	wms_consignor_address2, 	wms_consignor_address3, 
		wms_consignor_uniqueaddressid, 	wms_consignor_city, 		wms_consignor_state, 		wms_consignor_country, 		wms_consignor_postalcode, 
		wms_consignor_phone1, 			wms_consignor_fax, 			wms_consignor_contactperson,wms_consignor_customer_id, 	wms_consignor_created_by, 
		wms_consignor_created_date,	 	wms_consignor_modified_by, 	wms_consignor_modified_date,wms_consignor_timestamp, 	wms_consignor_userdefined1, 
		wms_consignor_userdefined2, 	wms_consignor_userdefined3, wms_consignor_zone, 		wms_consignor_subzone, 		wms_consignor_region, 
		wms_consignor_timezone, 		wms_consignor_latitude, 	wms_consignor_longitude, 	wms_consignor_geofencerange,wms_consignor_geofencename, 
		wms_consignor_phone2, 			wms_consignor_url, 			wms_consignor_email, 		wms_consignor_uom,			etlcreateddatetime
	FROM stg.stg_wms_consignor_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
  
END;
$$;


ALTER PROCEDURE dwh.usp_d_consignor(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_currency(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_currency(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_emod_currency_mst;

	UPDATE dwh.d_currency t
    SET 
         ctimestamp              =s.ctimestamp,
         num_curr_code           =s.num_curr_code,
         curr_symbol             =s.curr_symbol,
         curr_desc               =s.curr_desc,
         curr_sub_units          =s.curr_sub_units,
         curr_sub_unit_desc      =s.curr_sub_unit_desc,
         curr_units              =s.curr_units,
         currency_status         =s.currency_status,
         curr_symbol_flag        =s.curr_symbol_flag,
         effective_from          =s.effective_from,
         createdby               =s.createdby,
         createddate             =s.createddate,
         modifiedby              =s.modifiedby,
         modifieddate            =s.modifieddate,
		 etlactiveind 			= 1,
		 envsourcecd 			= p_envsourcecd ,
		 datasourcecd 			= p_datasourcecd ,
		 etlupdatedatetime 		= NOW()	
    FROM stg.stg_emod_currency_mst s
    WHERE t.iso_curr_code  		= s.iso_curr_code
	AND t.serial_no 			= s.serial_no;
	 
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_currency
	(
		iso_curr_code,		serial_no,			ctimestamp, 		num_curr_code,		
		curr_symbol, 		curr_desc, 			curr_sub_units,	    curr_sub_unit_desc, 
		curr_units, 		currency_status, 	curr_symbol_flag, 	effective_from, 	
		createdby, 			createddate, 		modifiedby, 		modifieddate, 		
		etlactiveind, 		etljobname, 		envsourcecd, 		datasourcecd, 		
		etlcreatedatetime
	)
	
    SELECT 
		s.iso_curr_code,		s.serial_no,			s.ctimestamp, 			s.num_curr_code,		
		s.curr_symbol, 			s.curr_desc, 			s.curr_sub_units,	    s.curr_sub_unit_desc, 
		s.curr_units, 			s.currency_status, 		s.curr_symbol_flag, 	s.effective_from, 	
		s.createdby, 			s.createddate, 			s.modifiedby, 			s.modifieddate, 		
		1, 						p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 		
		now()
	FROM stg.stg_emod_currency_mst s
    LEFT JOIN dwh.d_currency t
    ON 	s.iso_curr_code  		= t.iso_curr_code
	AND s.serial_no 			= t.serial_no
    WHERE t.iso_curr_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_emod_currency_mst
	(
		iso_curr_code, 			serial_no, 			ctimestamp, 			num_curr_code, 
		curr_symbol, 			curr_desc, 			curr_sub_units, 		curr_sub_unit_desc, 
		curr_units, 			currency_status, 	curr_symbol_flag, 		effective_from, 
		effective_to, 			createdby, 			createddate, 			modifiedby, 
		modifieddate, 			etlcreateddatetime		
	)
	SELECT 
		iso_curr_code, 			serial_no, 			ctimestamp, 			num_curr_code, 
		curr_symbol, 			curr_desc, 			curr_sub_units, 		curr_sub_unit_desc, 
		curr_units, 			currency_status, 	curr_symbol_flag, 		effective_from, 
		effective_to, 			createdby, 			createddate, 			modifiedby, 
		modifieddate, 			etlcreateddatetime
	FROM stg.stg_emod_currency_mst;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_currency(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_customer(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_customer(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename ,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_customer_hdr;

	UPDATE dwh.d_customer t
    SET 
		 customer_name					= s.wms_customer_name
		,customer_status				= s.wms_customer_status
		,customer_type					= s.wms_customer_type
		,customer_description			= s.wms_customer_description
		,customer_credit_term			= s.wms_customer_credit_term
		,customer_pay_term				= s.wms_customer_pay_term
		,customer_currency				= s.wms_customer_currency
		,customer_reason_code			= s.wms_customer_reason_code
		,customer_address1				= s.wms_customer_address1
		,customer_address2				= s.wms_customer_address2
		,customer_address3				= s.wms_customer_address3
		,customer_city					= s.wms_customer_city
		,customer_state					= s.wms_customer_state
		,customer_country				= s.wms_customer_country
		,customer_postal_code			= s.wms_customer_postal_code
		,customer_timezone				= s.wms_customer_timezone
		,customer_contact_person		= s.wms_customer_contact_person
		,customer_phone1				= s.wms_customer_phone1
		,customer_phone2				= s.wms_customer_phone2
		,customer_fax					= s.wms_customer_fax
		,customer_email					= s.wms_customer_email
		,customer_bill_same_as_customer	= s.wms_customer_bill_same_as_customer
		,customer_bill_address1			= s.wms_customer_bill_address1
		,customer_bill_address2			= s.wms_customer_bill_address2
		,customer_bill_address3			= s.wns_customer_bill_address3
		,customer_bill_city				= s.wms_customer_bill_city
		,customer_bill_state			= s.wms_customer_bill_state
		,customer_bill_country			= s.wms_customer_bill_country
		,customer_bill_postal_code		= s.wms_customer_bill_postal_code
		,customer_bill_contact_person	= s.wms_customer_bill_contact_person
		,customer_bill_phone			= s.wms_customer_bill_phone
		,customer_bill_fax				= s.wms_customer_bill_fax
		,customer_ret_undelivered		= s.wms_customer_ret_undelivered
		,customer_ret_same_as_customer	= s.wms_customer_ret_same_as_customer
		,customer_ret_address1			= s.wms_customer_ret_address1
		,customer_ret_address2			= s.wms_customer_ret_address2
		,customer_ret_address3			= s.wms_customer_ret_address3
		,customer_ret_city				= s.wms_customer_ret_city
		,customer_ret_state				= s.wms_customer_ret_state
		,customer_ret_country			= s.wms_customer_ret_country
		,customer_ret_postal_code		= s.wms_customer_ret_postal_code
		,customer_ret_contact_person	= s.wms_customer_ret_contact_person
		,customer_ret_phone1			= s.wms_customer_ret_phone1
		,customer_ret_fax				= s.wms_customer_ret_fax
		,customer_timestamp				= s.wms_customer_timestamp
		,customer_created_by			= s.wms_customer_created_by
		,customer_created_dt			= s.wms_customer_created_dt
		,customer_modified_by			= s.wms_customer_modified_by
		,customer_modified_dt			= s.wms_customer_modified_dt
		,customer_BR_valid_prof_id		= s.wms_customer_BR_valid_prof_id
		,customer_payment_typ			= s.wms_customer_payment_typ
		,customer_geo_fence				= s.wms_customer_geo_fence
		,customer_bill_geo_fence		= s.wms_customer_bill_geo_fence
		,customer_bill_longtitude		= s.wms_customer_bill_longtitude
		,customer_bill_latitude			= s.wms_customer_bill_latitude
		,customer_bill_zone				= s.wms_customer_bill_zone
		,customer_bill_sub_zone			= s.wms_customer_bill_sub_zone
		,customer_bill_region			= s.wms_customer_bill_region
		,customer_ret_geo_fence			= s.wms_customer_ret_geo_fence
		,customer_ret_longtitude		= s.wms_customer_ret_longtitude
		,customer_ret_latitude			= s.wms_customer_ret_latitude
		,customer_customer_grp			= s.wms_customer_customer_grp
		,customer_industry_typ			= s.wms_customer_industry_typ
		,allow_rev_protection			= s.wms_allow_rev_protection
		,customer_invrep				= s.wms_customer_invrep
		,customer_rcti					= s.wms_customer_rcti
		,customer_gen_from				= s.wms_customer_gen_from
		,customer_bill_Hrchy1			= s.wms_customer_bill_Hrchy1
		,customer_new_customer			= s.wms_customer_new_customer
		,customer_final_bill_stage		= s.wms_customer_final_bill_stage
		,customer_allwdb_billto			= s.wms_customer_allwdb_billto
		,customer_contact_person2		= s.wms_customer_contact_person2
		,cus_contact_person2_Email		= s.wms_cus_contact_person2_Email
		,etlactiveind 					= 1
		,etljobname 					= p_etljobname
		,envsourcecd 					= p_envsourcecd 
		,datasourcecd 					= p_datasourcecd
		,etlupdatedatetime 				= NOW()
    FROM stg.stg_wms_customer_hdr s
    WHERE t.customer_id  				= s.wms_customer_id
	AND t.customer_ou 					= s.wms_customer_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_customer
	(
		 customer_id,					customer_ou	,					customer_name,			customer_status,				customer_type
		,customer_description,			customer_credit_term,			customer_pay_term,		customer_currency,				customer_reason_code
		,customer_address1,				customer_address2,				customer_address3,		customer_city,					customer_state
		,customer_country,				customer_postal_code,			customer_timezone,		customer_contact_person,		customer_phone1
		,customer_phone2,				customer_fax,					customer_email,			customer_bill_same_as_customer,	customer_bill_address1
		,customer_bill_address2,		customer_bill_address3,			customer_bill_city,		customer_bill_state,			customer_bill_country
		,customer_bill_postal_code,		customer_bill_contact_person,	customer_bill_phone,	customer_bill_fax,				customer_ret_undelivered
		,customer_ret_same_as_customer,	customer_ret_address1,			customer_ret_address2,	customer_ret_address3,			customer_ret_city
		,customer_ret_state,			customer_ret_country,			customer_ret_postal_code,customer_ret_contact_person,	customer_ret_phone1
		,customer_ret_fax,				customer_timestamp,				customer_created_by,	customer_created_dt,			customer_modified_by
		,customer_modified_dt,			customer_BR_valid_prof_id,		customer_payment_typ,	customer_geo_fence,				customer_bill_geo_fence
		,customer_bill_longtitude,		customer_bill_latitude,			customer_bill_zone,		customer_bill_sub_zone,			customer_bill_region
		,customer_ret_geo_fence,		customer_ret_longtitude,		customer_ret_latitude,	customer_customer_grp,			customer_industry_typ
		,allow_rev_protection,			customer_invrep,				customer_rcti,			customer_gen_from,				customer_bill_Hrchy1
		,customer_new_customer,			customer_final_bill_stage,		customer_allwdb_billto,	customer_contact_person2,		cus_contact_person2_Email
		,etlactiveind,					etljobname,						envsourcecd,			datasourcecd,					etlcreatedatetime
	)
	
    SELECT 
		s.wms_customer_id,						s.wms_customer_ou,					s.wms_customer_name,			s.wms_customer_status,				s.wms_customer_type
		,s.wms_customer_description,			s.wms_customer_credit_term,			s.wms_customer_pay_term,		s.wms_customer_currency,			s.wms_customer_reason_code
		,s.wms_customer_address1,				s.wms_customer_address2,			s.wms_customer_address3,		s.wms_customer_city,				s.wms_customer_state
		,s.wms_customer_country,				s.wms_customer_postal_code,			s.wms_customer_timezone,		s.wms_customer_contact_person,		s.wms_customer_phone1
		,s.wms_customer_phone2,					s.wms_customer_fax,					s.wms_customer_email,			s.wms_customer_bill_same_as_customer,s.wms_customer_bill_address1
		,s.wms_customer_bill_address2,			s.wns_customer_bill_address3,		s.wms_customer_bill_city,		s.wms_customer_bill_state,			s.wms_customer_bill_country
		,s.wms_customer_bill_postal_code,		s.wms_customer_bill_contact_person,	s.wms_customer_bill_phone,		s.wms_customer_bill_fax,			s.wms_customer_ret_undelivered
		,s.wms_customer_ret_same_as_customer,	s.wms_customer_ret_address1,		s.wms_customer_ret_address2,	s.wms_customer_ret_address3,		s.wms_customer_ret_city
		,s.wms_customer_ret_state,				s.wms_customer_ret_country,			s.wms_customer_ret_postal_code,	s.wms_customer_ret_contact_person,	s.wms_customer_ret_phone1
		,s.wms_customer_ret_fax,				s.wms_customer_timestamp,			s.wms_customer_created_by,		s.wms_customer_created_dt,			s.wms_customer_modified_by
		,s.wms_customer_modified_dt,			s.wms_customer_BR_valid_prof_id,	s.wms_customer_payment_typ,		s.wms_customer_geo_fence,			s.wms_customer_bill_geo_fence
		,s.wms_customer_bill_longtitude,		s.wms_customer_bill_latitude,		s.wms_customer_bill_zone,		s.wms_customer_bill_sub_zone,		s.wms_customer_bill_region
		,s.wms_customer_ret_geo_fence,			s.wms_customer_ret_longtitude,		s.wms_customer_ret_latitude,	s.wms_customer_customer_grp,		s.wms_customer_industry_typ
		,s.wms_allow_rev_protection,			s.wms_customer_invrep,				s.wms_customer_rcti,			s.wms_customer_gen_from,			s.wms_customer_bill_Hrchy1
		,s.wms_customer_new_customer,			s.wms_customer_final_bill_stage,	s.wms_customer_allwdb_billto,	s.wms_customer_contact_person2,		s.wms_cus_contact_person2_Email
		,1,										p_etljobname,						p_envsourcecd,					p_datasourcecd,						NOW()
	FROM stg.stg_wms_customer_hdr s
    LEFT JOIN dwh.d_customer t
    ON 	s.wms_customer_id  		= t.customer_id
	AND s.wms_customer_ou 		= t.customer_ou
    WHERE t.customer_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_wms_customer_hdr
	(
		wms_customer_id, 				wms_customer_ou, 				wms_customer_name, 					wms_customer_status, 				wms_customer_type, 
		wms_customer_description, 		wms_customer_credit_term, 		wms_customer_pay_term, 				wms_customer_currency, 				wms_customer_reason_code, 
		wms_customer_address1, 			wms_customer_address2, 			wms_customer_address3, 				wms_customer_unique_address, 		wms_customer_city, 
		wms_customer_state, 			wms_customer_country, 			wms_customer_postal_code, 			wms_customer_timezone, 				wms_customer_contact_person, 
		wms_customer_phone1, 			wms_customer_phone2, 			wms_customer_fax, 					wms_customer_email, 				wms_customer_bill_same_as_customer, 
		wms_customer_bill_address1, 	wms_customer_bill_address2, 	wns_customer_bill_address3, 		wms_customer_bill_unique_address, 	wms_customer_bill_city, 
		wms_customer_bill_state, 		wms_customer_bill_country, 		wms_customer_bill_postal_code, 		wms_customer_bill_contact_person, 	wms_customer_bill_phone, 
		wms_customer_bill_fax, 			wms_customer_ret_undelivered, 	wms_customer_ret_same_as_customer, 	wms_customer_ret_address1, 			wms_customer_ret_address2, 
		wms_customer_ret_address3, 		wms_customer_ret_unique_address,wms_customer_ret_city, 				wms_customer_ret_state, 			wms_customer_ret_country, 
		wms_customer_ret_postal_code, 	wms_customer_ret_contact_person,wms_customer_ret_phone1, 			wms_customer_ret_fax, 				wms_customer_timestamp, 
		wms_customer_userdefined1, 		wms_customer_userdefined2, 		wms_customer_userdefined3, 			wms_customer_created_by, 			wms_customer_created_dt, 
		wms_customer_modified_by, 		wms_customer_modified_dt, 		wms_customer_route, 				wms_customer_br_valid_prof_id, 		wms_customer_payment_typ, 
		wms_customer_geo_fence, 		wms_customer_longtitude, 		wms_customer_latitude, 				wms_customer_zone, 					wms_customer_sub_zone, 
		wms_customer_region, 			wms_customer_bill_geo_fence, 	wms_customer_bill_longtitude, 		wms_customer_bill_latitude, 		wms_customer_bill_zone, 
		wms_customer_bill_sub_zone, 	wms_customer_bill_region, 		wms_customer_bill_timezone, 		wms_customer_ret_geo_fence, 		wms_customer_ret_longtitude, 
		wms_customer_ret_latitude, 		wms_customer_ret_zone, 			wms_customer_ret_sub_zone, 			wms_customer_ret_region, 			wms_customer_ret_timezone, 
		wms_customer_customer_grp, 		wms_customer_industry_typ, 		wms_customer_lsp, 					wms_customer_url, 					wms_customer_reg, 
		wms_customer_dept, 				wms_customer_ln_business, 		wms_allow_rev_protection, 			wms_customer_invrep, 				wms_customer_lspemail, 
		wms_customer_lspname, 			wms_customer_packing_bay, 		wms_customer_route_no, 				wms_customer_lspid, 				wms_customer_finance_grp, 
		wms_customer_rcti, 				wms_customer_gen_from, 			wms_customer_cont_derivation, 		wms_customer_bill_hrchy1,	 		wms_customer_bill_hrchy2, 
		wms_customer_bill_hrchy3, 		wms_customer_chnl_type, 		wms_customer_seller_type, 			wms_customer_profile_id, 			wms_customer_new_customer, 
		wms_customer_final_bill_stage, 	wms_bank_name, 					wms_bank_acc_no, 					wms_bank_ifsc_code, 				wms_prospect_customer_yn, 
		wms_customer_allwdb_billto, 	wms_customer_suburb, 			wms_customer_contact_person2, 		wms_cus_contact_person2_phone1, 	wms_cus_contact_person2_phone2, 
		wms_cus_contact_person2_fax,	wms_cus_contact_person2_email, 	wms_cus_contact_person2_url, 		wms_customer_tempid, 				etlcreateddatetime
	
	)
	SELECT 
		wms_customer_id, 				wms_customer_ou, 				wms_customer_name, 					wms_customer_status, 				wms_customer_type, 
		wms_customer_description, 		wms_customer_credit_term, 		wms_customer_pay_term, 				wms_customer_currency, 				wms_customer_reason_code, 
		wms_customer_address1, 			wms_customer_address2, 			wms_customer_address3, 				wms_customer_unique_address, 		wms_customer_city, 
		wms_customer_state, 			wms_customer_country, 			wms_customer_postal_code, 			wms_customer_timezone, 				wms_customer_contact_person, 
		wms_customer_phone1, 			wms_customer_phone2, 			wms_customer_fax, 					wms_customer_email, 				wms_customer_bill_same_as_customer, 
		wms_customer_bill_address1, 	wms_customer_bill_address2, 	wns_customer_bill_address3, 		wms_customer_bill_unique_address, 	wms_customer_bill_city, 
		wms_customer_bill_state, 		wms_customer_bill_country, 		wms_customer_bill_postal_code, 		wms_customer_bill_contact_person, 	wms_customer_bill_phone, 
		wms_customer_bill_fax, 			wms_customer_ret_undelivered, 	wms_customer_ret_same_as_customer, 	wms_customer_ret_address1, 			wms_customer_ret_address2, 
		wms_customer_ret_address3, 		wms_customer_ret_unique_address,wms_customer_ret_city, 				wms_customer_ret_state, 			wms_customer_ret_country, 
		wms_customer_ret_postal_code, 	wms_customer_ret_contact_person,wms_customer_ret_phone1, 			wms_customer_ret_fax, 				wms_customer_timestamp, 
		wms_customer_userdefined1, 		wms_customer_userdefined2, 		wms_customer_userdefined3, 			wms_customer_created_by, 			wms_customer_created_dt, 
		wms_customer_modified_by, 		wms_customer_modified_dt, 		wms_customer_route, 				wms_customer_br_valid_prof_id, 		wms_customer_payment_typ, 
		wms_customer_geo_fence, 		wms_customer_longtitude, 		wms_customer_latitude, 				wms_customer_zone, 					wms_customer_sub_zone, 
		wms_customer_region, 			wms_customer_bill_geo_fence, 	wms_customer_bill_longtitude, 		wms_customer_bill_latitude, 		wms_customer_bill_zone, 
		wms_customer_bill_sub_zone, 	wms_customer_bill_region, 		wms_customer_bill_timezone, 		wms_customer_ret_geo_fence, 		wms_customer_ret_longtitude, 
		wms_customer_ret_latitude, 		wms_customer_ret_zone, 			wms_customer_ret_sub_zone, 			wms_customer_ret_region, 			wms_customer_ret_timezone, 
		wms_customer_customer_grp, 		wms_customer_industry_typ, 		wms_customer_lsp, 					wms_customer_url, 					wms_customer_reg, 
		wms_customer_dept, 				wms_customer_ln_business, 		wms_allow_rev_protection, 			wms_customer_invrep, 				wms_customer_lspemail, 
		wms_customer_lspname, 			wms_customer_packing_bay, 		wms_customer_route_no, 				wms_customer_lspid, 				wms_customer_finance_grp, 
		wms_customer_rcti, 				wms_customer_gen_from, 			wms_customer_cont_derivation, 		wms_customer_bill_hrchy1,	 		wms_customer_bill_hrchy2, 
		wms_customer_bill_hrchy3, 		wms_customer_chnl_type, 		wms_customer_seller_type, 			wms_customer_profile_id, 			wms_customer_new_customer, 
		wms_customer_final_bill_stage, 	wms_bank_name, 					wms_bank_acc_no, 					wms_bank_ifsc_code, 				wms_prospect_customer_yn, 
		wms_customer_allwdb_billto, 	wms_customer_suburb, 			wms_customer_contact_person2, 		wms_cus_contact_person2_phone1, 	wms_cus_contact_person2_phone2, 
		wms_cus_contact_person2_fax,	wms_cus_contact_person2_email, 	wms_cus_contact_person2_url, 		wms_customer_tempid, 				etlcreateddatetime
	FROM stg.stg_wms_customer_hdr;	
	END IF;
	
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_customer(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_customerattributes(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_customerattributes(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag


	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_cust_attribute_dtl;

	UPDATE dwh.d_customerAttributes t
    SET 
		wms_cust_attr_typ		=	s.wms_cust_attr_typ,
		wms_cust_attr_apl		=	s.wms_cust_attr_apl,
		wms_cust_attr_value		=	s.wms_cust_attr_value,
		etlactiveind 			=	1,
		etljobname 				=	p_etljobname,
		envsourcecd 			=	p_envsourcecd ,
		datasourcecd 			=	p_datasourcecd ,
		etlupdatedatetime 		=	NOW()	
    FROM	stg.stg_wms_cust_attribute_dtl s
    WHERE	t.wms_cust_attr_cust_code	=	s.wms_cust_attr_cust_code
	AND		t.wms_cust_attr_lineno		=	s.wms_cust_attr_lineno
	AND		t.wms_cust_attr_ou			=	s.wms_cust_attr_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_customerAttributes
	(
	wms_cust_attr_cust_code		,		wms_cust_attr_lineno		,	wms_cust_attr_ou		,
	wms_cust_attr_typ			,		wms_cust_attr_apl			,	wms_cust_attr_value		,
	etlactiveind				,		etljobname					,	envsourcecd				,
	datasourcecd				,		etlcreatedatetime
	)
	
    SELECT
		s.wms_cust_attr_cust_code	,		s.wms_cust_attr_lineno	,		s.wms_cust_attr_ou	,
		s.wms_cust_attr_typ			,		s.wms_cust_attr_apl		,		s.wms_cust_attr_value	,
			1						,		p_etljobname			,		p_envsourcecd		,
		p_datasourcecd				,			NOW()
	FROM stg.stg_wms_cust_attribute_dtl s
    LEFT JOIN dwh.d_customerAttributes t
	ON		t.wms_cust_attr_cust_code	=	s.wms_cust_attr_cust_code
	AND		t.wms_cust_attr_lineno		=	s.wms_cust_attr_lineno
	AND		t.wms_cust_attr_ou			=	s.wms_cust_attr_ou
	WHERE	t.wms_cust_attr_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
IF p_rawstorageflag = 1
	THEN
	
	INSERT INTO raw.raw_wms_cust_attribute_dtl
	(
		wms_cust_attr_cust_code		,		wms_cust_attr_lineno		,	wms_cust_attr_ou	,
		wms_cust_attr_typ			,		wms_cust_attr_apl			,	wms_cust_attr_value	,
		etlcreateddatetime 	
	)

	SELECT 
		wms_cust_attr_cust_code		,	wms_cust_attr_lineno		,		wms_cust_attr_ou	,
		wms_cust_attr_typ			,	wms_cust_attr_apl			,		wms_cust_attr_value	,
		etlcreateddatetime
	FROM stg.stg_wms_cust_attribute_dtl;	
END IF; 
   	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
  
END;
$$;


ALTER PROCEDURE dwh.usp_d_customerattributes(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_customergrouphdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_customergrouphdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
        
    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_cust_group_hdr;

	UPDATE dwh.d_CustomerGroupHdr t
    SET 
                   
        cgh_bu                 =     s.cgh_bu ,                         
        cgh_created_at         =     s.cgh_created_at,  
        cgh_cust_group_desc    =     s.cgh_cust_group_desc,
        cgh_reason_code        =     s.cgh_reason_code ,
        cgh_status             =     s.cgh_status ,
        cgh_prev_status        =     s.cgh_prev_status ,
        cgh_created_by         =     s.cgh_created_by ,
        cgh_created_date       =     s.cgh_created_date, 
        cgh_modified_by        =     s.cgh_modified_by ,
        cgh_modified_date      =     s.cgh_modified_date,  
        cgh_timestamp_value    =     s.cgh_timestamp_value,
		etlactiveind 		   =     1,
		etljobname 			   =     p_etljobname,
		envsourcecd 		   =     p_envsourcecd,
		datasourcecd 		   =     p_datasourcecd,
		etlupdatedatetime 	   =     NOW()	
    FROM stg.stg_cust_group_hdr s
    WHERE t.cgh_cust_group_code    = s.cgh_cust_group_code
    AND   t.cgh_group_type_code    = s.cgh_group_type_code
    AND   t.cgh_control_group_flag = s.cgh_control_group_flag
    AND   t.cgh_lo= s.cgh_lo;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_CustomerGroupHdr
	(
		cgh_lo ,              cgh_bu ,              cgh_cust_group_code,  cgh_control_group_flag, cgh_group_type_code,  cgh_created_at ,      
        cgh_cust_group_desc,  cgh_cust_group_desc_shd, cgh_reason_code ,     cgh_status,           cgh_prev_status,      cgh_created_by ,      
        cgh_created_date,     cgh_modified_by,     cgh_modified_date,    cgh_timestamp_value,  etlactiveind,
        etljobname, 		envsourcecd, 	datasourcecd, 		etlcreatedatetime
	)
	
    SELECT 
    s.cgh_lo ,             s.cgh_bu ,            s.cgh_cust_group_code, s.cgh_control_group_flag, s.cgh_group_type_code, 
    s.cgh_created_at,      s.cgh_cust_group_desc,  s.cgh_cust_group_desc_shd, s.cgh_reason_code ,     s.cgh_status,      
    s.cgh_prev_status,     s.cgh_created_by ,      s.cgh_created_date,    s.cgh_modified_by,    s.cgh_modified_date,   s.cgh_timestamp_value,
		1,      p_etljobname,		p_envsourcecd,		p_datasourcecd,			now()
	FROM stg.stg_cust_group_hdr s
    LEFT JOIN dwh.d_CustomerGroupHdr t
    ON s.cgh_cust_group_code = t.cgh_cust_group_code
    AND   s.cgh_group_type_code    = t.cgh_group_type_code
    AND   s.cgh_control_group_flag = t.cgh_control_group_flag 
    AND   s.cgh_lo= t.cgh_lo
    WHERE t.cgh_cust_group_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_cust_group_hdr
	(
	cgh_lo, cgh_bu, cgh_cust_group_code, cgh_control_group_flag, cgh_group_type_code,
    cgh_created_at, cgh_cust_group_desc, cgh_cust_group_desc_shd, cgh_reason_code, cgh_status,
    cgh_prev_status, cgh_created_by, cgh_created_date, cgh_modified_by, cgh_modified_date, 
    cgh_timestamp_value, cgh_addnl1, cgh_addnl2, cgh_addnl3, etlcreateddatetime

	)
	SELECT 
	cgh_lo, cgh_bu, cgh_cust_group_code, cgh_control_group_flag, cgh_group_type_code,
    cgh_created_at, cgh_cust_group_desc, cgh_cust_group_desc_shd, cgh_reason_code, cgh_status,
    cgh_prev_status, cgh_created_by, cgh_created_date, cgh_modified_by, cgh_modified_date, 
    cgh_timestamp_value, cgh_addnl1, cgh_addnl2, cgh_addnl3, etlcreateddatetime	
	FROM stg.stg_cust_group_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
    
   
END;
$$;


ALTER PROCEDURE dwh.usp_d_customergrouphdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_customerlocation(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: postgres
--

CREATE PROCEDURE dwh.usp_d_customerlocation(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
  
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.Stg_wms_loc_customer_mapping_dtl;

	UPDATE dwh.d_CustomerLocation t
    SET 
        loc_cust_code           = s.wms_loc_cust_code,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.Stg_wms_loc_customer_mapping_dtl s
    WHERE t.loc_ou  		= s.wms_loc_ou
	AND t.loc_code          = s.wms_loc_code
	AND t.loc_lineno        = s.wms_loc_lineno;
	
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_CustomerLocation
	(
		loc_ou,              loc_code,            loc_lineno,          loc_cust_code,
		etlactiveind,        etljobname, 		  envsourcecd, 	       datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
        s.wms_loc_ou,          s.wms_loc_code,        s.wms_loc_lineno,      s.wms_loc_cust_code,
        1,                     p_etljobname,		  p_envsourcecd,	     p_datasourcecd,			NOW()
	FROM stg.Stg_wms_loc_customer_mapping_dtl s
    LEFT JOIN dwh.d_CustomerLocation t
    ON 	 s.wms_loc_ou  		    = t.loc_ou
	AND s.wms_loc_code          = t.loc_code
	AND s.wms_loc_lineno        = t.loc_lineno
    WHERE t.loc_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_loc_customer_mapping_dtl
	(
	   wms_loc_ou, wms_loc_code, wms_loc_lineno, wms_loc_cust_code, wms_cost_centre, 
       wms_contract_id, etlcreateddatetime

	)
	SELECT 
	   wms_loc_ou, wms_loc_code, wms_loc_lineno, wms_loc_cust_code, wms_cost_centre, 
       wms_contract_id, etlcreateddatetime
	FROM stg.Stg_wms_loc_customer_mapping_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_customerlocation(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO postgres;

--
-- Name: usp_d_customerlocationinfo(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_customerlocationinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
        
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_cust_lo_info;

    UPDATE dwh.d_CustomerLocationInfo t
    SET 
 
        
        clo_cust_name  =        s.clo_cust_name,
        clo_cust_name_shd  =        s.clo_cust_name_shd,
        clo_created_at  =        s.clo_created_at,
        clo_registration_dt  =        s.clo_registration_dt,
        clo_portal_user  =        s.clo_portal_user,
        clo_prosp_cust_code  =        s.clo_prosp_cust_code,
        clo_parent_cust_code  =        s.clo_parent_cust_code,
        clo_supp_code  =        s.clo_supp_code,
        clo_number_type  =        s.clo_number_type,
        clo_addrline1  =        s.clo_addrline1,
        clo_addrline2  =        s.clo_addrline2,
        clo_addrline3  =        s.clo_addrline3,
        clo_city  =        s.clo_city,
        clo_state  =        s.clo_state,
        clo_country  =        s.clo_country,
        clo_zip  =        s.clo_zip,
        clo_phone1  =        s.clo_phone1,
        clo_phone2  =        s.clo_phone2,
        clo_mobile  =        s.clo_mobile,
        clo_fax  =        s.clo_fax,
        clo_email  =        s.clo_email,
        clo_url  =        s.clo_url,
        clo_cr_chk_at  =        s.clo_cr_chk_at,
        clo_nature_of_cust  =        s.clo_nature_of_cust,
        clo_internal_bu  =        s.clo_internal_bu,
        clo_internal_company  =        s.clo_internal_company,
        clo_account_group_code  =        s.clo_account_group_code,
        clo_created_by  =        s.clo_created_by,
        clo_created_date  =        s.clo_created_date,
        clo_modified_by  =        s.clo_modified_by,
        clo_modified_date  =        s.clo_modified_date,
        clo_timestamp_value  =        s.clo_timestamp_value,
        clo_cust_long_desc  =        s.clo_cust_long_desc,
        CLO_NOC  =        s.CLO_NOC,
        clo_template  =        s.clo_template,
        clo_pannumber  =        s.clo_pannumber,

        etlactiveind           =     1,
        etljobname             =     p_etljobname,
        envsourcecd            =     p_envsourcecd,
        datasourcecd           =     p_datasourcecd,
        etlupdatedatetime      =     NOW()  
    FROM stg.stg_cust_lo_info s
    WHERE t.clo_lo     = s.clo_lo
    AND   t.clo_cust_code    = s.clo_cust_code;
  
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_CustomerLocationInfo
    (clo_lo,  clo_cust_code,  clo_cust_name,  clo_cust_name_shd,  clo_created_at,  clo_registration_dt,  clo_portal_user,  clo_prosp_cust_code,  clo_parent_cust_code,  clo_supp_code,  clo_number_type,  clo_addrline1,  clo_addrline2,  clo_addrline3,  clo_city,  clo_state,  clo_country,  clo_zip,  clo_phone1,  clo_phone2,  clo_mobile,  clo_fax,  clo_email,  clo_url,  clo_cr_chk_at,  clo_nature_of_cust,  clo_internal_bu,  clo_internal_company,  clo_account_group_code,  clo_created_by,  clo_created_date,  clo_modified_by,  clo_modified_date,  clo_timestamp_value,  clo_cust_long_desc,  CLO_NOC,  clo_template,  clo_pannumber, etlactiveind,
        etljobname,         envsourcecd,    datasourcecd,       etlcreatedatetime
    )
    
    SELECT 
        s.clo_lo,  s.clo_cust_code,  s.clo_cust_name,  s.clo_cust_name_shd,  s.clo_created_at,  s.clo_registration_dt,  s.clo_portal_user,  s.clo_prosp_cust_code,  s.clo_parent_cust_code,  s.clo_supp_code,  s.clo_number_type,  s.clo_addrline1,  s.clo_addrline2,  s.clo_addrline3,  s.clo_city,  s.clo_state,  s.clo_country,  s.clo_zip,  s.clo_phone1,  s.clo_phone2,  s.clo_mobile,  s.clo_fax,  s.clo_email,  s.clo_url,  s.clo_cr_chk_at,  s.clo_nature_of_cust,  s.clo_internal_bu,  s.clo_internal_company,  s.clo_account_group_code,  s.clo_created_by,  s.clo_created_date,  s.clo_modified_by,  s.clo_modified_date,  s.clo_timestamp_value,  s.clo_cust_long_desc,  s.CLO_NOC,  s.clo_template,  s.clo_pannumber,
        1,      p_etljobname,       p_envsourcecd,      p_datasourcecd,         now()
    FROM stg.stg_cust_lo_info s
    LEFT JOIN dwh.d_CustomerLocationInfo t
    ON s.clo_lo     = t.clo_lo 
    AND  s.clo_cust_code    = t.clo_cust_code
   
    WHERE t.clo_lo   IS NULL;

    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_cust_lo_info

    (
        clo_lo, clo_cust_code, clo_cust_name, clo_cust_name_shd, clo_created_at,
        clo_registration_dt, clo_portal_user, clo_prosp_cust_code, clo_parent_cust_code, 
        clo_supp_code, clo_number_type, clo_addrline1, clo_addrline2, clo_addrline3, 
        clo_city, clo_state, clo_country, clo_zip, clo_phone1, clo_phone2, clo_mobile, 
        clo_fax, clo_email, clo_url, clo_cr_chk_at, clo_nature_of_cust, clo_internal_bu, 
        clo_internal_company, clo_account_group_code, clo_created_by, clo_created_date, 
        clo_modified_by, clo_modified_date, clo_timestamp_value, clo_addnl1, clo_addnl2, 
        clo_addnl3, clo_cust_long_desc, clo_noc, clo_template, clo_registration_no, 
        clo_registration_type, clo_pannumber, clo_noc_onetime, clo_cust_price_grp, 
        clo_cust_tax_grp, clo_cust_disc_grp, clo_job_tilte, etlcreateddatetime
    )
    SELECT
        clo_lo, clo_cust_code, clo_cust_name, clo_cust_name_shd, clo_created_at,
        clo_registration_dt, clo_portal_user, clo_prosp_cust_code, clo_parent_cust_code, 
        clo_supp_code, clo_number_type, clo_addrline1, clo_addrline2, clo_addrline3, 
        clo_city, clo_state, clo_country, clo_zip, clo_phone1, clo_phone2, clo_mobile, 
        clo_fax, clo_email, clo_url, clo_cr_chk_at, clo_nature_of_cust, clo_internal_bu, 
        clo_internal_company, clo_account_group_code, clo_created_by, clo_created_date, 
        clo_modified_by, clo_modified_date, clo_timestamp_value, clo_addnl1, clo_addnl2, 
        clo_addnl3, clo_cust_long_desc, clo_noc, clo_template, clo_registration_no, 
        clo_registration_type, clo_pannumber, clo_noc_onetime, clo_cust_price_grp, 
        clo_cust_tax_grp, clo_cust_disc_grp, clo_job_tilte, etlcreateddatetime
    FROM stg.stg_cust_lo_info;
	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
    
    --SELECT COUNT(*) INTO InsCnt FROM dwh.usp_d_CustomerLocationInfo;
END;
$$;


ALTER PROCEDURE dwh.usp_d_customerlocationinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_customerlocdiv(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_customerlocdiv(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_customer_location_division_dtl;

	UPDATE dwh.d_customerLocDiv t
    SET 
		wms_customer_type		=		s.wms_customer_type,
		wms_customer_code		=		s.wms_customer_code,
		wms_customer_itm_val_contract =	s.wms_customer_itm_val_contract,
		etlactiveind 			=		1,
		etljobname 				=		p_etljobname,
		envsourcecd 			=		p_envsourcecd ,
		datasourcecd 			=		p_datasourcecd ,
		etlupdatedatetime 		=		NOW()	
    FROM	stg.stg_wms_customer_location_division_dtl s
	WHERE	t.wms_customer_id		=	s.wms_customer_id
	AND		t.wms_customer_ou		=	s.wms_customer_ou
	AND		t.wms_customer_lineno	=	s.wms_customer_lineno;
        
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_customerLocDiv
	(
	wms_customer_id			,		wms_customer_ou			,		wms_customer_lineno		,
	wms_customer_type		,		wms_customer_code		,		wms_customer_itm_val_contract ,
	etlactiveind			,		etljobname				,		envsourcecd				,
	datasourcecd			,		etlcreatedatetime		,		etlupdatedatetime
	)
	
    SELECT
		s.wms_customer_id		,	    s.wms_customer_ou		,	    s.wms_customer_lineno ,
		s.wms_customer_type		,	    s.wms_customer_code		,	    s.wms_customer_itm_val_contract ,
			1					,		p_etljobname			,		p_envsourcecd		,
		p_datasourcecd			,		etlcreatedatetime		,		NOW()
	FROM stg.stg_wms_customer_location_division_dtl s
    LEFT JOIN dwh.d_customerLocDiv t
	ON		t.wms_customer_id		=	s.wms_customer_id
	AND		t.wms_customer_ou		=	s.wms_customer_ou
	AND		t.wms_customer_lineno	=	s.wms_customer_lineno
	WHERE	t.wms_customer_ou IS NULL;

    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_customer_location_division_dtl
	(
	 wms_customer_id	, wms_customer_ou	, wms_customer_lineno		,
	 wms_customer_type	, wms_customer_code	, wms_customer_itm_val_contract,
	 etlcreateddatetime	
	)

	SELECT 
	 wms_customer_id	, wms_customer_ou	, wms_customer_lineno	,
	 wms_customer_type	, wms_customer_code	, wms_customer_itm_val_contract,
	 etlcreateddatetime	
	 FROM stg.stg_wms_customer_location_division_dtl;
	 END IF; 

   	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
  
END;
$$;


ALTER PROCEDURE dwh.usp_d_customerlocdiv(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_customerouinfo(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_customerouinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
        
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_cust_ou_info

;

    UPDATE dwh.d_customerOUinfo
 t
    SET 
        cou_dflt_billto_id    = s.cou_dflt_billto_id,
        cou_dflt_shipto_id    = s.cou_dflt_shipto_id,
        cou_order_from_id    = s.cou_order_from_id,
        cou_dflt_billto_cust    = s.cou_dflt_billto_cust,
        cou_dflt_shipto_cust    = s.cou_dflt_shipto_cust,
        cou_dflt_pricelist    = s.cou_dflt_pricelist,
        cou_dflt_ship_pt    = s.cou_dflt_ship_pt,
        cou_language    = s.cou_language,
        cou_transport_mode    = s.cou_transport_mode,
        cou_sales_chnl    = s.cou_sales_chnl,
        cou_order_type    = s.cou_order_type,
        cou_process_actn    = s.cou_process_actn,
        cou_partshp_flag    = s.cou_partshp_flag,
        cou_freight_term    = s.cou_freight_term,
        cou_prfrd_carrier    = s.cou_prfrd_carrier,
        cou_secstk_flag    = s.cou_secstk_flag,
        cou_cons_sales    = s.cou_cons_sales,
        cou_cons_bill    = s.cou_cons_bill,
        cou_trnshp_flag    = s.cou_trnshp_flag,
        cou_inv_appl_flag    = s.cou_inv_appl_flag,
        cou_auto_invauth_flag    = s.cou_auto_invauth_flag,
        cou_frtbillable_flag    = s.cou_frtbillable_flag,
        cou_no_of_invcopies    = s.cou_no_of_invcopies,
        cou_elgble_for_rebate    = s.cou_elgble_for_rebate,
        cou_reason_code    = s.cou_reason_code,
        cou_cr_status    = s.cou_cr_status,
        cou_status    = s.cou_status,
        cou_prev_status    = s.cou_prev_status,
        cou_created_by    = s.cou_created_by,
        cou_created_date    = s.cou_created_date,
        cou_modified_by    = s.cou_modified_by,
        cou_modified_date    = s.cou_modified_date,
        cou_timestamp_value    = s.cou_timestamp_value,
        cou_company_code    = s.cou_company_code,
        cou_cust_priority    = s.cou_cust_priority,
        cou_sales_person    = s.cou_sales_person,
        cou_cust_frequency    = s.cou_cust_frequency,
        cou_wf_status    = s.cou_wf_status,
        cou_revision_no    = s.cou_revision_no,
        cou_trade_type    = s.cou_trade_type,
        cou_frt_Appl    = s.cou_frt_Appl,
        cou_cust_category    = s.cou_cust_category,
        etlactiveind           =     1,
        etljobname             =     p_etljobname,
        envsourcecd            =     p_envsourcecd,
        datasourcecd           =     p_datasourcecd,
        etlupdatedatetime      =     NOW()  
        FROM stg.stg_cust_ou_info s
    WHERE t.cou_cust_code     = s.cou_cust_code
    AND   t.cou_lo    = s.cou_lo
    AND   t.cou_bu = s.cou_bu
    AND   t.cou_ou = s.cou_ou;

    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_customerOUinfo

    (cou_lo,
cou_bu,
cou_ou,
cou_cust_code,
cou_dflt_billto_id,
cou_dflt_shipto_id,
cou_order_from_id,
cou_dflt_billto_cust,
cou_dflt_shipto_cust,
cou_dflt_pricelist,
cou_dflt_ship_pt,
cou_language,
cou_transport_mode,
cou_sales_chnl,
cou_order_type,
cou_process_actn,
cou_partshp_flag,
cou_freight_term,
cou_prfrd_carrier,
cou_secstk_flag,
cou_cons_sales,
cou_cons_bill,
cou_trnshp_flag,
cou_inv_appl_flag,
cou_auto_invauth_flag,
cou_frtbillable_flag,
cou_no_of_invcopies,
cou_elgble_for_rebate,
cou_reason_code,
cou_cr_status,
cou_status,
cou_prev_status,
cou_created_by,
cou_created_date,
cou_modified_by,
cou_modified_date,
cou_timestamp_value,
cou_company_code,
cou_cust_priority,
cou_sales_person,
cou_cust_frequency,
cou_wf_status,
cou_revision_no,
cou_trade_type,
cou_frt_Appl,
cou_cust_category,
etlactiveind,
etljobname,
envsourcecd,
datasourcecd ,
etlcreatedatetime )
    
    SELECT 
   s.cou_lo,
s.cou_bu,
s.cou_ou,
s.cou_cust_code,
s.cou_dflt_billto_id,
s.cou_dflt_shipto_id,
s.cou_order_from_id,
s.cou_dflt_billto_cust,
s.cou_dflt_shipto_cust,
s.cou_dflt_pricelist,
s.cou_dflt_ship_pt,
s.cou_language,
s.cou_transport_mode,
s.cou_sales_chnl,
s.cou_order_type,
s.cou_process_actn,
s.cou_partshp_flag,
s.cou_freight_term,
s.cou_prfrd_carrier,
s.cou_secstk_flag,
s.cou_cons_sales,
s.cou_cons_bill,
s.cou_trnshp_flag,
s.cou_inv_appl_flag,
s.cou_auto_invauth_flag,
s.cou_frtbillable_flag,
s.cou_no_of_invcopies,
s.cou_elgble_for_rebate,
s.cou_reason_code,
s.cou_cr_status,
s.cou_status,
s.cou_prev_status,
s.cou_created_by,
s.cou_created_date,
s.cou_modified_by,
s.cou_modified_date,
s.cou_timestamp_value,
s.cou_company_code,
s.cou_cust_priority,
s.cou_sales_person,
s.cou_cust_frequency,
s.cou_wf_status,
s.cou_revision_no,
s.cou_trade_type,
s.cou_frt_Appl,
s.cou_cust_category,
1,
p_etljobname,
p_envsourcecd,
p_datasourcecd,
now()

    FROM stg.stg_cust_ou_info s
    LEFT JOIN dwh.d_customerOUinfo t
    ON s.cou_cust_code     = t.cou_cust_code 
    AND  s.cou_lo    = t.cou_lo
    AND   s.cou_bu = t.cou_bu
    AND   s.cou_ou = t.cou_ou
    WHERE t.cou_cust_code   IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_cust_ou_info

    (
       cou_lo, cou_bu, cou_ou, cou_cust_code, cou_dflt_billto_id, cou_dflt_shipto_id, 
        cou_order_from_id, cou_dflt_billto_cust, cou_dflt_shipto_cust, cou_dflt_pricelist,
        cou_dflt_ship_pt, cou_language, cou_transport_mode, cou_sales_chnl, cou_order_type,
        cou_process_actn, cou_partshp_flag, cou_freight_term, cou_prfrd_carrier, cou_secstk_flag,
        cou_cons_sales, cou_cons_bill, cou_trnshp_flag, cou_inv_appl_flag, cou_auto_invauth_flag, 
        cou_frtbillable_flag, cou_shiptol_pos, cou_shiptol_neg, cou_no_of_invcopies, cou_elgble_for_rebate, 
        cou_reason_code, cou_penalrate_perc, cou_shpment_delay_days, cou_cr_status, cou_status, cou_prev_status, 
        cou_created_by, cou_created_date, cou_modified_by, cou_modified_date, cou_timestamp_value, cou_addnl1, 
        cou_addnl2, cou_addnl3, cou_company_code, cou_cust_priority, cou_sales_person, cou_templ_cust_code, 
        cou_gen_from, cou_cust_loyalty, cou_cust_preference, cou_cust_frequency, cou_cust_cont_frequency, 
        cou_cust_cont_preference, cou_wf_status, cou_revision_no, cou_trade_type, cou_frt_appl, cou_cust_category, 
        etlcreateddatetime
    )
    SELECT
        cou_lo, cou_bu, cou_ou, cou_cust_code, cou_dflt_billto_id, cou_dflt_shipto_id, 
        cou_order_from_id, cou_dflt_billto_cust, cou_dflt_shipto_cust, cou_dflt_pricelist,
        cou_dflt_ship_pt, cou_language, cou_transport_mode, cou_sales_chnl, cou_order_type,
        cou_process_actn, cou_partshp_flag, cou_freight_term, cou_prfrd_carrier, cou_secstk_flag,
        cou_cons_sales, cou_cons_bill, cou_trnshp_flag, cou_inv_appl_flag, cou_auto_invauth_flag, 
        cou_frtbillable_flag, cou_shiptol_pos, cou_shiptol_neg, cou_no_of_invcopies, cou_elgble_for_rebate, 
        cou_reason_code, cou_penalrate_perc, cou_shpment_delay_days, cou_cr_status, cou_status, cou_prev_status, 
        cou_created_by, cou_created_date, cou_modified_by, cou_modified_date, cou_timestamp_value, cou_addnl1, 
        cou_addnl2, cou_addnl3, cou_company_code, cou_cust_priority, cou_sales_person, cou_templ_cust_code, 
        cou_gen_from, cou_cust_loyalty, cou_cust_preference, cou_cust_frequency, cou_cust_cont_frequency, 
        cou_cust_cont_preference, cou_wf_status, cou_revision_no, cou_trade_type, cou_frt_appl, cou_cust_category, 
        etlcreateddatetime
    FROM stg.stg_cust_ou_info; 
	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
    
END;
$$;


ALTER PROCEDURE dwh.usp_d_customerouinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_customerportalusermap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_customerportalusermap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_customer_portal_user_dtl;

	UPDATE dwh.d_customerPortalUserMap t
    SET 
			customer_user_id			=	s.wms_customer_user_id,
			customer_role				=	s.wms_customer_role,
			customer_wms				=	s.wms_customer_wms,
			customer_tms				=	s.wms_customer_tms,
			customer_addl_custmap		=	s.wms_customer_addl_custmap,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_customer_portal_user_dtl s
    WHERE	t.customer_id				=	s.wms_customer_id
	AND		t.customer_ou				=	s.wms_customer_ou
	AND     t.customer_lineno			=   s.wms_customer_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_customerPortalUserMap
	(
		customer_id						,customer_ou					,customer_lineno				,customer_user_id
		,customer_role					,customer_wms					,customer_tms					,customer_addl_custmap
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		wms_customer_id						,wms_customer_ou						,wms_customer_lineno				,wms_customer_user_id
		,wms_customer_role					,wms_customer_wms						,wms_customer_tms					,wms_customer_addl_custmap
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_customer_portal_user_dtl s
    LEFT JOIN dwh.d_customerPortalUserMap t
    ON 		t.customer_id				=	s.wms_customer_id
	AND		t.customer_ou				=	s.wms_customer_ou
	AND     t.customer_lineno			=   s.wms_customer_lineno
    WHERE t.customer_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_customer_portal_user_dtl
	(
		wms_customer_id						,wms_customer_ou						,wms_customer_lineno				,wms_customer_user_id
		,wms_customer_role					,wms_customer_wms						,wms_customer_tms					,wms_customer_addl_custmap
		,etlcreateddatetime
	)
	SELECT 
		wms_customer_id						,wms_customer_ou						,wms_customer_lineno				,wms_customer_user_id
		,wms_customer_role					,wms_customer_wms						,wms_customer_tms					,wms_customer_addl_custmap
		,etlcreateddatetime
	FROM stg.stg_wms_customer_portal_user_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_customerportalusermap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_custprospectinfo(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_custprospectinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_cust_prospect_info;

	UPDATE dwh.D_CustProspectInfo t
    SET 
	cpr_prosp_cust_name 		=           s.cpr_prosp_cust_name,
	cpr_prosp_custname_shd 		= 			s.cpr_prosp_custname_shd,
	cpr_registration_dt 		=			s.cpr_registration_dt,
	cpr_created_at 				=			s.cpr_created_at,
	cpr_number_type 			=			s.cpr_number_type,
	cpr_created_transaction 	=			s.cpr_created_transaction,
	cpr_addrline1 				= 			s.cpr_addrline1,
	cpr_addrline2 				=			s.cpr_addrline2,
	cpr_addrline3 				=			s.cpr_addrline3,
	cpr_city 					=			s.cpr_city,
	cpr_state 					=			s.cpr_state,
	cpr_country 				= 			s.cpr_country,
	cpr_zip 					=		 	s.cpr_zip,
	cpr_phone1 					=			s.cpr_phone1, 
	cpr_mobile 					= 			s.cpr_mobile,
	cpr_fax 					=			s.cpr_fax,
	cpr_email 					=			s.cpr_email,
	cpr_status 					= 			s.cpr_status,
	cpr_created_by 				=			s.cpr_created_by, 
	cpr_created_date 			=			s.cpr_created_date,
	cpr_modified_by 			=			s.cpr_modified_by,
	cpr_modified_date 			=			s.cpr_modified_date,
	cpr_timestamp_value 		=			s.cpr_timestamp_value,
	cpr_cont_person 			=			s.cpr_cont_person,
	cpr_prosp_long_desc 		=			s.cpr_prosp_long_desc,
	cpr_industry 				=			s.cpr_industry,
	cpr_priority 				=			s.cpr_priority,
	cpr_region 					=			s.cpr_region,
	cpr_prosp_contact_name 		=			s.cpr_prosp_contact_name,
	cpr_registration_no 		=			s.cpr_registration_no,
	cpr_registration_type 		=			s.cpr_registration_type,
	cpr_address_id 				=			s.cpr_address_id,
	cpr_crm_flag 				=			s.cpr_crm_flag,
	cpr_segment 				=			s.cpr_segment,
	cpr_sp_code 				=			s.cpr_sp_code,
	cpr_cust_loyalty 			=			s.cpr_cust_loyalty,
	cpr_pannumber 				=			s.cpr_pannumber,
	cpr_job_title 				=			s.cpr_job_title,
	etlactiveind 				= 			1,
	etljobname 					= 			p_etljobname,
	envsourcecd 				= 			p_envsourcecd ,
	datasourcecd 				= 			p_datasourcecd ,
	etlupdatedatetime 			= 			NOW()	
    FROM stg.stg_cust_prospect_info s
    WHERE t.cpr_lo  			= s.cpr_lo
	AND t.cpr_prosp_cust_code 	= s.cpr_prosp_cust_code;

    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_CustProspectInfo
	(
		cpr_lo, 				cpr_prosp_cust_code, 		cpr_prosp_cust_name, 		cpr_prosp_custname_shd, 
		cpr_registration_dt, 	cpr_created_at, 			cpr_number_type, 			cpr_created_transaction, 
		cpr_addrline1, 			cpr_addrline2, 				cpr_addrline3, 				cpr_city, 
		cpr_state, 				cpr_country, 				cpr_zip, 					cpr_phone1, 
		cpr_mobile, 			cpr_fax, 					cpr_email, 					cpr_status, 
		cpr_created_by, 		cpr_created_date, 			cpr_modified_by, 			cpr_modified_date, 
		cpr_timestamp_value, 	cpr_cont_person, 			cpr_prosp_long_desc, 		cpr_industry, 
		cpr_priority, 			cpr_region, 				cpr_prosp_contact_name, 	cpr_registration_no, 
		cpr_registration_type, 	cpr_address_id, 			cpr_crm_flag, 				cpr_segment, 
		cpr_sp_code, 			cpr_cust_loyalty, 			cpr_pannumber, 				cpr_job_title, 
		etlactiveind, 			etljobname, 				envsourcecd, 				datasourcecd, 
		etlcreatedatetime
	)
	
    SELECT 
		s.cpr_lo, 					s.cpr_prosp_cust_code, 		s.cpr_prosp_cust_name, 		s.cpr_prosp_custname_shd, 
		s.cpr_registration_dt, 		s.cpr_created_at, 			s.cpr_number_type, 			s.cpr_created_transaction, 
		s.cpr_addrline1, 			s.cpr_addrline2, 			s.cpr_addrline3, 			s.cpr_city, 
		s.cpr_state, 				s.cpr_country, 				s.cpr_zip, 					s.cpr_phone1, 
		s.cpr_mobile, 				s.cpr_fax, 					s.cpr_email, 				s.cpr_status, 
		s.cpr_created_by, 			s.cpr_created_date, 		s.cpr_modified_by, 			s.cpr_modified_date, 
		s.cpr_timestamp_value, 		s.cpr_cont_person, 			s.cpr_prosp_long_desc, 		s.cpr_industry, 
		s.cpr_priority, 			s.cpr_region, 				s.cpr_prosp_contact_name, 	s.cpr_registration_no, 
		s.cpr_registration_type, 	s.cpr_address_id, 			s.cpr_crm_flag, 			s.cpr_segment, 
		s.cpr_sp_code, 				s.cpr_cust_loyalty, 		s.cpr_pannumber, 			s.cpr_job_title, 
		1, 							p_etljobname, 				p_envsourcecd, 				p_datasourcecd, 
		now()
	FROM stg.stg_cust_prospect_info s
    LEFT JOIN dwh.D_CustProspectInfo t
    ON 	s.cpr_lo  				= t.cpr_lo
	AND s.cpr_prosp_cust_code 	= t.cpr_prosp_cust_code 
    WHERE t.cpr_lo IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
 
	
	INSERT INTO raw.raw_cust_prospect_info
	(
		 cpr_lo, cpr_prosp_cust_code, cpr_prosp_cust_name, cpr_prosp_custname_shd, cpr_registration_dt, 
        cpr_created_at, cpr_cust_code, cpr_number_type, cpr_parent_cust_code, cpr_created_transaction, 
        cpr_supp_code, cpr_addrline1, cpr_addrline2, cpr_addrline3, cpr_city, cpr_state, cpr_country, 
        cpr_zip, cpr_phone1, cpr_phone2, cpr_mobile, cpr_fax, cpr_email, cpr_url, cpr_status, 
        cpr_created_by, cpr_created_date, cpr_modified_by, cpr_modified_date, cpr_timestamp_value,
        cpr_addnl1, cpr_addnl2, cpr_addnl3, cpr_cont_person, cpr_prosp_long_desc, cpr_industry, 
        cpr_priority, cpr_region, cpr_prosp_contact_name, cpr_registration_no, cpr_registration_type,
        cpr_address_id, cpr_crm_flag, cpr_segment, cpr_sp_code, cpr_cust_loyalty, cpr_pannumber, 
        cpr_job_title, etlcreateddatetime

	)
	SELECT 
		cpr_lo, cpr_prosp_cust_code, cpr_prosp_cust_name, cpr_prosp_custname_shd, cpr_registration_dt, 
        cpr_created_at, cpr_cust_code, cpr_number_type, cpr_parent_cust_code, cpr_created_transaction, 
        cpr_supp_code, cpr_addrline1, cpr_addrline2, cpr_addrline3, cpr_city, cpr_state, cpr_country, 
        cpr_zip, cpr_phone1, cpr_phone2, cpr_mobile, cpr_fax, cpr_email, cpr_url, cpr_status, 
        cpr_created_by, cpr_created_date, cpr_modified_by, cpr_modified_date, cpr_timestamp_value,
        cpr_addnl1, cpr_addnl2, cpr_addnl3, cpr_cont_person, cpr_prosp_long_desc, cpr_industry, 
        cpr_priority, cpr_region, cpr_prosp_contact_name, cpr_registration_no, cpr_registration_type,
        cpr_address_id, cpr_crm_flag, cpr_segment, cpr_sp_code, cpr_cust_loyalty, cpr_pannumber, 
        cpr_job_title, etlcreateddatetime
	FROM stg.stg_cust_prospect_info;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
		
END;
$$;


ALTER PROCEDURE dwh.usp_d_custprospectinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_date(date, date); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_date(IN p_startdate date, IN p_enddate date)
    LANGUAGE plpgsql
    AS $$
DECLARE v_enddate INT; v_NextFourYearDate DATE; v_MaxDate DATE;  
BEGIN
	v_NextFourYearDate := INTERVAL '4 YEAR' +NOW();
	
 	SELECT MAX(dateactual) INTO v_MaxDate FROM dwh.D_Date;  
	
	IF v_maxdate IS NULL THEN
	
		IF p_startdate IS NULL THEN
			p_startdate := '2017-01-01' ;
		END IF;	
		
		IF p_enddate IS NULL THEN 
		p_enddate := v_NextFourYearDate;
		END IF;
		
		SELECT ABS(DATE_PART('day', p_startdate::timestamp - p_enddate::timestamp)) INTO v_enddate;
	END IF;
		
	IF v_maxdate < v_NextFourYearDate THEN
		v_maxdate := INTERVAL '1 DAY' + v_maxdate;
		p_startdate := v_maxdate;
		SELECT ABS(DATE_PART('day', p_startdate::timestamp - v_NextFourYearDate::timestamp)) INTO v_enddate;	
	END IF;
	
	INSERT INTO dwh.d_date
	(
		datekey, dateactual, epoch, daysuffix, dayname, dayofweek, dayofmonth, dayofquarter, dayofyear, weekofmonth, 
		weekofyear, weekofyeariso, monthactual, monthname, monthnameabbreviated, quarteractual, quartername, yearactual, firstdayofweek, lastdayofweek, 
		firstdayofmonth, lastdayofmonth, firstdayofquarter, lastdayofquarter, firstdayofyear, lastdayofyear,mmyyyy, mmddyyyy, weekendindr	
	)
	SELECT 
		TO_CHAR(datum, 'yyyymmdd')::INT AS date_dim_id,
		datum AS date_actual,
		EXTRACT(EPOCH FROM datum) AS epoch,
		TO_CHAR(datum, 'fmDDth') AS day_suffix,
		TO_CHAR(datum, 'TMDay') AS day_name,
		EXTRACT(ISODOW FROM datum) AS day_of_week,
		EXTRACT(DAY FROM datum) AS day_of_month,
		datum - DATE_TRUNC('quarter', datum)::DATE + 1 AS day_of_quarter,
		EXTRACT(DOY FROM datum) AS day_of_year,
		TO_CHAR(datum, 'W')::INT AS week_of_month,
		EXTRACT(WEEK FROM datum) AS week_of_year,
		EXTRACT(ISOYEAR FROM datum) || TO_CHAR(datum, '"-W"IW-') || EXTRACT(ISODOW FROM datum) AS week_of_year_iso,
		EXTRACT(MONTH FROM datum) AS month_actual,
		TO_CHAR(datum, 'TMMonth') AS month_name,
		TO_CHAR(datum, 'Mon') AS month_name_abbreviated,
		EXTRACT(QUARTER FROM datum) AS quarter_actual,
		CASE
		   WHEN EXTRACT(QUARTER FROM datum) = 1 THEN 'First'
		   WHEN EXTRACT(QUARTER FROM datum) = 2 THEN 'Second'
		   WHEN EXTRACT(QUARTER FROM datum) = 3 THEN 'Third'
		   WHEN EXTRACT(QUARTER FROM datum) = 4 THEN 'Fourth'
		   END AS quarter_name,
		EXTRACT(YEAR FROM datum) AS year_actual,
		datum + (1 - EXTRACT(ISODOW FROM datum))::INT AS first_day_of_week,
		datum + (7 - EXTRACT(ISODOW FROM datum))::INT AS last_day_of_week,
		datum + (1 - EXTRACT(DAY FROM datum))::INT AS first_day_of_month,
		(DATE_TRUNC('MONTH', datum) + INTERVAL '1 MONTH - 1 day')::DATE AS last_day_of_month,
		DATE_TRUNC('quarter', datum)::DATE AS first_day_of_quarter,
		(DATE_TRUNC('quarter', datum) + INTERVAL '3 MONTH - 1 day')::DATE AS last_day_of_quarter,
		TO_DATE(EXTRACT(YEAR FROM datum) || '-01-01', 'YYYY-MM-DD') AS first_day_of_year,
		TO_DATE(EXTRACT(YEAR FROM datum) || '-12-31', 'YYYY-MM-DD') AS last_day_of_year,
		TO_CHAR(datum, 'mmyyyy') AS mmyyyy,
		TO_CHAR(datum, 'mmddyyyy') AS mmddyyyy,
		CASE
		   WHEN EXTRACT(ISODOW FROM datum) IN (6, 7) THEN TRUE
		   ELSE FALSE
		   END AS weekend_indr
	FROM (SELECT p_startdate::DATE + SEQUENCE.DAY AS datum
		  FROM GENERATE_SERIES(0, v_enddate) AS SEQUENCE (DAY)
		  GROUP BY SEQUENCE.DAY) DQ
	ORDER BY 1;
	
	UPDATE dwh.d_date
	SET
		Rolling12MonthInd = (CASE WHEN 	dateactual >= (interval '-1 YEAR' + date_trunc('month', NOW()::date))::date AND
										dateactual <= (date_trunc('month', NOW()::date) + interval '- 1 day')::date THEN 1 ELSE 0 END)::BIT,
		PriorRolling12MonthInd = (CASE WHEN dateactual >= (interval '-2 YEAR' + date_trunc('month', NOW()::date))::date AND
											dateactual <= (date_trunc('month', NOW()::date) + interval '-1 YEAR - 1 day')::date THEN 1 ELSE 0 END)::BIT,		
		PriorPriorRolling12MonthInd = (CASE WHEN 	dateactual >= (interval '-3 YEAR' + date_trunc('month', NOW()::date))::date AND
													dateactual <= (date_trunc('month', NOW()::date) + interval '-2 YEAR - 1 day')::date THEN 1 ELSE 0 END)::BIT,
		Rolling24MonthInd = (CASE WHEN 	dateactual >= (interval '-2 YEAR' + date_trunc('month', NOW()::date))::date AND
										dateactual <= (date_trunc('month', NOW()::date) + interval '-1 YEAR - 1 day')::date THEN 1 ELSE 0 END)::BIT,		
		Rolling36MonthInd = (CASE WHEN 	dateactual >= (interval '-3 YEAR' + date_trunc('month', NOW()::date))::date AND
										dateactual <= (date_trunc('month', NOW()::date) + interval '-2 YEAR - 1 day')::date THEN 1 ELSE 0 END)::BIT,	
		Rolling2YearInd = (CASE WHEN 	DATE_PART('YEAR',dateactual::DATE) >= DATE_PART('YEAR',(interval '-2 YEAR' + date_trunc('month', NOW()::date))::date) AND
										DATE_PART('YEAR',dateactual::DATE) <= DATE_PART('YEAR',(date_trunc('month', NOW()::date) + interval '-1 YEAR - 1 day')::date) THEN 1 ELSE 0 END)::BIT,
		Rolling3YearInd = (CASE WHEN 	DATE_PART('YEAR',dateactual::DATE) >= DATE_PART('YEAR',(interval '-3 YEAR' + date_trunc('month', NOW()::date))::date) AND
										DATE_PART('YEAR',dateactual::DATE) <= DATE_PART('YEAR',(date_trunc('month', NOW()::date) + interval '-2 YEAR - 1 day')::date) THEN 1 ELSE 0 END)::BIT,		
		Rolling6MonthInd = (CASE WHEN 	dateactual >= (date_trunc('month', NOW()::date) + interval '-6 month')::date AND
										dateactual <= (date_trunc('month', NOW()::date) + interval '- 1 day')::date THEN 1 ELSE 0 END)::BIT,
		Roling3MonthInd = (CASE WHEN 	dateactual >= (date_trunc('month', NOW()::date) + interval '-3 month')::date AND
										dateactual <= (date_trunc('month', NOW()::date) + interval '- 1 day')::date THEN 1 ELSE 0 END)::BIT,	
		CurrentMonthInd = (CASE WHEN 	EXTRACT(MONTH FROM dateactual) = EXTRACT(MONTH FROM NOW()::DATE) THEN 1 ELSE 0 END)::BIT,
		PriorYearCurrentMonthInd = (CASE WHEN 	EXTRACT(MONTH FROM dateactual) = EXTRACT(MONTH FROM (NOW() + INTERVAL '-1 YEAR')::DATE) THEN 1 ELSE 0 END)::BIT,
		Future6MonthInd = (CASE WHEN dateactual >= date_trunc('month', NOW()::date) + interval '1 month' AND dateactual <=	date_trunc('month', NOW()::date) + interval '7 month - 1 DAY' THEN 1 ELSE 0 END)::BIT,	
		Future5MonthInd = (CASE WHEN dateactual >= date_trunc('month', NOW()::date) + interval '1 month' AND dateactual <=	date_trunc('month', NOW()::date) + interval '6 month - 1 DAY' THEN 1 ELSE 0 END)::BIT,
		Future4MonthInd = (CASE WHEN dateactual >= date_trunc('month', NOW()::date) + interval '1 month' AND dateactual <=	date_trunc('month', NOW()::date) + interval '5 month - 1 DAY' THEN 1 ELSE 0 END)::BIT,
		Future3MonthInd = (CASE WHEN dateactual >= date_trunc('month', NOW()::date) + interval '1 month' AND dateactual <=	date_trunc('month', NOW()::date) + interval '4 month - 1 DAY' THEN 1 ELSE 0 END)::BIT,
		Future12MonthInd = (CASE WHEN dateactual >= date_trunc('month', NOW()::date) + interval '1 month' AND dateactual <= date_trunc('month', NOW()::date) + interval '13 month - 1 DAY' THEN 1 ELSE 0 END)::BIT,
		YearToLastCompletedMonthInd = (CASE WHEN DATE_PART('YEAR',dateactual::DATE) = DATE_PART('YEAR',NOW()::DATE + interval '-1 month') AND DATE_PART('MONTH',dateactual::DATE) <= DATE_PART('MONTH',NOW()::DATE + interval '-1 month') THEN 1 ELSE 0 END)::BIT,
		PriorYearToLastCompletedMonthInd = (CASE WHEN DATE_PART('YEAR',dateactual::DATE) = DATE_PART('YEAR',NOW()::DATE + interval '-1 month - 1 YEAR') AND DATE_PART('MONTH',dateactual::DATE) <= DATE_PART('MONTH',NOW()::DATE + interval '-1 month') THEN 1 ELSE 0 END)::BIT,
		PriorPriorYearToLastCompletedMonthInd = (CASE WHEN DATE_PART('YEAR',dateactual::DATE) = DATE_PART('YEAR',NOW()::DATE + interval '-1 month - 2 YEAR') AND DATE_PART('MONTH',dateactual::DATE) <= DATE_PART('MONTH',NOW()::DATE + interval '-1 month') THEN 1 ELSE 0 END)::BIT,
		FullYearInd = (CASE WHEN dateactual BETWEEN TO_DATE(DATE_PART('YEAR',NOW()) || '-01-01', 'YYYY-MM-DD')::date AND (NOW() + INTERVAL '- 1 DAY')::date THEN 1 ELSE 0 END)::BIT,
		PriorFullYearInd = (CASE WHEN dateactual BETWEEN TO_DATE(DATE_PART('YEAR',NOW()+ INTERVAL '- 1 YEAR') || '-01-01', 'YYYY-MM-DD')::date AND (NOW() + INTERVAL '- 1 DAY - 1 YEAR')::date THEN 1 ELSE 0 END)::BIT,
		MonthToDateInd = (CASE WHEN dateactual >= date_trunc('month', p_startdate::date) AND dateactual <= NOW() + INTERVAL '- 1 DAY' THEN 1 ELSE 0 END)::BIT,
		PriorYearMonthToDateInd = (CASE WHEN dateactual >= (date_trunc('month', p_startdate::date) + INTERVAL '- 1 YEAR')::DATE AND dateactual <= (NOW() + INTERVAL '- 1 YEAR')::DATE THEN 1 ELSE 0 END)::BIT,
		YearToDateInd = (CASE WHEN dateactual >= TO_DATE(DATE_PART('YEAR',NOW()) || '-01-01', 'YYYY-MM-DD')::date AND dateactual <= NOW() + INTERVAL '- 1 DAY' THEN 1 ELSE 0 END)::BIT,
		PriorYearToDateInd = (CASE WHEN dateactual BETWEEN TO_DATE(DATE_PART('YEAR',NOW() + INTERVAL '- 1 YEAR') || '-01-01', 'YYYY-MM-DD')::date AND NOW() + INTERVAL '- 1 DAY - 1 YEAR' THEN 1 ELSE 0 END)::BIT,
		CurrentYearInd = (CASE WHEN DATE_PART('YEAR',dateactual::DATE) = DATE_PART('YEAR',(NOW() + INTERVAL '- 1 MONTH')) THEN 1 ELSE 0 END)::BIT,
		PriorYearInd = (CASE WHEN DATE_PART('YEAR',dateactual::DATE) = DATE_PART('YEAR',(NOW() + INTERVAL '- 1 MONTH - 1 YEAR')) THEN 1 ELSE 0 END)::BIT,
		PriorMonthInd = (CASE WHEN TO_CHAR(p_startdate, 'yyyyMM') = TO_CHAR(NOW() + INTERVAL '- 1 MONTH', 'yyyyMM') THEN 1 ELSE 0 END)::BIT,
		PriorPriorYearToDateInd = (CASE WHEN dateactual BETWEEN TO_DATE(DATE_PART('YEAR',NOW() + INTERVAL '- 2 YEAR') || '-01-01', 'YYYY-MM-DD')::date AND NOW() + INTERVAL '- 1 DAY - 2 YEAR' THEN 1 ELSE 0 END)::BIT,
		PriorPriorYearMonthToDateInd = (CASE WHEN dateactual >= (date_trunc('month', p_startdate::date) + INTERVAL '- 2 YEAR')::DATE AND dateactual <= (NOW() + INTERVAL '- 2 YEAR')::DATE THEN 1 ELSE 0 END)::BIT,
		PriorPriorYearInd = (CASE WHEN DATE_PART('YEAR',dateactual::DATE) = DATE_PART('YEAR',(NOW() + INTERVAL '- 1 MONTH - 2 YEAR')) THEN 1 ELSE 0 END)::BIT,
		Rolling365DaysInd = (CASE WHEN dateactual BETWEEN NOW() + INTERVAL '- 1 YEAR' AND NOW() THEN 1 ELSE 0 END)::BIT,
		finacialyearind = (CASE WHEN dateactual BETWEEN TO_DATE(EXTRACT(YEAR FROM NOW()) || '-04-01', 'YYYY-MM-DD') AND TO_DATE(EXTRACT(YEAR FROM NOW() + interval '1 YEAR') || '-03-31', 'YYYY-MM-DD') THEN 1 ELSE 0 END)::BIT,
		prioryearfinancialyearind = (CASE WHEN dateactual BETWEEN TO_DATE(EXTRACT(YEAR FROM NOW() + interval '-1 YEAR') || '-04-01', 'YYYY-MM-DD') AND TO_DATE(EXTRACT(YEAR FROM NOW()) || '-03-31', 'YYYY-MM-DD') THEN 1 ELSE 0 END)::BIT;
END;
$$;


ALTER PROCEDURE dwh.usp_d_date(IN p_startdate date, IN p_enddate date) OWNER TO proconnect;

--
-- Name: usp_d_division(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_division(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename 
    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
        
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_div_division_hdr;

    UPDATE dwh.d_division t
    SET 
        div_desc   =   s.wms_div_desc, 
        div_status   =   s.wms_div_status, 
        div_type   =   s.wms_div_type, 
        div_reason_code   =   s.wms_div_reason_code, 
        div_user_def1   =   s.wms_div_user_def1, 
        div_user_def2   =   s.wms_div_user_def2, 
        div_user_def3   =   s.wms_div_user_def3, 
        div_timestamp   =   s.wms_div_timestamp, 
        div_created_by   =   s.wms_div_created_by, 
        div_created_dt   =   s.wms_div_created_dt, 
        div_modified_by   =   s.wms_div_modified_by, 
        div_modified_dt   =   s.wms_div_modified_dt, 
        etlactiveind           =     1,
        etljobname             =     p_etljobname,
        envsourcecd            =     p_envsourcecd,
        datasourcecd           =     p_datasourcecd,
        etlupdatedatetime      =     NOW()  
    FROM stg.stg_wms_div_division_hdr s
    WHERE t.div_code   =   s.wms_div_code
    AND  t.div_ou   =   s.wms_div_ou;
        
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_division
    (div_ou,div_code,div_desc,div_status,div_type,div_reason_code,div_user_def1,div_user_def2,div_user_def3,div_timestamp,div_created_by,div_created_dt,div_modified_by,div_modified_dt, etlactiveind,
        etljobname,         envsourcecd,    datasourcecd,       etlcreatedatetime
    )
    
    SELECT 
       s.wms_div_ou, s.wms_div_code, s.wms_div_desc, s.wms_div_status, s.wms_div_type, s.wms_div_reason_code, s.wms_div_user_def1, s.wms_div_user_def2, s.wms_div_user_def3, s.wms_div_timestamp, s.wms_div_created_by, s.wms_div_created_dt, s.wms_div_modified_by, 
       s.wms_div_modified_dt,
        1,      p_etljobname,       p_envsourcecd,      p_datasourcecd,         now()
    FROM stg.stg_wms_div_division_hdr s
    LEFT JOIN dwh.d_division t
    ON    s.wms_div_code = t.div_code 
    AND      s.wms_div_ou= t.div_ou 
        
    WHERE t.div_code   IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    INSERT INTO raw.raw_wms_div_division_hdr

    (
     wms_div_ou, wms_div_code, wms_div_desc, wms_div_status, wms_div_type, wms_div_reason_code, 
     wms_div_user_def1, wms_div_user_def2, wms_div_user_def3, wms_div_timestamp, wms_div_created_by, 
     wms_div_created_dt, wms_div_modified_by, wms_div_modified_dt, etlcreateddatetime
    )
    SELECT
     wms_div_ou, wms_div_code, wms_div_desc, wms_div_status, wms_div_type, wms_div_reason_code, 
     wms_div_user_def1, wms_div_user_def2, wms_div_user_def3, wms_div_timestamp, wms_div_created_by, 
     wms_div_created_dt, wms_div_modified_by, wms_div_modified_dt, etlcreateddatetime
    FROM stg.stg_wms_div_division_hdr;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
    
    --SELECT COUNT(*) INTO InsCnt FROM dwh.usp_d_division;
END;
$$;


ALTER PROCEDURE dwh.usp_d_division(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_divloclist(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_divloclist(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_div_location_list_dtl;

	UPDATE dwh.d_divloclist t
    SET 
		div_hdr_key					= COALESCE(d.div_key,-1),
		div_loc_hdr_key				= COALESCE(l.loc_key,-1),
		div_loc_code            = wms_div_loc_code,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_div_location_list_dtl s
	LEFT JOIN dwh.d_division d
		ON	d.div_ou  			= s.wms_div_ou
		AND	d.div_code 			= s.wms_div_code
	LEFT JOIN dwh.d_location l
		ON  s.wms_div_loc_code 	= l.loc_code
		AND s.wms_div_ou		= l.loc_ou
    WHERE 	t.div_ou  			= s.wms_div_ou
		AND t.div_code 			= s.wms_div_code
		AND t.div_lineno 		= s.wms_div_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_divloclist
	(
		div_hdr_key		, div_loc_hdr_key	,
		div_ou			, div_code			, div_lineno	, div_loc_code	,
		etlactiveind	, etljobname		, envsourcecd	, datasourcecd	, 
		etlcreatedatetime
	)
	
    SELECT
		 COALESCE(d.div_key,-1)	, COALESCE(l.loc_key,-1),
        	s.wms_div_ou		, s.wms_div_code		, s.wms_div_lineno	, s.wms_div_loc_code,
					1			, p_etljobname			, p_envsourcecd		, p_datasourcecd	,
				NOW()
	FROM stg.stg_wms_div_location_list_dtl s
	LEFT JOIN dwh.d_division d
		ON	d.div_ou  			= s.wms_div_ou
		AND	d.div_code 			= s.wms_div_code
	LEFT JOIN dwh.d_location l
		ON  s.wms_div_loc_code 	= l.loc_code
		AND s.wms_div_ou		= l.loc_ou
    LEFT JOIN dwh.d_divloclist t
    	ON 	t.div_ou  			= s.wms_div_ou
		AND t.div_code 			= s.wms_div_code
		AND t.div_lineno 		= s.wms_div_lineno 
    	WHERE t.div_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_div_location_list_dtl
	(
		wms_div_ou, wms_div_code, wms_div_lineno, wms_div_loc_code, etlcreateddatetime
	
	)
	SELECT 
		 wms_div_ou, wms_div_code, wms_div_lineno, wms_div_loc_code, etlcreateddatetime
	FROM stg.stg_wms_div_location_list_dtl;	
	END IF; 
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
  
END;
$$;


ALTER PROCEDURE dwh.usp_d_divloclist(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_employeeheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_employeeheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_employee_hdr;

	UPDATE dwh.d_employeeheader t
    SET 
		 emp_description			= s.wms_emp_description
		,emp_status					= s.wms_emp_status
		,emp_reason_code			= s.wms_emp_reason_code
		,emp_first_name				= s.wms_emp_first_name
		,emp_last_name				= s.wms_emp_last_name
		,emp_middle_name			= s.wms_emp_middle_name
		,emp_ssn_id_no				= s.wms_emp_ssn_id_no
		,emp_gender					= s.wms_emp_gender
		,emp_owner_type				= s.wms_emp_owner_type
		,emp_nationality			= s.wms_emp_nationality
		,emp_agency_id				= s.wms_emp_agency_id
		,emp_religion				= s.wms_emp_religion
		,emp_agency_contact_num		= s.wms_emp_agency_contact_num
		,emp_dob					= s.wms_emp_dob
		,emp_date_of_confirmation	= s.wms_emp_date_of_confirmation
		,emp_user					= s.wms_emp_user
		,emp_department				= s.wms_emp_department
		,emp_designation            = s.wms_emp_designation
		,emp_date_of_joining        = s.wms_emp_date_of_joining
		,emp_blood_group            = s.wms_emp_blood_group
		,emp_cost_center            = s.wms_emp_cost_center
		,emp_address_line1          = s.wms_emp_address_line1
		,emp_address_line2          = s.wms_emp_address_line2
		,emp_address_line3          = s.wms_emp_address_line3
		,emp_city                   = s.wms_emp_city
		,emp_state                  = s.wms_emp_state
		,emp_country                = s.wms_emp_country
		,emp_postal_code            = s.wms_emp_postal_code
		,emp_primary_phone          = s.wms_emp_primary_phone
		,emp_secondary_phone        = s.wms_emp_secondary_phone
		,emp_email                  = s.wms_emp_email
		,emp_emergency_contact_pers = s.wms_emp_emergency_contact_pers
		,emp_emergency_relationship = s.wms_emp_emergency_relationship
		,emp_phone                  = s.wms_emp_phone
		,emp_default_location       = s.wms_emp_default_location
		,emp_current_location       = s.wms_emp_current_location
		,emp_current_location_since = s.wms_emp_current_location_since
		,emp_shift_pref             = s.wms_emp_shift_pref
		,emp_grade                  = s.wms_emp_grade
		,emp_created_by             = s.wms_emp_created_by
		,emp_created_date           = s.wms_emp_created_date
		,emp_modified_by            = s.wms_emp_modified_by
		,emp_modified_date			= s.wms_emp_modified_date
		,emp_timestamp				= s.wms_emp_timestamp
		,emp_given_name				= s.wms_emp_given_name
		,emp_gen_info_grade			= s.wms_emp_gen_info_grade
		,emp_employment				= s.wms_emp_employment
		,emp_rate_tariffid			= s.wms_emp_rate_tariffid
		,emp_intransit				= s.wms_emp_intransit
		,emp_route					= s.wms_emp_route
		,emp_and					= s.wms_emp_and
		,emp_between				= s.wms_emp_between
		,emp_rate_tariffcontid		= s.wms_emp_rate_tariffcontid
		,emp_raise_int_drfbill		= s.wms_emp_raise_int_drfbill,
		etlactiveind 			    = 1,
		etljobname 				    = p_etljobname,
		envsourcecd 			    = p_envsourcecd ,
		datasourcecd 			    = p_datasourcecd ,
		etlupdatedatetime 		    = NOW()	
    FROM stg.stg_wms_employee_hdr s
    WHERE t.emp_employee_code  		= s.wms_emp_employee_code
	AND   t.emp_ou 			        = s.wms_emp_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_employeeheader
	(
		emp_employee_code,         emp_ou,                   emp_description,         emp_status,                emp_reason_code,
        emp_first_name,            emp_last_name,            emp_middle_name,         emp_ssn_id_no,             emp_gender,
        emp_owner_type,            emp_nationality,          emp_agency_id,           emp_religion,              emp_agency_contact_num,
        emp_dob,                   emp_date_of_confirmation, emp_user,                emp_department,            emp_designation,
        emp_date_of_joining,       emp_blood_group,          emp_cost_center,         emp_address_line1,         emp_address_line2,
        emp_address_line3,         emp_city,                 emp_state,               emp_country,               emp_postal_code,
        emp_primary_phone,         emp_secondary_phone,      emp_email,               emp_emergency_contact_pers,emp_emergency_relationship,
        emp_phone,                 emp_default_location,     emp_current_location,    emp_current_location_since,emp_shift_pref,
        emp_grade,                 emp_created_by,           emp_created_date,        emp_modified_by,           emp_modified_date,
        emp_timestamp,             emp_given_name,           emp_gen_info_grade,      emp_employment,            emp_rate_tariffid,
        emp_intransit,             emp_route,                emp_and,                 emp_between,               emp_rate_tariffcontid,
        emp_raise_int_drfbill,	   etlactiveind,             etljobname, 		      envsourcecd, 	             datasourcecd, 			
        etlcreatedatetime
	)
	
    SELECT 
		s.wms_emp_employee_code,         s.wms_emp_ou,                   s.wms_emp_description,         s.wms_emp_status,                s.wms_emp_reason_code,
        s.wms_emp_first_name,            s.wms_emp_last_name,            s.wms_emp_middle_name,         s.wms_emp_ssn_id_no,             s.wms_emp_gender,
        s.wms_emp_owner_type,            s.wms_emp_nationality,          s.wms_emp_agency_id,           s.wms_emp_religion,              s.wms_emp_agency_contact_num,
        s.wms_emp_dob,                   s.wms_emp_date_of_confirmation, s.wms_emp_user,                s.wms_emp_department,            s.wms_emp_designation,
        s.wms_emp_date_of_joining,       s.wms_emp_blood_group,          s.wms_emp_cost_center,         s.wms_emp_address_line1,         s.wms_emp_address_line2,
        s.wms_emp_address_line3,         s.wms_emp_city,                 s.wms_emp_state,               s.wms_emp_country,               s.wms_emp_postal_code,
        s.wms_emp_primary_phone,         s.wms_emp_secondary_phone,      s.wms_emp_email,               s.wms_emp_emergency_contact_pers,s.wms_emp_emergency_relationship,
        s.wms_emp_phone,                 s.wms_emp_default_location,     s.wms_emp_current_location,    s.wms_emp_current_location_since,s.wms_emp_shift_pref,
        s.wms_emp_grade,                 s.wms_emp_created_by,           s.wms_emp_created_date,        s.wms_emp_modified_by,           s.wms_emp_modified_date,
        s.wms_emp_timestamp,             s.wms_emp_given_name,           s.wms_emp_gen_info_grade,      s.wms_emp_employment,            s.wms_emp_rate_tariffid,
        s.wms_emp_intransit,             s.wms_emp_route,                s.wms_emp_and,                 s.wms_emp_between,               s.wms_emp_rate_tariffcontid,
        s.wms_emp_raise_int_drfbill,	 1,								p_etljobname, 		            p_envsourcecd, 	                 p_datasourcecd, 			
        now()
	FROM stg.stg_wms_employee_hdr s
    LEFT JOIN dwh.d_employeeheader t
    ON 	  t.emp_employee_code  		= s.wms_emp_employee_code
	AND   t.emp_ou 			        = s.wms_emp_ou
    WHERE t.emp_employee_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_employee_hdr
	(
         wms_emp_employee_code, wms_emp_ou, wms_emp_description, wms_emp_status, 
        wms_emp_reason_code, wms_emp_first_name, wms_emp_last_name, wms_emp_middle_name, 
        wms_emp_group, wms_emp_ssn_id_no, wms_emp_gender, wms_emp_owner_type, wms_emp_nationality,
        wms_emp_agency_id, wms_emp_religion, wms_emp_agency_contact_num, wms_emp_dob, wms_emp_effective_from, 
        wms_emp_effective_to, wms_emp_date_of_confirmation, wms_emp_user, wms_emp_department, 
        wms_emp_date_of_retirement, wms_emp_designation, wms_emp_date_of_joining, wms_emp_blood_group, 
        wms_emp_cost_center, wms_emp_height, wms_emp_height_uom, wms_emp_weight, wms_emp_weight_uom, 
        wms_emp_address_line1, wms_emp_address_line2, wms_emp_address_line3, wms_emp_unique_address_id,
        wms_emp_city, wms_emp_state, wms_emp_country, wms_emp_postal_code, wms_emp_primary_phone, 
        wms_emp_secondary_phone, wms_emp_email, wms_emp_fax, wms_emp_emergency_contact_pers, 
        wms_emp_emergency_relationship, wms_emp_phone, wms_emp_default_location, wms_emp_current_location, 
        wms_emp_current_location_since, wms_emp_continuous_drive_hrs, wms_emp_total_limit_day,
        wms_emp_total_limit_week, wms_emp_days_off_week, wms_emp_work_days_week, wms_emp_shift_pref, 
        wms_emp_from_time, wms_emp_to_time, wms_emp_grade, wms_emp_preferred_handler, wms_emp_created_by,
        wms_emp_created_date, wms_emp_modified_by, wms_emp_modified_date, wms_emp_timestamp, wms_emp_userdefined1,
        wms_emp_userdefined2, wms_emp_userdefined3, wms_emp_given_name, wms_emp_gen_info_grade, wms_emp_employment,
        wms_emp_rate_tariffid, wms_emp_intransit, wms_emp_route, wms_emp_and, wms_emp_between,
        wms_emp_rate_tariffcontid, wms_emp_raise_int_drfbill, wms_emp_rest_day, wms_emp_last_bil_date, 
        wms_emp_last_prev_bil_date, etlcreateddatetime
	
	)
	SELECT 
 wms_emp_employee_code, wms_emp_ou, wms_emp_description, wms_emp_status, 
        wms_emp_reason_code, wms_emp_first_name, wms_emp_last_name, wms_emp_middle_name, 
        wms_emp_group, wms_emp_ssn_id_no, wms_emp_gender, wms_emp_owner_type, wms_emp_nationality,
        wms_emp_agency_id, wms_emp_religion, wms_emp_agency_contact_num, wms_emp_dob, wms_emp_effective_from, 
        wms_emp_effective_to, wms_emp_date_of_confirmation, wms_emp_user, wms_emp_department, 
        wms_emp_date_of_retirement, wms_emp_designation, wms_emp_date_of_joining, wms_emp_blood_group, 
        wms_emp_cost_center, wms_emp_height, wms_emp_height_uom, wms_emp_weight, wms_emp_weight_uom, 
        wms_emp_address_line1, wms_emp_address_line2, wms_emp_address_line3, wms_emp_unique_address_id,
        wms_emp_city, wms_emp_state, wms_emp_country, wms_emp_postal_code, wms_emp_primary_phone, 
        wms_emp_secondary_phone, wms_emp_email, wms_emp_fax, wms_emp_emergency_contact_pers, 
        wms_emp_emergency_relationship, wms_emp_phone, wms_emp_default_location, wms_emp_current_location, 
        wms_emp_current_location_since, wms_emp_continuous_drive_hrs, wms_emp_total_limit_day,
        wms_emp_total_limit_week, wms_emp_days_off_week, wms_emp_work_days_week, wms_emp_shift_pref, 
        wms_emp_from_time, wms_emp_to_time, wms_emp_grade, wms_emp_preferred_handler, wms_emp_created_by,
        wms_emp_created_date, wms_emp_modified_by, wms_emp_modified_date, wms_emp_timestamp, wms_emp_userdefined1,
        wms_emp_userdefined2, wms_emp_userdefined3, wms_emp_given_name, wms_emp_gen_info_grade, wms_emp_employment,
        wms_emp_rate_tariffid, wms_emp_intransit, wms_emp_route, wms_emp_and, wms_emp_between,
        wms_emp_rate_tariffcontid, wms_emp_raise_int_drfbill, wms_emp_rest_day, wms_emp_last_bil_date, 
        wms_emp_last_prev_bil_date, etlcreateddatetime 		
	FROM stg.stg_wms_employee_hdr;
END IF; 
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
  
END;
$$;


ALTER PROCEDURE dwh.usp_d_employeeheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_employeelicense(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_employeelicense(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_employee_license_dtl;

	UPDATE dwh.d_employeelicense t
    SET 
			emp_license_type			=	s.wms_emp_license_type,			
			emp_license_num				=	s.wms_emp_license_num,
			emp_description				=	s.wms_emp_description,
			emp_issued_date				=	s.wms_emp_issued_date,
			emp_valid_from				=	s.wms_emp_valid_from,
			emp_valid_till				=	s.wms_emp_valid_till,
			emp_issuing_authority		=	s.wms_emp_issuing_authority,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_employee_license_dtl s
    WHERE	t.emp_employee_code			=	s.wms_emp_employee_code
	AND		t.emp_ou 					=	s.wms_emp_ou
	AND     t.emp_lineno				=   s.wms_emp_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_employeelicense
	(
		emp_employee_code				,emp_ou							,emp_lineno						,emp_license_type
		,emp_license_num				,emp_description				,emp_issued_date				,emp_valid_from
		,emp_valid_till					,emp_issuing_authority
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		wms_emp_employee_code				,wms_emp_ou								,wms_emp_lineno						,wms_emp_license_type
		,wms_emp_license_num				,wms_emp_description					,wms_emp_issued_date				,wms_emp_valid_from
		,wms_emp_valid_till					,wms_emp_issuing_authority
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_employee_license_dtl s
    LEFT JOIN dwh.d_employeelicense t
    ON 	s.wms_emp_employee_code  		= t.emp_employee_code
	AND s.wms_emp_ou 					= t.emp_ou
	AND s.wms_emp_lineno				= t.emp_lineno
    WHERE t.emp_employee_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_employee_license_dtl
	(
		wms_emp_employee_code				,wms_emp_ou								,wms_emp_lineno						,wms_emp_license_type
		,wms_emp_license_num				,wms_emp_description					,wms_emp_issued_date				,wms_emp_valid_from
		,wms_emp_valid_till					,wms_emp_issuing_authority
		,etlcreateddatetime
	)
	SELECT 
		wms_emp_employee_code				,wms_emp_ou								,wms_emp_lineno						,wms_emp_license_type
		,wms_emp_license_num				,wms_emp_description					,wms_emp_issued_date				,wms_emp_valid_from
		,wms_emp_valid_till					,wms_emp_issuing_authority
		,etlcreateddatetime
	FROM stg.stg_wms_employee_license_dtl;
	END IF; 
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_employeelicense(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_employeelocation(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_employeelocation(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_employee_location_dtl;

	UPDATE dwh.D_EmployeeLocation t
    SET 
		 emp_geo_type 			= s.wms_emp_geo_type
		,emp_division_location 	= s.wms_emp_division_location
		,etlactiveind 			= 1
		,etljobname 			= p_etljobname
		,envsourcecd 			= p_envsourcecd 
		,datasourcecd 			= p_datasourcecd
		,etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_employee_location_dtl s
    WHERE t.emp_employee_code 	= s.wms_emp_employee_code
	AND	t.emp_ou 				= s.wms_emp_ou
	AND t.emp_lineno			= s.wms_emp_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_EmployeeLocation
	(
		emp_employee_code,			emp_ou			,emp_lineno,		emp_geo_type		,emp_division_location,
		etlactiveind,				etljobname		,envsourcecd		,datasourcecd,
		etlcreatedatetime
	)
	
    SELECT 
		s.wms_emp_employee_code,	s.wms_emp_ou	,s.wms_emp_lineno,	s.wms_emp_geo_type	,s.wms_emp_division_location,		
		1,							p_etljobname	,p_envsourcecd		,p_datasourcecd,
		NOW()
	FROM stg.stg_wms_employee_location_dtl s
    LEFT JOIN dwh.D_EmployeeLocation t
    ON 	s.wms_emp_employee_code = t.emp_employee_code
	AND s.wms_emp_ou 			= t.emp_ou
	AND s.wms_emp_lineno 		= t.emp_lineno
    WHERE t.emp_employee_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
 
	
	INSERT INTO raw.raw_wms_employee_location_dtl
	(
		wms_emp_employee_code,wms_emp_ou,wms_emp_lineno,wms_emp_geo_type,wms_emp_division_location, etlcreateddatetime	
	)
	SELECT 
		wms_emp_employee_code,wms_emp_ou,wms_emp_lineno,wms_emp_geo_type,wms_emp_division_location, etlcreateddatetime
	FROM stg.stg_wms_employee_location_dtl;
	END IF;
	
	EXCEPTION WHEN others THEN       
       
    get stacked diagnostics p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,null);
    
        
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_employeelocation(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_employeeskills(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_employeeskills(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_employee_skills_dtl;

	UPDATE dwh.d_employeeskills t
    SET 
		 emp_skill_code 		= s.wms_emp_skill_code
		,emp_primary_skill 		= s.wms_emp_primary_skill
		,emp_certificate_no 	= s.wms_emp_certificate_no
		,emp_certificate_type 	= s.wms_emp_certificate_type
		,emp_issued_date 		= s.wms_emp_issued_date
		,etlactiveind 			= 1
		,etljobname 			= p_etljobname
		,envsourcecd 			= p_envsourcecd 
		,datasourcecd 			= p_datasourcecd
		,etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_employee_skills_dtl s
    WHERE t.emp_employee_code 	= s.wms_emp_employee_code
	AND	t.emp_ou 				= s.wms_emp_ou
	AND COALESCE(t.emp_lineno,0)= COALESCE(s.wms_emp_lineno,0);
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_employeeskills
	(
		 emp_employee_code,		emp_ou,emp_lineno,		emp_skill_code	,emp_primary_skill
		,emp_certificate_no,	emp_certificate_type,	emp_issued_date
		,etlactiveind,			etljobname,				envsourcecd		,datasourcecd	,etlcreatedatetime
	)
	
    SELECT 
		 s.wms_emp_employee_code,	s.wms_emp_ou,s.wms_emp_lineno,	s.wms_emp_skill_code	,s.wms_emp_primary_skill
		,s.wms_emp_certificate_no,	s.wms_emp_certificate_type,	s.wms_emp_issued_date		
		,1,							p_etljobname,				p_envsourcecd,			p_datasourcecd,					NOW()
	FROM stg.stg_wms_employee_skills_dtl s
    LEFT JOIN dwh.d_employeeskills t
    ON 	s.wms_emp_employee_code 		= t.emp_employee_code
	AND s.wms_emp_ou 					= t.emp_ou
	AND COALESCE(s.wms_emp_lineno,0) 	= COALESCE(t.emp_lineno,0)
    WHERE t.emp_employee_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
 
	
	INSERT INTO raw.raw_wms_employee_skills_dtl
	(
        wms_emp_employee_code, wms_emp_ou, wms_emp_lineno, wms_emp_skill_code, 
        wms_emp_primary_skill, wms_emp_certificate_no, wms_emp_certificate_type, 
        wms_emp_issued_date, wms_emp_valid_from, wms_emp_valid_till, wms_emp_remarks, etlcreateddatetime
	
	)
	SELECT 
		 wms_emp_employee_code, wms_emp_ou, wms_emp_lineno, wms_emp_skill_code, 
        wms_emp_primary_skill, wms_emp_certificate_no, wms_emp_certificate_type, 
        wms_emp_issued_date, wms_emp_valid_from, wms_emp_valid_till, wms_emp_remarks, etlcreateddatetime
	FROM stg.stg_wms_employee_skills_dtl;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_employeeskills(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_employeetype(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_employeetype(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_employee_type_dtl;

    UPDATE dwh.d_employeetype t
    SET
        emp_type                 = s.wms_emp_type,
        emp_priority             = s.wms_emp_priority,
        emp_mapped               = s.wms_emp_mapped,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM	stg.stg_wms_employee_type_dtl s
    WHERE	t.emp_employee_code = s.wms_emp_employee_code
    AND		t.emp_ou			= s.wms_emp_ou
    AND		t.emp_lineno		= s.wms_emp_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_employeetype
    (
        emp_employee_code, emp_ou, emp_lineno, emp_type, emp_priority, emp_mapped, etlactiveind, etljobname, envsourcecd, 
		datasourcecd, etlcreatedatetime
    )

    SELECT
        s.wms_emp_employee_code, s.wms_emp_ou, s.wms_emp_lineno, s.wms_emp_type, s.wms_emp_priority, s.wms_emp_mapped, 1, p_etljobname, p_envsourcecd, 
		p_datasourcecd, NOW()
    FROM stg.stg_wms_employee_type_dtl s
    LEFT JOIN dwh.d_employeetype t
    ON		s.wms_emp_employee_code = t.emp_employee_code
    AND		s.wms_emp_ou			= t.emp_ou
    AND		s.wms_emp_lineno		= t.emp_lineno
    WHERE	t.emp_employee_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    INSERT INTO raw.raw_wms_employee_type_dtl
    (
        wms_emp_employee_code, wms_emp_ou, wms_emp_lineno, wms_emp_type, wms_emp_priority, wms_emp_mapped, etlcreateddatetime
    )
    SELECT
        wms_emp_employee_code, wms_emp_ou, wms_emp_lineno, wms_emp_type, wms_emp_priority, wms_emp_mapped, etlcreateddatetime
    FROM stg.stg_wms_employee_type_dtl;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_employeetype(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_employeeunavdate(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_employeeunavdate(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_employee_unav_dates_dtl;

	UPDATE dwh.D_EmployeeUnavDate t
    SET 
		 emp_from_date			= s.wms_emp_from_date
		,emp_to_date			= s.wms_emp_to_date
		,emp_reason_code		= s.wms_emp_reason_code
		,emp_all_shift			= s.wms_emp_all_shift
		,etlactiveind 			= 1
		,etljobname 			= p_etljobname
		,envsourcecd 			= p_envsourcecd 
		,datasourcecd 			= p_datasourcecd
		,etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_employee_unav_dates_dtl s
    WHERE t.emp_employee_code 	= s.wms_emp_employee_code
	AND	t.emp_ou 				= s.wms_emp_ou
	AND t.emp_lineno			= s.wms_emp_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_EmployeeUnavDate
	(
		 emp_employee_code	,emp_ou			,emp_lineno			,emp_from_date		
		,emp_to_date	,emp_reason_code	,emp_all_shift
		,etlactiveind		,etljobname		,envsourcecd		,datasourcecd	,etlcreatedatetime
	)
	
    SELECT 
		 wms_emp_employee_code	,wms_emp_ou			,wms_emp_lineno			,wms_emp_from_date		
		,wms_emp_to_date	,wms_emp_reason_code	,wms_emp_all_shift
		,1					,p_etljobname	,p_envsourcecd		,p_datasourcecd	,NOW()
	FROM stg.stg_wms_employee_unav_dates_dtl s
    LEFT JOIN dwh.D_EmployeeUnavDate t
    ON 	s.wms_emp_employee_code = t.emp_employee_code
	AND s.wms_emp_ou 			= t.emp_ou
	AND s.wms_emp_lineno 		= t.emp_lineno
    WHERE t.emp_employee_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_employee_unav_dates_dtl
	(
		wms_emp_employee_code,wms_emp_ou,wms_emp_lineno,wms_emp_from_date,wms_emp_to_date,wms_emp_reason_code,wms_emp_all_shift, etlcreateddatetime	
	)
	SELECT 
		wms_emp_employee_code,wms_emp_ou,wms_emp_lineno,wms_emp_from_date,wms_emp_to_date,wms_emp_reason_code,wms_emp_all_shift, etlcreateddatetime	
	FROM stg.stg_wms_employee_unav_dates_dtl;
	
	END IF;
	EXCEPTION WHEN others THEN       
       
    get stacked diagnostics p_errorid = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,null);
    
        
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_employeeunavdate(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_equipment(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_equipment(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_equipment_hdr;

	UPDATE dwh.d_equipment t
    SET 
		 eqp_description 		= s.wms_eqp_description
		,eqp_status 			= s.wms_eqp_status
		,eqp_type 				= s.wms_eqp_type
		,eqp_hazardous_goods 	= s.wms_eqp_hazardous_goods
		,eqp_owner_type 		= s.wms_eqp_owner_type
		,eqp_default_location 	= s.wms_eqp_default_location
		,eqp_current_location 	= s.wms_eqp_current_location
		,eqp_timestamp 			= s.wms_eqp_timestamp
		,eqp_created_date 		= s.wms_eqp_created_date
		,eqp_created_by 		= s.wms_eqp_created_by
		,eqp_modified_date 		= s.wms_eqp_modified_date
		,eqp_modified_by 		= s.wms_eqp_modified_by
		,eqp_intransit 			= s.wms_eqp_intransit
		,eqp_refrigerated 		= s.wms_eqp_refrigerated
		,veh_current_geo_type 	= s.wms_veh_current_geo_type
		,eqp_raise_int_drfbill 	= s.wms_eqp_raise_int_drfbill
		,etlactiveind 				= 1
		,etljobname 				= p_etljobname
		,envsourcecd 				= p_envsourcecd 
		,datasourcecd 				= p_datasourcecd
		,etlupdatedatetime 			= NOW()
    FROM stg.stg_wms_equipment_hdr s
    WHERE t.eqp_equipment_id  		= s.wms_eqp_equipment_id
	AND t.eqp_ou 					= s.wms_eqp_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_equipment
	(
		 eqp_ou					,eqp_equipment_id		,eqp_description		,eqp_status				,eqp_type
		,eqp_hazardous_goods	,eqp_owner_type			,eqp_default_location	,eqp_current_location	,eqp_timestamp
		,eqp_created_date		,eqp_created_by			,eqp_modified_date		,eqp_modified_by		,eqp_intransit
		,eqp_refrigerated		,veh_current_geo_type	,eqp_raise_int_drfbill
		,etlactiveind			,etljobname				,envsourcecd			,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		 s.wms_eqp_ou				,s.wms_eqp_equipment_id		,s.wms_eqp_description		,s.wms_eqp_status			,s.wms_eqp_type
		,s.wms_eqp_hazardous_goods	,s.wms_eqp_owner_type		,s.wms_eqp_default_location	,s.wms_eqp_current_location	,s.wms_eqp_timestamp
		,s.wms_eqp_created_date		,s.wms_eqp_created_by		,s.wms_eqp_modified_date	,s.wms_eqp_modified_by		,s.wms_eqp_intransit
		,s.wms_eqp_refrigerated		,s.wms_veh_current_geo_type	,s.wms_eqp_raise_int_drfbill
		,1							,p_etljobname				,p_envsourcecd				,p_datasourcecd			,NOW()
	FROM stg.stg_wms_equipment_hdr s
    LEFT JOIN dwh.d_equipment t
    ON 	s.wms_eqp_equipment_id  	= t.eqp_equipment_id
	AND s.wms_eqp_ou 				= t.eqp_ou
    WHERE t.eqp_equipment_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN
 
	
	INSERT INTO raw.raw_wms_equipment_hdr
	(
		wms_eqp_ou, 					wms_eqp_equipment_id, 		wms_eqp_description, 			wms_eqp_status, 			wms_eqp_reasoncode, 
		wms_eqp_type, 					wms_eqp_category, 			wms_eqp_reference_id, 			wms_eqp_asset_id, 			wms_eqp_asset_tag, 
		wms_eqp_registration_num, 		wms_eqp_registration_name, 	wms_eqp_hazardous_goods, 		wms_eqp_owner_type, 		wms_eqp_agencyid, 
		wms_eqp_registration_eff_date, 	wms_eqp_agency_contract_num,wms_eqp_registration_address, 	wms_eqp_mfg_name, 			wms_eqp_mfg_date, 
		wms_eqp_purchase_date, 			wms_eqp_inducted_date, 		wms_eqp_running_cost, 			wms_eqp_unit, 				wms_eqp_ref_doc_number, 
		wms_eqp_default_location, 		wms_eqp_current_location, 	wms_eqp_in_current_location, 	wms_eqp_weight_uom, 		wms_eqp_tare, 
		wms_eqp_max_allowable, 			wms_eqp_interior_uom, 		wms_eqp_interior_length, 		wms_eqp_interior_width, 	wms_eqp_interior_height, 
		wms_eqp_exterior_uom, 			wms_eqp_exterior_length,	wms_eqp_exterior_width, 		wms_eqp_exterior_height,	wms_eqp_temperature_uom, 
		wms_eqp_temperature_minimum, 	wms_eqp_temperature_maximum,wms_eqp_volume, 				wms_eqp_volume_uom, 		wms_eqp_teu_count, 
		wms_eqp_feu_count, 				wms_eqp_life_eqp_capacity, 	wms_eqp_load_lift, 				wms_eqp_height_lift, 		wms_eqp_timestamp, 
		wms_eqp_created_date, 			wms_eqp_created_by, 		wms_eqp_modified_date, 			wms_eqp_modified_by, 		wms_eqp_userdefined1, 
		wms_eqp_userdefined2, 			wms_eqp_userdefined3, 		wms_eqp_intransit, 				wms_eqp_route, 				wms_eqp_between, 
		wms_eqp_and, 					wms_eqp_gross_comb_mass, 	wms_eqp_gross_veh_mass, 		wms_eqp_overall_vol, 		wms_eqp_internal_vol, 
		wms_eqp_refrigerated, 			wms_eqp_load_lift_uom, 		wms_eqp_height_lift_uom, 		wms_eqp_no_of_axles, 		wms_veh_current_loc_desc, 
		wms_veh_home_loc_desc, 			wms_veh_home_geo_type, 		wms_veh_current_geo_type, 		wms_equip_ownrshp_eftfrm, 	wms_eqp_pallet_space, 
		wms_eqp_raise_int_drfbill, 		wms_chassis_number, 		wms_min_weight, 				wms_max_weight, 			wms_min_length, 		
		wms_load_carrying_weight_uom, 	wms_max_lenght, 			wms_min_width, 					wms_max_width, 				wms_min_height,
		wms_max_height, 				wms_load_carrying_uom,		wms_eqp_make, 					wms_eqp_model, 				wms_eqp_gen_uom,
		wms_eqp_gen_coupled, 			wms_eqp_gen_coupled_loaded, wms_eqp_emp_id,					wms_eqp_commodity, 			wms_eqp_cls_of_stores, 		
		wms_eqp_last_bill_date, 		etlcreateddatetime
	)
	SELECT 
		wms_eqp_ou, 					wms_eqp_equipment_id, 		wms_eqp_description, 			wms_eqp_status, 			wms_eqp_reasoncode, 
		wms_eqp_type, 					wms_eqp_category, 			wms_eqp_reference_id, 			wms_eqp_asset_id, 			wms_eqp_asset_tag, 
		wms_eqp_registration_num, 		wms_eqp_registration_name, 	wms_eqp_hazardous_goods, 		wms_eqp_owner_type, 		wms_eqp_agencyid, 
		wms_eqp_registration_eff_date, 	wms_eqp_agency_contract_num,wms_eqp_registration_address, 	wms_eqp_mfg_name, 			wms_eqp_mfg_date, 
		wms_eqp_purchase_date, 			wms_eqp_inducted_date, 		wms_eqp_running_cost, 			wms_eqp_unit, 				wms_eqp_ref_doc_number, 
		wms_eqp_default_location, 		wms_eqp_current_location, 	wms_eqp_in_current_location, 	wms_eqp_weight_uom, 		wms_eqp_tare, 
		wms_eqp_max_allowable, 			wms_eqp_interior_uom, 		wms_eqp_interior_length, 		wms_eqp_interior_width, 	wms_eqp_interior_height, 
		wms_eqp_exterior_uom, 			wms_eqp_exterior_length,	wms_eqp_exterior_width, 		wms_eqp_exterior_height,	wms_eqp_temperature_uom, 
		wms_eqp_temperature_minimum, 	wms_eqp_temperature_maximum,wms_eqp_volume, 				wms_eqp_volume_uom, 		wms_eqp_teu_count, 
		wms_eqp_feu_count, 				wms_eqp_life_eqp_capacity, 	wms_eqp_load_lift, 				wms_eqp_height_lift, 		wms_eqp_timestamp, 
		wms_eqp_created_date, 			wms_eqp_created_by, 		wms_eqp_modified_date, 			wms_eqp_modified_by, 		wms_eqp_userdefined1, 
		wms_eqp_userdefined2, 			wms_eqp_userdefined3, 		wms_eqp_intransit, 				wms_eqp_route, 				wms_eqp_between, 
		wms_eqp_and, 					wms_eqp_gross_comb_mass, 	wms_eqp_gross_veh_mass, 		wms_eqp_overall_vol, 		wms_eqp_internal_vol, 
		wms_eqp_refrigerated, 			wms_eqp_load_lift_uom, 		wms_eqp_height_lift_uom, 		wms_eqp_no_of_axles, 		wms_veh_current_loc_desc, 
		wms_veh_home_loc_desc, 			wms_veh_home_geo_type, 		wms_veh_current_geo_type, 		wms_equip_ownrshp_eftfrm, 	wms_eqp_pallet_space, 
		wms_eqp_raise_int_drfbill, 		wms_chassis_number, 		wms_min_weight, 				wms_max_weight, 			wms_min_length, 		
		wms_load_carrying_weight_uom, 	wms_max_lenght, 			wms_min_width, 					wms_max_width, 				wms_min_height,
		wms_max_height, 				wms_load_carrying_uom,		wms_eqp_make, 					wms_eqp_model, 				wms_eqp_gen_uom,
		wms_eqp_gen_coupled, 			wms_eqp_gen_coupled_loaded, wms_eqp_emp_id,					wms_eqp_commodity, 			wms_eqp_cls_of_stores, 		
		wms_eqp_last_bill_date,			etlcreateddatetime
	FROM stg.stg_wms_equipment_hdr;	
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_equipment(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_equipmentgroup(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_equipmentgroup(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_eqp_grp_hdr;

	UPDATE dwh.d_equipmentgroup t
    SET 
		 egrp_desc 				= s.wms_egrp_desc
		,egrp_status 			= s.wms_egrp_status
		,egrp_created_by 		= s.wms_egrp_created_by
		,egrp_created_date 		= s.wms_egrp_created_date
		,egrp_modified_by 		= s.wms_egrp_modified_by
		,egrp_modified_date 	= s.wms_egrp_modified_date
		,egrp_timestamp 		= s.wms_egrp_timestamp
		,etlactiveind 			= 1
		,etljobname 			= p_etljobname
		,envsourcecd 			= p_envsourcecd 
		,datasourcecd 			= p_datasourcecd
		,etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_eqp_grp_hdr s
    WHERE t.egrp_id  			= s.wms_egrp_id
	AND t.egrp_ou 				= s.wms_egrp_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_equipmentgroup
	(
		 egrp_ou			,egrp_id,egrp_desc	,egrp_status		,egrp_created_by		,egrp_created_date	
		,egrp_modified_by	,egrp_modified_date	,egrp_timestamp
		,etlactiveind		,etljobname			,envsourcecd		,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		 s.wms_egrp_ou				,s.wms_egrp_id,egrp_desc	,s.wms_egrp_status		,s.wms_egrp_created_by		,s.wms_egrp_created_date	
		,s.wms_egrp_modified_by		,s.wms_egrp_modified_date	,s.wms_egrp_timestamp
		,1							,p_etljobname				,p_envsourcecd			,p_datasourcecd				,NOW()
	FROM stg.stg_wms_eqp_grp_hdr s
    LEFT JOIN dwh.d_equipmentgroup t
    ON 	s.wms_egrp_id  		= t.egrp_id
	AND s.wms_egrp_ou 		= t.egrp_ou
    WHERE t.egrp_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_eqp_grp_hdr
	(
		wms_egrp_ou, wms_egrp_id, 	wms_egrp_desc, 			wms_egrp_status, 		wms_egrp_reason_code,	wms_egrp_created_by,
		wms_egrp_created_date, 		wms_egrp_modified_by, 	wms_egrp_modified_date, wms_egrp_timestamp, 	wms_egrp_userdefined1,
		wms_egrp_userdefined2, 		wms_egrp_userdefined3, 	etlcreateddatetime
	)
	SELECT 
		wms_egrp_ou, wms_egrp_id, 	wms_egrp_desc, 			wms_egrp_status, 		wms_egrp_reason_code,	wms_egrp_created_by,
		wms_egrp_created_date, 		wms_egrp_modified_by, 	wms_egrp_modified_date, wms_egrp_timestamp, 	wms_egrp_userdefined1,
		wms_egrp_userdefined2, 		wms_egrp_userdefined3, 	etlcreateddatetime
	FROM stg.stg_wms_eqp_grp_hdr;
	
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_equipmentgroup(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_equipmentgroupdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_equipmentgroupdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_eqp_grp_dtl;

	UPDATE dwh.d_equipmentGroupDtl t
    SET 
			egrp_eqp_id				    =	s.wms_egrp_eqp_id,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_eqp_grp_dtl s
    WHERE	t.egrp_id  					=	s.wms_egrp_id
	AND		t.egrp_ou 					=	s.wms_egrp_ou
	AND     t.egrp_lineno               =   s.wms_egrp_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_equipmentgroupdtl
	(
		egrp_ou							,egrp_id						,egrp_lineno					,egrp_eqp_id
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		wms_egrp_ou							,wms_egrp_id							,wms_egrp_lineno					,wms_egrp_eqp_id
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_eqp_grp_dtl s
    LEFT JOIN dwh.d_equipmentgroupdtl t
    ON 	s.wms_egrp_id  		= t.egrp_id
	AND s.wms_egrp_ou 		= t.egrp_ou
	AND s.wms_egrp_lineno	= t.egrp_lineno
    WHERE t.egrp_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_eqp_grp_dtl
	(
		wms_egrp_ou							,wms_egrp_id							,wms_egrp_lineno					,wms_egrp_eqp_id
		,etlcreateddatetime
	)
	SELECT 
		wms_egrp_ou							,wms_egrp_id							,wms_egrp_lineno					,wms_egrp_eqp_id
		,etlcreateddatetime
	FROM stg.stg_wms_eqp_grp_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_equipmentgroupdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_excessitem(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_excessitem(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_ex_item_hdr;

	UPDATE dwh.d_excessitem t
    SET 
		 ex_itm_hdr_key				= COALESCE(i.itm_hdr_key,-1)
		,ex_itm_desc 				= s.wms_ex_itm_desc
		,ex_itm_cap_profile 		= s.wms_ex_itm_cap_profile
		,ex_itm_zone_profile 		= s.wms_ex_itm_zone_profile
		,ex_itm_stage_profile 		= s.wms_ex_itm_stage_profile
		,ex_itm_effective_frm 		= s.wms_ex_itm_effective_frm
		,ex_itm_effective_to 		= s.wms_ex_itm_effective_to
		,ex_itm_pick_per_tol_pos 	= s.wms_ex_itm_pick_per_tol_pos
		,ex_itm_pick_per_tol_neg 	= s.wms_ex_itm_pick_per_tol_neg
		,ex_itm_pick_uom_tol_pos 	= s.wms_ex_itm_pick_uom_tol_pos
		,ex_itm_pick_uom_tol_neg 	= s.wms_ex_itm_pick_uom_tol_neg
		,ex_itm_mininum_qty 		= s.wms_ex_itm_mininum_qty
		,ex_itm_maximum_qty 		= s.wms_ex_itm_maximum_qty
		,ex_itm_replen_qty 			= s.wms_ex_itm_replen_qty
		,ex_itm_master_uom 			= s.wms_ex_itm_master_uom
		,ex_itm_timestamp 			= s.wms_ex_itm_timestamp
		,ex_itm_created_by 			= s.wms_ex_itm_created_by
		,ex_itm_created_dt 			= s.wms_ex_itm_created_dt
		,ex_itm_modified_by 		= s.wms_ex_itm_modified_by
		,ex_itm_modified_dt 		= s.wms_ex_itm_modified_dt
		,ex_itm_packing_bay 		= s.wms_ex_itm_packing_bay
		,ex_itm_low_stk_lvl 		= s.wms_ex_itm_low_stk_lvl
		,ex_itm_std_strg_thu_id 	= s.wms_ex_itm_std_strg_thu_id
		,ex_itm_wave_repln_req 		= s.wms_ex_itm_wave_repln_req
		,etlactiveind 				= 1
		,etljobname 				= p_etljobname
		,envsourcecd 				= p_envsourcecd 
		,datasourcecd 				= p_datasourcecd
		,etlupdatedatetime 			= NOW()
	FROM stg.stg_wms_ex_item_hdr s
	LEFT JOIN  dwh.d_itemheader i
		ON	i.itm_code				= s.wms_ex_itm_code
		AND	i.itm_ou				= s.wms_ex_itm_ou
    WHERE t.ex_itm_ou 				= s.wms_ex_itm_ou
		AND	t.ex_itm_code 			= s.wms_ex_itm_code
		AND	t.ex_itm_loc_code 		= s.wms_ex_itm_loc_code;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_excessitem
	(
		ex_itm_hdr_key
		,ex_itm_ou,					ex_itm_code,				ex_itm_loc_code,		ex_itm_desc,		ex_itm_cap_profile
		,ex_itm_zone_profile,		ex_itm_stage_profile,		ex_itm_effective_frm,	ex_itm_effective_to,ex_itm_pick_per_tol_pos
		,ex_itm_pick_per_tol_neg,	ex_itm_pick_uom_tol_pos,	ex_itm_pick_uom_tol_neg,ex_itm_mininum_qty,	ex_itm_maximum_qty
		,ex_itm_replen_qty,			ex_itm_master_uom,			ex_itm_timestamp,		ex_itm_created_by,	ex_itm_created_dt
		,ex_itm_modified_by,		ex_itm_modified_dt,			ex_itm_packing_bay,		ex_itm_low_stk_lvl,	ex_itm_std_strg_thu_id,	ex_itm_wave_repln_req
		,etlactiveind,				etljobname,					envsourcecd,			datasourcecd,		etlcreatedatetime
	)
	
    SELECT 
		COALESCE(i.itm_hdr_key,-1)
		,s.wms_ex_itm_ou,				s.wms_ex_itm_code,				s.wms_ex_itm_loc_code,			s.wms_ex_itm_desc,			s.wms_ex_itm_cap_profile
		,s.wms_ex_itm_zone_profile,		s.wms_ex_itm_stage_profile,		s.wms_ex_itm_effective_frm,		s.wms_ex_itm_effective_to,	s.wms_ex_itm_pick_per_tol_pos
		,s.wms_ex_itm_pick_per_tol_neg,	s.wms_ex_itm_pick_uom_tol_pos,	s.wms_ex_itm_pick_uom_tol_neg,	s.wms_ex_itm_mininum_qty,	s.wms_ex_itm_maximum_qty
		,s.wms_ex_itm_replen_qty,		s.wms_ex_itm_master_uom,		s.wms_ex_itm_timestamp,			s.wms_ex_itm_created_by,	s.wms_ex_itm_created_dt
		,s.wms_ex_itm_modified_by,		s.wms_ex_itm_modified_dt,		s.wms_ex_itm_packing_bay,		s.wms_ex_itm_low_stk_lvl,	s.wms_ex_itm_std_strg_thu_id,	s.wms_ex_itm_wave_repln_req	
		,1,								p_etljobname,					p_envsourcecd,					p_datasourcecd,				NOW()
	FROM stg.stg_wms_ex_item_hdr s
	LEFT JOIN  dwh.d_itemheader i
		ON	i.itm_code				= s.wms_ex_itm_code
		AND	i.itm_ou				= s.wms_ex_itm_ou
    LEFT JOIN dwh.d_excessitem t
    	ON 	s.wms_ex_itm_loc_code  	= t.ex_itm_loc_code
		AND s.wms_ex_itm_code 		= t.ex_itm_code
		AND s.wms_ex_itm_ou 		= t.ex_itm_ou
    WHERE t.ex_itm_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_ex_item_hdr
	(
		wms_ex_itm_ou, 					wms_ex_itm_code, 				wms_ex_itm_loc_code, 			wms_ex_itm_desc, 			wms_ex_itm_cap_profile, 
		wms_ex_itm_zone_profile, 		wms_ex_itm_stage_profile, 		wms_ex_itm_effective_frm, 		wms_ex_itm_effective_to, 	wms_ex_itm_pick_per_tol_pos, 
		wms_ex_itm_pick_per_tol_neg, 	wms_ex_itm_pick_uom_tol_pos, 	wms_ex_itm_pick_uom_tol_neg, 	wms_ex_itm_put_per_tol_pos, wms_ex_itm_put_per_tol_neg, 
		wms_ex_itm_put_uom_tol_pos, 	wms_ex_itm_put_uom_tol_neg, 	wms_ex_itm_mininum_qty, 		wms_ex_itm_maximum_qty, 	wms_ex_itm_replen_qty, 
		wms_ex_itm_master_uom, 			wms_ex_itm_timestamp, 			wms_ex_itm_created_by, 			wms_ex_itm_created_dt, 		wms_ex_itm_modified_by, 
		wms_ex_itm_modified_dt, 		wms_ex_itm_userdefined1, 		wms_ex_itm_userdefined2, 		wms_ex_itm_userdefined3, 	wms_ex_itm_packing_bay, 
		wms_ex_itm_low_stk_lvl, 		wms_ex_itm_std_strg_thu_id, 	wms_ex_itm_stock_per_thu_id, 	wms_ex_itm_uid_prof, 		wms_ex_itm_dflt_status, 
		wms_ex_itm_wave_repln_req, 		wms_ex_itm_mul_rep_low_stk_lvl, wms_ex_itm_mul_tar_zone, 		etlcreateddatetime
	)
	SELECT 
		wms_ex_itm_ou, 					wms_ex_itm_code, 				wms_ex_itm_loc_code, 			wms_ex_itm_desc, 			wms_ex_itm_cap_profile, 
		wms_ex_itm_zone_profile, 		wms_ex_itm_stage_profile, 		wms_ex_itm_effective_frm, 		wms_ex_itm_effective_to, 	wms_ex_itm_pick_per_tol_pos, 
		wms_ex_itm_pick_per_tol_neg, 	wms_ex_itm_pick_uom_tol_pos, 	wms_ex_itm_pick_uom_tol_neg, 	wms_ex_itm_put_per_tol_pos, wms_ex_itm_put_per_tol_neg, 
		wms_ex_itm_put_uom_tol_pos, 	wms_ex_itm_put_uom_tol_neg, 	wms_ex_itm_mininum_qty, 		wms_ex_itm_maximum_qty, 	wms_ex_itm_replen_qty, 
		wms_ex_itm_master_uom, 			wms_ex_itm_timestamp, 			wms_ex_itm_created_by, 			wms_ex_itm_created_dt, 		wms_ex_itm_modified_by, 
		wms_ex_itm_modified_dt, 		wms_ex_itm_userdefined1, 		wms_ex_itm_userdefined2, 		wms_ex_itm_userdefined3, 	wms_ex_itm_packing_bay, 
		wms_ex_itm_low_stk_lvl, 		wms_ex_itm_std_strg_thu_id, 	wms_ex_itm_stock_per_thu_id, 	wms_ex_itm_uid_prof, 		wms_ex_itm_dflt_status, 
		wms_ex_itm_wave_repln_req, 		wms_ex_itm_mul_rep_low_stk_lvl, wms_ex_itm_mul_tar_zone, 		etlcreateddatetime
	FROM stg.stg_wms_ex_item_hdr;
	
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_excessitem(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_excessitemsuconvdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_excessitemsuconvdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_ex_itm_su_conversion_dtl;

    UPDATE dwh.D_EXcessItemSUConvDetail t
    SET
		ex_itm_hdr_key				= COALESCE(i.itm_hdr_key,-1),
		ex_excessitem_key			= EX.ex_itm_key,
		ex_location_key				= L.loc_key,
        ex_itm_ou                   = s.wms_ex_itm_ou,
        ex_itm_code                 = s.wms_ex_itm_code,
        ex_itm_loc_code             = s.wms_ex_itm_loc_code,
        ex_itm_line_no              = s.wms_ex_itm_line_no,
        ex_itm_storage_unit         = s.wms_ex_itm_storage_unit,
        ex_itm_operator             = s.wms_ex_itm_operator,
        ex_itm_quantity             = s.wms_ex_itm_quantity,
        ex_itm_master_uom           = s.wms_ex_itm_master_uom,
        ex_itm_stack_ability        = s.wms_ex_itm_stack_ability,
        ex_itm_stack_count          = s.wms_ex_itm_stack_count,
        ex_itm_stack_height         = s.wms_ex_itm_stack_height,
        ex_itm_stack_weight         = s.wms_ex_itm_stack_weight,
        ex_itm_su_volume            = s.wms_ex_itm_su_volume,
        ex_itm_volume_uom           = s.wms_ex_itm_volume_uom,
        ex_itm_factory_pack         = s.wms_ex_itm_factory_pack,
        ex_itm_default              = s.wms_ex_itm_default,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_wms_ex_itm_su_conversion_dtl s
	LEFT JOIN dwh.d_excessitem EX
	ON EX.ex_itm_code 		= s.wms_ex_itm_code
	and EX.ex_itm_loc_code	= s.wms_ex_itm_loc_code
	and EX.ex_itm_ou		= s.wms_ex_itm_ou
	LEFT JOIN dwh.d_itemheader i
	ON	i.itm_code			= s.wms_ex_itm_code
	AND	i.itm_ou			= s.wms_ex_itm_ou
	LEFT JOIN dwh.d_location L
	on	L.loc_code	= s.wms_ex_itm_loc_code
	and	L.loc_ou	= s.wms_ex_itm_ou
    WHERE t.ex_itm_ou = s.wms_ex_itm_ou
    AND t.ex_itm_code = s.wms_ex_itm_code
    AND t.ex_itm_loc_code = s.wms_ex_itm_loc_code
    AND t.ex_itm_line_no = s.wms_ex_itm_line_no;
	
    GET DIAGNOSTICS updcnt = ROW_COUNT;
	

    INSERT INTO dwh.D_EXcessItemSUConvDetail
    (	
		ex_itm_hdr_key		,
		ex_excessitem_key	, ex_location_key		,
        ex_itm_ou			, ex_itm_code			, ex_itm_loc_code	, ex_itm_line_no		, ex_itm_storage_unit	, 
		ex_itm_operator		, ex_itm_quantity		, ex_itm_master_uom	, ex_itm_stack_ability	, ex_itm_stack_count	, 
		ex_itm_stack_height	, ex_itm_stack_weight	, ex_itm_su_volume	, ex_itm_volume_uom		, ex_itm_factory_pack	, 
		ex_itm_default		, 
		etlactiveind		, etljobname			, envsourcecd,		 datasourcecd			, etlcreatedatetime
    )

    SELECT 
		COALESCE(i.itm_hdr_key,-1)	,
		EX.ex_itm_key				, L.loc_key					,
        s.wms_ex_itm_ou				, s.wms_ex_itm_code			, s.wms_ex_itm_loc_code		, s.wms_ex_itm_line_no			, s.wms_ex_itm_storage_unit	, 
		s.wms_ex_itm_operator		, s.wms_ex_itm_quantity		, s.wms_ex_itm_master_uom	, s.wms_ex_itm_stack_ability	, s.wms_ex_itm_stack_count	, 
		s.wms_ex_itm_stack_height	, s.wms_ex_itm_stack_weight	, s.wms_ex_itm_su_volume	, s.wms_ex_itm_volume_uom		, s.wms_ex_itm_factory_pack	, 
		s.wms_ex_itm_default		, 
				1					, p_etljobname				, p_envsourcecd				, p_datasourcecd				, NOW()
	FROM  stg.stg_wms_ex_itm_su_conversion_dtl s
	LEFT JOIN dwh.d_excessitem EX
		ON EX.ex_itm_code 		= s.wms_ex_itm_code
		and EX.ex_itm_loc_code	= s.wms_ex_itm_loc_code
		and EX.ex_itm_ou		= s.wms_ex_itm_ou
	LEFT JOIN dwh.d_itemheader i
		ON	i.itm_code			= s.wms_ex_itm_code
		AND	i.itm_ou			= s.wms_ex_itm_ou
	LEFT JOIN dwh.d_location L
		on	L.loc_code	= s.wms_ex_itm_loc_code
		and	L.loc_ou	= s.wms_ex_itm_ou
    LEFT JOIN dwh.D_EXcessItemSUConvDetail t
    	ON s.wms_ex_itm_ou = t.ex_itm_ou
    	AND s.wms_ex_itm_code = t.ex_itm_code
    	AND s.wms_ex_itm_loc_code = t.ex_itm_loc_code
    	AND s.wms_ex_itm_line_no = t.ex_itm_line_no
    WHERE t.ex_itm_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_ex_itm_su_conversion_dtl
    (
        wms_ex_itm_ou, wms_ex_itm_code, wms_ex_itm_loc_code, wms_ex_itm_line_no, wms_ex_itm_storage_unit, wms_ex_itm_operator, wms_ex_itm_quantity, wms_ex_itm_master_uom, wms_ex_itm_consignee_code, wms_ex_itm_vendor_code, wms_ex_itm_sideload_count, wms_ex_itm_stack_ability, wms_ex_itm_stack_count, wms_ex_itm_stack_height, wms_ex_itm_stack_weight, wms_ex_itm_su_volume, wms_ex_itm_volume_uom, wms_ex_itm_factory_pack, wms_ex_itm_default, etlcreateddatetime
    )
    SELECT
        wms_ex_itm_ou, wms_ex_itm_code, wms_ex_itm_loc_code, wms_ex_itm_line_no, wms_ex_itm_storage_unit, wms_ex_itm_operator, wms_ex_itm_quantity, wms_ex_itm_master_uom, wms_ex_itm_consignee_code, wms_ex_itm_vendor_code, wms_ex_itm_sideload_count, wms_ex_itm_stack_ability, wms_ex_itm_stack_count, wms_ex_itm_stack_height, wms_ex_itm_stack_weight, wms_ex_itm_su_volume, wms_ex_itm_volume_uom, wms_ex_itm_factory_pack, wms_ex_itm_default, etlcreateddatetime
    FROM stg.stg_wms_ex_itm_su_conversion_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_excessitemsuconvdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_exchangerate(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_exchangerate(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
    ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
    AND d.dataflowflag = p_dataflowflag
    AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_erate_exrate_mst;

    UPDATE dwh.D_ExchangeRate t
    SET
        timestamp              = s.timestamp,
        end_date               = s.end_date,
        exchange_rate          = s.exchange_rate,
        tolerance_flag         = s.tolerance_flag,
        tolerance_limit        = s.tolerance_limit,
        createdby              = s.createdby,
        createddate            = s.createddate,
        modifiedby             = s.modifiedby,
        modifieddate           = s.modifieddate,
        etlactiveind           = 1,
        etljobname             = p_etljobname,
        envsourcecd            = p_envsourcecd,
        datasourcecd           = p_datasourcecd,
        etlupdatedatetime      = NOW()
    FROM stg.stg_erate_exrate_mst s
    WHERE t.ou_id = s.ou_id
    AND t.exchrate_type = s.exchrate_type
    AND t.from_currency = s.from_currency
    AND t.to_currency = s.to_currency
    AND t.inverse_typeno = s.inverse_typeno
    AND t.start_date = s.start_date;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_ExchangeRate
    (
        ou_id			, exchrate_type		, from_currency	, 
		to_currency		, inverse_typeno	, start_date	, 
		timestamp		, end_date			, exchange_rate	, 
		tolerance_flag	, tolerance_limit	, createdby		, 
		createddate		, modifiedby		, modifieddate	, 
		etlactiveind	, etljobname		, envsourcecd	, 
		datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.ou_id			, s.exchrate_type	, s.from_currency	,
		s.to_currency	, s.inverse_typeno	, s.start_date		, 
		s.timestamp		, s.end_date		, s.exchange_rate	, 
		s.tolerance_flag, s.tolerance_limit	, s.createdby		, 
		s.createddate	, s.modifiedby		, s.modifieddate	, 
				1		, p_etljobname		, p_envsourcecd		, 
		p_datasourcecd	, NOW()
    FROM stg.stg_erate_exrate_mst s
    LEFT JOIN dwh.D_ExchangeRate t
    ON s.ou_id = t.ou_id
    AND s.exchrate_type = t.exchrate_type
    AND s.from_currency = t.from_currency
    AND s.to_currency = t.to_currency
    AND s.inverse_typeno = t.inverse_typeno
    AND s.start_date = t.start_date
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_erate_exrate_mst
    (
        ou_id			, exchrate_type		, from_currency		, 
		to_currency		, inverse_typeno	, start_date		, 
		timestamp		, serial_no			, end_date			, 
		exchange_rate	, tolerance_flag	, tolerance_limit	, 
		createdby		, createddate		, modifiedby		, 
		modifieddate	, etlcreateddatetime
    )
    SELECT
        ou_id			, exchrate_type		, from_currency		, 
		to_currency		, inverse_typeno	, start_date		, 
		timestamp		, serial_no			, end_date			, 
		exchange_rate	, tolerance_flag	, tolerance_limit	, 
		createdby		, createddate		, modifiedby		, 
		modifieddate	, etlcreateddatetime
    FROM stg.stg_erate_exrate_mst;
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;		
END;
$$;


ALTER PROCEDURE dwh.usp_d_exchangerate(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_financebook(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_financebook(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

    
BEGIN  
   
	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd, p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_emod_finbook_mst;

	UPDATE dwh.d_financebook t
    SET 
	    
		ftimestamp		= s.ftimestamp      ,
		fb_desc			= s.fb_desc         ,
		effective_from	= s.effective_from  ,
		status			= s.status          ,
		resou_id		= s.resou_id        ,
		createdby		= s.createdby       ,
		createddate		= s.createddate     ,
		modifiedby		= s.modifiedby      ,
		modifieddate	= s.modifieddate    ,
    	etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_emod_finbook_mst s
    WHERE t.fb_id  		        = s.fb_id
	AND t.company_code 			= s.company_code
    AND t.serial_no 			= s.serial_no
    AND t.fb_type 			    = s.fb_type;	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_financebook
	(
		fb_id,              company_code,        serial_no,            fb_type,
        ftimestamp,         fb_desc,             effective_from,       status,
        resou_id,           createdby,           createddate,          modifiedby,              modifieddate,
		etlactiveind,       etljobname, 		 envsourcecd, 	       datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
        s.fb_id,              s.company_code,        s.serial_no,            s.fb_type,
        s.ftimestamp,         s.fb_desc,             s.effective_from,       s.status,
        s.resou_id,           s.createdby,           s.createddate,          s.modifiedby,              s.modifieddate,
        1,                    p_etljobname,		     p_envsourcecd,	         p_datasourcecd,			NOW()
	FROM stg.stg_emod_finbook_mst s
    LEFT JOIN dwh.d_financebook t
    ON 	t.fb_id  		        = s.fb_id
	AND t.company_code 			= s.company_code
    AND t.serial_no 			= s.serial_no
    AND t.fb_type 			    = s.fb_type
    WHERE t.fb_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_emod_finbook_mst
	(
	    fb_id, company_code, serial_no, fb_type, ftimestamp, 
        fb_desc, effective_from, effective_to, status, resou_id, 
        createdby, createddate, modifiedby, modifieddate,etlcreateddatetime		
	)
	SELECT 
		fb_id, company_code, serial_no, fb_type, ftimestamp, 
        fb_desc, effective_from, effective_to, status, resou_id, 
        createdby, createddate, modifiedby,modifieddate,etlcreateddatetime
	FROM stg.stg_emod_finbook_mst;	
	END IF;
    
      EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
  
        
END;
$$;


ALTER PROCEDURE dwh.usp_d_financebook(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_finquickcodemet(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_finquickcodemet(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_fin_quick_code_met;

	TRUNCATE only dwh.D_finquickcodemet
	restart identity;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_finquickcodemet
    (
        component_id, parameter_type, parameter_category, parameter_code, parameter_text, 
		timestamp	, language_id	, extension_flag	, createdby		, createddate, 
		modifiedby	, modifieddate	, sequence_no		, cml_len		, cml_translate, 
		etlactiveind, etljobname	, envsourcecd		, datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.component_id	, s.parameter_type	, s.parameter_category	, s.parameter_code	, s.parameter_text, 
		s.timestamp		, s.language_id		, s.extension_flag		, s.createdby		, s.createddate, 
		s.modifiedby	, s.modifieddate	, s.sequence_no			, s.cml_len			, s.cml_translate, 
				1		, p_etljobname		, p_envsourcecd			, p_datasourcecd	, NOW()
    FROM stg.stg_fin_quick_code_met s;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_fin_quick_code_met
    (
        component_id	, parameter_type, parameter_category, parameter_code, parameter_text, 
		timestamp		, language_id	, extension_flag	, createdby		, createddate, 
		modifiedby		, modifieddate	, sequence_no		, cml_len		, cml_translate, 
		etlcreateddatetime
    )
    SELECT
        component_id	, parameter_type, parameter_category, parameter_code, parameter_text, 
		timestamp		, language_id	, extension_flag	, createdby		, createddate, 
		modifiedby		, modifieddate	, sequence_no		, cml_len		, cml_translate, 
		etlcreateddatetime
	FROM stg.stg_fin_quick_code_met;
	
	END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, 
								p_batchid,p_taskname, 'sp_ExceptionHandling', 
								p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_d_finquickcodemet(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_gateemployeemapping(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_gateemployeemapping(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_gate_emp_equip_map_dtl;

	UPDATE dwh.d_gateemployeemapping t
    SET 
		gate_shift_code         = s.wms_gate_shift_code   ,
		gate_emp_code           = s.wms_gate_emp_code     ,
		gate_area               = s.wms_gate_area         ,
		gate_timestamp          = s.wms_gate_timestamp    ,
		gate_created_by         = s.wms_gate_created_by   ,
		gate_created_date       = s.wms_gate_created_date ,
		gate_modified_by        = s.wms_gate_modified_by  ,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_gate_emp_equip_map_dtl s
    WHERE t.gate_loc_code  		= s.wms_gate_loc_code
	AND t.gate_ou 			    = s.wms_gate_ou
	AND t.gate_lineno 			= s.wms_gate_lineno;
	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_gateemployeemapping
	(
		gate_loc_code,              gate_ou,                gate_lineno,
        gate_shift_code,            gate_emp_code,          gate_area,
        gate_timestamp,             gate_created_by,        gate_created_date,
        gate_modified_by,           etlactiveind,           etljobname, 		
        envsourcecd, 	            datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
		s.wms_gate_loc_code,              s.wms_gate_ou,                s.wms_gate_lineno,
        s.wms_gate_shift_code,            s.wms_gate_emp_code,          s.wms_gate_area,
        s.wms_gate_timestamp,             s.wms_gate_created_by,        s.wms_gate_created_date,
        s.wms_gate_modified_by,           1,                            p_etljobname,		
        p_envsourcecd,		              p_datasourcecd,			    NOW()
	FROM stg.stg_wms_gate_emp_equip_map_dtl s
    LEFT JOIN dwh.d_gateemployeemapping t
    ON 	t.gate_loc_code  		= s.wms_gate_loc_code
	AND t.gate_ou 			    = s.wms_gate_ou
	AND t.gate_lineno 			= s.wms_gate_lineno 
    WHERE t.gate_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_gate_emp_equip_map_dtl
	(
		wms_gate_loc_code, wms_gate_ou, wms_gate_lineno, wms_gate_shift_code, wms_gate_emp_code,
        wms_gate_euip_code, wms_gate_area, wms_gate_timestamp, wms_gate_created_by, wms_gate_created_date, 
        wms_gate_modified_by, wms_gate_modified_date, etlcreateddatetime

     )
	SELECT 
		wms_gate_loc_code, wms_gate_ou, wms_gate_lineno, wms_gate_shift_code, wms_gate_emp_code,
        wms_gate_euip_code, wms_gate_area, wms_gate_timestamp, wms_gate_created_by, wms_gate_created_date, 
        wms_gate_modified_by, wms_gate_modified_date, etlcreateddatetime
	FROM stg.stg_wms_gate_emp_equip_map_dtl;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
           
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_gateemployeemapping(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_geocitydetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_geocitydetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_geo_city_dtl;

	UPDATE dwh.d_geoCityDetail t
    SET 
			geo_city_desc				=	s.wms_geo_city_desc,
			geo_city_timezn				=	s.wms_geo_city_timezn,
			geo_city_status				=	s.wms_geo_city_status,
			geo_city_rsn				=	s.wms_geo_city_rsn,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_geo_city_dtl s
    WHERE	t.geo_country_code			=	s.wms_geo_country_code
	AND		t.geo_state_code			=	s.wms_geo_state_code
	AND     t.geo_city_code				=	s.wms_geo_city_code
	AND		t.geo_city_ou				=	s.wms_geo_city_ou
	AND     t.geo_city_lineno			=   s.wms_geo_city_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_geoCityDetail
	(
		geo_country_code				,geo_state_code					,geo_city_code					,geo_city_ou      
		,geo_city_lineno				,geo_city_desc					,geo_city_timezn				,geo_city_status		,geo_city_rsn 
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		wms_geo_country_code				,wms_geo_state_code						,wms_geo_city_code					,wms_geo_city_ou
		,wms_geo_city_lineno				,wms_geo_city_desc						,wms_geo_city_timezn				,wms_geo_city_status	,wms_geo_city_rsn
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_geo_city_dtl s
    LEFT JOIN dwh.d_geoCityDetail t
    ON 		t.geo_country_code			=	s.wms_geo_country_code
	AND		t.geo_state_code			=	s.wms_geo_state_code
	AND     t.geo_city_code				=	s.wms_geo_city_code
	AND		t.geo_city_ou				=	s.wms_geo_city_ou
	AND     t.geo_city_lineno			=   s.wms_geo_city_lineno
    WHERE	t.geo_city_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_geo_city_dtl
	(
		wms_geo_country_code				,wms_geo_state_code						,wms_geo_city_code					,wms_geo_city_ou
		,wms_geo_city_lineno				,wms_geo_city_desc						,wms_geo_city_timezn				,wms_geo_city_status	,wms_geo_city_rsn
		,etlcreateddatetime
	)
	SELECT 
		wms_geo_country_code				,wms_geo_state_code						,wms_geo_city_code					,wms_geo_city_ou
		,wms_geo_city_lineno				,wms_geo_city_desc						,wms_geo_city_timezn				,wms_geo_city_status	,wms_geo_city_rsn
		,etlcreateddatetime
	FROM stg.stg_wms_geo_city_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_geocitydetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_geocountrydetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_geocountrydetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_geo_country_dtl;

	UPDATE dwh.d_geoCountryDetail t
    SET 
			geo_country_desc			=	s.wms_geo_country_desc,
			geo_country_timezn			=	s.wms_geo_country_timezn,
			geo_country_status			=	s.wms_geo_country_status,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_geo_country_dtl s
    WHERE	t.geo_country_code			=	s.wms_geo_country_code
	AND		t.geo_country_ou			=	s.wms_geo_country_ou
	AND     t.geo_country_lineno		=	s.wms_geo_country_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_geoCountryDetail
	(
		geo_country_code				,geo_country_ou					,geo_country_lineno				,geo_country_desc
		,geo_country_timezn				,geo_country_status
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		wms_geo_country_code				,wms_geo_country_ou						,wms_geo_country_lineno				,wms_geo_country_desc
		,wms_geo_country_timezn				,wms_geo_country_status
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_geo_country_dtl s
    LEFT JOIN dwh.d_geoCountryDetail t
    ON 		t.geo_country_code			=	s.wms_geo_country_code
	AND		t.geo_country_ou			=	s.wms_geo_country_ou
	AND     t.geo_country_lineno		=	s.wms_geo_country_lineno
    WHERE	t.geo_country_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_geo_country_dtl
	(
  
		wms_geo_country_code				,wms_geo_country_ou						,wms_geo_country_lineno				,wms_geo_country_desc
		,wms_geo_country_timezn				,wms_geo_country_status					,wms_geo_country_rsn				,wms_geo_currency
		,etlcreateddatetime
	)
	SELECT 
		wms_geo_country_code				,wms_geo_country_ou						,wms_geo_country_lineno				,wms_geo_country_desc
		,wms_geo_country_timezn				,wms_geo_country_status					,wms_geo_country_rsn				,wms_geo_currency
		,etlcreateddatetime
	FROM stg.stg_wms_geo_country_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_geocountrydetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_geopostaldetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_geopostaldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_geo_postal_dtl;

	UPDATE dwh.d_geoPostalDetail t
    SET 
			geo_postal_desc				=	s.wms_geo_postal_desc,
			geo_postal_status			=	s.wms_geo_postal_status,
			geo_postal_rsn				=	s.wms_geo_postal_rsn,
			geo_postal_lantitude		=	s.wms_geo_postal_lantitude,
			geo_postal_longitude		=	s.wms_geo_postal_longitude,
			geo_postal_geo_fen_name		=	s.wms_geo_postal_geo_fen_name,
			geo_postal_geo_fen_range	=	s.wms_geo_postal_geo_fen_range,
			geo_postal_range_uom		=	s.wms_geo_postal_range_uom,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_geo_postal_dtl s
    WHERE	t.geo_country_code			=	s.wms_geo_country_code
	AND		t.geo_state_code			=	s.wms_geo_state_code
	AND     t.geo_city_code				=	s.wms_geo_city_code
	AND     t.geo_postal_code			=	s.wms_geo_postal_code
	AND		t.geo_postal_ou				=	s.wms_geo_postal_ou
	AND     t.geo_postal_lineno			=   s.wms_geo_postal_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_geoPostalDetail
	(
		geo_country_code				,geo_state_code					,geo_city_code					,geo_postal_code
		,geo_postal_ou					,geo_postal_lineno				,geo_postal_desc				,geo_postal_status
		,geo_postal_rsn					,geo_postal_lantitude			,geo_postal_longitude			,geo_postal_geo_fen_name
		,geo_postal_geo_fen_range		,geo_postal_range_uom
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		wms_geo_country_code				,wms_geo_state_code						,wms_geo_city_code					,wms_geo_postal_code
		,wms_geo_postal_ou					,wms_geo_postal_lineno					,wms_geo_postal_desc				,wms_geo_postal_status
		,wms_geo_postal_rsn					,wms_geo_postal_lantitude				,wms_geo_postal_longitude			,wms_geo_postal_geo_fen_name
		,wms_geo_postal_geo_fen_range		,wms_geo_postal_range_uom
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_geo_postal_dtl s
    LEFT JOIN dwh.d_geoPostalDetail t
    ON 		t.geo_country_code			=	s.wms_geo_country_code
	AND		t.geo_state_code			=	s.wms_geo_state_code
	AND     t.geo_city_code				=	s.wms_geo_city_code
	AND     t.geo_postal_code			=	s.wms_geo_postal_code
	AND		t.geo_postal_ou				=	s.wms_geo_postal_ou
	AND     t.geo_postal_lineno			=   s.wms_geo_postal_lineno
    WHERE	t.geo_postal_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_geo_postal_dtl
	(
		wms_geo_country_code				,wms_geo_state_code						,wms_geo_city_code					,wms_geo_postal_code
		,wms_geo_postal_ou					,wms_geo_postal_lineno					,wms_geo_postal_desc				,wms_geo_postal_status
		,wms_geo_postal_rsn					,wms_geo_postal_lantitude				,wms_geo_postal_longitude			,wms_geo_postal_geo_fen_name
		,wms_geo_postal_geo_fen_range		,wms_geo_postal_range_uom
		,etlcreateddatetime
	)
	SELECT 
		wms_geo_country_code				,wms_geo_state_code						,wms_geo_city_code					,wms_geo_postal_code
		,wms_geo_postal_ou					,wms_geo_postal_lineno					,wms_geo_postal_desc				,wms_geo_postal_status
		,wms_geo_postal_rsn					,wms_geo_postal_lantitude				,wms_geo_postal_longitude			,wms_geo_postal_geo_fen_name
		,wms_geo_postal_geo_fen_range		,wms_geo_postal_range_uom
		,etlcreateddatetime
	FROM stg.stg_wms_geo_postal_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_geopostaldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_georegion(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_georegion(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
        
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_geo_region_hdr;

    UPDATE dwh.d_geoRegion t
    SET 
        geo_reg_desc     = s.wms_geo_reg_desc,
        geo_reg_stat     = s.wms_geo_reg_stat,
        geo_reg_rsn     = s.wms_geo_reg_rsn,
        geo_reg_created_by     = s.wms_geo_reg_created_by,
        geo_reg_created_date     = s.wms_geo_reg_created_date,
        geo_reg_modified_by     = s.wms_geo_reg_modified_by,
        geo_reg_modified_date     = s.wms_geo_reg_modified_date,
        geo_reg_timestamp     = s.wms_geo_reg_timestamp,
        geo_reg_userdefined1     = s.wms_geo_reg_userdefined1,
        geo_reg_userdefined2     = s.wms_geo_reg_userdefined2,
        geo_reg_userdefined3     = s.wms_geo_reg_userdefined3,
        etlactiveind           =     1,
        etljobname             =     p_etljobname,
        envsourcecd            =     p_envsourcecd,
        datasourcecd           =     p_datasourcecd,
        etlupdatedatetime      =     NOW()  
    FROM stg.stg_wms_geo_region_hdr s
    WHERE t.geo_reg     = s.wms_geo_reg
    AND   t.geo_reg_ou  = s.wms_geo_reg_ou;
   
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_geoRegion
    (geo_reg, geo_reg_ou, geo_reg_desc, geo_reg_stat, geo_reg_rsn, geo_reg_created_by, geo_reg_created_date, geo_reg_modified_by, geo_reg_modified_date, geo_reg_timestamp, geo_reg_userdefined1, geo_reg_userdefined2, geo_reg_userdefined3, etlactiveind,
        etljobname,         envsourcecd,    datasourcecd,       etlcreatedatetime
    )
    
    SELECT 
       s.wms_geo_reg, s.wms_geo_reg_ou, s.wms_geo_reg_desc, s.wms_geo_reg_stat, s.wms_geo_reg_rsn, s.wms_geo_reg_created_by, s.wms_geo_reg_created_date, s.wms_geo_reg_modified_by, s.wms_geo_reg_modified_date, s.wms_geo_reg_timestamp, s.wms_geo_reg_userdefined1, s.wms_geo_reg_userdefined2, s.wms_geo_reg_userdefined3,
        1,      p_etljobname,       p_envsourcecd,      p_datasourcecd,         now()
    FROM stg.stg_wms_geo_region_hdr s
    LEFT JOIN dwh.d_geoRegion t
    ON  s.wms_geo_reg =t.geo_reg     
    AND s.wms_geo_reg_ou =t.geo_reg_ou
    WHERE t.geo_reg  IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_wms_geo_region_hdr

    (
    wms_geo_reg, wms_geo_reg_ou, wms_geo_reg_desc, wms_geo_reg_stat, wms_geo_reg_rsn, wms_geo_reg_created_by,
    wms_geo_reg_created_date, wms_geo_reg_modified_by, wms_geo_reg_modified_date, wms_geo_reg_timestamp, 
    wms_geo_reg_userdefined1, wms_geo_reg_userdefined2, wms_geo_reg_userdefined3, etlcreateddatetime
    )
    SELECT
    wms_geo_reg, wms_geo_reg_ou, wms_geo_reg_desc, wms_geo_reg_stat, wms_geo_reg_rsn, wms_geo_reg_created_by,
    wms_geo_reg_created_date, wms_geo_reg_modified_by, wms_geo_reg_modified_date, wms_geo_reg_timestamp, 
    wms_geo_reg_userdefined1, wms_geo_reg_userdefined2, wms_geo_reg_userdefined3, etlcreateddatetime
    FROM stg.stg_wms_geo_region_hdr; 
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
    
    --SELECT COUNT(*) INTO InsCnt FROM dwh.usp_d_geoRegion;
END;
$$;


ALTER PROCEDURE dwh.usp_d_georegion(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_geostatedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_geostatedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_geo_state_dtl;
	
	UPDATE dwh.d_geoStateDetail t
    SET		
			geo_state_desc			=	s.wms_geo_state_desc,
			geo_state_timezn		=	s.wms_geo_state_timezn,
			geo_state_status		=	s.wms_geo_state_status,
			geo_state_rsn			=	s.wms_geo_state_rsn,
			ge_holidays				=	s.wms_ge_holidays,
			etlactiveind			=	1,
			envsourcecd				=	p_envsourcecd ,
			datasourcecd			=	p_datasourcecd ,
			etlupdatedatetime		=	NOW()	
	FROM	stg.stg_wms_geo_state_dtl s
	WHERE	t.geo_state_code			=	s.wms_geo_state_code
	AND		t.geo_state_ou				=	s.wms_geo_state_ou
	AND		t.geo_state_lineno			=	s.wms_geo_state_lineno
	AND		t.geo_country_code			=	s.wms_geo_country_code;
	 
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_geoStateDetail
	(
		geo_country_code		,		geo_state_code		,		geo_state_ou		,		geo_state_lineno	,
		geo_state_desc			,		geo_state_timezn	,		geo_state_status	,		geo_state_rsn		,
		ge_holidays				,
		etlactiveind			,		etljobname			,		envsourcecd			,	datasourcecd			,
		etlcreatedatetime
	)	
	
    SELECT 
		wms_geo_country_code	,	wms_geo_state_code		,		wms_geo_state_ou		,	wms_geo_state_lineno	,
		wms_geo_state_desc		,	wms_geo_state_timezn	,		wms_geo_state_status	,	wms_geo_state_rsn		,
		s.ge_holidays				,
			1					,		p_etljobname		, 			p_envsourcecd		,		p_datasourcecd		, 		
		now()
	FROM stg.stg_wms_geo_state_dtl s
    LEFT JOIN dwh.d_geoStateDetail t
    ON 	s.wms_geo_state_code	=	t.geo_state_code
	AND s.wms_geo_country_code	=	t.geo_country_code
	AND	s.wms_geo_state_ou		=	t.geo_state_ou
    WHERE t.geo_country_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_geo_state_dtl
	(
		wms_geo_country_code	,	wms_geo_state_code		,		wms_geo_state_ou		,	wms_geo_state_lineno	,
		wms_geo_state_desc		,	wms_geo_state_timezn	,		wms_geo_state_status	,	wms_geo_state_rsn		,
		ge_holidays				,	etlcreateddatetime		
	)

	SELECT 
		wms_geo_country_code	,	wms_geo_state_code		,		wms_geo_state_ou		,	wms_geo_state_lineno	,
		wms_geo_state_desc		,	wms_geo_state_timezn	,		wms_geo_state_status	,	wms_geo_state_rsn		,
		ge_holidays				,	etlcreateddatetime
	FROM stg.stg_wms_geo_state_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_geostatedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_geosuburbdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_geosuburbdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_geo_suburb_dtl;
	
	
	UPDATE dwh.d_geoSuburbDetail t
    SET	
			geo_suburb_desc			=	s.wms_geo_suburb_desc,
			geo_suburb_status		=	s.wms_geo_suburb_status,
			geo_suburb_rsn			=	s.wms_geo_suburb_rsn,
			etlactiveind			=	1,
			envsourcecd				=	p_envsourcecd ,
			datasourcecd			=	p_datasourcecd ,
			etlupdatedatetime		=	NOW()
	FROM	stg.stg_wms_geo_suburb_dtl s
	WHERE	t.geo_country_code		=	s.wms_geo_country_code
	AND		t.geo_state_code		=	s.wms_geo_state_code
	AND		t.geo_city_code			=	s.wms_geo_city_code
	AND		t.geo_postal_code		=	s.wms_geo_postal_code
	AND		t.geo_suburb_code		=	s.wms_geo_suburb_code
	AND		t.geo_suburb_lineno		=	s.wms_geo_suburb_lineno;
	 
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_geoSuburbDetail
	(
		geo_country_code	,		geo_state_code			,		geo_city_code		,		geo_postal_code		,
		geo_suburb_code		,		geo_suburb_ou			,		geo_suburb_lineno	,		geo_suburb_desc		,
		geo_suburb_status	,		geo_suburb_rsn			,
		etlactiveind		,		etljobname				,		envsourcecd			,		datasourcecd		,
		etlcreatedatetime	,		etlupdatedatetime
	)	
	
    SELECT 
		wms_geo_country_code	,	wms_geo_state_code		,		wms_geo_city_code	,		wms_geo_postal_code	,
		wms_geo_suburb_code		,	wms_geo_suburb_ou		,		wms_geo_suburb_lineno,		wms_geo_suburb_desc	,
		wms_geo_suburb_status	,	wms_geo_suburb_rsn		,
			1					,	p_etljobname			, 			p_envsourcecd	,		p_datasourcecd		, 		
		etlcreateddatetime		,	now()
	FROM stg.stg_wms_geo_suburb_dtl s
    LEFT JOIN dwh.d_geoSuburbDetail t
    ON 		t.geo_state_code		=	s.wms_geo_state_code
	AND		t.geo_country_code		=	s.wms_geo_country_code
	AND		t.geo_city_code			=	s.wms_geo_city_code
	AND		t.geo_postal_code		=	s.wms_geo_postal_code
	AND		t.geo_suburb_code		=	s.wms_geo_suburb_code
	AND		t.geo_suburb_lineno		=	s.wms_geo_suburb_lineno
    WHERE	t.geo_country_code IS NULL;

    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_geo_suburb_dtl
	(
		wms_geo_country_code	,	wms_geo_state_code		,		wms_geo_city_code	,		wms_geo_postal_code	,
		wms_geo_suburb_code		,	wms_geo_suburb_ou		,		wms_geo_suburb_lineno,		wms_geo_suburb_desc	,
		wms_geo_suburb_status	,	wms_geo_suburb_rsn		,		etlcreateddatetime
	)

	SELECT 
		wms_geo_country_code	,	wms_geo_state_code		,		wms_geo_city_code	,		wms_geo_postal_code	,
		wms_geo_suburb_code		,	wms_geo_suburb_ou		,		wms_geo_suburb_lineno,		wms_geo_suburb_desc	,
		wms_geo_suburb_status	,	wms_geo_suburb_rsn		,		etlcreateddatetime
	FROM stg.stg_wms_geo_suburb_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_geosuburbdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_geosubzone(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_geosubzone(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

	
BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_geo_sub_zone_hdr;

	UPDATE dwh.d_geosubzone t
    SET 
		 geo_sub_zone_desc 			= s.wms_geo_sub_zone_desc
		,geo_sub_zone_stat 			= s.wms_geo_sub_zone_stat
		,geo_sub_zone_created_by 	= s.wms_geo_sub_zone_created_by
		,geo_sub_zone_created_date 	= s.wms_geo_sub_zone_created_date
		,geo_sub_zone_modified_by 	= s.wms_geo_sub_zone_modified_by
		,geo_sub_zone_modified_date = s.wms_geo_sub_zone_modified_date
		,geo_sub_zone_timestamp 	= s.wms_geo_sub_zone_timestamp
		,etlactiveind 				= 1
		,etljobname 				= p_etljobname
		,envsourcecd 				= p_envsourcecd 
		,datasourcecd 				= p_datasourcecd
		,etlupdatedatetime 			= NOW()
    FROM stg.stg_wms_geo_sub_zone_hdr s
    WHERE t.geo_sub_zone 			= s.wms_geo_sub_zone
	AND	t.geo_sub_zone_ou 			= s.wms_geo_sub_zone_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_geosubzone
	(
		 geo_sub_zone,				geo_sub_zone_ou,			geo_sub_zone_desc,			geo_sub_zone_stat,		geo_sub_zone_created_by
		,geo_sub_zone_created_date,	geo_sub_zone_modified_by,	geo_sub_zone_modified_date,	geo_sub_zone_timestamp
		,etlactiveind,				etljobname,					envsourcecd,				datasourcecd,			etlcreatedatetime
	)
	
    SELECT 
		 s.wms_geo_sub_zone,				s.wms_geo_sub_zone_ou,			s.wms_geo_sub_zone_desc,			s.wms_geo_sub_zone_stat,		s.wms_geo_sub_zone_created_by
		,s.wms_geo_sub_zone_created_date,	s.wms_geo_sub_zone_modified_by,	s.wms_geo_sub_zone_modified_date,	s.wms_geo_sub_zone_timestamp		
		,1,									p_etljobname,					p_envsourcecd,						p_datasourcecd,					NOW()
	FROM stg.stg_wms_geo_sub_zone_hdr s
    LEFT JOIN dwh.d_geosubzone t
    ON 	s.wms_geo_sub_zone  		= t.geo_sub_zone
	AND s.wms_geo_sub_zone_ou 		= t.geo_sub_zone_ou
    WHERE t.geo_sub_zone IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_geo_sub_zone_hdr
	(
		 wms_geo_sub_zone				,wms_geo_sub_zone_ou			,wms_geo_sub_zone_desc			,wms_geo_sub_zone_stat
		,wms_geo_sub_zone_rsn			,wms_geo_sub_zone_created_by	,wms_geo_sub_zone_created_date	,wms_geo_sub_zone_modified_by
		,wms_geo_sub_zone_modified_date	,wms_geo_sub_zone_timestamp		,wms_geo_sub_zone_userdefined1	,wms_geo_sub_zone_userdefined2
		,wms_geo_sub_zone_userdefined3	,etlcreateddatetime
	)
	SELECT 
		 wms_geo_sub_zone				,wms_geo_sub_zone_ou			,wms_geo_sub_zone_desc			,wms_geo_sub_zone_stat
		,wms_geo_sub_zone_rsn			,wms_geo_sub_zone_created_by	,wms_geo_sub_zone_created_date	,wms_geo_sub_zone_modified_by
		,wms_geo_sub_zone_modified_date	,wms_geo_sub_zone_timestamp		,wms_geo_sub_zone_userdefined1	,wms_geo_sub_zone_userdefined2
		,wms_geo_sub_zone_userdefined3	,etlcreateddatetime
	FROM stg.stg_wms_geo_sub_zone_hdr;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_geosubzone(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_geozone(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_geozone(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_geo_zone_hdr;

	UPDATE dwh.d_geozone t
    SET 
		geo_zone_desc           = s.wms_geo_zone_desc    ,
		geo_zone_stat           = s.wms_geo_zone_stat    ,
		geo_zone_rsn            = s.wms_geo_zone_rsn    ,
		geo_zone_created_by     = s.wms_geo_zone_created_by    ,
		geo_zone_created_date   = s.wms_geo_zone_created_date    ,
		geo_zone_modified_by    = s.wms_geo_zone_modified_by    ,
		geo_zone_modified_date  = s.wms_geo_zone_modified_date    ,
		geo_zone_timestamp      = s.wms_geo_zone_timestamp    ,
        etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_geo_zone_hdr s
    WHERE t.geo_zone  		= s.wms_geo_zone
	AND t.geo_zone_ou 	    = s.wms_geo_zone_ou;
	
	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_geozone
	(
		geo_zone,					geo_zone_ou,				geo_zone_desc,			geo_zone_stat,				geo_zone_rsn,
        geo_zone_created_by,		geo_zone_created_date,		geo_zone_modified_by,	geo_zone_modified_date,		geo_zone_timestamp,
        etlactiveind,               etljobname, 		        envsourcecd, 	        datasourcecd, 			    etlcreatedatetime
	)
	
    SELECT 
		s.wms_geo_zone,					s.wms_geo_zone_ou,				    s.wms_geo_zone_desc,			s.wms_geo_zone_stat,				s.wms_geo_zone_rsn,
        s.wms_geo_zone_created_by,		s.wms_geo_zone_created_date,		s.wms_geo_zone_modified_by,	    s.wms_geo_zone_modified_date,		s.wms_geo_zone_timestamp,
        1,                              p_etljobname,		                p_envsourcecd,		            p_datasourcecd,			            NOW()
	FROM stg.stg_wms_geo_zone_hdr s
    LEFT JOIN dwh.d_geozone t
    ON 	t.geo_zone  		= s.wms_geo_zone
	AND t.geo_zone_ou 	    = s.wms_geo_zone_ou
    WHERE t.geo_zone IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_geo_zone_hdr
	(
        wms_geo_zone, wms_geo_zone_ou, wms_geo_zone_desc, wms_geo_zone_stat, wms_geo_zone_rsn, 
        wms_geo_zone_created_by, wms_geo_zone_created_date, wms_geo_zone_modified_by,
        wms_geo_zone_modified_date, wms_geo_zone_timestamp, wms_geo_zone_userdefined1, 
        wms_geo_zone_userdefined2, wms_geo_zone_userdefined3, etlcreateddatetime

     )
	SELECT 
        wms_geo_zone, wms_geo_zone_ou, wms_geo_zone_desc, wms_geo_zone_stat, wms_geo_zone_rsn, 
        wms_geo_zone_created_by, wms_geo_zone_created_date, wms_geo_zone_modified_by,
        wms_geo_zone_modified_date, wms_geo_zone_timestamp, wms_geo_zone_userdefined1, 
        wms_geo_zone_userdefined2, wms_geo_zone_userdefined3, etlcreateddatetime

	FROM stg.stg_wms_geo_zone_hdr;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_geozone(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_hht_master(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_hht_master(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_pcsit_hht_master;

    -- UPDATE dwh.d_hht_master t
    -- SET
    --     hht_loc_key                         =COALESCE(l.loc_key,-1),            
    --     id                                   =s.id,
    --     locationcode                     =s.locationcode,
    --     locationdesc                         =s.locationdesc,
    --     brand                               =s.brand,
    --     Count                               =s.Count,
    --     oldcount040220                      =s.oldcount040220,
    --     oldcount300920                      =s.oldcount300920,
    --     oldcount030321                      =s.oldcount030321,
    --     etlactiveind                        = 1,
    --     etljobname                          = p_etljobname,
    --     envsourcecd                         = p_envsourcecd,
    --     datasourcecd                        = p_datasourcecd,
    --     etlupdatedatetime                   = NOW()
    -- FROM stg.stg_pcsit_hht_master s
    -- LEFT JOIN dwh.d_location l       
    --  ON  s.locationcode          = l.loc_code ;

    TRUNCATE ONLY dwh.d_hht_master restart identity ;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_hht_master
    (
            hht_loc_key, id,   locationcode,    locationdesc,    brand, Count,    oldcount040220,   oldcount300920,
            oldcount030321,         etlactiveind,                   etljobname, 
        envsourcecd,                datasourcecd,                   etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1), s.id,   s.locationcode,    s.locationdesc,    s.brand, s.Count,    s.oldcount040220,   s.oldcount300920,s.oldcount030321,               
        1,              p_etljobname,       p_envsourcecd,  p_datasourcecd, NOW()
    FROM stg.stg_pcsit_hht_master s
    LEFT JOIN dwh.d_location l      
        ON  s.locationcode          = l.loc_code; 
        
--     WHERE    IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_pcsit_hht_master
    (
             id,   locationcode,    locationdesc,    brand,Count,    oldcount040220,   oldcount300920,
            oldcount030321,         etlcreateddatetime
    )
    SELECT
            id,   locationcode,    locationdesc,    brand,Count,    oldcount040220,   oldcount300920,
            oldcount030321,     etlcreateddatetime
    FROM stg.stg_pcsit_hht_master;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_hht_master(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_inboundtat(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_inboundtat(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_dim_Inbound_Tat;

    UPDATE dwh.D_InboundTAT t
    SET
		Location_key		= COALESCE(l.loc_key,-1),
        Cutofftime          = s.Cutofftime,
        ProcessTAT          = s.ProcessTAT,
        GRTAT               = s.GRTAT,
        PutawayTAT          = s.PutawayTAT,
        openingTime         = s.openingTime,
        ClosingTime         = s.ClosingTime,
        etlactiveind        = 1,
        etljobname          = p_etljobname,
        envsourcecd         = p_envsourcecd,
        datasourcecd        = p_datasourcecd,
        etlupdatedatetime   = NOW()
    FROM stg.stg_dim_Inbound_Tat s
	LEFT JOIN dwh.d_location l
	ON	l.loc_code	= s.Locationcode
	AND	l.loc_ou	= s.ou
    WHERE t.id		= s.id
    AND	t.ou		= s.ou
    AND t.Locationcode	= s.Locationcode
    AND t.OrderType		= s.OrderType
    AND t.ServiceType	= s.ServiceType;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_InboundTAT
    (
		Location_key	,
        id				, ou			, Locationcode	, OrderType	, 
		ServiceType		, Cutofftime	, ProcessTAT	, GRTAT	, 
		PutawayTAT		, openingTime	, ClosingTime	, 
		etlactiveind	, etljobname	, envsourcecd	, datasourcecd	, 
		etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1)	,
        s.id					, s.ou			, s.Locationcode, s.OrderType	, 
		s.ServiceType			, s.Cutofftime	, s.ProcessTAT	, s.GRTAT	, 
		s.PutawayTAT			, s.openingTime	, s.ClosingTime	, 
				1				, p_etljobname	, p_envsourcecd	, p_datasourcecd	, 
		NOW()
    FROM stg.stg_dim_Inbound_Tat s
	LEFT JOIN dwh.d_location l
	ON	l.loc_code	= s.Locationcode
	AND	l.loc_ou	= s.ou
    LEFT JOIN dwh.D_InboundTAT t
    ON	s.id	= t.id
    AND	s.ou	= t.ou
    AND	s.Locationcode	= t.Locationcode
    AND	s.OrderType		= t.OrderType
    AND	s.ServiceType	= t.ServiceType
    WHERE t.id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    INSERT INTO raw.raw_dim_Inbound_Tat
    (
        ou			, Locationcode		, OrderType		, ServiceType, 
		Cutofftime	, ProcessTAT		, GRTAT			, PutawayTAT, openingTime, 
		ClosingTime	, etlcreateddatetime
    )
    SELECT
        ou			, Locationcode		, OrderType		, ServiceType, 
		Cutofftime	, ProcessTAT		, GRTAT			, PutawayTAT, openingTime, 
		ClosingTime	, etlcreateddatetime
    FROM stg.stg_dim_Inbound_Tat;

    EXCEPTION WHEN others THEN
        GET STACKED DIAGNOSTICS
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, 
								p_batchid,p_taskname, 'sp_ExceptionHandling', 
								p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_d_inboundtat(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_itemgrouptype(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_itemgrouptype(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_item_group_type;

	UPDATE dwh.d_itemgrouptype t
    SET 
        item_igt_category       = s.item_igt_category,
        item_igt_grouptypedesc  = s.item_igt_grouptypedesc,
        item_igt_usage          = s.item_igt_usage,
        item_igt_created_by     = s.item_igt_created_by,
        item_igt_created_date   = s.item_igt_created_date,
        item_igt_modified_by    = s.item_igt_modified_by,
        item_igt_modified_date  = s.item_igt_modified_date,
        item_igt_timestamp      = s.item_igt_timestamp,
        item_igt_created_langid = s.item_igt_created_langid,
        etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_item_group_type s
    WHERE t.item_igt_grouptype  		= s.item_igt_grouptype
	AND t.item_igt_lo 			= s.item_igt_lo;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_itemgrouptype
	(
		item_igt_grouptype,
item_igt_lo,
item_igt_category,
item_igt_grouptypedesc,
item_igt_usage,
item_igt_created_by,
item_igt_created_date,
item_igt_modified_by,
item_igt_modified_date,
item_igt_timestamp,
item_igt_created_langid,
		etlactiveind,
        etljobname, 		envsourcecd, 	datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
		s.item_igt_grouptype,
s.item_igt_lo,
s.item_igt_category,
s.item_igt_grouptypedesc,
s.item_igt_usage,
s.item_igt_created_by,
s.item_igt_created_date,
s.item_igt_modified_by,
s.item_igt_modified_date,
s.item_igt_timestamp,
s.item_igt_created_langid,			1,
		p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()
	FROM stg.stg_item_group_type s
    LEFT JOIN dwh.d_itemgrouptype t
    ON 	t.item_igt_grouptype  		= s.item_igt_grouptype
	AND t.item_igt_lo 			= s.item_igt_lo
    WHERE t.item_igt_grouptype IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_item_group_type
	(
	 item_igt_grouptype, item_igt_lo, item_igt_category, item_igt_grouptypedesc, item_igt_usage, 
        item_igt_created_by, item_igt_created_date, item_igt_modified_by, item_igt_modified_date, 
        item_igt_timestamp, item_igt_created_langid, etlcreateddatetime

)
	SELECT 
		 item_igt_grouptype, item_igt_lo, item_igt_category, item_igt_grouptypedesc, item_igt_usage, 
        item_igt_created_by, item_igt_created_date, item_igt_modified_by, item_igt_modified_date, 
        item_igt_timestamp, item_igt_created_langid, etlcreateddatetime

	FROM stg.stg_item_group_type;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_itemgrouptype(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_itemheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_itemheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
        
    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_item_hdr;

    UPDATE dwh.d_itemHeader t
    SET 

        itm_short_desc                  = s. wms_itm_short_desc,
        itm_long_desc                   = s. wms_itm_long_desc,
        itm_mas_unit                    = s. wms_itm_mas_unit,
        itm_customer                    = s. wms_itm_customer,
        itm_class                       = s. wms_itm_class,
        itm_status                      = s. wms_itm_status,  
        itm_ref_no                      = s. wms_itm_ref_no,
        itm_subs_item1                  = s. wms_itm_subs_item1,
        itm_hs_code                     = s. wms_itm_hs_code,
        itm_price                       = s. wms_itm_price,
        itm_currency                    = s. wms_itm_currency,
        itm_tracking                    = s. wms_itm_tracking,
        itm_lot_numbering               = s. wms_itm_lot_numbering,
        itm_serial_numbering            = s. wms_itm_serial_numbering,
        itm_remarks                     = s. wms_itm_remarks,
        itm_instructions                = s. wms_itm_instructions,
        itm_hazardous                   = s. wms_itm_hazardous,
        itm_length                      = s. wms_itm_length,
        itm_breadth                     = s. wms_itm_breadth,
        itm_height                      = s. wms_itm_height,
        itm_uom                         = s. wms_itm_uom,
        itm_volume                      = s. wms_itm_volume,
        itm_volume_uom                  = s. wms_itm_volume_uom,
		itm_volume_calc					= (s.wms_itm_length * s.wms_itm_breadth * s.wms_itm_height),
        itm_weight                      = s. wms_itm_weight,
        itm_weight_uom                  = s. wms_itm_weight_uom,
        itm_storage_from_temp           = s. wms_itm_storage_from_temp,
        itm_storage_to_temp             = s. wms_itm_storage_to_temp,
        itm_storage_temp_uom            = s. wms_itm_storage_temp_uom,
        itm_shelf_life                  = s. wms_itm_shelf_life,
        itm_shelf_life_uom              = s. wms_itm_shelf_life_uom,
        itm_timestamp                   = s. wms_itm_timestamp,
        itm_created_by                  = s. wms_itm_created_by,
        itm_created_dt                  = s. wms_itm_created_dt,
        itm_modified_by                 = s. wms_itm_modified_by,
        itm_modified_dt                 = s. wms_itm_modified_dt,
        itm_reason_code                 = s. wms_itm_reason_code,
        itm_type                        = s. wms_itm_type,
        itm_user_defined1               = s. wms_itm_user_defined1,
        itm_user_defined2               = s. wms_itm_user_defined2,
        itm_itemgroup                   = s. wms_itm_itemgroup,
        itm_criticaldays                = s. wms_itm_criticaldays,
        itm_criticaldays_uom            = s. wms_itm_criticaldays_uom,
        itm_movement_type               = s. wms_itm_movement_type,
        itm_volume_factor               = s. wms_itm_volume_factor,
        itm_volume_weight               = s. wms_itm_volume_weight,
        itm_item_url                    = s. wms_itm_item_url,
        itm_compilance                  = s. wms_itm_compilance,
        itm_new_item                    = s. wms_itm_new_item,
        itm_customer_serial_no          = s. wms_itm_customer_serial_no,
        itm_warranty_serial_no          = s. wms_itm_warranty_serial_no,
        itm_gift_card_serial_no         = s. wms_itm_gift_card_serial_no,
        itm_oe_serial_no                = s. wms_itm_oe_serial_no,
        itm_oub_customer_serial_no      = s. wms_itm_oub_customer_serial_no,
        itm_oub_warranty_serial_no      = s. wms_itm_oub_warranty_serial_no,
        itm_oub_gift_card_serial_no     = s. wms_itm_oub_gift_card_serial_no,
        itm_oub_oe_serial_no            = s. wms_itm_oub_oe_serial_no,
        itm_inbound                     = s. wms_itm_inbound,
        itm_outbound                    = s. wms_itm_outbound,
        etlactiveind           			= 1,
        etljobname             			= p_etljobname,
        envsourcecd            			= p_envsourcecd,
        datasourcecd           			= p_datasourcecd,
        etlupdatedatetime      			= NOW()  
    FROM stg.stg_wms_item_hdr s
    WHERE t.itm_code     = s.wms_itm_code
    AND   t.itm_ou    = s.wms_itm_ou;

    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_itemHeader

    (
    	itm_ou					, itm_code				, itm_short_desc			, itm_long_desc				, itm_mas_unit,
		itm_customer			, itm_class				, itm_status				, itm_ref_no				, itm_subs_item1,
		itm_hs_code				, itm_price				, itm_currency				, itm_tracking				, itm_lot_numbering,
		itm_serial_numbering	, itm_remarks			, itm_instructions			, itm_hazardous				, itm_length,
		itm_breadth				, itm_height			, itm_uom					, itm_volume				, itm_volume_uom,
		itm_weight				, itm_weight_uom		, itm_volume_calc			,
		itm_storage_from_temp	, itm_storage_to_temp	, itm_storage_temp_uom		, itm_shelf_life			, itm_shelf_life_uom,
		itm_timestamp			, itm_created_by		, itm_created_dt			, itm_modified_by			, itm_modified_dt,
		itm_reason_code			, itm_type				, itm_user_defined1			, itm_user_defined2			, itm_itemgroup,
		itm_criticaldays		, itm_criticaldays_uom	, itm_movement_type			, itm_volume_factor			, itm_volume_weight,
		itm_item_url			, itm_compilance		, itm_new_item				, itm_customer_serial_no	, itm_warranty_serial_no,
		itm_gift_card_serial_no	, itm_oe_serial_no		, itm_oub_customer_serial_no, itm_oub_warranty_serial_no, itm_oub_gift_card_serial_no,
		itm_oub_oe_serial_no	, itm_inbound			, itm_outbound				,
		etlactiveind			, etljobname			, envsourcecd				, datasourcecd				, etlcreatedatetime
    )
    
    SELECT 
       s.wms_itm_ou					, s.wms_itm_code			, s.wms_itm_short_desc				, s.wms_itm_long_desc			, s.wms_itm_mas_unit,
	   s.wms_itm_customer			, s.wms_itm_class			, s.wms_itm_status					, s.wms_itm_ref_no				, s.wms_itm_subs_item1,
	   s.wms_itm_hs_code			, s.wms_itm_price			, s.wms_itm_currency				, s.wms_itm_tracking			, s.wms_itm_lot_numbering,
	   s.wms_itm_serial_numbering	, s.wms_itm_remarks			, s.wms_itm_instructions			, s.wms_itm_hazardous			, s.wms_itm_length,
	   s.wms_itm_breadth			, s.wms_itm_height			, s.wms_itm_uom						, s.wms_itm_volume				, s.wms_itm_volume_uom,
	   s.wms_itm_weight				, s.wms_itm_weight_uom		, (s.wms_itm_length * s.wms_itm_breadth * s.wms_itm_height),
	   s.wms_itm_storage_from_temp	, s.wms_itm_storage_to_temp	, s.wms_itm_storage_temp_uom		, s.wms_itm_shelf_life			, s.wms_itm_shelf_life_uom,
	   s.wms_itm_timestamp			, s.wms_itm_created_by		, s.wms_itm_created_dt				, s.wms_itm_modified_by			, s.wms_itm_modified_dt,
	   s.wms_itm_reason_code		, s.wms_itm_type			, s.wms_itm_user_defined1			, s.wms_itm_user_defined2		, s.wms_itm_itemgroup,
	   s.wms_itm_criticaldays		, s.wms_itm_criticaldays_uom, s.wms_itm_movement_type			, s.wms_itm_volume_factor		, s.wms_itm_volume_weight,
	   s.wms_itm_item_url			, s.wms_itm_compilance		, s.wms_itm_new_item				, s.wms_itm_customer_serial_no	, s.wms_itm_warranty_serial_no,
	   s.wms_itm_gift_card_serial_no, s.wms_itm_oe_serial_no	, s.wms_itm_oub_customer_serial_no	, s.wms_itm_oub_warranty_serial_no, s.wms_itm_oub_gift_card_serial_no,
	   s.wms_itm_oub_oe_serial_no	, s.wms_itm_inbound			, s.wms_itm_outbound				,
        			1				, p_etljobname				, p_envsourcecd						,      p_datasourcecd		,         now()
    FROM stg.stg_wms_item_hdr s
    LEFT JOIN dwh.d_itemHeader t
    ON s.wms_itm_code     = t.itm_code  
    AND   s.wms_itm_ou    = t.itm_ou
    WHERE t.itm_code IS NULL;
    

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_wms_item_hdr

    (
        wms_itm_ou, wms_itm_code, wms_itm_short_desc, wms_itm_long_desc, wms_itm_mas_unit, wms_itm_customer, 
        wms_itm_class, wms_itm_status, wms_itm_ref_no, wms_itm_subs_item1, wms_itm_subs_item2, 
        wms_itm_hs_code, wms_itm_price, wms_itm_currency, wms_itm_tracking, wms_itm_lot_numbering, 
        wms_itm_serial_numbering, wms_itm_remarks, wms_itm_instructions, wms_itm_hazardous, wms_itm_hazmat_no, 
        wms_itm_hazard_class, wms_itm_length, wms_itm_breadth, wms_itm_height, wms_itm_uom, wms_itm_volume, 
        wms_itm_volume_uom, wms_itm_weight, wms_itm_weight_uom, wms_itm_storage_from_temp, 
        wms_itm_storage_to_temp, wms_itm_storage_temp_uom, wms_itm_shelf_life, wms_itm_shelf_life_uom, 
        wms_itm_timestamp, wms_itm_created_by, wms_itm_created_dt, wms_itm_modified_by, wms_itm_modified_dt, 
        wms_itm_reason_code, wms_itm_type, wms_itm_user_defined1, wms_itm_user_defined2, wms_itm_user_defined3, 
        wms_itm_itemgroup, wms_itm_criticaldays, wms_itm_criticaldays_uom, wms_itm_movement_type, 
        wms_itm_volume_factor, wms_itm_volume_weight, wms_itm_item_url, wms_itm_compilance, 
        wms_itm_operation_type, wms_itm_new_item, wms_itm_customer_serial_no, wms_itm_warranty_serial_no, 
        wms_itm_gift_card_serial_no, wms_itm_oe_serial_no, wms_itm_oub_customer_serial_no, 
        wms_itm_oub_warranty_serial_no, wms_itm_oub_gift_card_serial_no, wms_itm_oub_oe_serial_no,
        wms_itm_inbound, wms_itm_outbound, etlcreateddatetime
    )
    SELECT
        wms_itm_ou, wms_itm_code, wms_itm_short_desc, wms_itm_long_desc, wms_itm_mas_unit, wms_itm_customer, 
        wms_itm_class, wms_itm_status, wms_itm_ref_no, wms_itm_subs_item1, wms_itm_subs_item2, 
        wms_itm_hs_code, wms_itm_price, wms_itm_currency, wms_itm_tracking, wms_itm_lot_numbering, 
        wms_itm_serial_numbering, wms_itm_remarks, wms_itm_instructions, wms_itm_hazardous, wms_itm_hazmat_no, 
        wms_itm_hazard_class, wms_itm_length, wms_itm_breadth, wms_itm_height, wms_itm_uom, wms_itm_volume, 
        wms_itm_volume_uom, wms_itm_weight, wms_itm_weight_uom, wms_itm_storage_from_temp, 
        wms_itm_storage_to_temp, wms_itm_storage_temp_uom, wms_itm_shelf_life, wms_itm_shelf_life_uom, 
        wms_itm_timestamp, wms_itm_created_by, wms_itm_created_dt, wms_itm_modified_by, wms_itm_modified_dt, 
        wms_itm_reason_code, wms_itm_type, wms_itm_user_defined1, wms_itm_user_defined2, wms_itm_user_defined3, 
        wms_itm_itemgroup, wms_itm_criticaldays, wms_itm_criticaldays_uom, wms_itm_movement_type, 
        wms_itm_volume_factor, wms_itm_volume_weight, wms_itm_item_url, wms_itm_compilance, 
        wms_itm_operation_type, wms_itm_new_item, wms_itm_customer_serial_no, wms_itm_warranty_serial_no, 
        wms_itm_gift_card_serial_no, wms_itm_oe_serial_no, wms_itm_oub_customer_serial_no, 
        wms_itm_oub_warranty_serial_no, wms_itm_oub_gift_card_serial_no, wms_itm_oub_oe_serial_no,
        wms_itm_inbound, wms_itm_outbound, etlcreateddatetime
    FROM stg.stg_wms_item_hdr;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
    
    --SELECT COUNT(*) INTO InsCnt FROM dwh.usp_d_itemHeader;
END;
$$;


ALTER PROCEDURE dwh.usp_d_itemheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_itemsuppliermap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_itemsuppliermap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_item_supplier_dtl;

	UPDATE dwh.D_ItemSupplierMap t
    SET 
		itm_supp_code  		=      s.wms_itm_supp_code,
		item_source	   		=      s.wms_item_source,
		etlactiveind 		= 	   1,
		etljobname 			= 	   p_etljobname,
		envsourcecd 		= 	   p_envsourcecd ,
		datasourcecd 		= 	   p_datasourcecd ,
		etlupdatedatetime 	= 	   NOW()
		
    FROM stg.stg_wms_item_supplier_dtl s
    WHERE t.itm_ou  	= 	   s.wms_itm_ou
	and t.itm_code		=	   s.wms_itm_code
	and t.itm_lineno	=	   s.wms_itm_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_ItemSupplierMap
	(
		itm_ou, 			itm_code, 				itm_lineno, 			itm_supp_code, 
		item_source, 		etlactiveind, 			etljobname, 			envsourcecd, 
		datasourcecd, 		etlcreatedatetime
	)
	
    SELECT 
		s.wms_itm_ou, 			s.wms_itm_code, 				s.wms_itm_lineno, 			s.wms_itm_supp_code, 
		s.wms_item_source, 		1, 								p_etljobname, 				p_envsourcecd, 
		p_datasourcecd, 		now()
	FROM stg.stg_wms_item_supplier_dtl s
    LEFT JOIN dwh.D_ItemSupplierMap t
    ON 	s.wms_itm_ou  		= 	t.itm_ou
	and s.wms_itm_code      =   t.itm_code
	and s.wms_itm_lineno	= 	t.itm_lineno
    WHERE t.itm_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_item_supplier_dtl
	(
		wms_itm_ou, wms_itm_code, wms_itm_lineno, 
        wms_itm_supp_code, wms_item_source, etlcreateddatetime
	)
	SELECT 
		 wms_itm_ou, wms_itm_code, wms_itm_lineno, 
        wms_itm_supp_code, wms_item_source, etlcreateddatetime
	FROM stg.stg_wms_item_supplier_dtl;	
	
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_itemsuppliermap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_location(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_location(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_loc_location_hdr;

	UPDATE dwh.d_location t
    SET 
         div_key                = COALESCE(fh.div_key,-1)
        ,div_code               = left(s.wms_loc_code,6)
		,loc_desc 				= s.wms_loc_desc
		,loc_status 			= s.wms_loc_status
		,loc_type 				= s.wms_loc_type
		,reason_code 			= s.wms_reason_code
		,finance_book 			= s.wms_finance_book
		,costcenter 			= s.wms_costcenter
		,address1 				= s.wms_address1
		,address2 				= s.wms_address2
		,country 				= s.wms_country
		,state 					= s.wms_state
		,city 					= s.wms_city
		,zip_code 				= s.wms_zip_code
		,contperson 			= s.wms_contperson
		,contact_no 			= s.wms_contact_no
		,time_zone_id 			= s.wms_time_zone_id
		,loc_lat 				= s.wms_loc_lat
		,loc_long 				= s.wms_loc_long
		,ltimestamp 			= s.wms_timestamp
		,created_by 			= s.wms_created_by
		,created_dt 			= s.wms_created_dt
		,modified_by 			= s.wms_modified_by
		,modified_dt 			= s.wms_modified_dt
		,def_plan_mode 			= s.wms_def_plan_mode
		,loc_shp_point 			= s.wms_loc_shp_point
		,loc_cubing 			= s.wms_loc_cubing
		,blanket_count_sa 		= s.wms_blanket_count_sa
		,enable_uid_prof 		= s.wms_enable_uid_prof
		,loc_linked_hub 		= s.wms_loc_linked_hub
		,loc_enable_bin_chkbit 	= s.wms_loc_enable_bin_chkbit
		,etlactiveind 			= 1
		,etljobname 			= p_etljobname
		,envsourcecd 			= p_envsourcecd 
		,datasourcecd 			= p_datasourcecd
		,etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_loc_location_hdr s
    LEFT JOIN dwh.d_division fh 	
        on  fh.div_ou       = s.wms_loc_ou
        and fh.div_code     = left(s.wms_loc_code,6)
    WHERE t.loc_code  			= s.wms_loc_code
	AND t.loc_ou 				= s.wms_loc_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_location
	(
		div_key, div_code,  loc_ou			,loc_code		,loc_desc			,loc_status			,loc_type
		,reason_code	,finance_book	,costcenter			,address1			,address2
		,country		,state			,city				,zip_code			,contperson
		,contact_no		,time_zone_id	,loc_lat			,loc_long			,ltimestamp
		,created_by		,created_dt		,modified_by		,modified_dt		,def_plan_mode
		,loc_shp_point	,loc_cubing		,blanket_count_sa	,enable_uid_prof	,loc_linked_hub		,loc_enable_bin_chkbit
		,etlactiveind	,etljobname		,envsourcecd		,datasourcecd		,etlcreatedatetime
	)
	
    SELECT 
		 COALESCE(fh.div_key,-1),left(s.wms_loc_code,6) ,s.wms_loc_ou			,s.wms_loc_code			,s.wms_loc_desc			,s.wms_loc_status		,s.wms_loc_type
		,s.wms_reason_code		,s.wms_finance_book		,s.wms_costcenter		,s.wms_address1			,s.wms_address2
		,s.wms_country			,s.wms_state			,s.wms_city				,s.wms_zip_code			,s.wms_contperson
		,s.wms_contact_no		,s.wms_time_zone_id		,s.wms_loc_lat			,s.wms_loc_long			,s.wms_timestamp
		,s.wms_created_by		,s.wms_created_dt		,s.wms_modified_by		,s.wms_modified_dt		,s.wms_def_plan_mode
		,s.wms_loc_shp_point	,s.wms_loc_cubing		,s.wms_blanket_count_sa	,s.wms_enable_uid_prof	,s.wms_loc_linked_hub		,s.wms_loc_enable_bin_chkbit
		,1						,p_etljobname			,p_envsourcecd			,p_datasourcecd			,NOW()
	FROM stg.stg_wms_loc_location_hdr s
    LEFT JOIN dwh.d_division fh 	
        on  fh.div_ou       = s.wms_loc_ou
        and fh.div_code     = left(s.wms_loc_code,6)
    LEFT JOIN dwh.d_location t
    ON 	s.wms_loc_code  		= t.loc_code
	AND s.wms_loc_ou 			= t.loc_ou
    WHERE t.loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_loc_location_hdr
	(
		wms_loc_ou, 				wms_loc_code, 				wms_loc_desc, 		wms_loc_status, 		wms_loc_type, 
		wms_reason_code, 			wms_finance_book, 			wms_costcenter, 	wms_account_code, 		wms_address1, 
		wms_address2, 				wms_country, 				wms_state, 			wms_city, 				wms_zip_code, 
		wms_contperson, 			wms_contact_no, 			wms_email, 			wms_fax, 				wms_time_zone_id, 
		wms_loc_lat, 				wms_loc_long, 				wms_user_def1, 		wms_user_def2, 			wms_user_def3, 
		wms_timestamp, 				wms_created_by, 			wms_created_dt, 	wms_modified_by, 		wms_modified_dt, 
		wms_def_plan_mode, 			wms_loc_shp_point, 			wms_loc_warhouse, 	wms_loc_yard, 			wms_loc_veh_id, 
		wms_loc_veh_type, 			wms_loc_auto_cr_tug_trip, 	wms_loc_cubing, 	wms_loc_default_thu_id, wms_blanket_count_sa, 
		wms_enable_uid_prof, 		wms_loc_linked_hub, 		wms_bank_code, 		wms_cash_code, 			wms_loc_default_ethu, 
		wms_loc_enable_bin_chkbit, 	etlcreateddatetime
	)
	SELECT 
		wms_loc_ou, 				wms_loc_code, 				wms_loc_desc, 		wms_loc_status, 		wms_loc_type, 
		wms_reason_code, 			wms_finance_book, 			wms_costcenter, 	wms_account_code, 		wms_address1, 
		wms_address2, 				wms_country, 				wms_state, 			wms_city, 				wms_zip_code, 
		wms_contperson, 			wms_contact_no, 			wms_email, 			wms_fax, 				wms_time_zone_id, 
		wms_loc_lat, 				wms_loc_long, 				wms_user_def1, 		wms_user_def2, 			wms_user_def3, 
		wms_timestamp, 				wms_created_by, 			wms_created_dt, 	wms_modified_by, 		wms_modified_dt, 
		wms_def_plan_mode, 			wms_loc_shp_point, 			wms_loc_warhouse, 	wms_loc_yard, 			wms_loc_veh_id, 
		wms_loc_veh_type, 			wms_loc_auto_cr_tug_trip, 	wms_loc_cubing, 	wms_loc_default_thu_id, wms_blanket_count_sa, 
		wms_enable_uid_prof, 		wms_loc_linked_hub, 		wms_bank_code, 		wms_cash_code, 			wms_loc_default_ethu, 
		wms_loc_enable_bin_chkbit, 	etlcreateddatetime
	FROM stg.stg_wms_loc_location_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_location(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_locationgeomap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_locationgeomap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON  d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_loc_location_geo_dtl
;

	UPDATE dwh.D_LocationGeoMap t
    SET 
		loc_geography 			= s.wms_loc_geography,
		loc_geo_type 			= s.wms_loc_geo_type,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_loc_location_geo_dtl s
    WHERE t.loc_ou 			= s.wms_loc_ou
	AND t.loc_code 			= s.wms_loc_code
	AND t.loc_geo_lineno 	= s.wms_loc_geo_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_LocationGeoMap

	(
		loc_ou,				loc_code,			loc_geo_lineno,			loc_geography,
		loc_geo_type,		etlactiveind,   	etljobname,	 			envsourcecd, 	
		datasourcecd, 		etlcreatedatetime
	)
	
    SELECT 
		s.wms_loc_ou,		s.wms_loc_code,		s.wms_loc_geo_lineno,	s.wms_loc_geography,	
		s.wms_loc_geo_type,	1					,p_etljobname,			p_envsourcecd,		
		p_datasourcecd,		NOW()
	FROM stg.stg_wms_loc_location_geo_dtl s
    LEFT JOIN dwh.D_LocationGeoMap t
    ON 	s.wms_loc_ou 			= t.loc_ou
	AND s.wms_loc_code 			= t.loc_code
	AND s.wms_loc_geo_lineno	= t.loc_geo_lineno 
    WHERE t.loc_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_loc_location_geo_dtl
	(		
			wms_loc_ou,	 		wms_loc_code, 		wms_loc_geo_lineno,
		 	wms_loc_geography, 	wms_loc_geo_type, 	etlcreateddatetime	
	)
	SELECT 
			wms_loc_ou,	 		wms_loc_code, 		wms_loc_geo_lineno,
		 	wms_loc_geography, 	wms_loc_geo_type, 	etlcreateddatetime	
	FROM stg.stg_wms_loc_location_geo_dtl;	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_locationgeomap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_locationoperationsdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_locationoperationsdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

	
BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
  
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_loc_operation_dtl;

	UPDATE dwh.d_locationoperationsdetail t
    SET 
        
		loc_opr_shift_code      = s.wms_loc_opr_shift_code,
		loc_opr_sun_day         = s.wms_loc_opr_sun_day,
		loc_opr_mon_day         = s.wms_loc_opr_mon_day,
		loc_opr_tue_day         = s.wms_loc_opr_tue_day,
		loc_opr_wed_day         = s.wms_loc_opr_wed_day,
		loc_opr_thu_day         = s.wms_loc_opr_thu_day,
		loc_opr_fri_day         = s.wms_loc_opr_fri_day,
		loc_opr_sat_day         = s.wms_loc_opr_sat_day,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_loc_operation_dtl s
    WHERE t.loc_opr_loc_code  		= s.wms_loc_opr_loc_code
	AND t.loc_opr_lineno 			= s.wms_loc_opr_lineno
	AND t.loc_opr_ou 			    = s.wms_loc_opr_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_locationoperationsdetail
	(
		loc_opr_loc_code,       loc_opr_ou,         loc_opr_shift_code,         loc_opr_lineno,
        loc_opr_sun_day,        loc_opr_mon_day,    loc_opr_tue_day,            loc_opr_wed_day,
        loc_opr_thu_day,        loc_opr_fri_day,    loc_opr_sat_day,	        etlactiveind,
        etljobname, 		    envsourcecd, 	    datasourcecd, 			    etlcreatedatetime
	)
	
    SELECT 
		s.wms_loc_opr_loc_code,     s.wms_loc_opr_ou,           s.wms_loc_opr_shift_code,       s.wms_loc_opr_lineno,
        s.wms_loc_opr_sun_day,      s.wms_loc_opr_mon_day,      s.wms_loc_opr_tue_day,          s.wms_loc_opr_wed_day,
        s.wms_loc_opr_thu_day,      s.wms_loc_opr_fri_day,      s.wms_loc_opr_sat_day,			1,
		p_etljobname,		        p_envsourcecd,		        p_datasourcecd,			        NOW()
	FROM stg.stg_wms_loc_operation_dtl s
    LEFT JOIN dwh.d_locationoperationsdetail t
    ON 	t.loc_opr_loc_code  		= s.wms_loc_opr_loc_code
	AND t.loc_opr_lineno 			= s.wms_loc_opr_lineno
	AND t.loc_opr_ou 			    = s.wms_loc_opr_ou 
    WHERE t.loc_opr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_wms_loc_operation_dtl
	(
	 wms_loc_opr_loc_code, wms_loc_opr_ou, wms_loc_opr_shift_code, wms_loc_opr_lineno, 
        wms_loc_opr_sun_day, wms_loc_opr_mon_day, wms_loc_opr_tue_day, wms_loc_opr_wed_day, 
        wms_loc_opr_thu_day, wms_loc_opr_fri_day, wms_loc_opr_sat_day, etlcreateddatetime

	)
	SELECT 
		wms_loc_opr_loc_code, wms_loc_opr_ou, wms_loc_opr_shift_code, wms_loc_opr_lineno, 
        wms_loc_opr_sun_day, wms_loc_opr_mon_day, wms_loc_opr_tue_day, wms_loc_opr_wed_day, 
        wms_loc_opr_thu_day, wms_loc_opr_fri_day, wms_loc_opr_sat_day, etlcreateddatetime

	FROM stg.stg_wms_loc_operation_dtl;
	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_locationoperationsdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_locationshiftdetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_locationshiftdetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_loc_location_shift_dtl;

	UPDATE dwh.d_locationshiftdetails t
    SET 
        loc_shft_shift          = s.wms_loc_shft_shift,
        loc_shft_fr_time        = s.wms_loc_shft_fr_time,
        loc_shft_to_time        = s.wms_loc_shft_to_time,
        etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_loc_location_shift_dtl s
    WHERE t.loc_code  		    = s.wms_loc_code
	AND t.loc_shft_lineno 		= s.wms_loc_shft_lineno
	AND t.loc_ou 			    = s.wms_loc_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_locationshiftdetails
	(
		loc_ou,             loc_code,                   loc_shft_lineno,    loc_shft_shift,     loc_shft_fr_time,   
        loc_shft_to_time,	etlactiveind,etljobname,    envsourcecd, 	    datasourcecd, 	    etlcreatedatetime
	)
	
    SELECT 
		s.wms_loc_ou,               s.wms_loc_code,           s.wms_loc_shft_lineno,       s.wms_loc_shft_shift,
        s.wms_loc_shft_fr_time,  s.wms_loc_shft_to_time ,   1,     p_etljobname,		p_envsourcecd,	p_datasourcecd, NOW()
	FROM stg.stg_wms_loc_location_shift_dtl s
    LEFT JOIN dwh.d_locationshiftdetails t
    ON 	t.loc_code  		    = s.wms_loc_code
	AND t.loc_shft_lineno 		= s.wms_loc_shft_lineno
	AND t.loc_ou 			    = s.wms_loc_ou
    WHERE t.loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_loc_location_shift_dtl
	(
	 wms_loc_ou, wms_loc_code, wms_loc_shft_lineno, wms_loc_shft_shift, wms_loc_shft_fr_time, 
        wms_loc_shft_to_time, etlcreateddatetime

	)
	SELECT 
		wms_loc_ou, wms_loc_code, wms_loc_shft_lineno, wms_loc_shft_shift, wms_loc_shft_fr_time, 
        wms_loc_shft_to_time, etlcreateddatetime

	FROM stg.stg_wms_loc_location_shift_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_locationshiftdetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_locationusermapping(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_locationusermapping(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
        
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_loc_user_mapping_dtl;

    UPDATE dwh.d_LocationUserMapping t
    SET 
        loc_user_name = s.wms_loc_user_name,
        loc_user_admin = s.wms_loc_user_admin,
        loc_user_planner = s.wms_loc_user_planner,
        loc_user_executor = s.wms_loc_user_executor,
        loc_user_controller = s.wms_loc_user_controller,
        loc_user_default = s.wms_loc_user_default,
        loc_status = s.wms_loc_status,
        etlactiveind           =     1,
        etljobname             =     p_etljobname,
        envsourcecd            =     p_envsourcecd,
        datasourcecd           =     p_datasourcecd,
        etlupdatedatetime      =     NOW()  
    FROM stg.stg_wms_loc_user_mapping_dtl s
    WHERE t.loc_code     = s.wms_loc_code
    AND   t.loc_ou    = s.wms_loc_ou
    AND   t.loc_lineno = s.wms_loc_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_LocationUserMapping
    (loc_ou ,loc_code ,loc_lineno,  loc_user_name,  loc_user_admin,  loc_user_planner,  loc_user_executor, loc_user_controller, loc_user_default, loc_status, etlactiveind,
        etljobname,         envsourcecd,    datasourcecd,       etlcreatedatetime
    )
    
    SELECT 
        s.wms_loc_ou ,s.wms_loc_code ,s.wms_loc_lineno ,s.wms_loc_user_name ,s.wms_loc_user_admin,  s.wms_loc_user_planner
        ,s.wms_loc_user_executor    ,s.wms_loc_user_controller  ,s.wms_loc_user_default,   s.wms_loc_status,
        1,      p_etljobname,       p_envsourcecd,      p_datasourcecd,         now()
    FROM stg.stg_wms_loc_user_mapping_dtl s
    LEFT JOIN dwh.d_LocationUserMapping t
    ON s.wms_loc_code     = t.loc_code 
    AND   s.wms_loc_ou    = t.loc_ou
    AND   s.wms_loc_lineno = t.loc_lineno
    WHERE t.loc_code  IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_wms_loc_user_mapping_dtl

    (
        wms_loc_ou, wms_loc_code, wms_loc_lineno, wms_loc_user_name, wms_loc_user_admin, wms_loc_user_planner,
        wms_loc_user_executor, wms_loc_user_controller, wms_loc_user_default, wms_loc_status, etlcreateddatetime
    )
    SELECT
        wms_loc_ou, wms_loc_code, wms_loc_lineno, wms_loc_user_name, wms_loc_user_admin, wms_loc_user_planner,
        wms_loc_user_executor, wms_loc_user_controller, wms_loc_user_default, wms_loc_status, etlcreateddatetime
    FROM stg.stg_wms_loc_user_mapping_dtl; 
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
    
    --SELECT COUNT(*) INTO InsCnt FROM dwh.usp_d_LocationUserMapping;
END;
$$;


ALTER PROCEDURE dwh.usp_d_locationusermapping(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_locattribute(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_locattribute(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_loc_attribute_dtl

;

	UPDATE dwh.D_LocAttribute t
    SET 	
		loc_attr_typ			= wms_loc_attr_typ,
		loc_attr_apl			= wms_loc_attr_apl,
		loc_attr_value			= wms_loc_attr_value,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_loc_attribute_dtl s
    WHERE t.loc_attr_loc_code		= s.wms_loc_attr_loc_code
	AND t.loc_attr_lineno 			= s.wms_loc_attr_lineno
	AND t.loc_attr_ou 			 	= s.wms_loc_attr_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_LocAttribute

	(
	loc_attr_loc_code,	loc_attr_lineno,	loc_attr_ou,	loc_attr_typ,	loc_attr_apl,		loc_attr_value,
	etlactiveind,   	etljobname,	 		envsourcecd, 	datasourcecd, 	etlcreatedatetime
	)
	
    SELECT 
	wms_loc_attr_loc_code,	wms_loc_attr_lineno,	wms_loc_attr_ou,	wms_loc_attr_typ,		wms_loc_attr_apl,		wms_loc_attr_value,
	1,						p_etljobname,			p_envsourcecd,		p_datasourcecd,			NOW()

	FROM stg.stg_wms_loc_attribute_dtl s
    LEFT JOIN dwh.D_LocAttribute t
    ON 	s.wms_loc_attr_loc_code 	= t.loc_attr_loc_code
	AND s.wms_loc_attr_lineno 		= t.loc_attr_lineno
	AND s.wms_loc_attr_ou			= t.loc_attr_ou 
    WHERE t.loc_attr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_loc_attribute_dtl
	(
		wms_loc_attr_loc_code, wms_loc_attr_lineno, wms_loc_attr_ou, wms_loc_attr_typ, wms_loc_attr_apl, 
        wms_loc_attr_value, etlcreateddatetime

	)
	SELECT 
		wms_loc_attr_loc_code, wms_loc_attr_lineno, wms_loc_attr_ou, wms_loc_attr_typ, wms_loc_attr_apl, 
        wms_loc_attr_value, etlcreateddate	
	FROM stg.stg_wms_loc_attribute_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_locattribute(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_operationalaccountdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_operationalaccountdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_as_opaccount_dtl;

    UPDATE dwh.d_operationalAccountDetail t
    SET
        timestamp                          = s.timestamp,
        account_desc                       = s.account_desc,
        currency_code                      = s.currency_code,
        account_group                      = s.account_group,
        account_class                      = s.account_class,
        ctrl_acctype                       = s.ctrl_acctype,
        autopost_acctype                   = s.autopost_acctype,
        effective_from                     = s.effective_from,
        layout_code                        = s.layout_code,
        account_status                     = s.account_status,
        active_to                          = s.active_to,
        createdby                          = s.createdby,
        createddate                        = s.createddate,
        modifiedby                         = s.modifiedby,
        modifieddate                       = s.modifieddate,
        createdlangid                      = s.createdlangid,
        schedule_code                      = s.schedule_code,
        status                             = s.status,
        revised_schedule_code              = s.revised_schedule_code,
        revised_layout_code                = s.revised_layout_code,
        revised_neg_layout_code            = s.revised_neg_layout_code,
        workflow_status                    = s.workflow_status,
        wf_flag                            = s.wf_flag,
        revised_asindas_layout_code        = s.revised_asindas_layout_code,
        etlactiveind                       = 1,
        etljobname                         = p_etljobname,
        envsourcecd                        = p_envsourcecd,
        datasourcecd                       = p_datasourcecd,
        etlupdatedatetime                  = NOW()
    FROM stg.stg_as_opaccount_dtl s
    WHERE t.opcoa_id = s.opcoa_id
    AND t.account_code = s.account_code;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_operationalAccountDetail
    (
        opcoa_id, account_code, timestamp, account_desc, currency_code, account_group, account_class, ctrl_acctype, autopost_acctype, effective_from, layout_code, account_status, active_to, createdby, createddate, modifiedby, modifieddate, createdlangid, schedule_code, status, revised_schedule_code, revised_layout_code, revised_neg_layout_code, workflow_status, wf_flag, revised_asindas_layout_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.opcoa_id, s.account_code, s.timestamp, s.account_desc, s.currency_code, s.account_group, s.account_class, s.ctrl_acctype, s.autopost_acctype, s.effective_from, s.layout_code, s.account_status, s.active_to, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.createdlangid, s.schedule_code, s.status, s.revised_schedule_code, s.revised_layout_code, s.revised_neg_layout_code, s.workflow_status, s.wf_flag, s.revised_asindas_layout_code, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_as_opaccount_dtl s
    LEFT JOIN dwh.d_operationalAccountDetail t
    ON s.opcoa_id = t.opcoa_id
    AND s.account_code = t.account_code
    WHERE t.opcoa_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_as_opaccount_dtl
    (
        opcoa_id, account_code, timestamp, account_desc, currency_code, account_group, account_class, ctrl_acctype, autopost_acctype, effective_from, effective_to, consol_account, layout_code, account_status, active_from, active_to, createdby, createddate, modifiedby, modifieddate, createdlangid, schedule_code, status, revised_schedule_code, revised_layout_code, revised_neg_schedule_code, revised_neg_layout_code, workflow_status, workflow_error, wf_flag, revised_asindas_layout_code, etlcreateddatetime
    )
    SELECT
        opcoa_id, account_code, timestamp, account_desc, currency_code, account_group, account_class, ctrl_acctype, autopost_acctype, effective_from, effective_to, consol_account, layout_code, account_status, active_from, active_to, createdby, createddate, modifiedby, modifieddate, createdlangid, schedule_code, status, revised_schedule_code, revised_layout_code, revised_neg_schedule_code, revised_neg_layout_code, workflow_status, workflow_error, wf_flag, revised_asindas_layout_code, etlcreateddatetime
    FROM stg.stg_as_opaccount_dtl;
     END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_operationalaccountdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_opscomponentlookup(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_opscomponentlookup(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_component_metadata_table;
    

	
    INSERT INTO dwh.d_opscomponentlookup
	(
		componentname,      paramcategory,      paramtype,          paramcode,      optionvalue,
        sequenceno,         paramdesc,          paramdesc_shd,      langid,         cml_len,
        cml_translate,      etlactiveind,       etljobname, 		envsourcecd, 	datasourcecd, 	
        etlcreatedatetime
	)
	
    SELECT 
		s.componentname,     s.paramcategory,      s.paramtype,          s.paramcode,      s.optionvalue,
        s.sequenceno,        s.paramdesc,          s.paramdesc_shd,		 s.langid,         s.cml_len,
        s.cml_translate,	 1,                    p_etljobname,		 p_envsourcecd,	   p_datasourcecd,			
        NOW()
	FROM stg.stg_component_metadata_table s
    LEFT JOIN dwh.d_opscomponentlookup t
    ON 	COALESCE(s.componentname,'NULL') 	    = COALESCE(t.componentname,'NULL')
	AND COALESCE(s.paramcategory,'NULL')  		= COALESCE(t.paramcategory,'NULL')
	AND COALESCE(s.paramtype,'NULL')  			= COALESCE(t.paramtype,'NULL')
	AND COALESCE(s.paramcode,'NULL') 			= COALESCE(t.paramcode ,'NULL')
    AND COALESCE(s.optionvalue,'NULL') 			= COALESCE(t.optionvalue,'NULL')
    AND COALESCE(s.sequenceno,0) 			    = COALESCE(t.sequenceno,0)
    AND COALESCE(s.paramdesc,'NULL') 			= COALESCE(t.paramdesc,'NULL')
    AND COALESCE(s.paramdesc_shd,'NULL')  		= COALESCE(t.paramdesc_shd,'NULL')
    AND COALESCE(s.langid,0) 			        = COALESCE(t.langid,0)
    AND COALESCE(s.cml_len,0)  			        = COALESCE(t.cml_len,0)
    AND COALESCE(s.cml_translate,'NULL') 		= COALESCE(t.cml_translate,'NULL')
    WHERE t.componentname IS NULL;
   
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	select 0 into updcnt; 
	
	IF p_rawstorageflag = 1
	THEN

    
    INSERT INTO raw.raw_component_metadata_table
	(
		 componentname, paramcategory, paramtype, paramcode, optionvalue, sequenceno, paramdesc, 
        paramdesc_shd, langid, cml_len, cml_translate, etlcreateddatetime
	)
	SELECT 
		componentname, paramcategory, paramtype, paramcode, optionvalue, sequenceno, paramdesc, 
        paramdesc_shd, langid, cml_len, cml_translate, etlcreateddatetime

	FROM stg.stg_component_metadata_table;
	END IF;

	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);

       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_opscomponentlookup(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_oubumap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_oubumap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
    ON 	d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
    AND d.dataflowflag = p_dataflowflag
    AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_emod_ou_bu_map;

    UPDATE dwh.D_OuBuMap t
    SET
        timestamp             = s.timestamp,
        map_status            = s.map_status,
        effective_from        = s.effective_from,
        map_by                = s.map_by,
        map_date              = s.map_date,
        createdby             = s.createdby,
        createddate           = s.createddate,
        etlactiveind          = 1,
        etljobname            = p_etljobname,
        envsourcecd           = p_envsourcecd,
        datasourcecd          = p_datasourcecd,
        etlupdatedatetime     = NOW()
    FROM stg.stg_emod_ou_bu_map s
    WHERE t.ou_id		= s.ou_id
    AND	t.bu_id			= s.bu_id
    AND	t.company_code	= s.company_code
    AND	t.serial_no		= s.serial_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_OuBuMap
    (
        ou_id			, bu_id			, company_code	, 
		serial_no		, timestamp		, map_status	,
		effective_from	, map_by		, map_date		, 
		createdby		, createddate	, 
		etlactiveind	, etljobname	, envsourcecd	, 
		datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.ou_id			, s.bu_id		, s.company_code, 
		s.serial_no		, s.timestamp	, s.map_status	, 
		s.effective_from, s.map_by		, s.map_date	, 
		s.createdby		, s.createddate	, 
				1		, p_etljobname	, p_envsourcecd	, 
		p_datasourcecd	, NOW()
    FROM stg.stg_emod_ou_bu_map s
    LEFT JOIN dwh.D_OuBuMap t
    ON	s.ou_id 	= t.ou_id
    AND	s.bu_id 	= t.bu_id
    AND	s.company_code = t.company_code
    AND	s.serial_no	= t.serial_no
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_emod_ou_bu_map
    (
        ou_id			, bu_id			, company_code	, 
		serial_no		, timestamp		, map_status	, 
		effective_from	, effective_to	, map_by		, 
		map_date		, unmap_by		, unmap_date	, 
		createdby		, createddate	, modifiedby	, 
		modifieddate	, etlcreateddatetime
    )
    SELECT
        ou_id			, bu_id			, company_code	, 
		serial_no		, timestamp		, map_status	, 
		effective_from	, effective_to	, map_by		, 
		map_date		, unmap_by		, unmap_date	, 
		createdby		, createddate	, modifiedby	, 
		modifieddate	, etlcreateddatetime
	FROM stg.stg_emod_ou_bu_map;
     END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_oubumap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_oumaster(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_oumaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
    ON d.sourceid	= h.sourceid
    WHERE d.sourceid	= p_sourceId
    AND d.dataflowflag	= p_dataflowflag
    AND d.targetobject	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_emod_ou_mst;

    UPDATE dwh.D_OuMaster t
    SET
        otimestamp             = s.timestamp,
        default_flag          = s.default_flag,
        map_status            = s.map_status,
        effective_from        = s.effective_from,
        createdby             = s.createdby,
        createddate           = s.createddate,
        modifiedby            = s.modifiedby,
        modifieddate          = s.modifieddate,
        etlactiveind          = 1,
        etljobname            = p_etljobname,
        envsourcecd           = p_envsourcecd,
        datasourcecd          = p_datasourcecd,
        etlupdatedatetime     = NOW()
    FROM stg.stg_emod_ou_mst s
    WHERE t.ou_id = s.ou_id
    AND t.bu_id = s.bu_id
    AND t.company_code = s.company_code
    AND t.address_id = s.address_id
    AND t.serial_no = s.serial_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_OuMaster
    (
        ou_id			, bu_id			, company_code	,
		address_id		, serial_no		, otimestamp		, 
		default_flag	, map_status	, effective_from, 
		createdby		, createddate	, modifiedby	, 
		modifieddate	, 
		etlactiveind	, etljobname	, envsourcecd	, 
		datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.ou_id			, s.bu_id		, s.company_code	, 
		s.address_id	, s.serial_no	, s.timestamp		, 
		s.default_flag	, s.map_status	, s.effective_from	, 
		s.createdby		, s.createddate	, s.modifiedby		, 
		s.modifieddate	, 
				1		, p_etljobname	, p_envsourcecd		, 
		p_datasourcecd	, NOW()
    FROM stg.stg_emod_ou_mst s
    LEFT JOIN dwh.D_OuMaster t
    ON s.ou_id = t.ou_id
    AND s.bu_id = t.bu_id
    AND s.company_code = t.company_code
    AND s.address_id = t.address_id
    AND s.serial_no = t.serial_no
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_emod_ou_mst
    (
        ou_id			, bu_id			, company_code	, 
		address_id		, serial_no		, timestamp		, 
		default_flag	, map_status	, effective_from, 
		effective_to	, createdby		, createddate	, 
		modifiedby		, modifieddate	, latitude		, 
		longitude		, etlcreateddatetime
    )
    SELECT
        ou_id			, bu_id			, company_code	, 
		address_id		, serial_no		, timestamp		, 
		default_flag	, map_status	, effective_from, 
		effective_to	, createdby		, createddate	, 
		modifiedby		, modifieddate	, latitude		, 
		longitude		, etlcreateddatetime
	FROM stg.stg_emod_ou_mst;
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_d_oumaster(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_outboundlocshiftdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_outboundlocshiftdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_pcsit_outbound_location_shift_dtl;

    TRUNCATE only dwh.D_OutboundLocShiftDetail RESTART identity;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_OutboundLocShiftDetail
    (
       obd_loc_sht_key, ou, locationcode, days, openingtime, Closingtime, Cutofftime, weeks, ordertype, servicetype, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
         COALESCE(l.loc_key,-1), s.ou, s.locationcode, s.days, s.openingtime, s.Closingtime, s.Cutofftime, s.weeks, s.ordertype, s.servicetype, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_pcsit_outbound_location_shift_dtl s
	 LEFT JOIN dwh.d_location L      
        ON s.locationcode   = L.loc_code 
        AND s.ou        = L.loc_ou;
    
   

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_pcsit_outbound_location_shift_dtl
    (
        ou, locationcode, days, openingtime, Closingtime, Cutofftime, weeks, ordertype, servicetype, etlcreateddatetime
    )
    SELECT
        ou, locationcode, days, openingtime, Closingtime, Cutofftime, weeks, ordertype, servicetype, etlcreateddatetime
    FROM stg.stg_pcsit_outbound_location_shift_dtl;
    
    END IF;
   /* EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;*/
END;
$$;


ALTER PROCEDURE dwh.usp_d_outboundlocshiftdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_route(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_route(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_route_hdr;

	UPDATE dwh.D_Route t
    SET 
		rou_description 		= s.wms_rou_description,
		rou_status 				= s.wms_rou_status,
		rou_rsn_code 			= s.wms_rou_rsn_code,
		rou_trans_mode 			= s.wms_rou_trans_mode,
		rou_serv_type 			= s.wms_rou_serv_type,
		rou_sub_serv_type 		= s.wms_rou_sub_serv_type,
		rou_valid_frm 			= s.wms_rou_valid_frm,
		rou_valid_to 			= s.wms_rou_valid_to,
		rou_created_by 			= s.wms_rou_created_by,
		rou_created_date 		= s.wms_rou_created_date,
		rou_modified_by 		= s.wms_rou_modified_by,
		rou_modified_date 		= s.wms_rou_modified_date,
		rou_timestamp 			= s.wms_rou_timestamp,
		rou_route_type 			= s.wms_rou_route_type,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()		
    FROM stg.stg_wms_route_hdr s
    WHERE t.rou_route_id  		= s.wms_rou_route_id
	AND t.rou_ou 				= s.wms_rou_ou;
	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_Route
	(
		rou_route_id, rou_ou, rou_description, rou_status, rou_rsn_code, 
		rou_trans_mode, rou_serv_type, rou_sub_serv_type, rou_valid_frm, 
		rou_valid_to, rou_created_by, rou_created_date, rou_modified_by, 
		rou_modified_date, rou_timestamp, rou_route_type, etlactiveind,
		etljobname, envsourcecd, datasourcecd, etlcreatedatetime
	)
	
    SELECT 
		s.wms_rou_route_id,		 s.wms_rou_ou,				s.wms_rou_description,		s.wms_rou_status, 
		s.wms_rou_rsn_code,		 s.wms_rou_trans_mode,		s.wms_rou_serv_type,		s.wms_rou_sub_serv_type, 
		s.wms_rou_valid_frm,     s.wms_rou_valid_to,		s.wms_rou_created_by,		s.wms_rou_created_date, 
		s.wms_rou_modified_by,   s.wms_rou_modified_date,	s.wms_rou_timestamp,		s.wms_rou_route_type,
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()

	FROM stg.stg_wms_route_hdr s
    LEFT JOIN dwh.D_Route t
    ON 	s.wms_rou_route_id  		= t.rou_route_id
	AND s.wms_rou_ou 				= t.rou_ou 
    WHERE t.rou_route_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_route_hdr
	(
		wms_rou_route_id, wms_rou_ou, wms_rou_description, wms_rou_status, 
		wms_rou_rsn_code, wms_rou_trans_mode, wms_rou_serv_type, wms_rou_sub_serv_type, 
		wms_rou_valid_frm, wms_rou_valid_to, wms_rou_created_by, wms_rou_created_date, 
		wms_rou_modified_by, wms_rou_modified_date, wms_rou_timestamp, 
		wms_rou_userdefined1, wms_rou_userdefined2, wms_rou_userdefined3, 
		wms_rou_route_type, etlcreateddatetime		
	)
	SELECT 
		wms_rou_route_id, wms_rou_ou, wms_rou_description, wms_rou_status, 
		wms_rou_rsn_code, wms_rou_trans_mode, wms_rou_serv_type, wms_rou_sub_serv_type, 
		wms_rou_valid_frm, wms_rou_valid_to, wms_rou_created_by, wms_rou_created_date, 
		wms_rou_modified_by, wms_rou_modified_date, wms_rou_timestamp, 
		wms_rou_userdefined1, wms_rou_userdefined2, wms_rou_userdefined3, 
		wms_rou_route_type, etlcreateddatetime	
	FROM stg.stg_wms_route_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_route(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_shippingpoint(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_shippingpoint(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_shp_point_hdr;

	UPDATE dwh.D_ShippingPoint t
    SET 
		shp_pt_desc				= s.wms_shp_pt_desc,
		shp_pt_status			= s.wms_shp_pt_status,
		shp_pt_rsn_code			= s.wms_shp_pt_rsn_code,
		shp_pt_address1			= s.wms_shp_pt_address1,
		shp_pt_address2			= s.wms_shp_pt_address2,
		shp_pt_zipcode			= s.wms_shp_pt_zipcode,
		shp_pt_city				= s.wms_shp_pt_city,
		shp_pt_state			= s.wms_shp_pt_state,
		shp_pt_country			= s.wms_shp_pt_country,
		shp_pt_email			= s.wms_shp_pt_email,
		shp_pt_timestamp		= s.wms_shp_pt_timestamp,
		shp_pt_created_by		= s.wms_shp_pt_created_by,
		shp_pt_created_date		= s.wms_shp_pt_created_date,
		shp_pt_modified_by		= s.wms_shp_pt_modified_by,
		shp_pt_modified_date	= s.wms_shp_pt_modified_date,
		shp_pt_address3			= s.wms_shp_pt_address3,
		shp_pt_contact_person	= s.wms_shp_pt_contact_person,
		shp_pt_fax				= s.wms_shp_pt_fax,
		shp_pt_latitude			= s.wms_shp_pt_latitude,
		shp_pt_longitude		= s.wms_shp_pt_longitude,
		shp_pt_phone1			= s.wms_shp_pt_phone1,
		shp_pt_phone2			= s.wms_shp_pt_phone2,
		shp_pt_region			= s.wms_shp_pt_region,
		shp_pt_zone				= s.wms_shp_pt_zone,
		shp_pt_sub_zone			= s.wms_shp_pt_sub_zone,
		shp_pt_time_zone		= s.wms_shp_pt_time_zone,
		shp_pt_url				= s.wms_shp_pt_url,
		shp_pt_suburb_code		= s.wms_shp_pt_suburb_code,
		shp_pt_time_slot		= s.wms_shp_pt_time_slot,
		shp_pt_time_slot_uom	= s.wms_shp_pt_time_slot_uom,
		shp_pt_wh				= s.wms_shp_pt_wh,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_shp_point_hdr s
    WHERE t.shp_pt_ou = s.wms_shp_pt_ou 
		and t.shp_pt_id = s.wms_shp_pt_id;

	
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_ShippingPoint

	(
		shp_pt_ou,				shp_pt_id,				shp_pt_desc,		shp_pt_status,			shp_pt_rsn_code,		
		shp_pt_address1,		shp_pt_address2,		shp_pt_zipcode,		shp_pt_city,			shp_pt_state,
		shp_pt_country,			shp_pt_email,			shp_pt_timestamp,	shp_pt_created_by,		shp_pt_created_date,
		shp_pt_modified_by,		shp_pt_modified_date,	shp_pt_address3,	shp_pt_contact_person,	shp_pt_fax,			
		shp_pt_latitude,		shp_pt_longitude,		shp_pt_phone1,		shp_pt_phone2,			shp_pt_region,			
		shp_pt_zone,			shp_pt_sub_zone,		shp_pt_time_zone,	shp_pt_url,				shp_pt_suburb_code,
		shp_pt_time_slot,		shp_pt_time_slot_uom,	shp_pt_wh, 			etlactiveind,      		etljobname, 			
		envsourcecd,			datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
	s.wms_shp_pt_ou,			s.wms_shp_pt_id, 			s.wms_shp_pt_desc, 			s.wms_shp_pt_status, 	
	s.wms_shp_pt_rsn_code,		s.wms_shp_pt_address1, 		s.wms_shp_pt_address2,		s.wms_shp_pt_zipcode, 		
	s.wms_shp_pt_city, 			s.wms_shp_pt_state,			s.wms_shp_pt_country, 		s.wms_shp_pt_email, 	
	s.wms_shp_pt_timestamp,		s.wms_shp_pt_created_by,	s.wms_shp_pt_created_date, 	s.wms_shp_pt_modified_by, 
	s.wms_shp_pt_modified_date, s.wms_shp_pt_address3,		s.wms_shp_pt_contact_person,s.wms_shp_pt_fax,
	s.wms_shp_pt_latitude,		s.wms_shp_pt_longitude,		s.wms_shp_pt_phone1,		s.wms_shp_pt_phone2,
	s.wms_shp_pt_region,	 	s.wms_shp_pt_zone, 			s.wms_shp_pt_sub_zone, 		s.wms_shp_pt_time_zone, 
	s.wms_shp_pt_url,			s.wms_shp_pt_suburb_code,	s.wms_shp_pt_time_slot, 	s.wms_shp_pt_time_slot_uom, 
	s.wms_shp_pt_wh,			1,							p_etljobname,				p_envsourcecd,		
	p_datasourcecd,				NOW()
	FROM stg.stg_wms_shp_point_hdr s
    LEFT JOIN dwh.D_ShippingPoint t
    ON 	 s.wms_shp_pt_ou = t.shp_pt_ou
		and s.wms_shp_pt_id  = t.shp_pt_id 
    WHERE t.shp_pt_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_shp_point_hdr
	(
	 wms_shp_pt_ou, wms_shp_pt_id, wms_shp_pt_desc, wms_shp_pt_status, wms_shp_pt_rsn_code, wms_shp_pt_address1, 
        wms_shp_pt_address2, wms_shp_pt_zipcode, wms_shp_pt_city, wms_shp_pt_state, wms_shp_pt_country, 
        wms_shp_pt_email, wms_shp_pt_timestamp, wms_shp_pt_created_by, wms_shp_pt_created_date, 
        wms_shp_pt_modified_by, wms_shp_pt_modified_date, wms_shp_pt_userdefined1, wms_shp_pt_userdefined2, 
        wms_shp_pt_userdefined3, wms_shp_pt_address3, wms_shp_pt_contact_person, wms_shp_pt_fax, 
        wms_shp_pt_geo_fence_name, wms_shp_pt_geo_fence_range, wms_shp_pt_geo_fence_type, wms_shp_pt_latitude, 
        wms_shp_pt_longitude, wms_shp_pt_phone1, wms_shp_pt_phone2, wms_shp_pt_region, wms_shp_pt_zone, 
        wms_shp_pt_sub_zone, wms_shp_pt_time_zone, wms_shp_pt_url, wms_shp_pt_suburb_code, wms_shp_pt_time_slot, 
        wms_shp_pt_time_slot_uom, wms_shp_pt_congid, wms_shp_pt_wh, wms_shp_pt_type, etlcreateddatetime

	)
	SELECT 
	wms_shp_pt_ou, wms_shp_pt_id, wms_shp_pt_desc, wms_shp_pt_status, wms_shp_pt_rsn_code, wms_shp_pt_address1, 
        wms_shp_pt_address2, wms_shp_pt_zipcode, wms_shp_pt_city, wms_shp_pt_state, wms_shp_pt_country, 
        wms_shp_pt_email, wms_shp_pt_timestamp, wms_shp_pt_created_by, wms_shp_pt_created_date, 
        wms_shp_pt_modified_by, wms_shp_pt_modified_date, wms_shp_pt_userdefined1, wms_shp_pt_userdefined2, 
        wms_shp_pt_userdefined3, wms_shp_pt_address3, wms_shp_pt_contact_person, wms_shp_pt_fax, 
        wms_shp_pt_geo_fence_name, wms_shp_pt_geo_fence_range, wms_shp_pt_geo_fence_type, wms_shp_pt_latitude, 
        wms_shp_pt_longitude, wms_shp_pt_phone1, wms_shp_pt_phone2, wms_shp_pt_region, wms_shp_pt_zone, 
        wms_shp_pt_sub_zone, wms_shp_pt_time_zone, wms_shp_pt_url, wms_shp_pt_suburb_code, wms_shp_pt_time_slot, 
        wms_shp_pt_time_slot_uom, wms_shp_pt_congid, wms_shp_pt_wh, wms_shp_pt_type, etlcreateddatetime

	FROM stg.stg_wms_shp_point_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_shippingpoint(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_shippingpointcustmap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_shippingpointcustmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_shp_point_cusmap_dtl;

	UPDATE dwh.D_ShippingPointCustMap t
    SET 
		
		shp_pt_cusid 			= wms_shp_pt_cusid,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()
    FROM stg.stg_wms_shp_point_cusmap_dtl s
    WHERE t.shp_pt_ou		= s.wms_shp_pt_ou
	AND t.shp_pt_id 		= s.wms_shp_pt_id
	AND t.shp_pt_lineno		= s.wms_shp_pt_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_ShippingPointCustMap
	(
	shp_pt_ou,			shp_pt_id,			shp_pt_lineno,		shp_pt_cusid,
	etlactiveind,   	etljobname,	 		envsourcecd, 		datasourcecd, 	etlcreatedatetime
	)
	
    SELECT 
	wms_shp_pt_ou,		wms_shp_pt_id,		wms_shp_pt_lineno,	wms_shp_pt_cusid,	
	1,					p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()

	FROM stg.stg_wms_shp_point_cusmap_dtl s
    LEFT JOIN dwh.D_ShippingPointCustMap t
    ON 	s.wms_shp_pt_ou		 	= t.shp_pt_ou
	AND s.wms_shp_pt_id 		= t.shp_pt_id
	AND s.wms_shp_pt_lineno		= t.shp_pt_lineno
    WHERE t.shp_pt_ou	IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_shp_point_cusmap_dtl
	(
	 wms_shp_pt_ou, 		wms_shp_pt_id, 
	 wms_shp_pt_lineno, 	wms_shp_pt_cusid, 	etlcreateddatetime

	)
	SELECT 
	 wms_shp_pt_ou, 		wms_shp_pt_id, 
	 wms_shp_pt_lineno, 	wms_shp_pt_cusid, 	etlcreateddatetime	
	FROM stg.stg_wms_shp_point_cusmap_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_shippingpointcustmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_skills(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_skills(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_skill_dtl;

	UPDATE dwh.d_skills t
    SET 

		skl_desc 				= s.wms_skl_desc,
		skl_currency 			= s.wms_skl_currency,
		skl_status 				= s.wms_skl_status,
		skl_timestamp 			= s.wms_skl_timestamp,
		skl_created_by 			= s.wms_skl_created_by,
		skl_created_dt 			= s.wms_skl_created_dt,		
		skl_modified_by 		= s.wms_skl_modified_by,
		skl_modified_dt         = s.wms_skl_modified_dt,                
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	

    FROM stg.stg_wms_skill_dtl s
    WHERE  t.skl_ou 	    	= s.wms_skl_ou
	AND t.skl_code 				= s.wms_skl_code
	AND t.skl_type 				= s.wms_skl_type;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_skills
	(
		skl_ou,	          	skl_code,		    skl_type,		skl_desc,
		skl_currency, 	  	skl_status, 	    skl_timestamp,  skl_created_by, 	
		skl_created_dt,		skl_modified_by,  	skl_modified_dt, 	etlactiveind, 	
		etljobname, 		envsourcecd, 		datasourcecd,	  	etlcreatedatetime
	)
    SELECT 
    	s.wms_skl_ou,			s.wms_skl_code,			s.wms_skl_type,			s.wms_skl_desc,			
		s.wms_skl_currency,		s.wms_skl_status,		s.wms_skl_timestamp,	s.wms_skl_created_by,   
		s.wms_skl_created_dt,	s.wms_skl_modified_by,	s.wms_skl_modified_dt,	1, 
		p_etljobname,			p_envsourcecd,			p_datasourcecd,			NOW ()
	FROM stg.stg_wms_skill_dtl s
    LEFT JOIN dwh.d_skills t
    ON 	s.wms_skl_ou			= t.skl_ou
	AND  s.wms_skl_code 		= t.skl_code
	AND s.wms_skl_type 			= t.skl_type 
    WHERE t.skl_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_skill_dtl
	(
	    wms_skl_ou, wms_skl_code, wms_skl_loc_code, wms_skl_type, wms_skl_desc, wms_skl_rate, 
        wms_skl_currency, wms_skl_per, wms_skl_unit, wms_skl_status, wms_skl_timestamp, 
        wms_skl_created_by, wms_skl_created_dt, wms_skl_modified_by, wms_skl_modified_dt, 
        wms_skl_user_def1, wms_skl_user_def2, wms_skl_user_def3, wms_skl_lineno, etlcreateddatetime
	
	)
	SELECT 
		wms_skl_ou, wms_skl_code, wms_skl_loc_code, wms_skl_type, wms_skl_desc, wms_skl_rate, 
        wms_skl_currency, wms_skl_per, wms_skl_unit, wms_skl_status, wms_skl_timestamp, 
        wms_skl_created_by, wms_skl_created_dt, wms_skl_modified_by, wms_skl_modified_dt, 
        wms_skl_user_def1, wms_skl_user_def2, wms_skl_user_def3, wms_skl_lineno, etlcreateddatetime
	FROM stg.stg_wms_skill_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_skills(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_stage(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_stage(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
    INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stage_mas_hdr;

    UPDATE dwh.d_stage t
    SET 
		stg_mas_desc            = s.wms_stg_mas_desc,
        stg_mas_status          = s.wms_stg_mas_status,
        stg_mas_type            = s.wms_stg_mas_type,
        stg_mas_def_bin         = s.wms_stg_mas_def_bin,
        stg_mas_rsn_code        = s.wms_stg_mas_rsn_code,
        stg_mas_frm_stage       = s.wms_stg_mas_frm_stage,
        stg_mas_frm_doc_typ     = s.wms_stg_mas_frm_doc_typ,
        stg_mas_frm_doc_status  = s.wms_stg_mas_frm_doc_status,
        stg_mas_frm_doc_conf_req= s.wms_stg_mas_frm_doc_conf_req,
        stg_mas_to_stage        = s.wms_stg_mas_to_stage,
        stg_mas_to_doc_typ      = s.wms_stg_mas_to_doc_typ,
        stg_mas_to_doc_status   = s.wms_stg_mas_to_doc_status,
        stg_mas_to_doc_conf_req = s.wms_stg_mas_to_doc_conf_req,
        stg_mas_timestamp       = s.wms_stg_mas_timestamp,
        stg_mas_created_by      = s.wms_stg_mas_created_by,
        stg_mas_created_dt      = s.wms_stg_mas_created_dt,
        stg_mas_modified_by     = s.wms_stg_mas_modified_by,
        stg_mas_modified_dt     = s.wms_stg_mas_modified_dt,
        stg_mas_dock_status     = s.wms_stg_mas_dock_status,
        stg_mas_dock_prevstat   = s.wms_stg_mas_dock_prevstat,
        stg_mas_frm_stage_typ   = s.wms_stg_mas_frm_stage_typ,
        stg_mas_to_stage_typ    = s.wms_stg_mas_to_stage_typ,
        stg_mas_pack_bin        = s.wms_stg_mas_pack_bin,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd ,
        datasourcecd            = p_datasourcecd ,
        etlupdatedatetime       = NOW() 
    FROM stg.stg_wms_stage_mas_hdr s
    WHERE t.stg_mas_ou        = s.wms_stg_mas_ou
    AND t.stg_mas_id          = s.wms_stg_mas_id
    AND t.stg_mas_loc         = s.wms_stg_mas_loc;
    
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.d_stage
    (
        stg_mas_ou, 			stg_mas_id, 			stg_mas_desc, 				stg_mas_status,    
		stg_mas_loc,			stg_mas_type, 			stg_mas_def_bin, 			stg_mas_rsn_code, 
		stg_mas_frm_stage,		stg_mas_frm_doc_typ, 	stg_mas_frm_doc_status, 	stg_mas_frm_doc_conf_req, 	
		stg_mas_to_stage,		stg_mas_to_doc_typ, 	stg_mas_to_doc_status, 		stg_mas_to_doc_conf_req,
        stg_mas_timestamp, 		stg_mas_created_by, 	stg_mas_created_dt, 		stg_mas_modified_by, 
        stg_mas_modified_dt, 	stg_mas_dock_status, 	stg_mas_dock_prevstat, 		stg_mas_frm_stage_typ, 
        stg_mas_to_stage_typ,   stg_mas_pack_bin, 		etlactiveind, 				etljobname, 		
		envsourcecd, 			datasourcecd, 			etlcreatedatetime

    )
    
    SELECT 
	    s.wms_stg_mas_ou,				s.wms_stg_mas_id,				s.wms_stg_mas_desc,				s.wms_stg_mas_status,			
		s.wms_stg_mas_loc,				s.wms_stg_mas_type,             s.wms_stg_mas_def_bin,			s.wms_stg_mas_rsn_code,			
		s.wms_stg_mas_frm_stage,		s.wms_stg_mas_frm_doc_typ,		s.wms_stg_mas_frm_doc_status,   s.wms_stg_mas_frm_doc_conf_req, 
		s.wms_stg_mas_to_stage,			s.wms_stg_mas_to_doc_typ,		s.wms_stg_mas_to_doc_status,	s.wms_stg_mas_to_doc_conf_req,       
		s.wms_stg_mas_timestamp,		s.wms_stg_mas_created_by,		s.wms_stg_mas_created_dt,       s.wms_stg_mas_modified_by,		
		s.wms_stg_mas_modified_dt,      s.wms_stg_mas_dock_status,	    s.wms_stg_mas_dock_prevstat,	s.wms_stg_mas_frm_stage_typ, 
		s.wms_stg_mas_to_stage_typ,   	s.wms_stg_mas_pack_bin,   	    1,								p_etljobname,       			
		p_envsourcecd,      			p_datasourcecd,         		NOW()
    FROM stg.stg_wms_stage_mas_hdr s
    LEFT JOIN dwh.d_stage t
    ON  s.wms_stg_mas_ou          = t.stg_mas_ou
    AND s.wms_stg_mas_id           = t.stg_mas_id
    AND s.wms_stg_mas_loc           = t.stg_mas_loc
    WHERE t.stg_mas_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

    
    INSERT INTO raw.raw_wms_stage_mas_hdr
    (
        wms_stg_mas_ou,             wms_stg_mas_id,                 wms_stg_mas_desc,               wms_stg_mas_status,             
        wms_stg_mas_loc,            wms_stg_mas_type,               wms_stg_mas_def_bin,            wms_stg_mas_rsn_code,               
        wms_stg_mas_frm_stage,      wms_stg_mas_frm_doc_typ,        wms_stg_mas_frm_doc_status,             
        wms_stg_mas_frm_doc_prefix, wms_stg_mas_frm_doc_conf_req,   wms_stg_mas_to_stage,               
        wms_stg_mas_to_doc_typ,     wms_stg_mas_to_doc_status,      wms_stg_mas_to_doc_prefix,              
        wms_stg_mas_to_doc_conf_req,wms_stg_mas_timestamp,          wms_stg_mas_created_by,             
        wms_stg_mas_created_dt,     wms_stg_mas_modified_by,        wms_stg_mas_modified_dt,                
        wms_stg_mas_user_def1,      wms_stg_mas_user_def2,          wms_stg_mas_user_def3,          wms_stg_mas_height,             
        wms_stg_mas_handl_eqp_capa, wms_stg_mas_unit,               wms_stg_mas_dock_status,                
        wms_stg_mas_dock_prevstat,  wms_stg_mas_frm_stage_typ,      wms_stg_mas_to_stage_typ,               
        wms_stg_mas_pack_bin,       wms_stg_mas_hgt_uom,            wms_stg_uom,                   wms_stg_length,             
        wms_stg_breadth,            wms_stg_height,                 etlcreateddatetime     
    )
    SELECT 

        wms_stg_mas_ou,             wms_stg_mas_id,                 wms_stg_mas_desc,               wms_stg_mas_status,             
        wms_stg_mas_loc,            wms_stg_mas_type,               wms_stg_mas_def_bin,            wms_stg_mas_rsn_code,               
        wms_stg_mas_frm_stage,      wms_stg_mas_frm_doc_typ,        wms_stg_mas_frm_doc_status,             
        wms_stg_mas_frm_doc_prefix, wms_stg_mas_frm_doc_conf_req,   wms_stg_mas_to_stage,               
        wms_stg_mas_to_doc_typ,     wms_stg_mas_to_doc_status,      wms_stg_mas_to_doc_prefix,              
        wms_stg_mas_to_doc_conf_req,wms_stg_mas_timestamp,          wms_stg_mas_created_by,             
        wms_stg_mas_created_dt,     wms_stg_mas_modified_by,        wms_stg_mas_modified_dt,                
        wms_stg_mas_user_def1,      wms_stg_mas_user_def2,          wms_stg_mas_user_def3,          wms_stg_mas_height,             
        wms_stg_mas_handl_eqp_capa, wms_stg_mas_unit,               wms_stg_mas_dock_status,                
        wms_stg_mas_dock_prevstat,  wms_stg_mas_frm_stage_typ,      wms_stg_mas_to_stage_typ,               
        wms_stg_mas_pack_bin,       wms_stg_mas_hgt_uom,            wms_stg_uom,                   wms_stg_length,             
        wms_stg_breadth,            wms_stg_height,                 etlcreateddatetime  

        FROM stg.stg_wms_stage_mas_hdr;
		END IF;
		
		EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_stage(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_tariffservice(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_tariffservice(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_tariff_service_hdr;

    UPDATE dwh.D_TariffService t	
    SET
        tf_ser_desc                     = s.wms_tf_ser_desc,
        tf_ser_status                   = s.wms_tf_ser_status,
        tf_ser_valid_from               = s.wms_tf_ser_valid_from,
        tf_ser_valid_to                 = s.wms_tf_ser_valid_to,
        tf_ser_service_period           = s.wms_tf_ser_service_period,
        tf_ser_uom                      = s.wms_tf_ser_uom,
        tf_ser_service_level_per        = s.wms_tf_ser_service_level_per,
        tf_ser_reason_code              = s.wms_tf_ser_reason_code,
        tf_ser_timestamp                = s.wms_tf_ser_timestamp,
        tf_ser_created_by               = s.wms_tf_ser_created_by,
        tf_ser_created_dt               = s.wms_tf_ser_created_dt,
        tf_ser_modified_by              = s.wms_tf_ser_modified_by,
        tf_ser_modified_dt              = s.wms_tf_ser_modified_dt,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_wms_tariff_service_hdr s
    WHERE t.tf_ser_id = s.wms_tf_ser_id
    AND t.tf_ser_ou = s.wms_tf_ser_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_TariffService
    (
        tf_ser_id, tf_ser_ou, tf_ser_desc, tf_ser_status, tf_ser_valid_from, tf_ser_valid_to, tf_ser_service_period, tf_ser_uom, tf_ser_service_level_per, tf_ser_reason_code, tf_ser_timestamp, tf_ser_created_by, tf_ser_created_dt, tf_ser_modified_by, tf_ser_modified_dt, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.wms_tf_ser_id, s.wms_tf_ser_ou, s.wms_tf_ser_desc, s.wms_tf_ser_status, s.wms_tf_ser_valid_from, s.wms_tf_ser_valid_to, s.wms_tf_ser_service_period, s.wms_tf_ser_uom, s.wms_tf_ser_service_level_per, s.wms_tf_ser_reason_code, s.wms_tf_ser_timestamp, s.wms_tf_ser_created_by, s.wms_tf_ser_created_dt, s.wms_tf_ser_modified_by, s.wms_tf_ser_modified_dt, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_tariff_service_hdr s
    LEFT JOIN dwh.D_TariffService t
    ON s.wms_tf_ser_id = t.tf_ser_id
    AND s.wms_tf_ser_ou = t.tf_ser_ou
    WHERE t.tf_ser_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_wms_tariff_service_hdr
    (
        wms_tf_ser_id, wms_tf_ser_ou, wms_tf_ser_desc, wms_tf_ser_status, wms_tf_ser_valid_from, wms_tf_ser_valid_to, wms_tf_ser_service_period, wms_tf_ser_uom, wms_tf_ser_service_level_per, wms_tf_ser_reason_code, wms_tf_ser_timestamp, wms_tf_ser_created_by, wms_tf_ser_created_dt, wms_tf_ser_modified_by, wms_tf_ser_modified_dt, etlcreateddatetime
    )
    SELECT
        wms_tf_ser_id, wms_tf_ser_ou, wms_tf_ser_desc, wms_tf_ser_status, wms_tf_ser_valid_from, wms_tf_ser_valid_to, wms_tf_ser_service_period, wms_tf_ser_uom, wms_tf_ser_service_level_per, wms_tf_ser_reason_code, wms_tf_ser_timestamp, wms_tf_ser_created_by, wms_tf_ser_created_dt, wms_tf_ser_modified_by, wms_tf_ser_modified_dt, etlcreateddatetime
    FROM stg.stg_wms_tariff_service_hdr;
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	  
END;
$$;


ALTER PROCEDURE dwh.usp_d_tariffservice(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_tarifftransport(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_tarifftransport(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_tariff_transport_hdr;

    UPDATE dwh.D_TariffTransport t
    SET
        tf_tp_desc                          = s.wms_tf_tp_desc,
        tf_tp_type_code                     = s.wms_tf_tp_type_code,
        tf_tp_status                        = s.wms_tf_tp_status,
        tf_tp_division                      = s.wms_tf_tp_division,
        tf_tp_location                      = s.wms_tf_tp_location,
        tf_tp_validity_id                   = s.wms_tf_tp_validity_id,
        tf_tp_frm_ship_point                = s.wms_tf_tp_frm_ship_point,
        tf_tp_to_ship_point                 = s.wms_tf_tp_to_ship_point,
        tf_tp_frm_geo_type                  = s.wms_tf_tp_frm_geo_type,
        tf_tp_frm_geo                       = s.wms_tf_tp_frm_geo,
        tf_tp_to_geo_type                   = s.wms_tf_tp_to_geo_type,
        tf_tp_to_geo                        = s.wms_tf_tp_to_geo,
        tf_tp_dist_check                    = s.wms_tf_tp_dist_check,
        tf_tp_dist_min                      = s.wms_tf_tp_dist_min,
        tf_tp_dist_max                      = s.wms_tf_tp_dist_max,
        tf_tp_dist_uom                      = s.wms_tf_tp_dist_uom,
        tf_tp_wt                            = s.wms_tf_tp_wt,
        tf_tp_wt_min                        = s.wms_tf_tp_wt_min,
        tf_tp_wt_max                        = s.wms_tf_tp_wt_max,
        tf_tp_wt_uom                        = s.wms_tf_tp_wt_uom,
        tf_tp_vol                           = s.wms_tf_tp_vol,
        tf_tp_vol_min                       = s.wms_tf_tp_vol_min,
        tf_tp_vol_max                       = s.wms_tf_tp_vol_max,
        tf_tp_vol_uom                       = s.wms_tf_tp_vol_uom,
        tf_tp_trip_time                     = s.wms_tf_tp_trip_time,
        tf_tp_trip_time_min                 = s.wms_tf_tp_trip_time_min,
        tf_tp_trip_time_max                 = s.wms_tf_tp_trip_time_max,
        tf_tp_trip_time_uom                 = s.wms_tf_tp_trip_time_uom,
        tf_tp_vol_conversion                = s.wms_tf_tp_vol_conversion,
        tf_tp_service                       = s.wms_tf_tp_service,
        tf_tp_sub_service                   = s.wms_tf_tp_sub_service,
        tf_tp_thu_type                      = s.wms_tf_tp_thu_type,
        tf_tp_min_no_thu                    = s.wms_tf_tp_min_no_thu,
        tf_tp_max_no_thu                    = s.wms_tf_tp_max_no_thu,
        tf_tp_class_of_stores               = s.wms_tf_tp_class_of_stores,
        tf_tp_thu_space_frm                 = s.wms_tf_tp_thu_space_frm,
        tf_tp_thu_space_to                  = s.wms_tf_tp_thu_space_to,
        tf_tp_equip_type                    = s.wms_tf_tp_equip_type,
        tf_tp_veh_type                      = s.wms_tf_tp_veh_type,
        tf_tp_timestamp                     = s.wms_tf_tp_timestamp,
        tf_tp_created_by                    = s.wms_tf_tp_created_by,
        tf_tp_created_dt                    = s.wms_tf_tp_created_dt,
        tf_tp_modified_by                   = s.wms_tf_tp_modified_by,
        tf_tp_modified_dt                   = s.wms_tf_tp_modified_dt,
        tf_tp_multilvl_approval             = s.wms_tf_tp_multilvl_approval,
        tf_tp_min_weight                    = s.wms_tf_tp_min_weight,
        tf_tp_min_volume                    = s.wms_tf_tp_min_volume,
        tf_tp_previous_status               = s.wms_tf_tp_previous_status,
        tf_tp_factor                        = s.wms_tf_tp_factor,
        tf_tp_leg_behavior                  = s.wms_tf_tp_leg_behavior,
        tf_tp_service_id                    = s.wms_tf_tp_service_id,
        non_billable_chk                    = s.wms_non_billable_chk,
        tf_tp_numeric_round_off             = s.wms_tf_tp_numeric_round_off,
        tf_tp_thu_volume_min_lim            = s.wms_tf_tp_thu_volume_min_lim,
        tf_tp_thu_weight_min_lim            = s.wms_tf_tp_thu_weight_min_lim,
        tf_tp_category                      = s.wms_tf_tp_category,
        tf_tp_load_type                     = s.wms_tf_tp_load_type,
        tf_tp_freight_charges               = s.wms_tf_tp_freight_charges,
        tf_tp_inco_terms                    = s.wms_tf_tp_inco_terms,
        tf_tp_rate_class                    = s.wms_tf_tp_rate_class,
        tf_tp_govt_status                   = s.wms_tf_tp_govt_status,
        tf_tp_uniq_note                     = s.wms_tf_tp_uniq_note,
        tf_tp_type_of_entry                 = s.wms_tf_tp_type_of_entry,
        tf_tp_uld_rating_type               = s.wms_tf_tp_uld_rating_type,
        tf_tp_uld_charge_code               = s.wms_tf_tp_uld_charge_code,
        tf_tp_dis_doc_type                  = s.wms_tf_tp_dis_doc_type,
        tf_tp_resource_type                 = s.wms_tf_tp_resource_type,
        tf_tp_no_of_thu_uom                 = s.wms_tf_tp_no_of_thu_uom,
        tf_tp_space_uom                     = s.wms_tf_tp_space_uom,
        tf_tp_cod_cop                       = s.wms_tf_tp_cod_cop,
        tf_tp_cod_cop_min                   = s.wms_tf_tp_cod_cop_min,
        tf_tp_cod_cop_max                   = s.wms_tf_tp_cod_cop_max,
        tf_tp_cod_cop_min_lim               = s.wms_tf_tp_cod_cop_min_lim,
        tf_tp_cod_cop_uom                   = s.wms_tf_tp_cod_cop_uom,
        tf_tp_declrd_value                  = s.wms_tf_tp_declrd_value,
        tf_tp_declrd_value_min              = s.wms_tf_tp_declrd_value_min,
        tf_tp_declrd_value_max              = s.wms_tf_tp_declrd_value_max,
        tf_tp_declrd_value_min_lim          = s.wms_tf_tp_declrd_value_min_lim,
        tf_tp_declrd_value_uom              = s.wms_tf_tp_declrd_value_uom,
        tf_tp_dutiable_value                = s.wms_tf_tp_dutiable_value,
        tf_tp_dutiable_value_min            = s.wms_tf_tp_dutiable_value_min,
        tf_tp_dutiable_value_max            = s.wms_tf_tp_dutiable_value_max,
        tf_tp_dutiable_value_min_lim        = s.wms_tf_tp_dutiable_value_min_lim,
        tf_tp_dutiable_value_uom            = s.wms_tf_tp_dutiable_value_uom,
        tf_tp_thu_length                    = s.wms_tf_tp_thu_length,
        tf_tp_thu_length_min                = s.wms_tf_tp_thu_length_min,
        tf_tp_thu_length_max                = s.wms_tf_tp_thu_length_max,
        tf_tp_thu_length_min_lim            = s.wms_tf_tp_thu_length_min_lim,
        tf_tp_thu_length_uom                = s.wms_tf_tp_thu_length_uom,
        tf_tp_thu_width                     = s.wms_tf_tp_thu_width,
        tf_tp_thu_width_min                 = s.wms_tf_tp_thu_width_min,
        tf_tp_thu_width_max                 = s.wms_tf_tp_thu_width_max,
        tf_tp_thu_width_min_lim             = s.wms_tf_tp_thu_width_min_lim,
        tf_tp_thu_width_uom                 = s.wms_tf_tp_thu_width_uom,
        tf_tp_thu_height                    = s.wms_tf_tp_thu_height,
        tf_tp_thu_height_min                = s.wms_tf_tp_thu_height_min,
        tf_tp_thu_height_max                = s.wms_tf_tp_thu_height_max,
        tf_tp_thu_height_min_lim            = s.wms_tf_tp_thu_height_min_lim,
        tf_tp_thu_height_uom                = s.wms_tf_tp_thu_height_uom,
        tf_tp_thu_distance_min_lim          = s.wms_tf_tp_thu_distance_min_lim,
        tf_tp_thu_trip_time_min_lim         = s.wms_tf_tp_thu_trip_time_min_lim,
        tf_tp_cost_type                     = s.wms_tf_tp_cost_type,
        tf_tp_area                          = s.wms_tf_tp_area,
        tf_tp_Origin_Via_Point              = s.wms_tf_tp_Origin_Via_Point,
        tf_tp_Dest_Via_Point                = s.wms_tf_tp_Dest_Via_Point,
        tf_tp_data_source                   = s.wms_tf_tp_data_source,
        tf_tp_directioncode_chk             = s.wms_tf_tp_directioncode_chk,
        tf_tp_proportional_Code             = s.wms_tf_tp_proportional_Code,
        tf_tp_uniq_addon_area_code          = s.wms_tf_tp_uniq_addon_area_code,
        tf_tp_no_of_thu_min                 = s.wms_tf_tp_no_of_thu_min,
        tf_tp_no_of_thu_max                 = s.wms_tf_tp_no_of_thu_max,
        tf_tp_space_min                     = s.wms_tf_tp_space_min,
        tf_tp_space_max                     = s.wms_tf_tp_space_max,
        tf_tp_no_of_thu                     = s.wms_tf_tp_no_of_thu,
        tf_tp_no_of_thu_min_lim             = s.wms_tf_tp_no_of_thu_min_lim,
        tf_tp_space                         = s.wms_tf_tp_space,
        tf_tp_space_min_lim                 = s.wms_tf_tp_space_min_lim,
        tf_acc_flag                         = s.wms_tf_acc_flag,
        tf_tp_Reciprocal_YN                 = s.wms_tf_tp_Reciprocal_YN,
        tf_tp_doc                           = s.wms_tf_tp_doc,
        tf_tp_min_doc                       = s.wms_tf_tp_min_doc,
        tf_tp_doc_min                       = s.wms_tf_tp_doc_min,
        tf_tp_doc_max                       = s.wms_tf_tp_doc_max,
        tf_tp_doc_uom                       = s.wms_tf_tp_doc_uom,
        tf_tp_doc_min_lim                   = s.wms_tf_tp_doc_min_lim,
        tf_tp_dec_id                        = s.wms_tf_tp_dec_id,
        tf_tp_consumables                   = s.wms_tf_tp_consumables,
        tf_tp_task                          = s.wms_tf_tp_task,
        tf_tp_job_type                      = s.wms_tf_tp_job_type,
        tf_tp_min_eqp                       = s.wms_tf_tp_min_eqp,
        tf_tp_eqp_min                       = s.wms_tf_tp_eqp_min,
        tf_tp_eqp_max                       = s.wms_tf_tp_eqp_max,
        tf_tp_eqp_uom                       = s.wms_tf_tp_eqp_uom,
        tf_tp_min_commodity                 = s.wms_tf_tp_min_commodity,
        tf_tp_commodity_min                 = s.wms_tf_tp_commodity_min,
        tf_tp_commodity_max                 = s.wms_tf_tp_commodity_max,
        tf_tp_commodity_uom                 = s.wms_tf_tp_commodity_uom,
        etlactiveind                        = 1,
        etljobname                          = p_etljobname,
        envsourcecd                         = p_envsourcecd,
        datasourcecd                        = p_datasourcecd,
        etlupdatedatetime                   = NOW()
    FROM stg.stg_wms_tariff_transport_hdr s
    WHERE t.tf_tp_id = s.wms_tf_tp_id
    AND t.tf_tp_ou = s.wms_tf_tp_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_TariffTransport
    (
        tf_tp_id						, tf_tp_ou					, tf_tp_desc					, tf_tp_type_code			, tf_tp_status					, 
		tf_tp_division					, tf_tp_location			, tf_tp_validity_id				, tf_tp_frm_ship_point		, tf_tp_to_ship_point			, 
		tf_tp_frm_geo_type				, tf_tp_frm_geo				, tf_tp_to_geo_type				, tf_tp_to_geo				, tf_tp_dist_check				, 
		tf_tp_dist_min					, tf_tp_dist_max			, tf_tp_dist_uom				, tf_tp_wt					, tf_tp_wt_min					, 
		tf_tp_wt_max					, tf_tp_wt_uom				, tf_tp_vol						, tf_tp_vol_min				, tf_tp_vol_max					,
		tf_tp_vol_uom					, tf_tp_trip_time			, tf_tp_trip_time_min			, tf_tp_trip_time_max		, tf_tp_trip_time_uom			, 
		tf_tp_vol_conversion			, tf_tp_service				, tf_tp_sub_service				, tf_tp_thu_type			, tf_tp_min_no_thu				, 
		tf_tp_max_no_thu				, tf_tp_class_of_stores		, tf_tp_thu_space_frm			, tf_tp_thu_space_to		, tf_tp_equip_type				, 
		tf_tp_veh_type					, tf_tp_timestamp			, tf_tp_created_by				, tf_tp_created_dt			, tf_tp_modified_by				, 
		tf_tp_modified_dt				, tf_tp_multilvl_approval	, tf_tp_min_weight				, tf_tp_min_volume			, tf_tp_previous_status			, 
		tf_tp_factor					, tf_tp_leg_behavior		, tf_tp_service_id				, non_billable_chk			, tf_tp_numeric_round_off		, 
		tf_tp_thu_volume_min_lim		, tf_tp_thu_weight_min_lim	, tf_tp_category				, tf_tp_load_type			, tf_tp_freight_charges			, 
		tf_tp_inco_terms				, tf_tp_rate_class			, tf_tp_govt_status				, tf_tp_uniq_note			, tf_tp_type_of_entry			,
		tf_tp_uld_rating_type			, tf_tp_uld_charge_code		, tf_tp_dis_doc_type			, tf_tp_resource_type		, tf_tp_no_of_thu_uom			, 
		tf_tp_space_uom					, tf_tp_cod_cop				, tf_tp_cod_cop_min				, tf_tp_cod_cop_max			, tf_tp_cod_cop_min_lim			, 
		tf_tp_cod_cop_uom				, tf_tp_declrd_value		, tf_tp_declrd_value_min		, tf_tp_declrd_value_max	, tf_tp_declrd_value_min_lim	,
		tf_tp_declrd_value_uom			, tf_tp_dutiable_value		, tf_tp_dutiable_value_min		, tf_tp_dutiable_value_max	, tf_tp_dutiable_value_min_lim	,
		tf_tp_dutiable_value_uom		, tf_tp_thu_length			, tf_tp_thu_length_min			, tf_tp_thu_length_max		, tf_tp_thu_length_min_lim		, 
		tf_tp_thu_length_uom			, tf_tp_thu_width			, tf_tp_thu_width_min			, tf_tp_thu_width_max		, tf_tp_thu_width_min_lim		, 
		tf_tp_thu_width_uom				, tf_tp_thu_height			, tf_tp_thu_height_min			, tf_tp_thu_height_max		, tf_tp_thu_height_min_lim		, 
		tf_tp_thu_height_uom			, tf_tp_thu_distance_min_lim, tf_tp_thu_trip_time_min_lim	, tf_tp_cost_type			, tf_tp_area					, 
		tf_tp_Origin_Via_Point			, tf_tp_Dest_Via_Point		, tf_tp_data_source				, tf_tp_directioncode_chk	, tf_tp_proportional_Code		, 
		tf_tp_uniq_addon_area_code		, tf_tp_no_of_thu_min		, tf_tp_no_of_thu_max			, tf_tp_space_min			, tf_tp_space_max				, 
		tf_tp_no_of_thu					, tf_tp_no_of_thu_min_lim	, tf_tp_space					, tf_tp_space_min_lim		, tf_acc_flag					, 
		tf_tp_Reciprocal_YN				, tf_tp_doc					, tf_tp_min_doc					, tf_tp_doc_min				, tf_tp_doc_max					, 
		tf_tp_doc_uom					, tf_tp_doc_min_lim			, tf_tp_dec_id					, tf_tp_consumables			, tf_tp_task					,
		tf_tp_job_type					, tf_tp_min_eqp				, tf_tp_eqp_min					, tf_tp_eqp_max				, tf_tp_eqp_uom					, 
		tf_tp_min_commodity				, tf_tp_commodity_min		, tf_tp_commodity_max			, tf_tp_commodity_uom		, 
		etlactiveind					, etljobname				, envsourcecd					, datasourcecd				, etlcreatedatetime
    )

    SELECT
        s.wms_tf_tp_id					, s.wms_tf_tp_ou					, s.wms_tf_tp_desc					, s.wms_tf_tp_type_code			, s.wms_tf_tp_status			, 
		s.wms_tf_tp_division			, s.wms_tf_tp_location				, s.wms_tf_tp_validity_id			, s.wms_tf_tp_frm_ship_point	, s.wms_tf_tp_to_ship_point		, 
		s.wms_tf_tp_frm_geo_type		, s.wms_tf_tp_frm_geo				, s.wms_tf_tp_to_geo_type			, s.wms_tf_tp_to_geo			, s.wms_tf_tp_dist_check		, 
		s.wms_tf_tp_dist_min			, s.wms_tf_tp_dist_max				, s.wms_tf_tp_dist_uom				, s.wms_tf_tp_wt				, s.wms_tf_tp_wt_min			, 
		s.wms_tf_tp_wt_max				, s.wms_tf_tp_wt_uom				, s.wms_tf_tp_vol					, s.wms_tf_tp_vol_min			, s.wms_tf_tp_vol_max			,
		s.wms_tf_tp_vol_uom				, s.wms_tf_tp_trip_time				, s.wms_tf_tp_trip_time_min			, s.wms_tf_tp_trip_time_max		, s.wms_tf_tp_trip_time_uom		, 
		s.wms_tf_tp_vol_conversion		, s.wms_tf_tp_service				, s.wms_tf_tp_sub_service			, s.wms_tf_tp_thu_type			, s.wms_tf_tp_min_no_thu		, 
		s.wms_tf_tp_max_no_thu			, s.wms_tf_tp_class_of_stores		, s.wms_tf_tp_thu_space_frm			, s.wms_tf_tp_thu_space_to		, s.wms_tf_tp_equip_type		, 
		s.wms_tf_tp_veh_type			, s.wms_tf_tp_timestamp				, s.wms_tf_tp_created_by			, s.wms_tf_tp_created_dt		, s.wms_tf_tp_modified_by		, 
		s.wms_tf_tp_modified_dt			, s.wms_tf_tp_multilvl_approval		, s.wms_tf_tp_min_weight			, s.wms_tf_tp_min_volume		, s.wms_tf_tp_previous_status	,
		s.wms_tf_tp_factor				, s.wms_tf_tp_leg_behavior			, s.wms_tf_tp_service_id			, s.wms_non_billable_chk		, s.wms_tf_tp_numeric_round_off	, 
		s.wms_tf_tp_thu_volume_min_lim	, s.wms_tf_tp_thu_weight_min_lim	, s.wms_tf_tp_category				, s.wms_tf_tp_load_type			, s.wms_tf_tp_freight_charges	, 
		s.wms_tf_tp_inco_terms			, s.wms_tf_tp_rate_class			, s.wms_tf_tp_govt_status			, s.wms_tf_tp_uniq_note			, s.wms_tf_tp_type_of_entry		, 
		s.wms_tf_tp_uld_rating_type		, s.wms_tf_tp_uld_charge_code		, s.wms_tf_tp_dis_doc_type			, s.wms_tf_tp_resource_type		, s.wms_tf_tp_no_of_thu_uom		, 
		s.wms_tf_tp_space_uom			, s.wms_tf_tp_cod_cop				, s.wms_tf_tp_cod_cop_min			, s.wms_tf_tp_cod_cop_max		, s.wms_tf_tp_cod_cop_min_lim	, 
		s.wms_tf_tp_cod_cop_uom			, s.wms_tf_tp_declrd_value			, s.wms_tf_tp_declrd_value_min		, s.wms_tf_tp_declrd_value_max	, s.wms_tf_tp_declrd_value_min_lim, 
		s.wms_tf_tp_declrd_value_uom	, s.wms_tf_tp_dutiable_value		, s.wms_tf_tp_dutiable_value_min	, s.wms_tf_tp_dutiable_value_max, s.wms_tf_tp_dutiable_value_min_lim, 
		s.wms_tf_tp_dutiable_value_uom	, s.wms_tf_tp_thu_length			, s.wms_tf_tp_thu_length_min		, s.wms_tf_tp_thu_length_max	, s.wms_tf_tp_thu_length_min_lim, 
		s.wms_tf_tp_thu_length_uom		, s.wms_tf_tp_thu_width				, s.wms_tf_tp_thu_width_min			, s.wms_tf_tp_thu_width_max		, s.wms_tf_tp_thu_width_min_lim	, 
		s.wms_tf_tp_thu_width_uom		, s.wms_tf_tp_thu_height			, s.wms_tf_tp_thu_height_min		, s.wms_tf_tp_thu_height_max	, s.wms_tf_tp_thu_height_min_lim, 
		s.wms_tf_tp_thu_height_uom		, s.wms_tf_tp_thu_distance_min_lim	, s.wms_tf_tp_thu_trip_time_min_lim	, s.wms_tf_tp_cost_type			, s.wms_tf_tp_area				, 
		s.wms_tf_tp_Origin_Via_Point	, s.wms_tf_tp_Dest_Via_Point		, s.wms_tf_tp_data_source			, s.wms_tf_tp_directioncode_chk	, s.wms_tf_tp_proportional_Code	, 
		s.wms_tf_tp_uniq_addon_area_code, s.wms_tf_tp_no_of_thu_min			, s.wms_tf_tp_no_of_thu_max			, s.wms_tf_tp_space_min			, s.wms_tf_tp_space_max			, 
		s.wms_tf_tp_no_of_thu			, s.wms_tf_tp_no_of_thu_min_lim		, s.wms_tf_tp_space					, s.wms_tf_tp_space_min_lim		, s.wms_tf_acc_flag				, 
		s.wms_tf_tp_Reciprocal_YN		, s.wms_tf_tp_doc					, s.wms_tf_tp_min_doc				, s.wms_tf_tp_doc_min			, s.wms_tf_tp_doc_max			, 
		s.wms_tf_tp_doc_uom				, s.wms_tf_tp_doc_min_lim			, s.wms_tf_tp_dec_id				, s.wms_tf_tp_consumables		, s.wms_tf_tp_task				, 
		s.wms_tf_tp_job_type			, s.wms_tf_tp_min_eqp				, s.wms_tf_tp_eqp_min				, s.wms_tf_tp_eqp_max			, s.wms_tf_tp_eqp_uom			, 
		s.wms_tf_tp_min_commodity		, s.wms_tf_tp_commodity_min			, s.wms_tf_tp_commodity_max			, s.wms_tf_tp_commodity_uom		, 
						1				, p_etljobname						, p_envsourcecd						, p_datasourcecd				, NOW()
    FROM stg.stg_wms_tariff_transport_hdr s
    LEFT JOIN dwh.D_TariffTransport t
    ON s.wms_tf_tp_id = t.tf_tp_id
    AND s.wms_tf_tp_ou = t.tf_tp_ou
    WHERE t.tf_tp_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

    INSERT INTO raw.raw_wms_tariff_transport_hdr
    (
        wms_tf_tp_id				, wms_tf_tp_ou						, wms_tf_tp_desc				, wms_tf_tp_type_code			, wms_tf_tp_status, 
		wms_tf_tp_division			, wms_tf_tp_location				, wms_tf_tp_validity_id			, wms_tf_tp_frm_ship_point		, wms_tf_tp_to_ship_point, 
		wms_tf_tp_frm_geo_type		, wms_tf_tp_frm_geo					, wms_tf_tp_to_geo_type			, wms_tf_tp_to_geo				, wms_tf_tp_dist_check, 
		wms_tf_tp_dist_min			, wms_tf_tp_dist_max				, wms_tf_tp_dist_uom			, wms_tf_tp_wt					, wms_tf_tp_wt_min,
		wms_tf_tp_wt_max			, wms_tf_tp_wt_uom					, wms_tf_tp_vol					, wms_tf_tp_vol_min				, wms_tf_tp_vol_max, 
		wms_tf_tp_vol_uom			, wms_tf_tp_trip_time				, wms_tf_tp_trip_time_min		, wms_tf_tp_trip_time_max		,
		wms_tf_tp_trip_time_uom		, wms_tf_tp_vol_conversion			, wms_tf_tp_service				, wms_tf_tp_sub_service			, 
		wms_tf_tp_thu_type			, wms_tf_tp_min_no_thu				, wms_tf_tp_max_no_thu			, wms_tf_tp_class_of_stores		, wms_tf_tp_thu_space_frm,
		wms_tf_tp_thu_space_to		, wms_tf_tp_equip_type				, wms_tf_tp_veh_type			, wms_tf_tp_timestamp			, wms_tf_tp_created_by, 
		wms_tf_tp_created_dt		, wms_tf_tp_modified_by				, wms_tf_tp_modified_dt			, wms_tf_tp_multilvl_approval	, wms_tf_tp_min_weight, 
		wms_tf_tp_min_volume		, wms_tf_tp_previous_status			, wms_tf_tp_factor				, wms_tf_tp_leg_behavior		, wms_tf_tp_service_id,
		wms_non_billable_chk		, wms_tf_tp_numeric_round_off		, wms_tf_tp_thu_volume_min_lim	, wms_tf_tp_thu_weight_min_lim	, wms_tf_tp_category, 
		wms_tf_tp_load_type			, wms_tf_tp_freight_charges			, wms_tf_tp_inco_terms			, wms_tf_tp_rate_class			, wms_tf_tp_govt_status, 
		wms_tf_tp_uniq_note			, wms_tf_tp_type_of_entry			, wms_tf_tp_uld_rating_type		, wms_tf_tp_uld_charge_code		, wms_tf_tp_dis_doc_type, 
		wms_tf_tp_resource_type		, wms_tf_tp_no_of_thu_uom			, wms_tf_tp_space_uom			, wms_tf_tp_cod_cop				, wms_tf_tp_cod_cop_min,
		wms_tf_tp_cod_cop_max		, wms_tf_tp_cod_cop_min_lim			, wms_tf_tp_cod_cop_uom			, wms_tf_tp_declrd_value		, wms_tf_tp_declrd_value_min, 
		wms_tf_tp_declrd_value_max	, wms_tf_tp_declrd_value_min_lim	, wms_tf_tp_declrd_value_uom	, wms_tf_tp_dutiable_value		, wms_tf_tp_dutiable_value_min,
		wms_tf_tp_dutiable_value_max, wms_tf_tp_dutiable_value_min_lim	, wms_tf_tp_dutiable_value_uom	, wms_tf_tp_thu_length			, wms_tf_tp_thu_length_min,
		wms_tf_tp_thu_length_max	, wms_tf_tp_thu_length_min_lim		, wms_tf_tp_thu_length_uom		, wms_tf_tp_thu_width			, wms_tf_tp_thu_width_min, 
		wms_tf_tp_thu_width_max		, wms_tf_tp_thu_width_min_lim		, wms_tf_tp_thu_width_uom		, wms_tf_tp_thu_height			, wms_tf_tp_thu_height_min, 
		wms_tf_tp_thu_height_max	, wms_tf_tp_thu_height_min_lim		, wms_tf_tp_thu_height_uom		, wms_tf_tp_thu_distance_min_lim, wms_tf_tp_thu_trip_time_min_lim,
		wms_tf_tp_cost_type			, wms_tf_tp_area					, wms_tf_tp_Origin_Via_Point	, wms_tf_tp_Dest_Via_Point		, wms_tf_tp_data_source, 
		wms_tf_tp_directioncode_chk	, wms_tf_tp_proportional_Code		, wms_tf_tp_uniq_addon_area_code, wms_tf_tp_no_of_thu_min		, wms_tf_tp_no_of_thu_max,
		wms_tf_tp_space_min			, wms_tf_tp_space_max				, wms_tf_tp_no_of_thu			, wms_tf_tp_no_of_thu_min_lim	, wms_tf_tp_space, 
		wms_tf_tp_space_min_lim		, wms_tf_acc_flag					, wms_tf_tp_Reciprocal_YN		, wms_tf_tp_doc					, wms_tf_tp_min_doc, 
		wms_tf_tp_doc_min			, wms_tf_tp_doc_max					, wms_tf_tp_doc_uom				, wms_tf_tp_doc_min_lim			, wms_tf_tp_dec_id, 
		wms_tf_tp_consumables		, wms_tf_tp_task					, wms_tf_tp_job_type			, wms_tf_tp_min_eqp				, wms_tf_tp_eqp_min, 
		wms_tf_tp_eqp_max			, wms_tf_tp_eqp_uom					, wms_tf_tp_min_commodity		, wms_tf_tp_commodity_min		, wms_tf_tp_commodity_max, 
		wms_tf_tp_commodity_uom		, etlcreateddatetime
    )
    SELECT
		wms_tf_tp_id				, wms_tf_tp_ou						, wms_tf_tp_desc				, wms_tf_tp_type_code			, wms_tf_tp_status, 
		wms_tf_tp_division			, wms_tf_tp_location				, wms_tf_tp_validity_id			, wms_tf_tp_frm_ship_point		, wms_tf_tp_to_ship_point, 
		wms_tf_tp_frm_geo_type		, wms_tf_tp_frm_geo					, wms_tf_tp_to_geo_type			, wms_tf_tp_to_geo				, wms_tf_tp_dist_check, 
		wms_tf_tp_dist_min			, wms_tf_tp_dist_max				, wms_tf_tp_dist_uom			, wms_tf_tp_wt					, wms_tf_tp_wt_min,
		wms_tf_tp_wt_max			, wms_tf_tp_wt_uom					, wms_tf_tp_vol					, wms_tf_tp_vol_min				, wms_tf_tp_vol_max, 
		wms_tf_tp_vol_uom			, wms_tf_tp_trip_time				, wms_tf_tp_trip_time_min		, wms_tf_tp_trip_time_max		,
		wms_tf_tp_trip_time_uom		, wms_tf_tp_vol_conversion			, wms_tf_tp_service				, wms_tf_tp_sub_service			, 
		wms_tf_tp_thu_type			, wms_tf_tp_min_no_thu				, wms_tf_tp_max_no_thu			, wms_tf_tp_class_of_stores		, wms_tf_tp_thu_space_frm,
		wms_tf_tp_thu_space_to		, wms_tf_tp_equip_type				, wms_tf_tp_veh_type			, wms_tf_tp_timestamp			, wms_tf_tp_created_by, 
		wms_tf_tp_created_dt		, wms_tf_tp_modified_by				, wms_tf_tp_modified_dt			, wms_tf_tp_multilvl_approval	, wms_tf_tp_min_weight, 
		wms_tf_tp_min_volume		, wms_tf_tp_previous_status			, wms_tf_tp_factor				, wms_tf_tp_leg_behavior		, wms_tf_tp_service_id,
		wms_non_billable_chk		, wms_tf_tp_numeric_round_off		, wms_tf_tp_thu_volume_min_lim	, wms_tf_tp_thu_weight_min_lim	, wms_tf_tp_category, 
		wms_tf_tp_load_type			, wms_tf_tp_freight_charges			, wms_tf_tp_inco_terms			, wms_tf_tp_rate_class			, wms_tf_tp_govt_status, 
		wms_tf_tp_uniq_note			, wms_tf_tp_type_of_entry			, wms_tf_tp_uld_rating_type		, wms_tf_tp_uld_charge_code		, wms_tf_tp_dis_doc_type, 
		wms_tf_tp_resource_type		, wms_tf_tp_no_of_thu_uom			, wms_tf_tp_space_uom			, wms_tf_tp_cod_cop				, wms_tf_tp_cod_cop_min,
		wms_tf_tp_cod_cop_max		, wms_tf_tp_cod_cop_min_lim			, wms_tf_tp_cod_cop_uom			, wms_tf_tp_declrd_value		, wms_tf_tp_declrd_value_min, 
		wms_tf_tp_declrd_value_max	, wms_tf_tp_declrd_value_min_lim	, wms_tf_tp_declrd_value_uom	, wms_tf_tp_dutiable_value		, wms_tf_tp_dutiable_value_min,
		wms_tf_tp_dutiable_value_max, wms_tf_tp_dutiable_value_min_lim	, wms_tf_tp_dutiable_value_uom	, wms_tf_tp_thu_length			, wms_tf_tp_thu_length_min,
		wms_tf_tp_thu_length_max	, wms_tf_tp_thu_length_min_lim		, wms_tf_tp_thu_length_uom		, wms_tf_tp_thu_width			, wms_tf_tp_thu_width_min, 
		wms_tf_tp_thu_width_max		, wms_tf_tp_thu_width_min_lim		, wms_tf_tp_thu_width_uom		, wms_tf_tp_thu_height			, wms_tf_tp_thu_height_min, 
		wms_tf_tp_thu_height_max	, wms_tf_tp_thu_height_min_lim		, wms_tf_tp_thu_height_uom		, wms_tf_tp_thu_distance_min_lim, wms_tf_tp_thu_trip_time_min_lim,
		wms_tf_tp_cost_type			, wms_tf_tp_area					, wms_tf_tp_Origin_Via_Point	, wms_tf_tp_Dest_Via_Point		, wms_tf_tp_data_source, 
		wms_tf_tp_directioncode_chk	, wms_tf_tp_proportional_Code		, wms_tf_tp_uniq_addon_area_code, wms_tf_tp_no_of_thu_min		, wms_tf_tp_no_of_thu_max,
		wms_tf_tp_space_min			, wms_tf_tp_space_max				, wms_tf_tp_no_of_thu			, wms_tf_tp_no_of_thu_min_lim	, wms_tf_tp_space, 
		wms_tf_tp_space_min_lim		, wms_tf_acc_flag					, wms_tf_tp_Reciprocal_YN		, wms_tf_tp_doc					, wms_tf_tp_min_doc, 
		wms_tf_tp_doc_min			, wms_tf_tp_doc_max					, wms_tf_tp_doc_uom				, wms_tf_tp_doc_min_lim			, wms_tf_tp_dec_id, 
		wms_tf_tp_consumables		, wms_tf_tp_task					, wms_tf_tp_job_type			, wms_tf_tp_min_eqp				, wms_tf_tp_eqp_min, 
		wms_tf_tp_eqp_max			, wms_tf_tp_eqp_uom					, wms_tf_tp_min_commodity		, wms_tf_tp_commodity_min		, wms_tf_tp_commodity_max, 
		wms_tf_tp_commodity_uom		, etlcreateddatetime
		FROM stg.stg_wms_tariff_transport_hdr;
		END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_tarifftransport(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_tarifftype(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_tarifftype(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_tariff_type_master;

    UPDATE dwh.D_TariffType t
    SET
        tar_applicability          = s.wms_tar_applicability,
        tar_scr_code               = s.wms_tar_scr_code,
        tar_type_code              = s.wms_tar_type_code,
        tar_tf_type                = s.wms_tar_tf_type,
        tar_display_tf_type        = s.wms_tar_display_tf_type,
        tar_created_by             = s.wms_tar_created_by,
        tar_created_date           = s.wms_tar_created_date,
        tar_modified_by            = s.wms_tar_modified_by,
        tar_modified_date          = s.wms_tar_modified_date,
        tar_timestamp              = s.wms_tar_timestamp,
        tar_revenue_split          = s.wms_tar_revenue_split,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_tariff_type_master s
    WHERE t.tar_lineno = s.wms_tar_lineno
    AND t.tar_ou = s.wms_tar_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_TariffType
    (
        tar_lineno				, tar_ou					, tar_applicability			, tar_scr_code			, tar_type_code		, 
		tar_tf_type				, tar_display_tf_type		, tar_created_by			, tar_created_date		, tar_modified_by	, 
		tar_modified_date		, tar_timestamp				, tar_revenue_split			, 
		etlactiveind			, etljobname				, envsourcecd				, datasourcecd			, etlcreatedatetime
    )

    SELECT
        s.wms_tar_lineno		, s.wms_tar_ou				, s.wms_tar_applicability	, s.wms_tar_scr_code	, s.wms_tar_type_code	,
		s.wms_tar_tf_type		, s.wms_tar_display_tf_type	, s.wms_tar_created_by		, s.wms_tar_created_date, s.wms_tar_modified_by	, 
		s.wms_tar_modified_date	, s.wms_tar_timestamp		, s.wms_tar_revenue_split	, 
					1			, p_etljobname				, p_envsourcecd				, p_datasourcecd		, NOW()
    FROM stg.stg_wms_tariff_type_master s
    LEFT JOIN dwh.D_TariffType t
    ON s.wms_tar_lineno = t.tar_lineno
    AND s.wms_tar_ou = t.tar_ou
    WHERE t.tar_lineno IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_wms_tariff_type_master
    (
        wms_tar_lineno			, wms_tar_ou				, wms_tar_applicability	, wms_tar_scr_code		, wms_tar_type_code		, 
		wms_tar_tf_type			, wms_tar_display_tf_type	, wms_tar_created_by	, wms_tar_created_date	, wms_tar_modified_by	, 
		wms_tar_modified_date	, wms_tar_timestamp			, wms_tar_revenue_split	, etlcreateddatetime
    )
    SELECT
        wms_tar_lineno			, wms_tar_ou				, wms_tar_applicability	, wms_tar_scr_code		, wms_tar_type_code		, 
		wms_tar_tf_type			, wms_tar_display_tf_type	, wms_tar_created_by	, wms_tar_created_date	, wms_tar_modified_by	, 
		wms_tar_modified_date	, wms_tar_timestamp			, wms_tar_revenue_split	, etlcreateddatetime
	FROM stg.stg_wms_tariff_type_master;
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_d_tarifftype(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_tarifftypegroup(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_tarifftypegroup(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_tariff_type_met;

    UPDATE dwh.D_TariffTypeGroup t
    SET
        tf_type_desc                  = s.wms_tf_type_desc,
        tf_formula                    = s.wms_tf_formula,
        tf_created_by                 = s.wms_tf_created_by,
        tf_created_date               = s.wms_tf_created_date,
        tf_langid                     = s.wms_tf_langid,
        tf_acc_flag                   = s.wms_tf_acc_flag,
        tariff_Code                   = s.wms_tariff_Code,
        description                   = s.wms_description,
        formula                       = s.formula,
        TF_TARIFF_CODE_VERSION        = s.WMS_TF_TARIFF_CODE_VERSION,
        tf_br_remit_flag              = s.wms_tf_br_remit_flag,
        tf_revenue_split              = s.wms_tf_revenue_split,
        tf_basicsforop                = s.wms_tf_basicsforop,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_tariff_type_met s
    WHERE	t.tf_grp_code	= s.wms_tf_grp_code
    AND		t.tf_type_code	= s.wms_tf_type_code;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_TariffTypeGroup
    (
        tf_grp_code			, tf_type_code				, tf_type_desc		, tf_formula		, tf_created_by	, 
		tf_created_date		, tf_langid					, tf_acc_flag		, tariff_Code		, description	, 
		formula				, TF_TARIFF_CODE_VERSION	, tf_br_remit_flag	, tf_revenue_split	, tf_basicsforop, 
		etlactiveind		, etljobname				, envsourcecd		, datasourcecd		, etlcreatedatetime
    )

    SELECT
        s.wms_tf_grp_code	, s.wms_tf_type_code			, s.wms_tf_type_desc	, s.wms_tf_formula		, s.wms_tf_created_by	, 
		s.wms_tf_created_date, s.wms_tf_langid				, s.wms_tf_acc_flag		, s.wms_tariff_Code		, s.wms_description		, 
		s.formula			, s.WMS_TF_TARIFF_CODE_VERSION	, s.wms_tf_br_remit_flag, s.wms_tf_revenue_split, s.wms_tf_basicsforop	, 
				1			, p_etljobname					, p_envsourcecd			, p_datasourcecd		, NOW()
    FROM stg.stg_wms_tariff_type_met s
    LEFT JOIN dwh.D_TariffTypeGroup t
    ON	s.wms_tf_grp_code	= t.tf_grp_code
    AND	s.wms_tf_type_code	= t.tf_type_code
    WHERE	t.tf_grp_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_wms_tariff_type_met
    (
        wms_tf_grp_code		, wms_tf_type_code			, wms_tf_type_desc		, wms_tf_formula		, wms_tf_created_by	, 
		wms_tf_created_date	, wms_tf_langid				, wms_tf_acc_flag		, wms_tariff_Code		, wms_description	, 
		formula				, WMS_TF_TARIFF_CODE_VERSION, wms_tf_br_remit_flag	, wms_tf_revenue_split	, wms_tf_basicsforop, 
		etlcreateddatetime
    )
    SELECT
        wms_tf_grp_code		, wms_tf_type_code			, wms_tf_type_desc		, wms_tf_formula		, wms_tf_created_by	, 
		wms_tf_created_date	, wms_tf_langid				, wms_tf_acc_flag		, wms_tariff_Code		, wms_description	, 
		formula				, WMS_TF_TARIFF_CODE_VERSION, wms_tf_br_remit_flag	, wms_tf_revenue_split	, wms_tf_basicsforop, 
		etlcreateddatetime
    FROM stg.stg_wms_tariff_type_met;
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_tarifftypegroup(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_thu(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_thu(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_thu_hdr;

	UPDATE dwh.d_thu t
    SET 
		thu_description 			= s.wms_thu_description,
        thu_bulk 					= s.wms_thu_bulk,
        thu_class 					= s.wms_thu_class,
        thu_status 					= s.wms_thu_status,
        thu_reason_code 			= s.wms_thu_reason_code,
        thu_tare 					= s.wms_thu_tare,
        thu_max_allowable 			= s.wms_thu_max_allowable,
        thu_weight_uom 				= s.wms_thu_weight_uom,
        thu_uom 					= s.wms_thu_uom,
        thu_int_length 				= s.wms_thu_int_length,
        thu_int_width				= s.wms_thu_int_width,
        thu_int_height				= s.wms_thu_int_height,
        thu_int_uom					= s.wms_thu_int_uom,
        thu_ext_length				= s.wms_thu_ext_length,
        thu_ext_width				= s.wms_thu_ext_width,
        thu_ext_height				= s.wms_thu_ext_height,
        thu_ext_uom					= s.wms_thu_ext_uom,
        thu_timestamp 				= s.wms_thu_timestamp,
        thu_created_by 				= s.wms_thu_created_by,
        thu_created_date 			= s.wms_thu_created_date,
        thu_modified_by 			= s.wms_thu_modified_by,
        thu_modified_date 			= s.wms_thu_modified_date,
        thu_size 					= s.wms_thu_size,
        thu_eligible_cubing			= s.wms_thu_eligible_cubing,
        thu_area 					= s.wms_thu_area,
        thu_weight_const 			= s.wms_thu_weight_const,
        thu_volume_const 			= s.wms_thu_volume_const,
        thu_unit_pallet_const		= s.wms_thu_unit_pallet_const,
        thu_max_unit_permissable	= s.wms_thu_max_unit_permissable,
        thu_stage_mapping			= s.wms_thu_stage_mapping,
        thu_ser_cont				= s.wms_thu_ser_cont,
        thu_is_ethu					= s.wms_thu_is_ethu,
        thu_volume_uom				= s.wms_thu_volume_uom,
        etlactiveind 				= 1,
        etljobname 					= p_etljobname,
        envsourcecd 				= p_envsourcecd ,
        datasourcecd 				= p_datasourcecd ,
        etlupdatedatetime 			= NOW()		
    FROM stg.stg_wms_thu_hdr s
    WHERE t.thu_id  		= s.wms_thu_id
	AND t.thu_ou 			= s.wms_thu_ou;
	
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_thu
	(
	thu_id,					thu_ou,						thu_description,				thu_bulk,		
	thu_class,				thu_status,					thu_reason_code,				thu_tare,		
	thu_max_allowable,		thu_weight_uom,				thu_uom,						thu_int_length,		
	thu_int_width,			thu_int_height,				thu_int_uom,					thu_ext_length,		
	thu_ext_width,			thu_ext_height,				thu_ext_uom,					thu_timestamp,		
	thu_created_by,			thu_created_date,			thu_modified_by,				thu_modified_date,		
	thu_size,				thu_eligible_cubing,		thu_area,						thu_weight_const,	 
	thu_volume_const,		thu_unit_pallet_const,		thu_max_unit_permissable,		thu_stage_mapping,		
	thu_ser_cont,			thu_is_ethu,				thu_volume_uom,					etlactiveind, 
	etljobname, 			envsourcecd, 				datasourcecd, 					etlcreatedatetime
	)
	
    SELECT 
	s.wms_thu_id,					s.wms_thu_ou,						s.wms_thu_description,					s.wms_thu_bulk,		
	s.wms_thu_class,				s.wms_thu_status,					s.wms_thu_reason_code,					s.wms_thu_tare,		
	s.wms_thu_max_allowable,		s.wms_thu_weight_uom,				s.wms_thu_uom,							s.wms_thu_int_length,		
	s.wms_thu_int_width,			s.wms_thu_int_height,				s.wms_thu_int_uom,						s.wms_thu_ext_length,		
	s.wms_thu_ext_width,			s.wms_thu_ext_height,				s.wms_thu_ext_uom,						s.wms_thu_timestamp,		
	s.wms_thu_created_by,			s.wms_thu_created_date,				s.wms_thu_modified_by,					s.wms_thu_modified_date,		
	s.wms_thu_size,					s.wms_thu_eligible_cubing,			s.wms_thu_area,							s.wms_thu_weight_const,	 
	s.wms_thu_volume_const,			s.wms_thu_unit_pallet_const,		s.wms_thu_max_unit_permissable,			s.wms_thu_stage_mapping,		
	s.wms_thu_ser_cont,				s.wms_thu_is_ethu,					s.wms_thu_volume_uom,					1, 
	p_etljobname, 					p_envsourcecd, 						p_datasourcecd, 						now()
	
	FROM stg.stg_wms_thu_hdr s
    LEFT JOIN dwh.d_thu t
    ON 	s.wms_thu_id  		= t.thu_id
	AND s.wms_thu_ou 		= t.thu_ou
	 
    WHERE t.thu_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_thu_hdr
	(
		 wms_thu_id, 				wms_thu_ou, 				wms_thu_description, 		wms_thu_bulk, 
		 wms_thu_class, 			wms_thu_status, 			wms_thu_reason_code, 		wms_thu_tare, 
		 wms_thu_max_allowable, 	wms_thu_weight_uom, 		wms_thu_material, 			wms_thu_uom, 
		 wms_thu_int_length, 		wms_thu_int_width, 			wms_thu_int_height, 		wms_thu_int_uom, 
		 wms_thu_ext_length, 		wms_thu_ext_width, 			wms_thu_ext_height, 		wms_thu_ext_uom, 
		 wms_thu_timestamp, 		wms_thu_created_by, 		wms_thu_created_date, 		wms_thu_modified_by, 	
		 wms_thu_modified_date, 	wms_thu_userdefined1,		wms_thu_userdefined2, 		wms_thu_userdefined3, 
		 wms_thu_size, 			    wms_thu_eligible_cubing,	wms_thu_area, 				wms_thu_area_uom, 			
		 wms_thu_weight_const, 		wms_thu_volume_const,		wms_thu_unit_pallet_const, 	wms_thu_max_unit_permissable, 
		 wms_thu_stage_mapping, 	wms_thu_ser_cont, 			wms_thu_is_ethu, 			wms_thu_volume_uom, 
		 etlcreateddatetime	
	)
	SELECT 
		 wms_thu_id, 				wms_thu_ou, 				wms_thu_description, 		wms_thu_bulk, 
		 wms_thu_class, 			wms_thu_status, 			wms_thu_reason_code, 		wms_thu_tare, 
		 wms_thu_max_allowable, 	wms_thu_weight_uom, 		wms_thu_material, 			wms_thu_uom, 
		 wms_thu_int_length, 		wms_thu_int_width, 			wms_thu_int_height, 		wms_thu_int_uom, 
		 wms_thu_ext_length, 		wms_thu_ext_width, 			wms_thu_ext_height, 		wms_thu_ext_uom, 
		 wms_thu_timestamp, 		wms_thu_created_by, 		wms_thu_created_date, 		wms_thu_modified_by, 	
		 wms_thu_modified_date, 	wms_thu_userdefined1,		wms_thu_userdefined2, 		wms_thu_userdefined3, 
		 wms_thu_size, 			    wms_thu_eligible_cubing,	wms_thu_area, 				wms_thu_area_uom, 			
		 wms_thu_weight_const, 		wms_thu_volume_const,		wms_thu_unit_pallet_const, 	wms_thu_max_unit_permissable, 
		 wms_thu_stage_mapping, 	wms_thu_ser_cont, 			wms_thu_is_ethu, 			wms_thu_volume_uom, 
		 etlcreateddatetime	
    FROM stg.stg_wms_thu_hdr;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_thu(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_thuitemmap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_thuitemmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag

	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
  
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_thu_item_mapping_dtl;  -- change staging table

	UPDATE dwh.D_ThuItemMap t  --Change variables and table name
    SET -- logical column name = s.column name
		
		thu_qty					= s.wms_thu_qty, 
		thu_created_by			= s.wms_thu_created_by, 
		thu_created_date		= s.wms_thu_created_date, 
		thu_ser_no				= s.wms_thu_ser_no, 	
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_thu_item_mapping_dtl s		--staging table name in sheet
    WHERE t.thu_loc_code			= s.wms_thu_loc_code
	AND t.thu_ou					= s.wms_thu_ou
	AND t.thu_serial_no				= s.wms_thu_serial_no
	AND t.thu_id					= s.wms_thu_id
	AND t.thu_item					= s.wms_thu_item
	AND t.thu_lot_no				= s.wms_thu_lot_no
	AND t.thu_itm_serial_no			= s.wms_thu_itm_serial_no;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_ThuItemMap -- table name
	(-- logical column names except last 5
		thu_loc_code, 		thu_ou, 				thu_serial_no, 		thu_id, 			thu_item, 		
		thu_lot_no, 		thu_itm_serial_no,		thu_qty, 			thu_created_by, 	thu_created_date, 		thu_ser_no, 			
		etlactiveind,   	etljobname, 			envsourcecd,		datasourcecd, 		etlcreatedatetime
	)
	
    SELECT  -- normal column name except last 5
		wms_thu_loc_code, 	wms_thu_ou, 			wms_thu_serial_no,	wms_thu_id, 		wms_thu_item,
		wms_thu_lot_no, 	wms_thu_itm_serial_no, 	wms_thu_qty, 		wms_thu_created_by, wms_thu_created_date, 	wms_thu_ser_no, 		 			
		1,					p_etljobname,			p_envsourcecd,		p_datasourcecd,		NOW()
	FROM stg.stg_wms_thu_item_mapping_dtl s -- staging table name
    LEFT JOIN dwh.D_ThuItemMap t -- table name
    ON 	s.wms_thu_loc_code				= t.thu_loc_code
		AND s.wms_thu_ou				= t.thu_ou							
		AND s.wms_thu_serial_no			= t.thu_serial_no
		AND s.wms_thu_id				= t.thu_id							
		AND s.wms_thu_item				= t.thu_item					
		AND s.wms_thu_lot_no			= t.thu_lot_no			
		AND s.wms_thu_itm_serial_no		= t.thu_itm_seriaL_no
    WHERE t.thu_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_thu_item_mapping_dtl --  staging table name
	(
		wms_thu_loc_code, wms_thu_ou, wms_thu_serial_no, wms_thu_id, wms_thu_item, wms_thu_lot_no, 
        wms_thu_itm_serial_no, wms_thu_qty, wms_thu_created_by, wms_thu_created_date, wms_thu_modified_by, 
        wms_thu_modified_date, wms_thu_ser_no, wms_thu_serial_no2, etlcreateddatetime

	
	)
	SELECT 
		wms_thu_loc_code, wms_thu_ou, wms_thu_serial_no, wms_thu_id, wms_thu_item, wms_thu_lot_no, 
        wms_thu_itm_serial_no, wms_thu_qty, wms_thu_created_by, wms_thu_created_date, wms_thu_modified_by, 
        wms_thu_modified_date, wms_thu_ser_no, wms_thu_serial_no2, etlcreateddatetime

	FROM stg.stg_wms_thu_item_mapping_dtl;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_thuitemmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_tmsdeliverytat(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_tmsdeliverytat(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_Pcsit_Tms_Delivery_Tat;

 TRUNCATE ONLY dwh.D_TMSDeliveryTAT RESTART IDENTITY;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_TMSDeliveryTAT
    (
        Agent_Code, ShipFrom_Place, ShipFrom_Pincode, ShipTo_Place, ShipTo_Pincode, Ship_Mode, TAT, TAT_UOM, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.Agent_Code, s.ShipFrom_Place, s.ShipFrom_Pincode, s.ShipTo_Place, s.ShipTo_Pincode, s.Ship_Mode, s.TAT, s.TAT_UOM, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_Pcsit_Tms_Delivery_Tat s;
	
    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_Pcsit_Tms_Delivery_Tat
    (
        Agent_Code, ShipFrom_Place, ShipFrom_Pincode, ShipTo_Place, ShipTo_Pincode, Ship_Mode, TAT, TAT_UOM, etlcreateddatetime
    )
    SELECT
        Agent_Code, ShipFrom_Place, ShipFrom_Pincode, ShipTo_Place, ShipTo_Pincode, Ship_Mode, TAT, TAT_UOM, etlcreateddatetime
    FROM stg.stg_Pcsit_Tms_Delivery_Tat;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_tmsdeliverytat(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_tmsparameter(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_tmsparameter(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_component_met;

    UPDATE dwh.D_TMSParameter t
    SET
        tms_optionvalue          = s.tms_optionvalue,
        tms_sequenceno           = s.tms_sequenceno,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_tms_component_met s
    WHERE	t.tms_componentname	= s.tms_componentname
    AND		t.tms_paramcategory	= s.tms_paramcategory
    AND		t.tms_paramtype		= s.tms_paramtype
    AND		t.tms_paramcode		= s.tms_paramcode
    AND		t.tms_paramdesc		= s.tms_paramdesc
    AND		t.tms_langid		= s.tms_langid;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_TMSParameter
    (
        tms_componentname	, tms_paramcategory		, tms_paramtype		, tms_paramcode		, tms_paramdesc	, 
		tms_langid			, tms_optionvalue		, tms_sequenceno	, 
		etlactiveind		, etljobname			, envsourcecd		, datasourcecd		, etlcreatedatetime
    )

    SELECT
        s.tms_componentname	, s.tms_paramcategory	, s.tms_paramtype	, s.tms_paramcode	, s.tms_paramdesc,
		s.tms_langid		, s.tms_optionvalue		, s.tms_sequenceno	, 
				1			, p_etljobname			, p_envsourcecd		, p_datasourcecd	, NOW()
    FROM stg.stg_tms_component_met s
    LEFT JOIN dwh.D_TMSParameter t
    ON	s.tms_componentname	= t.tms_componentname
    AND	s.tms_paramcategory	= t.tms_paramcategory
    AND	s.tms_paramtype		= t.tms_paramtype
    AND	s.tms_paramcode		= t.tms_paramcode
    AND	s.tms_paramdesc		= t.tms_paramdesc
    AND	s.tms_langid		= t.tms_langid
    WHERE t.tms_componentname IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_tms_component_met
    (
        tms_componentname	, tms_paramcategory	, tms_paramtype	, tms_paramcode		, tms_paramdesc	, 
		tms_langid			, tms_optionvalue	, tms_sequenceno, etlcreateddatetime
    )
    SELECT
        tms_componentname	, tms_paramcategory	, tms_paramtype	, tms_paramcode		, tms_paramdesc	, 
		tms_langid			, tms_optionvalue	, tms_sequenceno, etlcreateddatetime
    FROM stg.stg_tms_component_met;
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;		
END;
$$;


ALTER PROCEDURE dwh.usp_d_tmsparameter(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_uom(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_uom(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_uom_mas_uommaster;

	UPDATE dwh.D_Uom t
    SET
		mas_uomdesc			= s.mas_uomdesc,
		mas_fractions		= s.mas_fractions,
		mas_status			= s.mas_status,
		mas_reasoncode		= s.mas_reasoncode,
		mas_created_by		= s.mas_created_by,
		mas_created_date	= s.mas_created_date,
		mas_modified_by		= s.mas_modified_by,
		mas_modified_date	= s.mas_modified_date,
		mas_timestamp		= s.mas_timestamp,
		mas_created_langid	= s.mas_created_langid,
		mas_class			= s.mas_class,
		etlactiveind 		= 1,
		etljobname 			= p_etljobname,
		envsourcecd 		= p_envsourcecd ,
		datasourcecd 		= p_datasourcecd ,
		etlupdatedatetime 	= NOW()	
    FROM stg.stg_uom_mas_uommaster s
    WHERE t.mas_ouinstance  	= s.mas_ouinstance
	AND t.mas_uomcode 			= s.mas_uomcode;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_Uom
	(
	mas_ouinstance, 	mas_uomcode, 		mas_uomdesc, 		mas_fractions, 		mas_status, 
	mas_reasoncode,		mas_created_by, 	mas_created_date, 	mas_modified_by, 	mas_modified_date, 	
	mas_timestamp,		mas_created_langid, mas_class,			etlactiveind, 		etljobname, 
	envsourcecd, 		datasourcecd, 		etlcreatedatetime
	)
	
    SELECT 
	s.mas_ouinstance, 		s.mas_uomcode, 			s.mas_uomdesc, 		s.mas_fractions, 	s.mas_status, 
	s.mas_reasoncode,		s.mas_created_by, 		s.mas_created_date, s.mas_modified_by, 	s.mas_modified_date,
	s.mas_timestamp,		s.mas_created_langid, 	s.mas_class, 		1, 					p_etljobname, 
	p_envsourcecd,	 		p_datasourcecd, 		NOW()
	FROM stg.stg_uom_mas_uommaster s
    LEFT JOIN dwh.D_Uom t
    ON 	s.mas_ouinstance 		= t.mas_ouinstance
	AND s.mas_uomcode 		= t.mas_uomcode
    WHERE t.mas_ouinstance IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_uom_mas_uommaster

	(
	    mas_ouinstance, mas_uomcode, mas_uomdesc, mas_fractions, mas_status, mas_reasoncode, 
        mas_created_by, mas_created_date, mas_modified_by, mas_modified_date, mas_timestamp, 
        mas_created_langid, mas_class, mas_length, mas_breadth, mas_height, mas_max_weight, 
        mas_tare_weight, mas_dimension_uom, mas_weight_uom, etlcreateddatetime

		
	)
	SELECT 
	    mas_ouinstance, mas_uomcode, mas_uomdesc, mas_fractions, mas_status, mas_reasoncode, 
        mas_created_by, mas_created_date, mas_modified_by, mas_modified_date, mas_timestamp, 
        mas_created_langid, mas_class, mas_length, mas_breadth, mas_height, mas_max_weight, 
        mas_tare_weight, mas_dimension_uom, mas_weight_uom, etlcreateddatetime
	FROM stg.stg_uom_mas_uommaster;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_uom(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_uomconversion(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_uomconversion(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_uom_con_indconversion;

	UPDATE dwh.D_UomConversion t
    SET 
		con_ouinstance		= s.con_ouinstance,
		con_confact_ntr		= s.con_confact_ntr,
		con_confact_dtr		= s.con_confact_dtr,
		con_created_by		= s.con_created_by,
		con_created_date	= s.con_created_date,
		con_modified_by		= s.con_modified_by,
		con_modified_date	= s.con_modified_date,
		con_flag			= s.con_flag,
		con_convert_type	= s.con_convert_type,
		etlactiveind 		= 1,
		etljobname 			= p_etljobname,
		envsourcecd 		= p_envsourcecd ,
		datasourcecd 		= p_datasourcecd ,
		etlupdatedatetime 	= NOW()	
    FROM stg.stg_uom_con_indconversion s
    WHERE t.con_fromuomcode  	= s.con_fromuomcode
	AND t.con_touomcode 		= s.con_touomcode;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_UomConversion
	(
	con_ouinstance,		 	con_fromuomcode,		con_touomcode, 
	con_confact_ntr,		con_confact_dtr, 			con_created_by, 
	con_created_date, 		con_modified_by, 		con_modified_date, 			con_flag, 
	con_convert_type,		etlactiveind, 			etljobname, 				envsourcecd, 	
	datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
	s.con_ouinstance, 		s.con_fromuomcode, 		s.con_touomcode,
	s.con_confact_ntr,		s.con_confact_dtr, 		s.con_created_by, 
	s.con_created_date,		s.con_modified_by, 		s.con_modified_date, 	s.con_flag, 
	s.con_convert_type,		1,				p_etljobname,	
	p_envsourcecd,			p_datasourcecd,			NOW()

	FROM stg.stg_uom_con_indconversion s
    LEFT JOIN dwh.D_UomConversion t
    ON 	s.con_fromuomcode  		= t.con_fromuomcode
	AND s.con_touomcode 		= t.con_touomcode 
    WHERE t.con_fromuomcode IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_uom_con_indconversion

	(
	    con_ouinstance, con_fromuomcode, con_touomcode, con_confact_ntr, con_confact_dtr, con_created_by, 
        con_created_date, con_modified_by, con_modified_date, con_flag, con_convert_type, etlcreateddatetime

	)
	SELECT 
	    con_ouinstance, con_fromuomcode, con_touomcode, con_confact_ntr, con_confact_dtr, con_created_by, 
        con_created_date, con_modified_by, con_modified_date, con_flag, con_convert_type, etlcreateddatetime

	FROM stg.stg_uom_con_indconversion;
	END IF;
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_uomconversion(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_vehicle(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_vehicle(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_veh_mas_hdr;

	UPDATE dwh.D_Vehicle t  --Change variables and table name
    SET -- logical column name = s.column name
		
		veh_desc			= s.wms_veh_desc,
		veh_status			= s.wms_veh_status,
		veh_rsn_code		= s.wms_veh_rsn_code,
		veh_vin				= s.wms_veh_vin,
		veh_type			= s.wms_veh_type,
		veh_own_typ			= s.wms_veh_own_typ,
		veh_agency_id		= s.wms_veh_agency_id,
		veh_agency_contno	= s.wms_veh_agency_contno,
		veh_build_date		= s.wms_veh_build_date,
		veh_def_loc			= s.wms_veh_def_loc,
		veh_cur_loc			= s.wms_veh_cur_loc,
		veh_cur_loc_since	= s.wms_veh_cur_loc_since,
		veh_trans_typ		= s.wms_veh_trans_typ,
		veh_fuel_used		= s.wms_veh_fuel_used,
		veh_steering_type	= s.wms_veh_steering_type,
		veh_colour			= s.wms_veh_colour,
		veh_wt_uom			= s.wms_veh_wt_uom,
		veh_tare			= s.wms_veh_tare,
		veh_vehicle_gross	= s.wms_veh_vehicle_gross,
		veh_gross_com		= s.wms_veh_gross_com,
		veh_dim_uom			= s.wms_veh_dim_uom,
		veh_length			= s.wms_veh_length,
		veh_width			= s.wms_veh_width,
		veh_height			= s.wms_veh_height,
		veh_created_by		= s.wms_veh_created_by,
		veh_created_date	= s.wms_veh_created_date,
		veh_modified_by		= s.wms_veh_modified_by,
		veh_modified_date	= s.wms_veh_modified_date,
		veh_timestamp		= s.wms_veh_timestamp,
		veh_refrigerated	= s.wms_veh_refrigerated,
		veh_intransit		= s.wms_veh_intransit,
		veh_route			= s.wms_veh_route,
		veh_and				= s.wms_veh_and,
		veh_between			= s.wms_veh_between,
		veh_category		= s.wms_veh_category,
		veh_use_of_haz		= s.wms_veh_use_of_haz,
		veh_in_dim_uom		= s.wms_veh_in_dim_uom,
		veh_in_length		= s.wms_veh_in_length,
		veh_in_width		= s.wms_veh_in_width,
		veh_in_height		= s.wms_veh_in_height,
		veh_vol_uom			= s.wms_veh_vol_uom,
		veh_over_vol		= s.wms_veh_over_vol,
		veh_internal_vol	= s.wms_veh_internal_vol,
		veh_purchase_date	= s.wms_veh_purchase_date,
		veh_induct_date		= s.wms_veh_induct_date,
		veh_rigid			= s.wms_veh_rigid,
		veh_home_geo_type	= s.wms_veh_home_geo_type,
		veh_current_geo_type= s.wms_veh_current_geo_type,
		veh_ownrshp_EftFrm	= s.wms_veh_ownrshp_EftFrm,
		veh_raise_int_drfbill= s.wms_veh_raise_int_drfbill,
		veh_prev_geo_type	= s.wms_veh_prev_geo_type,
		veh_Prev_loc		= s.wms_veh_Prev_loc,
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_veh_mas_hdr s		--staging table name in sheet
    WHERE t.veh_ou	  		= s.wms_veh_ou --unique and primary key
	AND t.veh_id 				= s.wms_veh_id;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_Vehicle -- table name
	(-- logical column names except last 5
		veh_ou,					veh_id,				veh_desc,				veh_status,				veh_rsn_code,
		veh_vin,				veh_type,			veh_own_typ,			veh_agency_id,			veh_agency_contno,
		veh_build_date,			veh_def_loc,		veh_cur_loc,			veh_cur_loc_since,		veh_trans_typ,
		veh_fuel_used,			veh_steering_type,	veh_colour,				veh_wt_uom,				veh_tare,				
		veh_vehicle_gross,		veh_gross_com,		veh_dim_uom,			veh_length,				veh_width,
		veh_height,				veh_created_by,		veh_created_date,		veh_modified_by,		veh_modified_date,					veh_timestamp,			veh_refrigerated,	veh_intransit,			veh_route,				veh_and,				
		veh_between,			veh_category,		veh_use_of_haz,			veh_in_dim_uom,			veh_in_length,				
		veh_in_width,			veh_in_height,		veh_vol_uom,			veh_over_vol,			veh_internal_vol,				veh_purchase_date,		veh_induct_date,	veh_rigid,				veh_home_geo_type,		veh_current_geo_type,				veh_ownrshp_EftFrm,		veh_raise_int_drfbill,						veh_prev_geo_type,		veh_Prev_loc,				
		etlactiveind,
        etljobname, 		envsourcecd, 		datasourcecd, 			etlcreatedatetime
	)
	
    SELECT  -- normal column name except last 5
		s.wms_veh_ou,			s.wms_veh_id,		s.wms_veh_desc,			s.wms_veh_status,		s.wms_veh_rsn_code,	
		s.wms_veh_vin,			s.wms_veh_type,		s.wms_veh_own_typ,		s.wms_veh_agency_id,	s.wms_veh_agency_contno,
		s.wms_veh_build_date,	s.wms_veh_def_loc,	s.wms_veh_cur_loc,		s.wms_veh_cur_loc_since,s.wms_veh_trans_typ,
		s.wms_veh_fuel_used,	s.wms_veh_steering_type,s.wms_veh_colour,	s.wms_veh_wt_uom,		s.wms_veh_tare,	
		s.wms_veh_vehicle_gross,s.wms_veh_gross_com,s.wms_veh_dim_uom,		s.wms_veh_length,		s.wms_veh_width,	
		s.wms_veh_height,		s.wms_veh_created_by,s.wms_veh_created_date,s.wms_veh_modified_by,	s.wms_veh_modified_date,				
		s.wms_veh_timestamp,	s.wms_veh_refrigerated,s.wms_veh_intransit,	s.wms_veh_route,		s.wms_veh_and,
		s.wms_veh_between,		s.wms_veh_category,	s.wms_veh_use_of_haz,	s.wms_veh_in_dim_uom,	s.wms_veh_in_length,
		s.wms_veh_in_width,		s.wms_veh_in_height,s.wms_veh_vol_uom,		s.wms_veh_over_vol,		s.wms_veh_internal_vol,
		s.wms_veh_purchase_date,s.wms_veh_induct_date,s.wms_veh_rigid,		s.wms_veh_home_geo_type,s.wms_veh_current_geo_type,	
		s.wms_veh_ownrshp_EftFrm,s.wms_veh_raise_int_drfbill,				s.wms_veh_prev_geo_type,s.wms_veh_Prev_loc,
		1,		p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()
	FROM stg.stg_wms_veh_mas_hdr s -- staging table name
    LEFT JOIN dwh.D_Vehicle t -- table name
    ON 	s.wms_veh_ou  		= t.veh_ou -- only unique, no pkeys
	AND s.wms_veh_id 			= t.veh_id
    WHERE t.veh_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_veh_mas_hdr --  staging table name
	(
	    wms_veh_ou, wms_veh_id, wms_veh_desc, wms_veh_status, wms_veh_rsn_code, wms_veh_vin, wms_veh_model, 
        wms_veh_type, wms_veh_own_typ, wms_veh_agency_id, wms_veh_agency_contno, wms_veh_build_date, 
        wms_veh_chassis_num, wms_veh_ref_num, wms_veh_equip_id, wms_veh_asset_id, wms_veh_asset_tag, 
        wms_veh_reg_num, wms_veh_address, wms_veh_tit_hold_name, wms_veh_req_date, wms_veh_effect_date, 
        wms_veh_exp_date, wms_veh_renew_date, wms_veh_renew_fee, wms_veh_renew, wms_veh_def_loc, 
        wms_veh_cur_loc, wms_veh_cur_loc_since, wms_veh_gps_ref_num, wms_veh_engine_num, wms_veh_engine_cap, 
        wms_veh_trans_typ, wms_veh_trans_typ_uom, wms_veh_fuel_used, wms_veh_tank_cap, wms_veh_tank_cap_uom, 
        wms_veh_seating_cap, wms_veh_steering_type, wms_veh_colour, wms_veh_wt_uom, wms_veh_tare,
        wms_veh_vehicle_gross, wms_veh_gross_com, wms_veh_dim_uom, wms_veh_length, wms_veh_width, wms_veh_height,
        wms_veh_mileage_uom, wms_veh_no_load, wms_veh_full_load, wms_veh_average, wms_veh_created_by,
        wms_veh_created_date, wms_veh_modified_by, wms_veh_modified_date, wms_veh_timestamp, wms_veh_userdefined1, 
        wms_veh_userdefined2, wms_veh_userdefined3, wms_veh_engine_number, wms_veh_refrigerated, wms_veh_temp_uom, 
        wms_veh_temp_minimum, wms_veh_temp_maximum, wms_veh_intransit, wms_veh_route, wms_veh_and, wms_veh_between, 
        wms_veh_category, wms_veh_no_of_axies, wms_veh_make, wms_veh_gps_dev_typ, wms_veh_use_of_haz, 
        wms_veh_in_dim_uom, wms_veh_in_length, wms_veh_in_width, wms_veh_in_height, wms_veh_eng_cap_uom,
        wms_veh_vol_uom, wms_veh_over_vol, wms_veh_internal_vol, wms_veh_purchase_date, wms_veh_induct_date, 
        wms_veh_rigid, wms_veh_current_loc_desc, wms_veh_home_loc_desc, wms_veh_home_geo_type, 
        wms_veh_current_geo_type, wms_veh_ownrshp_eftfrm, wms_veh_pallet_space, wms_veh_raise_int_drfbill, 
        wms_veh_prev_geo_type, wms_veh_prev_loc, wms_veh_axle_config, wms_veh_avgspd_uom, wms_veh_avspd_noload,
        wms_veh_avspd_coupled, wms_veh_avspd_couple_load, wms_veh_last_bill_date, wms_veh_last_prev_bill_date, 
        etlcreateddatetime

	
	)
	SELECT 
		wms_veh_ou, wms_veh_id, wms_veh_desc, wms_veh_status, wms_veh_rsn_code, wms_veh_vin, wms_veh_model, 
        wms_veh_type, wms_veh_own_typ, wms_veh_agency_id, wms_veh_agency_contno, wms_veh_build_date, 
        wms_veh_chassis_num, wms_veh_ref_num, wms_veh_equip_id, wms_veh_asset_id, wms_veh_asset_tag, 
        wms_veh_reg_num, wms_veh_address, wms_veh_tit_hold_name, wms_veh_req_date, wms_veh_effect_date, 
        wms_veh_exp_date, wms_veh_renew_date, wms_veh_renew_fee, wms_veh_renew, wms_veh_def_loc, 
        wms_veh_cur_loc, wms_veh_cur_loc_since, wms_veh_gps_ref_num, wms_veh_engine_num, wms_veh_engine_cap, 
        wms_veh_trans_typ, wms_veh_trans_typ_uom, wms_veh_fuel_used, wms_veh_tank_cap, wms_veh_tank_cap_uom, 
        wms_veh_seating_cap, wms_veh_steering_type, wms_veh_colour, wms_veh_wt_uom, wms_veh_tare,
        wms_veh_vehicle_gross, wms_veh_gross_com, wms_veh_dim_uom, wms_veh_length, wms_veh_width, wms_veh_height,
        wms_veh_mileage_uom, wms_veh_no_load, wms_veh_full_load, wms_veh_average, wms_veh_created_by,
        wms_veh_created_date, wms_veh_modified_by, wms_veh_modified_date, wms_veh_timestamp, wms_veh_userdefined1, 
        wms_veh_userdefined2, wms_veh_userdefined3, wms_veh_engine_number, wms_veh_refrigerated, wms_veh_temp_uom, 
        wms_veh_temp_minimum, wms_veh_temp_maximum, wms_veh_intransit, wms_veh_route, wms_veh_and, wms_veh_between, 
        wms_veh_category, wms_veh_no_of_axies, wms_veh_make, wms_veh_gps_dev_typ, wms_veh_use_of_haz, 
        wms_veh_in_dim_uom, wms_veh_in_length, wms_veh_in_width, wms_veh_in_height, wms_veh_eng_cap_uom,
        wms_veh_vol_uom, wms_veh_over_vol, wms_veh_internal_vol, wms_veh_purchase_date, wms_veh_induct_date, 
        wms_veh_rigid, wms_veh_current_loc_desc, wms_veh_home_loc_desc, wms_veh_home_geo_type, 
        wms_veh_current_geo_type, wms_veh_ownrshp_eftfrm, wms_veh_pallet_space, wms_veh_raise_int_drfbill, 
        wms_veh_prev_geo_type, wms_veh_prev_loc, wms_veh_axle_config, wms_veh_avgspd_uom, wms_veh_avspd_noload,
        wms_veh_avspd_coupled, wms_veh_avspd_couple_load, wms_veh_last_bill_date, wms_veh_last_prev_bill_date, 
        etlcreateddatetime

	FROM stg.stg_wms_veh_mas_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
								
		select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_vehicle(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_vehiclereginfo(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_vehiclereginfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
  
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_veh_registration_dtl;

	UPDATE dwh.D_VehicleRegInfo t  --Change variables and table name
    SET -- logical column name = s.column name
		veh_address				= s.wms_veh_address,
		veh_title_holder_name	= s.wms_veh_title_holder_name,
		veh_issuing_auth		= s.wms_veh_issuing_auth,
		veh_issuing_location	= s.wms_veh_issuing_location,
		veh_issuing_date		= s.wms_veh_issuing_date,
		veh_exp_date			= s.wms_veh_exp_date,
		veh_remarks				= s.wms_veh_remarks,
		veh_doc_type			= s.wms_veh_doc_type,
		veh_doc_no				= s.wms_veh_doc_no,		
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_veh_registration_dtl s		--staging table name in sheet
    WHERE t.veh_ou	  			= s.wms_veh_ou --unique and primary key
	AND   t.veh_id 				= s.wms_veh_id
	AND   t.veh_line_no			= s.wms_veh_line_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_VehicleRegInfo -- table name
	(-- logical column names except last 5
		veh_ou,							veh_id,						veh_line_no,				veh_address,
		veh_title_holder_name,			veh_issuing_auth,			veh_issuing_location,		veh_issuing_date,
		veh_exp_date,					veh_remarks,veh_doc_type,	veh_doc_no,					etlactiveind,
        etljobname, 					envsourcecd, 				datasourcecd, 				etlcreatedatetime
	)
	
    SELECT  -- normal column name except last 5
		s.wms_veh_ou,					s.wms_veh_id,				s.wms_veh_line_no,			s.wms_veh_address,
		s.wms_veh_title_holder_name,	s.wms_veh_issuing_auth,		s.wms_veh_issuing_location,	s.wms_veh_issuing_date,
		s.wms_veh_exp_date,				s.wms_veh_remarks,			s.wms_veh_doc_type,			s.wms_veh_doc_no,		
		1,		p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()
	FROM stg.stg_wms_veh_registration_dtl s -- staging table name
    LEFT JOIN dwh.D_VehicleRegInfo t -- table name
    ON 	s.wms_veh_ou  			= t.veh_ou -- only unique, no pkeys
	AND s.wms_veh_id 			= t.veh_id
	AND s.wms_veh_line_no		= t.veh_line_no
    WHERE t.veh_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_veh_registration_dtl --  staging table name
	(
	 wms_veh_ou, wms_veh_id, wms_veh_line_no, wms_veh_reg_no, wms_veh_address, wms_veh_title_holder_name,
        wms_veh_issuing_auth, wms_veh_issuing_location, wms_veh_issuing_date, wms_veh_exp_date, wms_veh_remarks, 
        wms_veh_doc_type, wms_veh_doc_no, wms_veh_attachment, wms_veh_attachment_hdn, etlcreateddatetime

	
	)
	SELECT 
		 wms_veh_ou, wms_veh_id, wms_veh_line_no, wms_veh_reg_no, wms_veh_address, wms_veh_title_holder_name,
        wms_veh_issuing_auth, wms_veh_issuing_location, wms_veh_issuing_date, wms_veh_exp_date, wms_veh_remarks, 
        wms_veh_doc_type, wms_veh_doc_no, wms_veh_attachment, wms_veh_attachment_hdn, etlcreateddatetime

	FROM stg.stg_wms_veh_registration_dtl;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_vehiclereginfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_vendor(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_vendor(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_vendor_hdr;

	UPDATE dwh.d_vendor t
    SET 
		 vendor_status				= s.wms_vendor_status
		,vendor_name				= s.wms_vendor_name
		,vendor_payterm				= s.wms_vendor_payterm
		,vendor_reason_code			= s.wms_vendor_reason_code
		,vendor_classifcation		= s.wms_vendor_classifcation
		,vendor_currency			= s.wms_vendor_currency
		,vendor_for_self			= s.wms_vendor_for_self
		,vendor_created_by			= s.wms_vendor_created_by
		,vendor_created_date		= s.wms_vendor_created_date
		,vendor_modified_by			= s.wms_vendor_modified_by
		,vendor_modified_date		= s.wms_vendor_modified_date
		,vendor_timestamp			= s.wms_vendor_timestamp
		,vendor_address1			= s.wms_vendor_address1
		,vendor_address2			= s.wms_vendor_address2
		,vendor_address3			= s.wms_vendor_address3
		,vendor_city				= s.wms_vendor_city
		,vendor_state				= s.wms_vendor_state
		,vendor_country				= s.wms_vendor_country
		,vendor_phone1				= s.wms_vendor_phone1
		,vendor_phone2				= s.wms_vendor_phone2
		,vendor_email				= s.wms_vendor_email
		,vendor_fax					= s.wms_vendor_fax
		,vendor_url					= s.wms_vendor_url
		,vendor_subzone				= s.wms_vendor_subzone
		,vendor_timezone			= s.wms_vendor_timezone
		,vendor_zone				= s.wms_vendor_zone
		,vendor_region				= s.wms_vendor_region
		,vendor_postal_code			= s.wms_vendor_postal_code
		,vendor_agnt_reg			= s.wms_vendor_agnt_reg
		,vendor_agnt_cha			= s.wms_vendor_agnt_cha
		,vendor_carrier_road		= s.wms_vendor_carrier_road
		,vendor_carrier_rail		= s.wms_vendor_carrier_rail
		,vendor_carrier_air			= s.wms_vendor_carrier_air
		,vendor_carrier_sea			= s.wms_vendor_carrier_sea
		,vendor_sub_cntrct_veh		= s.wms_vendor_sub_cntrct_veh
		,vendor_sub_cntrct_emp		= s.wms_vendor_sub_cntrct_emp
		,vendor_lat					= s.wms_vendor_lat
		,vendor_long				= s.wms_vendor_long
		,vendor_reg					= s.wms_vendor_reg
		,vendor_dept				= s.wms_vendor_dept
		,vendor_ln_business			= s.wms_vendor_ln_business
		,vendor_rcti				= s.wms_vendor_rcti
		,vendor_gen_from			= s.wms_vendor_gen_from
		,vendor_group				= s.wms_vendor_group
		,vendor_std_contract		= s.wms_vendor_std_contract
		,vendor_final_bill_stage	= s.wms_vendor_final_bill_stage
		,vendor_allwdb_billto		= s.wms_vendor_allwdb_billto
		,vendor_insrnc_prvdr		= s.wms_vendor_insrnc_prvdr
		,etlactiveind 				= 1
		,etljobname 				= p_etljobname
		,envsourcecd 				= p_envsourcecd 
		,datasourcecd 				= p_datasourcecd
		,etlupdatedatetime 			= NOW()
    FROM stg.stg_wms_vendor_hdr s
    WHERE t.vendor_id  				= s.wms_vendor_id
	AND t.vendor_ou 				= s.wms_vendor_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_vendor
	(
		 vendor_id					,vendor_ou
		,vendor_status				,vendor_name			,vendor_payterm			,vendor_reason_code		,vendor_classifcation
		,vendor_currency			,vendor_for_self		,vendor_created_by		,vendor_created_date	,vendor_modified_by
		,vendor_modified_date		,vendor_timestamp		,vendor_address1		,vendor_address2		,vendor_address3
		,vendor_city				,vendor_state			,vendor_country			,vendor_phone1			,vendor_phone2
		,vendor_email				,vendor_fax				,vendor_url				,vendor_subzone			,vendor_timezone
		,vendor_zone				,vendor_region			,vendor_postal_code		,vendor_agnt_reg		,vendor_agnt_cha
		,vendor_carrier_road		,vendor_carrier_rail	,vendor_carrier_air		,vendor_carrier_sea		,vendor_sub_cntrct_veh
		,vendor_sub_cntrct_emp		,vendor_lat				,vendor_long			,vendor_reg				,vendor_dept
		,vendor_ln_business			,vendor_rcti			,vendor_gen_from		,vendor_group			,vendor_std_contract
		,vendor_final_bill_stage	,vendor_allwdb_billto	,vendor_insrnc_prvdr
		,etlactiveind				,etljobname				,envsourcecd			,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		 s.wms_vendor_id				,s.wms_vendor_ou
		,s.wms_vendor_status			,s.wms_vendor_name			,s.wms_vendor_payterm		,s.wms_vendor_reason_code	,s.wms_vendor_classifcation
		,s.wms_vendor_currency			,s.wms_vendor_for_self		,s.wms_vendor_created_by	,s.wms_vendor_created_date	,s.wms_vendor_modified_by
		,s.wms_vendor_modified_date		,s.wms_vendor_timestamp		,s.wms_vendor_address1		,s.wms_vendor_address2		,s.wms_vendor_address3
		,s.wms_vendor_city				,s.wms_vendor_state			,s.wms_vendor_country		,s.wms_vendor_phone1		,s.wms_vendor_phone2
		,s.wms_vendor_email				,s.wms_vendor_fax			,s.wms_vendor_url			,s.wms_vendor_subzone		,s.wms_vendor_timezone
		,s.wms_vendor_zone				,s.wms_vendor_region		,s.wms_vendor_postal_code	,s.wms_vendor_agnt_reg		,s.wms_vendor_agnt_cha
		,s.wms_vendor_carrier_road		,s.wms_vendor_carrier_rail	,s.wms_vendor_carrier_air	,s.wms_vendor_carrier_sea	,s.wms_vendor_sub_cntrct_veh
		,s.wms_vendor_sub_cntrct_emp	,s.wms_vendor_lat			,s.wms_vendor_long			,s.wms_vendor_reg			,s.wms_vendor_dept
		,s.wms_vendor_ln_business		,s.wms_vendor_rcti			,s.wms_vendor_gen_from		,s.wms_vendor_group			,s.wms_vendor_std_contract
		,s.wms_vendor_final_bill_stage	,s.wms_vendor_allwdb_billto	,s.wms_vendor_insrnc_prvdr
		,1							,p_etljobname			,p_envsourcecd			,p_datasourcecd			,NOW()
	FROM stg.stg_wms_vendor_hdr s
    LEFT JOIN dwh.d_vendor t
    ON 	s.wms_vendor_id  		= t.vendor_id
	AND s.wms_vendor_ou 		= t.vendor_ou
    WHERE t.vendor_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_wms_vendor_hdr
	(
		wms_vendor_id, 					wms_vendor_ou, 				wms_vendor_status, 			wms_vendor_name, 			wms_vendor_payterm, 
		wms_vendor_reason_code, 		wms_vendor_classifcation, 	wms_vendor_currency, 		wms_vendor_pay_addressid, 	wms_vendor_order_addressid, 
		wms_vendor_ship_addressid, 		wms_vendor_for_self, 		wms_vendor_created_by, 		wms_vendor_created_date, 	wms_vendor_modified_by, 
		wms_vendor_modified_date, 		wms_vendor_timestamp, 		wms_vendor_userdefined1, 	wms_vendor_userdefined2, 	wms_vendor_userdefined3, 
		wms_vendor_address1, 			wms_vendor_address2, 		wms_vendor_address3, 		wms_vendor_city, 			wms_vendor_state, 
		wms_vendor_country, 			wms_vendor_phone1, 			wms_vendor_phone2, 			wms_vendor_email,			wms_vendor_fax, 
		wms_vendor_url, 				wms_vendor_subzone, 		wms_vendor_timezone, 		wms_vendor_zone, 			wms_vendor_region, 
		wms_vendor_postal_code, 		wms_vendor_agnt_reg, 		wms_vendor_agnt_cha, 		wms_vendor_carrier_road, 	wms_vendor_carrier_rail, 
		wms_vendor_carrier_air, 		wms_vendor_carrier_sea, 	wms_vendor_sub_cntrct_veh, 	wms_vendor_sub_cntrct_emp, 	wms_vendor_lat, 
		wms_vendor_long, 				wms_vendor_reg, 			wms_vendor_dept, 			wms_vendor_ln_business, 	wms_vendor_bill_profile, 
		wms_vendor_rcti, 				wms_vendor_vfg, 			wms_vendor_gen_from, 		wms_vendor_group, 			wms_vendor_std_contract, 
		wms_vendor_final_bill_stage, 	wms_vendor_iata_code, 		wms_vendor_allwdb_billto, 	wms_vendor_suburb, 			wms_vendor_insrnc_prvdr, 
		wms_vendor_tempid, 				etlcreateddatetime
	)
	SELECT 
		wms_vendor_id, 					wms_vendor_ou, 				wms_vendor_status, 			wms_vendor_name, 			wms_vendor_payterm, 
		wms_vendor_reason_code, 		wms_vendor_classifcation, 	wms_vendor_currency, 		wms_vendor_pay_addressid, 	wms_vendor_order_addressid, 
		wms_vendor_ship_addressid, 		wms_vendor_for_self, 		wms_vendor_created_by, 		wms_vendor_created_date, 	wms_vendor_modified_by, 
		wms_vendor_modified_date, 		wms_vendor_timestamp, 		wms_vendor_userdefined1, 	wms_vendor_userdefined2, 	wms_vendor_userdefined3, 
		wms_vendor_address1, 			wms_vendor_address2, 		wms_vendor_address3, 		wms_vendor_city, 			wms_vendor_state, 
		wms_vendor_country, 			wms_vendor_phone1, 			wms_vendor_phone2, 			wms_vendor_email,			wms_vendor_fax, 
		wms_vendor_url, 				wms_vendor_subzone, 		wms_vendor_timezone, 		wms_vendor_zone, 			wms_vendor_region, 
		wms_vendor_postal_code, 		wms_vendor_agnt_reg, 		wms_vendor_agnt_cha, 		wms_vendor_carrier_road, 	wms_vendor_carrier_rail, 
		wms_vendor_carrier_air, 		wms_vendor_carrier_sea, 	wms_vendor_sub_cntrct_veh, 	wms_vendor_sub_cntrct_emp, 	wms_vendor_lat, 
		wms_vendor_long, 				wms_vendor_reg, 			wms_vendor_dept, 			wms_vendor_ln_business, 	wms_vendor_bill_profile, 
		wms_vendor_rcti, 				wms_vendor_vfg, 			wms_vendor_gen_from, 		wms_vendor_group, 			wms_vendor_std_contract, 
		wms_vendor_final_bill_stage, 	wms_vendor_iata_code, 		wms_vendor_allwdb_billto, 	wms_vendor_suburb, 			wms_vendor_insrnc_prvdr, 
		wms_vendor_tempid, 				etlcreateddatetime
	FROM stg.stg_wms_vendor_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_vendor(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_warehouse(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_warehouse(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
  
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_sa_wm_warehouse_master;

	UPDATE dwh.d_warehouse t
    SET 
		wh_desc					= s.wm_wh_desc,
		wh_status				= s.wm_wh_status,
		wh_desc_shdw			= s.wm_wh_desc_shdw,
		wh_storage_type			= s.wm_wh_storage_type,
		nettable				= s.wm_nettable,
		finance_book			= s.wm_finance_book,
		allocation_method		= s.wm_allocation_method,
		site_code				= s.wm_site_code,
		address1				= s.wm_address1,
		capital_warehouse		= s.wm_capital_warehouse,
		address2				= s.wm_address2,
		city					= s.wm_city,
		all_trans_allowed		= s.wm_all_trans_allowed,
		state					= s.wm_state,
		all_itemtypes_allowed	= s.wm_all_itemtypes_allowed,
		zip_code				= s.wm_zip_code,
		all_stk_status_allowed	= s.wm_all_stk_status_allowed,
		country					= s.wm_country,
		created_by				= s.wm_created_by,
		created_dt				= s.wm_created_dt,
		modified_by				= s.wm_modified_by,
		modified_dt				= s.wm_modified_dt,
		timestamp_value			= s.wm_timestamp_value,
		tran_type				= s.wm_tran_type,
		bonded_yn				= s.wm_bonded_yn,
		Location_code			= s.Location_code,
		Location_desc			= s.Location_desc,
		address3				= s.wm_address3,

		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_sa_wm_warehouse_master s
    WHERE t.wh_code 			= s.wm_wh_code
	AND t.wh_ou 			= s.wm_wh_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_warehouse
	(
		wh_code,			wh_ou,			wh_desc,				wh_status,
		wh_desc_shdw,		wh_storage_type,nettable,				finance_book,
		allocation_method,	site_code,		address1,				capital_warehouse,
		address2,			city,			all_trans_allowed,		state,
		all_itemtypes_allowed,zip_code,		all_stk_status_allowed,	country,	
		created_by,			created_dt,		modified_by,			modified_dt,
		timestamp_value,	tran_type,bonded_yn,Location_code,		Location_desc,
		address3,			etlactiveind,
        etljobname, 		envsourcecd, 	datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
		s.wm_wh_code,		s.wm_wh_ou,			s.wm_wh_desc,			s.wm_wh_status,
		s.wm_wh_desc_shdw,	s.wm_wh_storage_type,s.wm_nettable,			s.wm_finance_book,
		s.wm_allocation_method,s.wm_site_code,	s.wm_address1,			s.wm_capital_warehouse,
		s.wm_address2,		s.wm_city,			s.wm_all_trans_allowed, s.wm_state,
		s.wm_all_itemtypes_allowed,s.wm_zip_code,s.wm_all_stk_status_allowed,s.wm_country,
		s.wm_created_by,	s.wm_created_dt,	s.wm_modified_by,		s.wm_modified_dt,
		s.wm_timestamp_value,s.wm_tran_type,	s.wm_bonded_yn,			s.Location_code,
		s.Location_desc,	s.wm_address3,
		1,
		p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()
	FROM stg.stg_sa_wm_warehouse_master s
    LEFT JOIN dwh.d_warehouse t
    ON 	s.wm_wh_code  		= t.wh_code
	AND s.wm_wh_ou 			= t.wh_ou 
    WHERE t.wh_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_sa_wm_warehouse_master
	(
		 wm_wh_code, wm_wh_ou, wm_wh_desc, wm_wh_status, wm_wh_desc_shdw, wm_wh_storage_type, 
        wm_reason_code, wm_supervisor, wm_nettable, wm_finance_book, wm_allocation_method, wm_site_code, 
        wm_address1, wm_capital_warehouse, wm_address2, wm_city, wm_all_trans_allowed, wm_state,
        wm_all_itemtypes_allowed, wm_zip_code, wm_all_stk_status_allowed, wm_country, wm_created_by, 
        wm_created_dt, wm_modified_by, wm_modified_dt, wm_timestamp_value, wm_tran_type, wm_length, 
        wm_breadth, wm_height, wm_dimen_uom, wm_volume, wm_volume_uom, wm_area, wm_area_uom, wm_capacity,
        wm_capacity_uom, wm_last_gen_zone, wm_last_gen_row, wm_last_gen_rack, wm_last_gen_level, 
        wm_last_gen_bin, wm_bonded_yn, wm_customer_code, wm_structure, wm_valid_from, wm_valid_to, 
        wm_gcp, wm_latitude, wm_longitude, location_code, location_desc, wm_address3, etlcreateddatetime

	)
	SELECT 
		wm_wh_code, wm_wh_ou, wm_wh_desc, wm_wh_status, wm_wh_desc_shdw, wm_wh_storage_type, 
        wm_reason_code, wm_supervisor, wm_nettable, wm_finance_book, wm_allocation_method, wm_site_code, 
        wm_address1, wm_capital_warehouse, wm_address2, wm_city, wm_all_trans_allowed, wm_state,
        wm_all_itemtypes_allowed, wm_zip_code, wm_all_stk_status_allowed, wm_country, wm_created_by, 
        wm_created_dt, wm_modified_by, wm_modified_dt, wm_timestamp_value, wm_tran_type, wm_length, 
        wm_breadth, wm_height, wm_dimen_uom, wm_volume, wm_volume_uom, wm_area, wm_area_uom, wm_capacity,
        wm_capacity_uom, wm_last_gen_zone, wm_last_gen_row, wm_last_gen_rack, wm_last_gen_level, 
        wm_last_gen_bin, wm_bonded_yn, wm_customer_code, wm_structure, wm_valid_from, wm_valid_to, 
        wm_gcp, wm_latitude, wm_longitude, location_code, location_desc, wm_address3, etlcreateddatetime
	FROM stg.stg_sa_wm_warehouse_master;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_warehouse(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_wmsgeozonedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_wmsgeozonedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag

    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_geo_zone_dtl;

    UPDATE dwh.D_WmsGeoZoneDetail t
    SET
        geo_zone_type             = s.wms_geo_zone_type,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_wms_geo_zone_dtl s
    WHERE t.geo_zone = s.wms_geo_zone
    AND t.geo_zone_ou = s.wms_geo_zone_ou
    AND t.geo_zone_lineno = s.wms_geo_zone_lineno
    AND t.geo_zone_type_code = s.wms_geo_zone_type_code;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_WmsGeoZoneDetail
    (
        geo_zone	, geo_zone_ou	, geo_zone_lineno	, geo_zone_type	, geo_zone_type_code, 
		etlactiveind, etljobname	, envsourcecd		, datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.wms_geo_zone	, s.wms_geo_zone_ou	, s.wms_geo_zone_lineno	, s.wms_geo_zone_type	, s.wms_geo_zone_type_code, 
				1		, p_etljobname		, p_envsourcecd			, p_datasourcecd		, NOW()
    FROM stg.stg_wms_geo_zone_dtl s
    LEFT JOIN dwh.D_WmsGeoZoneDetail t
    ON s.wms_geo_zone = t.geo_zone
    AND s.wms_geo_zone_ou = t.geo_zone_ou
    AND s.wms_geo_zone_lineno = t.geo_zone_lineno
    AND s.wms_geo_zone_type_code = t.geo_zone_type_code
    WHERE t.geo_zone IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN


    INSERT INTO raw.raw_wms_geo_zone_dtl
    (
        wms_geo_zone	, wms_geo_zone_ou, wms_geo_zone_lineno, wms_geo_zone_type, wms_geo_zone_type_code, 
		etlcreateddatetime
    )
    SELECT
        wms_geo_zone	, wms_geo_zone_ou, wms_geo_zone_lineno, wms_geo_zone_type, wms_geo_zone_type_code, 
		etlcreateddatetime
    FROM stg.stg_wms_geo_zone_dtl;
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_d_wmsgeozonedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_wmsoutboundtat(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_wmsoutboundtat(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_dim_outbound_Tat;

    TRUNCATE only dwh.D_WMSOutboundTAT  RESTART identity;
	
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.D_WMSOutboundTAT
    (
       wms_loc_key, id, ou, locationcode, orderType, ServiceType, ProcessTAT, pickTAT, PackTAT, DispTAT, DelTAT, picktat1, packtat1, disptat1, deltat1, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(l.loc_key,-1), s.id, s.ou, s.locationcode, s.orderType, s.ServiceType, s.ProcessTAT, s.pickTAT, s.PackTAT, s.DispTAT, s.DelTAT, s.picktat1, s.packtat1, s.disptat1, s.deltat1, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_dim_outbound_Tat s
	
	 LEFT JOIN dwh.d_location L      
        ON s.locationcode   = L.loc_code 
        AND s.ou        = L.loc_ou;
    

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_dim_outbound_Tat
    (
        id, ou, locationcode, orderType, ServiceType, ProcessTAT, pickTAT, PackTAT, DispTAT, DelTAT, picktat1, packtat1, disptat1, deltat1, etlcreateddatetime
    )
    SELECT
        id, ou, locationcode, orderType, ServiceType, ProcessTAT, pickTAT, PackTAT, DispTAT, DelTAT, picktat1, packtat1, disptat1, deltat1, etlcreateddatetime
    FROM stg.stg_dim_outbound_Tat;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_d_wmsoutboundtat(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_wmsquickcodes(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_wmsquickcodes(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_quick_code_master;  -- change staging table

	UPDATE dwh.D_WMSQuickCodes t  --Change variables and table name
    SET -- logical column name = s.column name
		code_desc				= s.wms_code_desc,
		code_default			= s.wms_default,
		seq_no					= s.wms_seq_no,
		status					= s.wms_status,
		category				= s.wms_category,
		user_flag				= s.wms_user_flag,
		code_timestamp			= s.wms_timestamp,
		langid					= s.wms_langid,
		created_date			= s.wms_created_date,
		created_by				= s.wms_created_by,
		modified_date			= s.wms_modified_date,
		modified_by				= s.wms_modified_by,			
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_quick_code_master s		--staging table name in sheet
    WHERE t.code_ou				= s.wms_code_ou --unique and primary key
	AND   t.code_type			= s.wms_code_type
	AND   t.code				= s.wms_code;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.D_WMSQuickCodes -- table name
	(-- logical column names except last 5
		code_ou,			code_type,			code, 				code_desc, 			code_default,
		seq_no, 			status,				category, 			user_flag, 			code_timestamp,
		langid, 			created_date, 		created_by, 		modified_date,		modified_by, 	
		etlactiveind,   	etljobname, 		envsourcecd,		datasourcecd, 		etlcreatedatetime
	)
	
    SELECT  -- normal column name except last 5
		s.wms_code_ou, 		s.wms_code_type, 		s.wms_code, 		s.wms_code_desc, 		s.wms_default,
		s.wms_seq_no, 		s.wms_status, 			s.wms_category, 	s.wms_user_flag, 		s.wms_timestamp,
		s.wms_langid, 		s.wms_created_date, 	s.wms_created_by, 	s.wms_modified_date, 	s.wms_modified_by, 			
		1,					p_etljobname,		p_envsourcecd,		p_datasourcecd,		NOW()
	FROM stg.stg_wms_quick_code_master s -- staging table name
    LEFT JOIN dwh.D_WMSQuickCodes t -- table name
    ON 	s.wms_code_ou  			= t.code_ou -- only unique, no pkeys
	AND s.wms_code_type 		= t.code_type
	AND s.wms_code				= t.code
    WHERE t.code_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_quick_code_master --  staging table name
	(
	 wms_code_ou, wms_code_type, wms_code, wms_code_desc, wms_default, wms_seq_no, 
        wms_status, wms_category, wms_user_flag, wms_timestamp, wms_langid, 
        wms_created_date, wms_created_by, wms_modified_date, wms_modified_by, etlcreateddatetime

	
	)
	SELECT 
		 wms_code_ou, wms_code_type, wms_code, wms_code_desc, wms_default, wms_seq_no, 
        wms_status, wms_category, wms_user_flag, wms_timestamp, wms_langid, 
        wms_created_date, wms_created_by, wms_modified_date, wms_modified_by, etlcreateddatetime

	FROM stg.stg_wms_quick_code_master;	
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
END;
$$;


ALTER PROCEDURE dwh.usp_d_wmsquickcodes(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_yard(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_yard(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag
 
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON  d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_yard_hdr;

	UPDATE dwh.d_yard t  --Change variables and table name
    SET 
		yard_desc				= s.wms_yard_desc,
		yard_type				= s.wms_yard_type,
		yard_status				= s.wms_yard_status,
		yard_reason				= s.wms_yard_reason,
		yard_timestamp			= s.wms_yard_timestamp,
		yard_created_by			= s.wms_yard_created_by,
		yard_created_dt			= s.wms_yard_created_dt,
		yard_modified_by		= s.wms_yard_modified_by,
		yard_modified_dt		= s.wms_yard_modified_dt,	
		etlactiveind 			= 1,
		etljobname 				= p_etljobname,
		envsourcecd 			= p_envsourcecd ,
		datasourcecd 			= p_datasourcecd ,
		etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_yard_hdr s		--staging table name in sheet
    WHERE t.yard_id  			= s.wms_yard_id --unique and primary key
	AND t.yard_loc_code 		= s.wms_yard_loc_code
	AND t.yard_ou 				= s.wms_yard_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_yard -- table name
	(
		yard_id,				yard_loc_code,			yard_ou,				yard_desc,
		yard_type,				yard_status,			yard_reason,			yard_timestamp,
		yard_created_by,		yard_created_dt,		yard_modified_by,		yard_modified_dt,
		etlactiveind,        	etljobname, 			envsourcecd, 			datasourcecd, 			etlcreatedatetime
	)
	
    SELECT 
		s.wms_yard_id,			s.wms_yard_loc_code,	s.wms_yard_ou,			s.wms_yard_desc,
		s.wms_yard_type,		s.wms_yard_status,		s.wms_yard_reason,		s.wms_yard_timestamp,
		s.wms_yard_created_by,	s.wms_yard_created_dt,	s.wms_yard_modified_by,	s.wms_yard_modified_dt,
		1,						p_etljobname,			p_envsourcecd,			p_datasourcecd,			NOW()
	FROM stg.stg_wms_yard_hdr s -- staging table name
    LEFT JOIN dwh.d_yard t -- table name
    ON 	s.wms_yard_id  			= t.yard_id -- only unique, no pkeys
	AND s.wms_yard_loc_code		= t.yard_loc_code
	AND s.wms_yard_ou 			= t.yard_ou 
    WHERE t.yard_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	INSERT INTO raw.raw_wms_yard_hdr --  staging table name
	(
		wms_yard_id, 			wms_yard_loc_code, 		wms_yard_ou, 			wms_yard_desc, 			wms_yard_type, 
        wms_yard_status, 		wms_yard_reason, 		wms_yard_timestamp, 	wms_yard_created_by, 
        wms_yard_created_dt, 	wms_yard_modified_by, 	wms_yard_modified_dt, 	wms_yard_userdefined1, 
        wms_yard_userdefined2, 	wms_yard_userdefined3, 	etlcreateddatetime
	)
	SELECT 
		wms_yard_id, 			wms_yard_loc_code, 		wms_yard_ou, 			wms_yard_desc, 			wms_yard_type, 
        wms_yard_status, 		wms_yard_reason, 		wms_yard_timestamp, 	wms_yard_created_by, 
        wms_yard_created_dt,	wms_yard_modified_by, 	wms_yard_modified_dt, 	wms_yard_userdefined1, 
        wms_yard_userdefined2, 	wms_yard_userdefined3, 	etlcreateddatetime
	FROM stg.stg_wms_yard_hdr;
	END IF;
	
	EXCEPTION WHEN others THEN       
       
    get stacked diagnostics p_errorid   = returned_sqlstate, p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);        
    select 0 into inscnt;
    select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_yard(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_d_zone(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_d_zone(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag
 
	INTO p_etljobname,p_envsourcecd,p_datasourcecd,p_batchid,p_taskname,p_rawstorageflag

	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_zone_hdr;

	UPDATE dwh.d_zone t  --Change variables and table name
    SET -- logical column name = s.column name
		zone_description			= s.wms_zone_description,
		zone_status					= s.wms_zone_status,
		zone_reason					= s.wms_zone_reason,
		zone_type					= s.wms_zone_type,
		zone_pick_strategy			= s.wms_zone_pick_strategy,
		zone_pick_req_confirm		= s.wms_zone_pick_req_confirm,
		zone_block_picking			= s.wms_zone_block_picking,
		zone_pick_label				= s.wms_zone_pick_label,
		zone_pick_per_picklist		= s.wms_zone_pick_per_picklist,
		zone_pick_by				= s.wms_zone_pick_by,
		zone_pick_sequence			= s.wms_zone_pick_sequence,
		zone_put_strategy			= s.wms_zone_put_strategy,
		zone_put_req_confirm		= s.wms_zone_put_req_confirm,
		zone_add_existing_stk		= s.wms_zone_add_existing_stk,
		zone_block_putaway			= s.wms_zone_block_putaway,
		zone_capacity_check			= s.wms_zone_capacity_check,
		zone_mixed_storage			= s.wms_zone_mixed_storage,
		zone_mixed_stor_strategy	= s.wms_zone_mixed_stor_strategy,
		zone_timestamp				= s.wms_zone_timestamp,
		zone_created_by				= s.wms_zone_created_by,
		zone_created_date			= s.wms_zone_created_date,
		zone_modified_by			= s.wms_zone_modified_by,
		zone_modified_date			= s.wms_zone_modified_date,
		zone_step					= s.wms_zone_step,
		zone_pick					= s.wms_zone_pick,
		zone_matchpallet_qty		= s.wms_zone_matchpallet_qty,
		zone_batch_allowed			= s.wms_zone_batch_allowed,
		zone_uid_allowed			= s.wms_zone_uid_allowed,
		zone_pick_stage				= s.wms_zone_pick_stage,
		zone_putaway_stage			= s.wms_zone_putaway_stage,
		zone_cap_chk				= s.wms_zone_cap_chk,
		zone_packing				= s.wms_zone_packing,
		zone_adv_pick_strategy		= s.wms_zone_adv_pick_strategy,
		zone_adv_pwy_strategy		= s.wms_zone_adv_pwy_strategy,
		pcs_noofmnth				= s.pcs_noofmnth,	
		
		etlactiveind 				= 1,
		etljobname 					= p_etljobname,
		envsourcecd 				= p_envsourcecd ,
		datasourcecd 				= p_datasourcecd ,
		etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_zone_hdr s		--staging table name in sheet
    WHERE t.zone_code	  		= s.wms_zone_code --unique and primary key
	AND t.zone_ou 				= s.wms_zone_ou
	AND t.zone_loc_code 		= s.wms_zone_loc_code;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.d_zone -- table name
	(-- logical column names except last 5
		zone_code,			zone_ou,			zone_loc_code,			zone_description,		zone_status,		
		zone_reason,		zone_type,			zone_pick_strategy,		zone_pick_req_confirm,
		zone_block_picking,	zone_pick_label,	zone_pick_per_picklist,	zone_pick_by,
		zone_pick_sequence,	zone_put_strategy,	zone_put_req_confirm,	zone_add_existing_stk,
		zone_block_putaway,	zone_capacity_check,zone_mixed_storage,		zone_mixed_stor_strategy,
		zone_timestamp,		zone_created_by,	zone_created_date,		zone_modified_by,
		zone_modified_date,	zone_step,			zone_pick,				zone_matchpallet_qty,
		zone_batch_allowed,	zone_uid_allowed,	zone_pick_stage,		zone_putaway_stage,
		zone_cap_chk,		zone_packing,		zone_adv_pick_strategy,	zone_adv_pwy_strategy,
		pcs_noofmnth,		etlactiveind,
        etljobname, 		envsourcecd, 		datasourcecd, 			etlcreatedatetime
	)
	
    SELECT  -- normal column name except last 5
		s.wms_zone_code,			s.wms_zone_ou,				s.wms_zone_loc_code,		s.wms_zone_description,		s.wms_zone_status,
		s.wms_zone_reason,			s.wms_zone_type,			s.wms_zone_pick_strategy,	s.wms_zone_pick_req_confirm,		
		s.wms_zone_block_picking,	s.wms_zone_pick_label,		s.wms_zone_pick_per_picklist,s.wms_zone_pick_by,		
		s.wms_zone_pick_sequence,	s.wms_zone_put_strategy,	s.wms_zone_put_req_confirm,	s.wms_zone_add_existing_stk,		
		s.wms_zone_block_putaway,	s.wms_zone_capacity_check,	s.wms_zone_mixed_storage,	s.wms_zone_mixed_stor_strategy,		
		s.wms_zone_timestamp,		s.wms_zone_created_by,		s.wms_zone_created_date,	s.wms_zone_modified_by,		
		s.wms_zone_modified_date,	s.wms_zone_step,			s.wms_zone_pick,			s.wms_zone_matchpallet_qty,		
		s.wms_zone_batch_allowed,	s.wms_zone_uid_allowed,		s.wms_zone_pick_stage,		s.wms_zone_putaway_stage,		
		s.wms_zone_cap_chk,			s.wms_zone_packing,			s.wms_zone_adv_pick_strategy,s.wms_zone_adv_pwy_strategy,		
		s.pcs_noofmnth,				1,		p_etljobname,		p_envsourcecd,		p_datasourcecd,			NOW()
	FROM stg.stg_wms_zone_hdr s -- staging table name
    LEFT JOIN dwh.d_zone t -- table name
    ON 	s.wms_zone_code  		= t.zone_code -- only unique, no pkeys
	AND s.wms_zone_ou 			= t.zone_ou
	AND s.wms_zone_loc_code		= t.zone_loc_code
    WHERE t.zone_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
	THEN

	
	INSERT INTO raw.raw_wms_zone_hdr --  staging table name
	(
     wms_zone_code, wms_zone_ou, wms_zone_loc_code, wms_zone_description, wms_zone_status,
        wms_zone_reason, wms_zone_type, wms_zone_overflow_zone, wms_zone_singlestep_pick, 
        wms_zone_doublestep_pick, wms_zone_minimum, wms_zone_maximum, wms_zone_uom, 
        wms_zone_pick_strategy, wms_zone_pick_req_confirm, wms_zone_block_picking, 
        wms_zone_pick_label, wms_zone_pick_per_picklist, wms_zone_pick_by, wms_zone_pick_sequence, 
        wms_zone_put_strategy, wms_zone_put_req_confirm, wms_zone_add_existing_stk, wms_zone_block_putaway, 
        wms_zone_capacity_check, wms_zone_mixed_storage, wms_zone_mixed_stor_strategy, wms_zone_timestamp,
        wms_zone_created_by, wms_zone_created_date, wms_zone_modified_by, wms_zone_modified_date, 
        wms_zone_userdefined1, wms_zone_userdefined2, wms_zone_userdefined3, wms_zone_step, wms_zone_pick, 
        wms_zone_matchpallet_qty, wms_zone_batch_allowed, wms_zone_uid_allowed, wms_zone_pick_stage, 
        wms_zone_putaway_stage, wms_zone_cap_chk, wms_zone_packing, wms_zone_adv_pick_strategy, 
        wms_zone_adv_pwy_strategy, pcs_zone_putaway_strategy, pcs_noofmnth, etlcreateddatetime

	)
	SELECT 
     wms_zone_code, wms_zone_ou, wms_zone_loc_code, wms_zone_description, wms_zone_status,
        wms_zone_reason, wms_zone_type, wms_zone_overflow_zone, wms_zone_singlestep_pick, 
        wms_zone_doublestep_pick, wms_zone_minimum, wms_zone_maximum, wms_zone_uom, 
        wms_zone_pick_strategy, wms_zone_pick_req_confirm, wms_zone_block_picking, 
        wms_zone_pick_label, wms_zone_pick_per_picklist, wms_zone_pick_by, wms_zone_pick_sequence, 
        wms_zone_put_strategy, wms_zone_put_req_confirm, wms_zone_add_existing_stk, wms_zone_block_putaway, 
        wms_zone_capacity_check, wms_zone_mixed_storage, wms_zone_mixed_stor_strategy, wms_zone_timestamp,
        wms_zone_created_by, wms_zone_created_date, wms_zone_modified_by, wms_zone_modified_date, 
        wms_zone_userdefined1, wms_zone_userdefined2, wms_zone_userdefined3, wms_zone_step, wms_zone_pick, 
        wms_zone_matchpallet_qty, wms_zone_batch_allowed, wms_zone_uid_allowed, wms_zone_pick_stage, 
        wms_zone_putaway_stage, wms_zone_cap_chk, wms_zone_packing, wms_zone_adv_pick_strategy, 
        wms_zone_adv_pwy_strategy, pcs_zone_putaway_strategy, pcs_noofmnth, etlcreateddatetime
	FROM stg.stg_wms_zone_hdr;
	END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_d_zone(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_abbaccountbudgetdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_abbaccountbudgetdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_abb_account_budget_dtl;

    UPDATE dwh.F_abbaccountbudgetdtl t
    SET
        timestamp               = s.timestamp,
        control_action          = s.control_action,
        budget_amount           = s.budget_amount,
        carry_fwd_budget        = s.carry_fwd_budget,
        app_season_pat          = s.app_season_pat,
        status                  = s.status,
        account_currency        = s.account_currency,
        createdby               = s.createdby,
        createddate             = s.createddate,
        basecur_erate           = s.basecur_erate,
        budamt_base             = s.budamt_base,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_abb_account_budget_dtl s
    WHERE t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.fin_year_code = s.fin_year_code
    AND t.fin_period_code = s.fin_period_code
    AND t.account_code = s.account_code;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_abbaccountbudgetdtl
    (
		company_code	, fb_id				, fin_year_code	, fin_period_code	, account_code, 
		timestamp		, control_action	, budget_amount	, carry_fwd_budget	, app_season_pat, 
		status			, account_currency	, createdby		, createddate		, basecur_erate, 
		budamt_base		, 
		etlactiveind	, etljobname		, envsourcecd	, datasourcecd		, etlcreatedatetime
    )

    SELECT
		s.company_code	, s.fb_id			, s.fin_year_code	, s.fin_period_code	, s.account_code, 
		s.timestamp		, s.control_action	, s.budget_amount	, s.carry_fwd_budget, s.app_season_pat, 
		s.status		, s.account_currency, s.createdby		, s.createddate		, s.basecur_erate, 
		s.budamt_base	, 
				1		, p_etljobname		, p_envsourcecd		, p_datasourcecd	, NOW()
    FROM stg.stg_abb_account_budget_dtl s
    LEFT JOIN dwh.F_abbaccountbudgetdtl t
    ON s.company_code = t.company_code
    AND s.fb_id = t.fb_id
    AND s.fin_year_code = t.fin_year_code
    AND s.fin_period_code = t.fin_period_code
    AND s.account_code = t.account_code
    WHERE t.company_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_abb_account_budget_dtl
    (
        company_code	, fb_id				, fin_year_code		, fin_period_code	, account_code, 
		timestamp		, control_action	, budget_amount		, carry_fwd_budget	, app_season_pat, 
		status			, account_currency	, createdby			, createddate		, modifiedby, 
		modifieddate	, carry_fwd_amount	, basecur_erate		, parbasecur_erate	, budamt_base, 
		budamt_parbase	, ForecastAmt		, ForecastAmt_base	, ForecastAmt_parbase, etlcreateddatetime
    )
    SELECT
        company_code	, fb_id				, fin_year_code		, fin_period_code	, account_code, 
		timestamp		, control_action	, budget_amount		, carry_fwd_budget	, app_season_pat, 
		status			, account_currency	, createdby			, createddate		, modifiedby, 
		modifieddate	, carry_fwd_amount	, basecur_erate		, parbasecur_erate	, budamt_base, 
		budamt_parbase	, ForecastAmt		, ForecastAmt_base	, ForecastAmt_parbase, etlcreateddatetime
	FROM stg.stg_abb_account_budget_dtl;
	
	END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, 
								p_batchid,p_taskname, 'sp_ExceptionHandling', 
								p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_abbaccountbudgetdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_acapassethdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_acapassethdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_acap_asset_hdr;

    UPDATE dwh.F_acapassethdr t
    SET
        a_timestamp             = s.timestamp,
        cap_date                = s.cap_date,
        cap_status              = s.cap_status,
        fb_id                   = s.fb_id,
        num_type                = s.num_type,
        asset_class             = s.asset_class,
        asset_group             = s.asset_group,
        cost_center             = s.cost_center,
        asset_desc              = s.asset_desc,
        asset_cost              = s.asset_cost,
        asset_location          = s.asset_location,
        seq_no                  = s.seq_no,
        as_on_date              = s.as_on_date,
        asset_type              = s.asset_type,
        asset_status            = s.asset_status,
        transaction_date        = s.transaction_date,
        createdby               = s.createdby,
        createddate             = s.createddate,
        modifiedby              = s.modifiedby,
        modifieddate            = s.modifieddate,
        remarks                 = s.remarks,
        LAccount_code           = s.LAccount_code,
        LAccount_desc           = s.LAccount_desc,
        Lcost_center            = s.Lcost_center,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_acap_asset_hdr s
    WHERE t.ou_id = s.ou_id
    AND t.cap_number = s.cap_number
    AND t.asset_number = s.asset_number;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_acapassethdr
    (
        ou_id			, cap_number	, asset_number	, a_timestamp		, cap_date, 
		cap_status		, fb_id			, num_type		, asset_class		, asset_group, 
		cost_center		, asset_desc	, asset_cost	, asset_location	, seq_no, 
		as_on_date		, asset_type	, asset_status	, transaction_date	, createdby, 
		createddate		, modifiedby	, modifieddate	, remarks			, LAccount_code, 
		LAccount_desc	, Lcost_center	, 
		etlactiveind	, etljobname	, envsourcecd	, datasourcecd		, etlcreatedatetime
    )

    SELECT
        s.ou_id			, s.cap_number	, s.asset_number, s.timestamp		, s.cap_date, 
		s.cap_status	, s.fb_id		, s.num_type	, s.asset_class		, s.asset_group, 
		s.cost_center	, s.asset_desc	, s.asset_cost	, s.asset_location	, s.seq_no, 
		s.as_on_date	, s.asset_type	, s.asset_status, s.transaction_date, s.createdby, 
		s.createddate	, s.modifiedby	, s.modifieddate, s.remarks			, s.LAccount_code, 
		s.LAccount_desc	, s.Lcost_center, 
				1		, p_etljobname	, p_envsourcecd	, p_datasourcecd	, NOW()
    FROM stg.stg_acap_asset_hdr s
    LEFT JOIN dwh.F_acapassethdr t
    ON s.ou_id = t.ou_id
    AND s.cap_number = t.cap_number
    AND s.asset_number = t.asset_number
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_acap_asset_hdr
    (
        ou_id				, cap_number		, asset_number		, timestamp			, cap_date, 
		cap_status			, fb_id				, num_type			, asset_class		, asset_group, 
		cost_center			, asset_desc		, asset_cost		, asset_location	, seq_no, 
		as_on_date			, asset_type		, asset_status		, transaction_date	, account_code, 
		asset_cost_befround	, asset_cost_diff	, createdby			, createddate		, modifiedby, 
		modifieddate		, remarks			, workflow_status	, workflow_error	, LAccount_code, 
		LAccount_desc		, Lcost_center		, LAnalysis_code	, LSubAnalysis_code	, asset_classification, 
		asset_category		, asset_cluster		, etlcreateddatetime
    )
    SELECT
        ou_id				, cap_number		, asset_number		, timestamp			, cap_date, 
		cap_status			, fb_id				, num_type			, asset_class		, asset_group, 
		cost_center			, asset_desc		, asset_cost		, asset_location	, seq_no, 
		as_on_date			, asset_type		, asset_status		, transaction_date	, account_code, 
		asset_cost_befround	, asset_cost_diff	, createdby			, createddate		, modifiedby, 
		modifieddate		, remarks			, workflow_status	, workflow_error	, LAccount_code, 
		LAccount_desc		, Lcost_center		, LAnalysis_code	, LSubAnalysis_code	, asset_classification, 
		asset_category		, asset_cluster		, etlcreateddatetime
	FROM stg.stg_acap_asset_hdr;
    
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert	(	p_sourceid, p_targetobject, p_dataflowflag,
									p_batchid,p_taskname, 'sp_ExceptionHandling', 
									p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_acapassethdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_adepdeprratehdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_adepdeprratehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_adep_depr_rate_hdr;

    UPDATE dwh.F_adepdeprratehdr t
    SET
        a_timestamp               = s.timestamp,
        depr_rate_desc          = s.depr_rate_desc,
        depr_rate_status        = s.depr_rate_status,
        createdby               = s.createdby,
        createddate             = s.createddate,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_adep_depr_rate_hdr s
    WHERE t.ou_id = s.ou_id
    AND t.asset_class = s.asset_class
    AND t.depr_rate_id = s.depr_rate_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_adepdeprratehdr
    (
        ou_id			, asset_class	, depr_rate_id	, a_timestamp	, depr_rate_desc, 
		depr_rate_status, createdby		, createddate	, 
		etlactiveind	, etljobname	, envsourcecd	, datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.ou_id					, s.asset_class	, s.depr_rate_id, s.timestamp	, s.depr_rate_desc, 
		s.depr_rate_status		, s.createdby	, s.createddate	, 
					1			, p_etljobname	, p_envsourcecd	, p_datasourcecd, NOW()
    FROM stg.stg_adep_depr_rate_hdr s
    LEFT JOIN dwh.F_adepdeprratehdr t
    ON s.ou_id = t.ou_id
    AND s.asset_class = t.asset_class
    AND s.depr_rate_id = t.depr_rate_id
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_adep_depr_rate_hdr
    (
        ou_id			, asset_class	, depr_rate_id	, timestamp	, depr_rate_desc, 
		depr_rate_status, createdby		, createddate	, modifiedby, modifieddate, 
		etlcreateddatetime
    )
    SELECT
        ou_id			, asset_class	, depr_rate_id	, timestamp	, depr_rate_desc, 
		depr_rate_status, createdby		, createddate	, modifiedby, modifieddate, 
		etlcreateddatetime
	FROM stg.stg_adep_depr_rate_hdr;
    
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_adepdeprratehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_adeppprocesshdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_adeppprocesshdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_adepp_process_hdr;

    UPDATE dwh.F_adeppprocesshdr t
    SET
        a_timestamp            = s.timestamp,
        process_status         = s.process_status,
        process_date           = s.process_date,
        fb_id                  = s.fb_id,
        num_type               = s.num_type,
        incl_rev               = s.incl_rev,
        currency               = s.currency,
        pcost_center           = s.pcost_center,
        fin_year               = s.fin_year,
        fp_upto                = s.fp_upto,
        fp_start_date          = s.fp_start_date,
        fp_end_date            = s.fp_end_date,
        depr_basis             = s.depr_basis,
        asset_class            = s.asset_class,
        depr_category          = s.depr_category,
        asset_number           = s.asset_number,
        assets_selected        = s.assets_selected,
        tag_selected           = s.tag_selected,
        rec_selected           = s.rec_selected,
        susp_total             = s.susp_total,
        depr_total             = s.depr_total,
        rev_depr_total         = s.rev_depr_total,
        createdby              = s.createdby,
        createddate            = s.createddate,
        modifiedby             = s.modifiedby,
        modifieddate           = s.modifieddate,
        fystartdate            = s.fystartdate,
        fyenddate              = s.fyenddate,
        etlactiveind           = 1,
        etljobname             = p_etljobname,
        envsourcecd            = p_envsourcecd,
        datasourcecd           = p_datasourcecd,
        etlupdatedatetime      = NOW()
    FROM stg.stg_adepp_process_hdr s
    WHERE t.ou_id = s.ou_id
    AND t.depr_proc_runno = s.depr_proc_runno
    AND t.depr_book = s.depr_book;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_adeppprocesshdr
    (
        ou_id			, depr_proc_runno	, depr_book		, a_timestamp	, process_status, 
		process_date	, fb_id				, num_type		, incl_rev		, currency, 
		pcost_center	, fin_year			, fp_upto		, fp_start_date	, fp_end_date, 
		depr_basis		, asset_class		, depr_category	, asset_number	, assets_selected, 
		tag_selected	, rec_selected		, susp_total	, depr_total	, rev_depr_total, 
		createdby		, createddate		, modifiedby	, modifieddate	, fystartdate, 
		fyenddate		, 
		etlactiveind	, etljobname		, envsourcecd	, datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.ou_id			, s.depr_proc_runno	, s.depr_book		, s.timestamp		, s.process_status, 
		s.process_date	, s.fb_id			, s.num_type		, s.incl_rev		, s.currency, 
		s.pcost_center	, s.fin_year		, s.fp_upto			, s.fp_start_date	, s.fp_end_date,
		s.depr_basis	, s.asset_class		, s.depr_category	, s.asset_number	, s.assets_selected, 
		s.tag_selected	, s.rec_selected	, s.susp_total		, s.depr_total		, s.rev_depr_total, 
		s.createdby		, s.createddate		, s.modifiedby		, s.modifieddate	, s.fystartdate, 
		s.fyenddate		, 
			1			, p_etljobname		, p_envsourcecd		, p_datasourcecd	, NOW()
    FROM stg.stg_adepp_process_hdr s
    LEFT JOIN dwh.F_adeppprocesshdr t
    ON s.ou_id = t.ou_id
    AND s.depr_proc_runno = t.depr_proc_runno
    AND s.depr_book = t.depr_book
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_adepp_process_hdr
    (
        ou_id				, depr_proc_runno	, depr_book		, timestamp		, process_status, 
		process_date		, fb_id				, num_type		, incl_rev		, currency, 
		pcost_center		, fin_year			, fp_upto		, fp_start_date	, fp_end_date, 
		depr_basis			, asset_class		, depr_category	, asset_number	, cost_center, 
		assets_selected		, tag_selected		, rec_selected	, susp_total	, depr_total, 
		rev_depr_total		, rev_susp_total	, pbc_susp_total, pbc_depr_total, pbc_rev_depr_total,
		pbc_rev_susp_total	, createdby			, createddate	, modifiedby	, modifieddate, 
		fystartdate			, fyenddate			, Asset_group	, Asset_location, etlcreateddatetime
    )
    SELECT
	    ou_id				, depr_proc_runno	, depr_book		, timestamp		, process_status, 
		process_date		, fb_id				, num_type		, incl_rev		, currency, 
		pcost_center		, fin_year			, fp_upto		, fp_start_date	, fp_end_date, 
		depr_basis			, asset_class		, depr_category	, asset_number	, cost_center, 
		assets_selected		, tag_selected		, rec_selected	, susp_total	, depr_total, 
		rev_depr_total		, rev_susp_total	, pbc_susp_total, pbc_depr_total, pbc_rev_depr_total,
		pbc_rev_susp_total	, createdby			, createddate	, modifiedby	, modifieddate, 
		fystartdate			, fyenddate			, Asset_group	, Asset_location, etlcreateddatetime
    FROM stg.stg_adepp_process_hdr;
    
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_adeppprocesshdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_ainqcwipaccountinginfo(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_ainqcwipaccountinginfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_ainq_cwip_accounting_info;

    UPDATE dwh.F_ainqcwipaccountinginfo t
    SET
        asset_class         = s.asset_class,
        fb_id               = s.fb_id,
        asset_number        = s.asset_number,
        tran_type           = s.tran_type,
        account_code        = s.account_code,
        account_type        = s.account_type,
        drcr_flag           = s.drcr_flag,
        currency            = s.currency,
        tran_amount         = s.tran_amount,
        tran_date           = s.tran_date,
        posting_date        = s.posting_date,
        depr_book           = s.depr_book,
        bc_erate            = s.bc_erate,
        base_amount         = s.base_amount,
        pbc_erate           = s.pbc_erate,
        pbase_amount        = s.pbase_amount,
        batch_id            = s.batch_id,
        createdby           = s.createdby,
        createddate         = s.createddate,
        rpt_flag            = s.rpt_flag,
        rpt_amount          = s.rpt_amount,
        etlactiveind        = 1,
        etljobname          = p_etljobname,
        envsourcecd         = p_envsourcecd,
        datasourcecd        = p_datasourcecd,
        etlupdatedatetime   = NOW()
    FROM stg.stg_ainq_cwip_accounting_info s 
	WHERE t.component_id = s.component_id
    AND t.company_code = s.company_code
    AND t.tran_number = s.tran_number
    AND t.proposal_no = s.proposal_no
    AND t.tran_ou = s.tran_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_ainqcwipaccountinginfo
    (
        tran_ou		, component_id	, company_code	, asset_class	, fb_id, 
		tran_number	, asset_number	, tran_type		, proposal_no	, account_code, 
		account_type, drcr_flag		, currency		, tran_amount	, tran_date, 
		posting_date, depr_book		, bc_erate		, base_amount	, pbc_erate, 
		pbase_amount, batch_id		, createdby		, createddate	, rpt_flag, 
		rpt_amount	, 
		etlactiveind, etljobname	, envsourcecd	, datasourcecd	, etlcreatedatetime
    )

    SELECT
        s.tran_ou		, s.component_id, s.company_code, s.asset_class	, s.fb_id, 
		s.tran_number	, s.asset_number, s.tran_type	, s.proposal_no	, s.account_code, 
		s.account_type	, s.drcr_flag	, s.currency	, s.tran_amount	, s.tran_date, 
		s.posting_date	, s.depr_book	, s.bc_erate	, s.base_amount	, s.pbc_erate, 
		s.pbase_amount	, s.batch_id	, s.createdby	, s.createddate	, s.rpt_flag, 
		s.rpt_amount	, 
				1		, p_etljobname	, p_envsourcecd	, p_datasourcecd, NOW()
    FROM stg.stg_ainq_cwip_accounting_info s
    LEFT JOIN dwh.F_ainqcwipaccountinginfo t 
	ON t.component_id = s.component_id
    AND t.company_code = s.company_code
    AND t.tran_number = s.tran_number
    AND t.proposal_no = s.proposal_no
    AND t.tran_ou = s.tran_ou
    WHERE t.tran_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_ainq_cwip_accounting_info
    (
        tran_ou, component_id, company_code, asset_class, fb_id, tran_number, asset_number, tran_type, proposal_no, account_code, account_type, drcr_flag, currency, tran_amount, tran_date, posting_date, depr_book, bc_erate, base_amount, pbc_erate, pbase_amount, batch_id, createdby, createddate, rpt_flag, rpt_amount, etlcreateddatetime
    )
    SELECT
        tran_ou, component_id, company_code, asset_class, fb_id, tran_number, asset_number, tran_type, proposal_no, account_code, account_type, drcr_flag, currency, tran_amount, tran_date, posting_date, depr_book, bc_erate, base_amount, pbc_erate, pbase_amount, batch_id, createdby, createddate, rpt_flag, rpt_amount, etlcreateddatetime
    FROM stg.stg_ainq_cwip_accounting_info;
    
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	  
END;
$$;


ALTER PROCEDURE dwh.usp_f_ainqcwipaccountinginfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_allocitemdetailshistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_allocitemdetailshistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_alloc_item_detail_hist;
/*
    UPDATE dwh.F_AllocItemDetailsHistory t
    SET
	    allc_dtl_key					= fh.allc_dtl_key,
		allc_itm_hdr_key				= COALESCE(i.itm_hdr_key,-1)
		, allc_wh_key					= COALESCE(w.wh_key,-1)
		, allc_zone_key					= COALESCE(z.zone_key,-1)
		, allc_thu_key					= COALESCE(th.thu_key,-1),
        allc_order_no                 = s.allc_order_no,
        allc_order_line_no            = s.allc_order_line_no,
        allc_order_sch_no             = s.allc_order_sch_no,
        allc_item_code                = s.allc_item_code,
        allc_wh_no                    = s.allc_wh_no,
        allc_zone_no                  = s.allc_zone_no,
        allc_bin_no                   = s.allc_bin_no,
        allc_lot_no                   = s.allc_lot_no,
        allc_batch_no                 = s.allc_batch_no,
        allc_serial_no                = s.allc_serial_no,
        allc_su                       = s.allc_su,
        allc_su_serial_no             = s.allc_su_serial_no,
        allc_su_type                  = s.allc_su_type,
        allc_thu_id                   = s.allc_thu_id,
        allc_tran_qty                 = s.allc_tran_qty,
        allc_allocated_qty            = s.allc_allocated_qty,
        allc_mas_uom                  = s.allc_mas_uom,
        allc_created_date             = s.allc_created_date,
        allc_created_by               = s.allc_created_by,
        allc_thu_serial_no            = s.allc_thu_serial_no,
        allc_inpro_stage              = s.allc_inpro_stage,
        allc_staging_id_crosdk        = s.allc_staging_id_crosdk,
        allc_inpro_stk_line_no        = s.allc_inpro_stk_line_no,
        allc_stock_status             = s.allc_stock_status,
        allc_su_serial_no2            = s.allc_su_serial_no2,
        allc_su2                      = s.allc_su2,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_alloc_item_detail_hist s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.allc_ouinstid				= i.itm_ou
		AND s.allc_doc_ou 				= i.itm_ou 
		AND s.allc_item_code 			= i.itm_code 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.allc_wh_no 				= w.wh_code 
		AND s.allc_ouinstid				= w.wh_ou 
		AND s.allc_doc_ou 				= w.wh_ou 
	LEFT JOIN dwh.d_zone z 			
		ON  s.allc_zone_no 				= z.zone_code
		AND s.allc_ouinstid				= z.zone_ou
		AND s.allc_doc_ou 				= z.zone_ou 	
		AND s.allc_wh_no				= z.zone_loc_code
	LEFT JOIN dwh.d_thu th 		
		ON  s.allc_thu_id		  		= th.thu_id 
		AND s.allc_ouinstid				= th.thu_ou
		AND s.allc_doc_ou 				= th.thu_ou 
    WHERE t.allc_ouinstid = s.allc_ouinstid
    AND t.allc_doc_no = s.allc_doc_no
    AND t.allc_doc_ou = s.allc_doc_ou
    AND t.allc_doc_line_no = s.allc_doc_line_no
    AND t.allc_alloc_line_no = s.allc_alloc_line_no;

    
*/

     SELECT 0 INTO updcnt ;
/*
    Delete from dwh.F_AllocItemDetailsHistory t
	USING stg.stg_wms_alloc_item_detail_hist s
	where	t.allc_ouinstid     = s.allc_ouinstid
    AND     t.allc_doc_no       = s.allc_doc_no
    AND     t.allc_doc_ou       = s.allc_doc_ou
    AND     t.allc_doc_line_no  = s.allc_doc_line_no
    AND     t.allc_alloc_line_no = s.allc_alloc_line_no;
	--AND COALESCE(wms_asn_modified_date,wms_asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    INSERT INTO dwh.F_AllocItemDetailsHistory
    (
		allc_itm_hdr_key				, allc_wh_key					, allc_zone_key						, allc_thu_key , 
        allc_ouinstid, allc_doc_no, allc_doc_ou, allc_doc_line_no, allc_alloc_line_no, allc_order_no, allc_order_line_no, allc_order_sch_no, allc_item_code, allc_wh_no, allc_zone_no, allc_bin_no, allc_lot_no, allc_batch_no, allc_serial_no, allc_su, allc_su_serial_no, allc_su_type, allc_thu_id, allc_tran_qty, allc_allocated_qty, allc_mas_uom, allc_created_date, allc_created_by, allc_thu_serial_no, allc_inpro_stage, allc_staging_id_crosdk, allc_inpro_stk_line_no, allc_stock_status, allc_su_serial_no2, allc_su2, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(i.itm_hdr_key,-1)	, COALESCE(w.wh_key,-1)			, COALESCE(z.zone_key,-1)			, COALESCE(th.thu_key,-1), 	
        s.allc_ouinstid, s.allc_doc_no, s.allc_doc_ou, s.allc_doc_line_no, s.allc_alloc_line_no, s.allc_order_no, s.allc_order_line_no, s.allc_order_sch_no, s.allc_item_code, s.allc_wh_no, s.allc_zone_no, s.allc_bin_no, s.allc_lot_no, s.allc_batch_no, s.allc_serial_no, s.allc_su, s.allc_su_serial_no, s.allc_su_type, s.allc_thu_id, s.allc_tran_qty, s.allc_allocated_qty, s.allc_mas_uom, s.allc_created_date, s.allc_created_by, s.allc_thu_serial_no, s.allc_inpro_stage, s.allc_staging_id_crosdk, s.allc_inpro_stk_line_no, s.allc_stock_status, s.allc_su_serial_no2, s.allc_su2, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_alloc_item_detail_hist s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.allc_ouinstid				= i.itm_ou
		AND s.allc_doc_ou 				= i.itm_ou 
		AND s.allc_item_code 			= i.itm_code 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.allc_wh_no 				= w.wh_code 
		AND s.allc_ouinstid				= w.wh_ou 
		AND s.allc_doc_ou 				= w.wh_ou 
	LEFT JOIN dwh.d_zone z 			
		ON  s.allc_zone_no 				= z.zone_code
		AND s.allc_ouinstid				= z.zone_ou
		AND s.allc_doc_ou 				= z.zone_ou 	
		AND s.allc_wh_no				= z.zone_loc_code
	LEFT JOIN dwh.d_thu th 		
		ON  s.allc_thu_id		  		= th.thu_id 
		AND s.allc_ouinstid				= th.thu_ou
		AND s.allc_doc_ou 				= th.thu_ou 
    LEFT JOIN dwh.F_AllocItemDetailsHistory t
    ON s.allc_ouinstid = t.allc_ouinstid
    AND s.allc_doc_no = t.allc_doc_no
    AND s.allc_doc_ou = t.allc_doc_ou
    AND s.allc_doc_line_no = t.allc_doc_line_no
    AND s.allc_alloc_line_no = t.allc_alloc_line_no
    WHERE t.allc_ouinstid IS NULL;
    
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_alloc_item_detail_hist
    (
        allc_ouinstid, allc_doc_no, allc_doc_ou, allc_doc_line_no, allc_alloc_line_no, allc_order_no, allc_order_line_no, allc_order_sch_no, allc_item_code, allc_wh_no, allc_zone_no, allc_bin_no, allc_lot_no, allc_batch_no, allc_serial_no, allc_su, allc_su_serial_no, allc_su_type, allc_thu_id, allc_tran_qty, allc_allocated_qty, allc_mas_uom, allc_created_date, allc_modified_date, allc_created_by, allc_modified_by, allc_tolerance_qty, allc_thu_serial_no, allc_inpro_stage, allc_staging_id_crosdk, allc_inpro_stk_serial_line_no, allc_inpro_stk_line_no, allc_stock_status, allc_box_thu_id, allc_box_no, allc_su_serial_no2, allc_su2, etlcreateddatetime
    )
    SELECT
        allc_ouinstid, allc_doc_no, allc_doc_ou, allc_doc_line_no, allc_alloc_line_no, allc_order_no, allc_order_line_no, allc_order_sch_no, allc_item_code, allc_wh_no, allc_zone_no, allc_bin_no, allc_lot_no, allc_batch_no, allc_serial_no, allc_su, allc_su_serial_no, allc_su_type, allc_thu_id, allc_tran_qty, allc_allocated_qty, allc_mas_uom, allc_created_date, allc_modified_date, allc_created_by, allc_modified_by, allc_tolerance_qty, allc_thu_serial_no, allc_inpro_stage, allc_staging_id_crosdk, allc_inpro_stk_serial_line_no, allc_inpro_stk_line_no, allc_stock_status, allc_box_thu_id, allc_box_no, allc_su_serial_no2, allc_su2, etlcreateddatetime
    FROM stg.stg_wms_alloc_item_detail_hist;
    END IF;
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_allocitemdetailshistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_aplanacqproposalhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_aplanacqproposalhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;


BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_aplan_acq_proposal_hdr;

    UPDATE dwh.F_aplanacqproposalhdr t
    SET
        pln_pro_curr_key              = COALESCE(c.curr_key,-1),
        ou_id                         = s.ou_id,
        fb_id                         = s.fb_id,
        timestamp                     = s.timestamp,
        proposal_date                 = s.proposal_date,
        numbering_typeno              = s.numbering_typeno,
        proposal_desc                 = s.proposal_desc,
        budget_number                 = s.budget_number,
        board_ref                     = s.board_ref,
        board_ref_date                = s.board_ref_date,
        expiry_date                   = s.expiry_date,
        exchange_rate                 = s.exchange_rate,
        total_proposed_cost_bc        = s.total_proposed_cost_bc,
        proposed_cost_variance        = s.proposed_cost_variance,
        proposal_status               = s.proposal_status,
        amendment_number              = s.amendment_number,
        proposed_cost                 = s.proposed_cost,
        commited_amount               = s.commited_amount,
        liability_amount              = s.liability_amount,
        createdby                     = s.createdby,
        createddate                   = s.createddate,
        modifiedby                    = s.modifiedby,
        modifieddate                  = s.modifieddate,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_aplan_acq_proposal_hdr s

    LEFT JOIN dwh.d_currency c      
        ON  s.currency_code          = c.iso_curr_code 

    WHERE t.ou_id = s.ou_id
    AND t.fb_id = s.fb_id
    AND t.financial_year = s.financial_year
    AND t.asset_class_code = s.asset_class_code
    AND t.currency_code = s.currency_code
    AND t.proposal_number = s.proposal_number
    AND t.addnl_entity = s.addnl_entity;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_aplanacqproposalhdr
    (
       pln_pro_curr_key, ou_id, fb_id, financial_year, asset_class_code, currency_code, proposal_number, timestamp, proposal_date, numbering_typeno, proposal_desc, budget_number, board_ref, board_ref_date, expiry_date, exchange_rate, total_proposed_cost_bc, proposed_cost_variance, proposal_status, amendment_number, proposed_cost, commited_amount, liability_amount, createdby, createddate, modifiedby, modifieddate, addnl_entity, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(c.curr_key,-1), s.ou_id, s.fb_id, s.financial_year, s.asset_class_code, s.currency_code, s.proposal_number, s.timestamp, s.proposal_date, s.numbering_typeno, s.proposal_desc, s.budget_number, s.board_ref, s.board_ref_date, s.expiry_date, s.exchange_rate, s.total_proposed_cost_bc, s.proposed_cost_variance, s.proposal_status, s.amendment_number, s.proposed_cost, s.commited_amount, s.liability_amount, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.addnl_entity, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_aplan_acq_proposal_hdr s


    LEFT JOIN dwh.d_currency c      
    ON  s.currency_code          = c.iso_curr_code  


    LEFT JOIN dwh.F_aplanacqproposalhdr t
    ON s.ou_id = t.ou_id
    AND s.fb_id = t.fb_id
    AND s.financial_year = t.financial_year
    AND s.asset_class_code = t.asset_class_code
    AND s.currency_code = t.currency_code
    AND s.proposal_number = t.proposal_number
    AND s.addnl_entity = t.addnl_entity
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_aplan_acq_proposal_hdr
    (
        ou_id, fb_id, financial_year, asset_class_code, currency_code, proposal_number, timestamp, proposal_date, numbering_typeno, proposal_desc, budget_number, board_ref, board_ref_date, expiry_date, exchange_rate, exchange_rate_var_per, cost_var_per, total_proposed_cost_bc, proposed_cost_variance, proposal_status, amendment_number, proposed_cost, commited_amount, liability_amount, createdby, createddate, modifiedby, modifieddate, workflow_status, workflow_error, addnl_entity, project_ou, project_code, cost_center, etlcreateddatetime
    )
    SELECT
        ou_id, fb_id, financial_year, asset_class_code, currency_code, proposal_number, timestamp, proposal_date, numbering_typeno, proposal_desc, budget_number, board_ref, board_ref_date, expiry_date, exchange_rate, exchange_rate_var_per, cost_var_per, total_proposed_cost_bc, proposed_cost_variance, proposal_status, amendment_number, proposed_cost, commited_amount, liability_amount, createdby, createddate, modifiedby, modifieddate, workflow_status, workflow_error, addnl_entity, project_ou, project_code, cost_center, etlcreateddatetime
    FROM stg.stg_aplan_acq_proposal_hdr;
    END IF;


    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_aplanacqproposalhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_aplanproposalbaldtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_aplanproposalbaldtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag


    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_aplan_proposal_bal_dtl;
		TRUNCATE only dwh.F_aplanproposalbaldtl
		restart identity;
        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_aplanproposalbaldtl
        (
            timestamp, ou_id, proposal_number, currency, proposal_amount, balance_amount, committed_amount, liability_amount, utilized_amount, createdby, createddate, rpt_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            s.timestamp, s.ou_id, s.proposal_number, s.currency, s.proposal_amount, s.balance_amount, s.committed_amount, s.liability_amount, s.utilized_amount, s.createdby, s.createddate, s.rpt_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_aplan_proposal_bal_dtl s;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
        IF p_rawstorageflag = 1
       THEN


        INSERT INTO raw.raw_aplan_proposal_bal_dtl
        (
            timestamp, ou_id, proposal_number, currency, proposal_amount, balance_amount, committed_amount, liability_amount, utilized_amount, createdby, createddate, modifiedby, modifieddate, rpt_flag, etlcreateddatetime
        )
        SELECT
            timestamp, ou_id, proposal_number, currency, proposal_amount, balance_amount, committed_amount, liability_amount, utilized_amount, createdby, createddate, modifiedby, modifieddate, rpt_flag, etlcreateddatetime
        FROM stg.stg_aplan_proposal_bal_dtl;
        END IF;

    
   EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_aplanproposalbaldtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asnadditionaldetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asnadditionaldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_depsource VARCHAR(100);

    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
    
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(*) INTO srccnt
    FROM stg.stg_wms_asn_add_dtl;

    UPDATE dwh.F_ASNAdditionalDetail t
    SET
		asn_hr_key =   oh.asn_hr_key,
        asn_pop_loc_key              = COALESCE(c.loc_key,-1), 
        asn_pop_date_1 = s.wms_asn_pop_date_1,
        asn_pop_date_2 = s.wms_asn_pop_date_2,
        asn_pop_ud_1 = s.wms_asn_pop_ud_1,
        asn_pop_ud_2 = s.wms_asn_pop_ud_2,
        asn_pop_ud_3 = s.wms_asn_pop_ud_3,
        etlactiveind = 1,
        etljobname = p_etljobname,
        envsourcecd = p_envsourcecd ,
        datasourcecd = p_datasourcecd ,
        etlupdatedatetime = NOW()    
    FROM stg.stg_wms_asn_add_dtl s
	INNER JOIN dwh.f_asnheader oh
ON  
	     s.wms_asn_pop_asn_no= oh.asn_no 
	 and s.wms_asn_pop_loc = oh.asn_location
	 and s.wms_asn_pop_ou = oh.asn_ou 

        LEFT JOIN dwh.d_location C      
        ON s.wms_asn_pop_loc  = C.loc_code 
        AND s.wms_asn_pop_ou        = C.loc_ou

    WHERE t.asn_pop_asn_no = s.wms_asn_pop_asn_no
    AND t.asn_pop_loc = s.wms_asn_pop_loc
    AND t.asn_pop_ou = s.wms_asn_pop_ou
    AND t.asn_pop_line_no = s.wms_asn_pop_line_no
	AND 		t.asn_hr_key =   oh.asn_hr_key;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_ASNAdditionalDetail 
    (
       asn_hr_key, asn_pop_loc_key,asn_pop_asn_no, asn_pop_loc, asn_pop_ou, asn_pop_line_no, asn_pop_date_1, asn_pop_date_2, asn_pop_ud_1, asn_pop_ud_2, asn_pop_ud_3, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )
    
    SELECT
        oh.asn_hr_key,COALESCE(c.loc_key,-1) ,s.wms_asn_pop_asn_no, s.wms_asn_pop_loc, s.wms_asn_pop_ou, s.wms_asn_pop_line_no, s.wms_asn_pop_date_1, s.wms_asn_pop_date_2, s.wms_asn_pop_ud_1, s.wms_asn_pop_ud_2, s.wms_asn_pop_ud_3, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()

    FROM stg.stg_wms_asn_add_dtl s
	
	INNER JOIN dwh.f_asnheader oh
ON  
	     s.wms_asn_pop_asn_no= oh.asn_no 
	 and s.wms_asn_pop_loc = oh.asn_location
	 and s.wms_asn_pop_ou = oh.asn_ou 
	 
   LEFT JOIN dwh.d_location C      
        ON s.wms_asn_pop_loc  = C.loc_code 
        AND s.wms_asn_pop_ou        = C.loc_ou

    LEFT JOIN dwh.F_ASNAdditionalDetail t
    ON   t.asn_pop_asn_no    = s.wms_asn_pop_asn_no 
    AND  t.asn_pop_loc = s.wms_asn_pop_loc 
    AND  t.asn_pop_ou = s.wms_asn_pop_ou 
    AND  t.asn_pop_line_no = s.wms_asn_pop_line_no 
		AND 		t.asn_hr_key =   oh.asn_hr_key

    WHERE t.asn_pop_asn_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_asn_add_dtl
    (   
        wms_asn_pop_asn_no, wms_asn_pop_loc, wms_asn_pop_ou, wms_asn_pop_line_no, wms_asn_pop_date_1, wms_asn_pop_date_2, wms_asn_pop_ud_1, wms_asn_pop_ud_2, wms_asn_pop_ud_3,etlcreateddatetime
    )
    SELECT 
        wms_asn_pop_asn_no, wms_asn_pop_loc, wms_asn_pop_ou, wms_asn_pop_line_no, wms_asn_pop_date_1, wms_asn_pop_date_2, wms_asn_pop_ud_1, wms_asn_pop_ud_2, wms_asn_pop_ud_3,etlcreateddatetime
    FROM stg.stg_wms_asn_add_dtl;
    END IF;
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
       

 EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
       

END;
$$;


ALTER PROCEDURE dwh.usp_f_asnadditionaldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asndetailhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asndetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_asn_detail_h;
    

    UPDATE dwh.F_ASNDetailHistory t
    SET
		asn_hdr_hst_key    			 = fh.asn_hdr_hst_key,
        asn_dtl_hst_loc_key 		 = COALESCE(l.loc_key,-1),
		asn_dtl_hst_itm_hdr_key 	 = COALESCE(i.itm_hdr_key,-1),
		asn_dtl_hst_thu_key 		 = COALESCE(th.thu_key,-1),
        asn_itm_code                 = s.wms_asn_itm_code,
        asn_qty                      = s.wms_asn_qty,
        asn_batch_no                 = s.wms_asn_batch_no,
        asn_srl_no                   = s.wms_asn_srl_no,
        asn_exp_date                 = s.wms_asn_exp_date,
        asn_thu_id                   = s.wms_asn_thu_id,
        asn_thu_desc                 = s.wms_asn_thu_desc,
        asn_thu_qty                  = s.wms_asn_thu_qty,
        po_lineno                    = s.wms_po_lineno,
        asn_rem                      = s.wms_asn_rem,
        asn_itm_height               = s.wms_asn_itm_height,
        asn_itm_volume               = s.wms_asn_itm_volume,
        asn_itm_weight               = s.wms_asn_itm_weight,
        asn_outboundorder_qty        = s.wms_asn_outboundorder_qty,
        asn_bestbeforedate           = s.wms_asn_bestbeforedate,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_wms_asn_detail_h s
	INNER JOIN 	dwh.f_asnheaderhistory fh 
			ON  s.wms_asn_ou 		= fh.asn_ou 
			AND s.wms_asn_location 	= fh.asn_location 
			AND s.wms_asn_no 		= fh.asn_no
			AND s.wms_asn_amendno 	= fh.asn_amendno
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_asn_itm_code  = i.itm_code
		AND s.wms_asn_ou        = i.itm_ou
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_asn_thu_id  	= th.thu_id
		AND s.wms_asn_ou 		= th.thu_ou
    WHERE   t.asn_ou 		= s.wms_asn_ou
    AND 	t.asn_location  = s.wms_asn_location
    AND 	t.asn_no 		= s.wms_asn_no
    AND 	t.asn_amendno 	= s.wms_asn_amendno
    AND 	t.asn_lineno 	= s.wms_asn_lineno;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
    SELECT 0 INTO updcnt ;

    Delete from dwh.F_ASNDetailHistory t
	USING stg.stg_wms_asn_detail_h s
	where   t.asn_ou 		= s.wms_asn_ou
    AND 	t.asn_location  = s.wms_asn_location
    AND 	t.asn_no 		= s.wms_asn_no
    AND 	t.asn_amendno 	= s.wms_asn_amendno
    AND 	t.asn_lineno 	= s.wms_asn_lineno;
	--and COALESCE(h.asn_modified_date,h.asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    INSERT INTO dwh.F_ASNDetailHistory
    (
		asn_hdr_hst_key,	  	asn_dtl_hst_loc_key,		asn_dtl_hst_itm_hdr_key,asn_dtl_hst_thu_key,
        asn_ou, 				asn_location, 				asn_no, 				asn_amendno, 	asn_lineno, 	asn_itm_code, 
		asn_qty, 				asn_batch_no, 				asn_srl_no, 			asn_exp_date, 	asn_thu_id, 	asn_thu_desc, 
		asn_thu_qty, 			po_lineno, 					asn_rem, 				asn_itm_height, asn_itm_volume, 
		asn_itm_weight, 		asn_outboundorder_qty, 		asn_bestbeforedate, 	etlactiveind, 	etljobname, 
		envsourcecd, 			datasourcecd, 				etlcreatedatetime
    )

    SELECT
		fh.asn_hdr_hst_key,		COALESCE(l.loc_key,-1),	COALESCE(i.itm_hdr_key,-1),	COALESCE(th.thu_key,-1),
        s.wms_asn_ou, 			s.wms_asn_location, 	s.wms_asn_no, 			s.wms_asn_amendno, 			 s.wms_asn_lineno, 
		s.wms_asn_itm_code, 	s.wms_asn_qty, 			s.wms_asn_batch_no, 	s.wms_asn_srl_no, 			 s.wms_asn_exp_date, 
		s.wms_asn_thu_id, 		s.wms_asn_thu_desc, 	s.wms_asn_thu_qty, 		s.wms_po_lineno, 			 s.wms_asn_rem, 
		s.wms_asn_itm_height, 	s.wms_asn_itm_volume, 	s.wms_asn_itm_weight,   s.wms_asn_outboundorder_qty, s.wms_asn_bestbeforedate, 
		1, 						p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 			 NOW()
    FROM stg.stg_wms_asn_detail_h s
	INNER JOIN 	dwh.f_asnheaderhistory fh 
			ON  s.wms_asn_ou 		= fh.asn_ou 
			AND s.wms_asn_location 	= fh.asn_location 
			AND s.wms_asn_no 		= fh.asn_no
			AND s.wms_asn_amendno 	= fh.asn_amendno
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_asn_itm_code  = i.itm_code
		AND s.wms_asn_ou        = i.itm_ou
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_asn_thu_id  	= th.thu_id
		AND s.wms_asn_ou 		= th.thu_ou  
    LEFT JOIN dwh.F_ASNDetailHistory t
    ON 		s.wms_asn_ou 		= t.asn_ou
    AND 	s.wms_asn_location  = t.asn_location
    AND 	s.wms_asn_no 		= t.asn_no
    AND 	s.wms_asn_amendno 	= t.asn_amendno
    AND 	s.wms_asn_lineno 	= t.asn_lineno
    WHERE t.asn_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
/*	
	
	UPDATE	dwh.F_ASNDetailHistory s
    SET		asn_hdr_hst_key		= fh.asn_hdr_hst_key,
	 		etlupdatedatetime	= NOW()
    FROM	dwh.f_asnheaderhistory fh  
    WHERE	s.asn_ou 			= fh.asn_ou 
	AND		s.asn_location 		= fh.asn_location 
	AND		s.asn_no 			= fh.asn_no
	AND		s.asn_amendno 		= fh.asn_amendno
    AND		COALESCE(fh.asn_modified_date,fh.asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
*/	

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_asn_detail_h
    (
        wms_asn_ou, 			wms_asn_location, 		  wms_asn_no, 				 wms_asn_amendno, 	 wms_asn_lineno, 
		wms_asn_line_status, 	wms_asn_itm_code, 		  wms_asn_qty, 				 wms_asn_batch_no, 	 wms_asn_srl_no, 
		wms_asn_manfct_date, 	wms_asn_exp_date, 		  wms_asn_thu_id, 			 wms_asn_thu_desc, 	 wms_asn_thu_qty, 
		wms_po_lineno, 			wms_gr_flag, 	  		  wms_asn_rec_qty, 			 wms_asn_acc_qty, 	 wms_asn_rej_qty, 
		wms_asn_thu_srl_no, 	wms_asn_uid, 	  		  wms_asn_rem, 				 wms_asn_itm_height, wms_asn_itm_volume, 
		wms_asn_itm_weight, 	wms_asn_outboundorder_no, wms_asn_outboundorder_qty, wms_asn_consignee,  wms_asn_outboundorder_lineno, 
		wms_asn_bestbeforedate, etlcreateddatetime
    )
    SELECT
        wms_asn_ou, 			wms_asn_location, 		  wms_asn_no, 				 wms_asn_amendno, 	 wms_asn_lineno, 
		wms_asn_line_status, 	wms_asn_itm_code, 		  wms_asn_qty, 				 wms_asn_batch_no, 	 wms_asn_srl_no, 
		wms_asn_manfct_date, 	wms_asn_exp_date, 		  wms_asn_thu_id, 			 wms_asn_thu_desc, 	 wms_asn_thu_qty, 
		wms_po_lineno, 			wms_gr_flag, 	  		  wms_asn_rec_qty, 			 wms_asn_acc_qty, 	 wms_asn_rej_qty, 
		wms_asn_thu_srl_no, 	wms_asn_uid, 	  		  wms_asn_rem, 				 wms_asn_itm_height, wms_asn_itm_volume, 
		wms_asn_itm_weight, 	wms_asn_outboundorder_no, wms_asn_outboundorder_qty, wms_asn_consignee,  wms_asn_outboundorder_lineno, 
		wms_asn_bestbeforedate, etlcreateddatetime
    FROM stg.stg_wms_asn_detail_h;
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_asndetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asndetailhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asndetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
    p_interval integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource,d.intervaldays 
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource,p_interval
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_asn_detail_h;
    

    UPDATE dwh.F_ASNDetailHistory t
    SET
		asn_hdr_hst_key    			 = fh.asn_hdr_hst_key,
        asn_dtl_hst_loc_key 		 = COALESCE(l.loc_key,-1),
		asn_dtl_hst_itm_hdr_key 	 = COALESCE(i.itm_hdr_key,-1),
		asn_dtl_hst_thu_key 		 = COALESCE(th.thu_key,-1),
        asn_itm_code                 = s.wms_asn_itm_code,
        asn_qty                      = s.wms_asn_qty,
        asn_batch_no                 = s.wms_asn_batch_no,
        asn_srl_no                   = s.wms_asn_srl_no,
        asn_exp_date                 = s.wms_asn_exp_date,
        asn_thu_id                   = s.wms_asn_thu_id,
        asn_thu_desc                 = s.wms_asn_thu_desc,
        asn_thu_qty                  = s.wms_asn_thu_qty,
        po_lineno                    = s.wms_po_lineno,
        asn_rem                      = s.wms_asn_rem,
        asn_itm_height               = s.wms_asn_itm_height,
        asn_itm_volume               = s.wms_asn_itm_volume,
        asn_itm_weight               = s.wms_asn_itm_weight,
        asn_outboundorder_qty        = s.wms_asn_outboundorder_qty,
        asn_bestbeforedate           = s.wms_asn_bestbeforedate,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_wms_asn_detail_h s
	INNER JOIN 	dwh.f_asnheaderhistory fh 
			ON  s.wms_asn_ou 		= fh.asn_ou 
			AND s.wms_asn_location 	= fh.asn_location 
			AND s.wms_asn_no 		= fh.asn_no
			AND s.wms_asn_amendno 	= fh.asn_amendno
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_asn_itm_code  = i.itm_code
		AND s.wms_asn_ou        = i.itm_ou
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_asn_thu_id  	= th.thu_id
		AND s.wms_asn_ou 		= th.thu_ou
    WHERE   t.asn_ou 		= s.wms_asn_ou
    AND 	t.asn_location  = s.wms_asn_location
    AND 	t.asn_no 		= s.wms_asn_no
    AND 	t.asn_amendno 	= s.wms_asn_amendno
    AND 	t.asn_lineno 	= s.wms_asn_lineno;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
    SELECT 0 INTO updcnt ;

    Delete from dwh.F_ASNDetailHistory t
	USING stg.stg_wms_asn_detail_h s
	where   t.asn_ou 		= s.wms_asn_ou
    AND 	t.asn_location  = s.wms_asn_location
    AND 	t.asn_no 		= s.wms_asn_no
    AND 	t.asn_amendno 	= s.wms_asn_amendno
    AND 	t.asn_lineno 	= s.wms_asn_lineno;
	--and COALESCE(h.asn_modified_date,h.asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    INSERT INTO dwh.F_ASNDetailHistory
    (
		asn_hdr_hst_key,	  	asn_dtl_hst_loc_key,		asn_dtl_hst_itm_hdr_key,asn_dtl_hst_thu_key,
        asn_ou, 				asn_location, 				asn_no, 				asn_amendno, 	asn_lineno, 	asn_itm_code, 
		asn_qty, 				asn_batch_no, 				asn_srl_no, 			asn_exp_date, 	asn_thu_id, 	asn_thu_desc, 
		asn_thu_qty, 			po_lineno, 					asn_rem, 				asn_itm_height, asn_itm_volume, 
		asn_itm_weight, 		asn_outboundorder_qty, 		asn_bestbeforedate, 	etlactiveind, 	etljobname, 
		envsourcecd, 			datasourcecd, 				etlcreatedatetime
    )

    SELECT
		fh.asn_hdr_hst_key,		COALESCE(l.loc_key,-1),	COALESCE(i.itm_hdr_key,-1),	COALESCE(th.thu_key,-1),
        s.wms_asn_ou, 			s.wms_asn_location, 	s.wms_asn_no, 			s.wms_asn_amendno, 			 s.wms_asn_lineno, 
		s.wms_asn_itm_code, 	s.wms_asn_qty, 			s.wms_asn_batch_no, 	s.wms_asn_srl_no, 			 s.wms_asn_exp_date, 
		s.wms_asn_thu_id, 		s.wms_asn_thu_desc, 	s.wms_asn_thu_qty, 		s.wms_po_lineno, 			 s.wms_asn_rem, 
		s.wms_asn_itm_height, 	s.wms_asn_itm_volume, 	s.wms_asn_itm_weight,   s.wms_asn_outboundorder_qty, s.wms_asn_bestbeforedate, 
		1, 						p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 			 NOW()
    FROM stg.stg_wms_asn_detail_h s
	INNER JOIN 	dwh.f_asnheaderhistory fh 
			ON  s.wms_asn_ou 		= fh.asn_ou 
			AND s.wms_asn_location 	= fh.asn_location 
			AND s.wms_asn_no 		= fh.asn_no
			AND s.wms_asn_amendno 	= fh.asn_amendno
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_asn_itm_code  = i.itm_code
		AND s.wms_asn_ou        = i.itm_ou
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_asn_thu_id  	= th.thu_id
		AND s.wms_asn_ou 		= th.thu_ou  
    LEFT JOIN dwh.F_ASNDetailHistory t
    ON 		s.wms_asn_ou 		= t.asn_ou
    AND 	s.wms_asn_location  = t.asn_location
    AND 	s.wms_asn_no 		= t.asn_no
    AND 	s.wms_asn_amendno 	= t.asn_amendno
    AND 	s.wms_asn_lineno 	= t.asn_lineno
    WHERE t.asn_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
/*	
	
	UPDATE	dwh.F_ASNDetailHistory s
    SET		asn_hdr_hst_key		= fh.asn_hdr_hst_key,
	 		etlupdatedatetime	= NOW()
    FROM	dwh.f_asnheaderhistory fh  
    WHERE	s.asn_ou 			= fh.asn_ou 
	AND		s.asn_location 		= fh.asn_location 
	AND		s.asn_no 			= fh.asn_no
	AND		s.asn_amendno 		= fh.asn_amendno
    AND		COALESCE(fh.asn_modified_date,fh.asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
*/	

     UPDATE dwh.f_asndetailhistory t1
     SET etlactiveind =  0,
     etlupdatedatetime = Now()::timestamp
     FROM dwh.f_asndetailhistory t
     LEFT join stg.stg_wms_asn_detail_h s
     ON      t.asn_ou       = s.wms_asn_ou
    AND     t.asn_location  = s.wms_asn_location
    AND     t.asn_no        = s.wms_asn_no
    AND     t.asn_amendno   = s.wms_asn_amendno
    AND     t.asn_lineno    = s.wms_asn_lineno
     WHERE t.asn_dtl_hst_key = t1.asn_dtl_hst_key
     AND   COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
     AND  s.wms_asn_ou is null;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_asn_detail_h
    (
        wms_asn_ou, 			wms_asn_location, 		  wms_asn_no, 				 wms_asn_amendno, 	 wms_asn_lineno, 
		wms_asn_line_status, 	wms_asn_itm_code, 		  wms_asn_qty, 				 wms_asn_batch_no, 	 wms_asn_srl_no, 
		wms_asn_manfct_date, 	wms_asn_exp_date, 		  wms_asn_thu_id, 			 wms_asn_thu_desc, 	 wms_asn_thu_qty, 
		wms_po_lineno, 			wms_gr_flag, 	  		  wms_asn_rec_qty, 			 wms_asn_acc_qty, 	 wms_asn_rej_qty, 
		wms_asn_thu_srl_no, 	wms_asn_uid, 	  		  wms_asn_rem, 				 wms_asn_itm_height, wms_asn_itm_volume, 
		wms_asn_itm_weight, 	wms_asn_outboundorder_no, wms_asn_outboundorder_qty, wms_asn_consignee,  wms_asn_outboundorder_lineno, 
		wms_asn_bestbeforedate, etlcreateddatetime
    )
    SELECT
        wms_asn_ou, 			wms_asn_location, 		  wms_asn_no, 				 wms_asn_amendno, 	 wms_asn_lineno, 
		wms_asn_line_status, 	wms_asn_itm_code, 		  wms_asn_qty, 				 wms_asn_batch_no, 	 wms_asn_srl_no, 
		wms_asn_manfct_date, 	wms_asn_exp_date, 		  wms_asn_thu_id, 			 wms_asn_thu_desc, 	 wms_asn_thu_qty, 
		wms_po_lineno, 			wms_gr_flag, 	  		  wms_asn_rec_qty, 			 wms_asn_acc_qty, 	 wms_asn_rej_qty, 
		wms_asn_thu_srl_no, 	wms_asn_uid, 	  		  wms_asn_rem, 				 wms_asn_itm_height, wms_asn_itm_volume, 
		wms_asn_itm_weight, 	wms_asn_outboundorder_no, wms_asn_outboundorder_qty, wms_asn_consignee,  wms_asn_outboundorder_lineno, 
		wms_asn_bestbeforedate, etlcreateddatetime
    FROM stg.stg_wms_asn_detail_h;
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_asndetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asndetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asndetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
		SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_asn_detail;

		UPDATE dwh.f_asndetails t
		SET 
			  asn_hr_key					= fh.asn_hr_key
			, asn_dtl_loc_key				= COALESCE(l.loc_key,-1)
			, asn_dtl_itm_hdr_key			= COALESCE(it.itm_hdr_key,-1)
			, asn_dtl_thu_key				= COALESCE(dt.thu_key,-1)
			, asn_dtl_uom_key				= COALESCE(u.uom_key,-1)
			, asn_line_status 				= s.wms_asn_line_status
			, asn_itm_code 					= s.wms_asn_itm_code
			, asn_qty 						= s.wms_asn_qty
			, asn_batch_no 					= s.wms_asn_batch_no
			, asn_srl_no 					= s.wms_asn_srl_no
			, asn_manfct_date 				= s.wms_asn_manfct_date
			, asn_exp_date 					= s.wms_asn_exp_date
			, asn_thu_id 					= s.wms_asn_thu_id
			, asn_thu_desc 					= s.wms_asn_thu_desc
			, asn_thu_qty 					= s.wms_asn_thu_qty
			, po_lineno 					= s.wms_po_lineno
			, gr_flag 						= s.wms_gr_flag
			, asn_rec_qty 					= s.wms_asn_rec_qty
			, asn_acc_qty 					= s.wms_asn_acc_qty
			, asn_rej_qty 					= s.wms_asn_rej_qty
			, asn_thu_srl_no 				= s.wms_asn_thu_srl_no
			, asn_rem 						= s.wms_asn_rem
			, asn_itm_height 				= s.wms_asn_itm_height
			, asn_itm_volume 				= s.wms_asn_itm_volume
			, asn_itm_weight 				= s.wms_asn_itm_weight
			, asn_order_uom 				= s.wms_asn_order_uom
			, asn_master_uom_qty 			= s.wms_asn_master_uom_qty
			, asn_cust_sl_no 				= s.wms_asn_cust_sl_no
			, asn_ref_doc_no1 				= s.wms_asn_ref_doc_no1
			, asn_outboundorder_qty 		= s.wms_asn_outboundorder_qty
			, asn_bestbeforedate 			= s.wms_asn_bestbeforedate
			, asn_itm_length 				= s.wms_asn_itm_length
			, asn_itm_breadth 				= s.wms_asn_itm_breadth
			, asn_heightuom 				= s.wms_asn_heightuom
			, asn_weightuom 				= s.wms_asn_weightuom
			, asn_volumeuom 				= s.wms_asn_volumeuom
			, asn_user_def_1 				= s.wms_asn_user_def_1
			, asn_user_def_2 				= s.wms_asn_user_def_2
			, asn_user_def_3 				= s.wms_asn_user_def_3
			, asn_hold 						= s.wms_asn_hold
			, asn_stock_status 				= s.wms_asn_stock_status
			, asn_product_status 			= s.wms_asn_product_status
			, asn_coo 						= s.wms_asn_coo
			, asn_item_attribute1 			= s.wms_asn_item_attribute1
			, asn_item_attribute2 			= s.wms_asn_item_attribute2
			, asn_item_attribute3 			= s.wms_asn_item_attribute3
			, asn_itm_cust 					= s.wms_asn_itm_cust
			, asn_cust_po_lineno 			= s.wms_asn_cust_po_lineno
			, inb_wr_serial_no 				= s.wms_inb_wr_serial_no
			, asn_lottable1 				= s.wms_asn_lottable1
			, asn_lottable2 				= s.wms_asn_lottable2
			, asn_lottable3 				= s.wms_asn_lottable3
			, asn_item_attribute6 			= s.wms_asn_item_attribute6
			, asn_item_attribute7 			= s.wms_asn_item_attribute7
			, asn_item_attribute9 			= s.wms_asn_item_attribute9
			, asn_component 				= s.wms_asn_component
			, etlactiveind 					= 1
			, etljobname 					= p_etljobname
			, envsourcecd 					= p_envsourcecd
			, datasourcecd 					= p_datasourcecd
			, etlupdatedatetime 			= NOW()	
		FROM stg.stg_wms_asn_detail s
		INNER JOIN 	dwh.f_asnheader fh 
			ON  s.wms_asn_ou 				= fh.asn_ou 
			AND s.wms_asn_location 			= fh.asn_location 
			AND s.wms_asn_no 				= fh.asn_no
		LEFT JOIN dwh.d_location L 		
			ON s.wms_asn_location 			= L.loc_code 
			AND s.wms_asn_ou        		= L.loc_ou
		LEFT JOIN dwh.d_itemheader it 			
			ON s.wms_asn_itm_code 			= it.itm_code
			AND s.wms_asn_ou        		= it.itm_ou
		LEFT JOIN dwh.d_thu dt 		
			ON s.wms_asn_thu_id  			= dt.thu_id 
			AND s.wms_asn_ou        		= dt.thu_ou
		LEFT JOIN dwh.d_uom u 		
			ON s.wms_asn_order_uom  		= u.mas_uomcode 
			AND s.wms_asn_ou        		= u.mas_ouinstance	
		WHERE t.asn_ou 						= s.wms_asn_ou
			AND	t.asn_location 				= s.wms_asn_location
			AND	t.asn_no 					= s.wms_asn_no
			AND	t.asn_lineno 				= s.wms_asn_lineno;
		
		
		GET DIAGNOSTICS updcnt = ROW_COUNT;
/*

		DELETE FROM dwh.f_asndetails fd
		USING 	stg.stg_wms_asn_detail s
			where  s.wms_asn_ou 		= fd.asn_ou 
			AND s.wms_asn_location 		= fd.asn_location 
			AND s.wms_asn_no 			= fd.asn_no
			and s.wms_asn_lineno       	= fd.asn_lineno;
-- 	AND 	COALESCE(fh.asn_modified_date,fh.asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
*/	
		INSERT INTO dwh.f_asndetails
		(
			  asn_hr_key				, asn_dtl_loc_key			, asn_dtl_itm_hdr_key		, asn_dtl_thu_key			, asn_dtl_uom_key 		
			, asn_itm_itemgroup			, asn_itm_class			
			, asn_ou					, asn_location				, asn_no					, asn_lineno
			, asn_line_status			, asn_itm_code				, asn_qty					, asn_batch_no				, asn_srl_no
			, asn_manfct_date			, asn_exp_date				, asn_thu_id				, asn_thu_desc				, asn_thu_qty
			, po_lineno					, gr_flag					, asn_rec_qty				, asn_acc_qty				, asn_rej_qty
			, asn_thu_srl_no			, asn_rem					, asn_itm_height			, asn_itm_volume			, asn_itm_weight
			, asn_order_uom				, asn_master_uom_qty		, asn_cust_sl_no			, asn_ref_doc_no1			, asn_outboundorder_qty
			, asn_bestbeforedate		, asn_itm_length			, asn_itm_breadth			, asn_heightuom				, asn_weightuom
			, asn_volumeuom				, asn_user_def_1			, asn_user_def_2			, asn_user_def_3			, asn_hold
			, asn_stock_status			, asn_product_status		, asn_coo					, asn_item_attribute1		, asn_item_attribute2
			, asn_item_attribute3		, asn_itm_cust				, asn_cust_po_lineno		, inb_wr_serial_no			, asn_lottable1
			, asn_lottable2				, asn_lottable3				, asn_item_attribute6		, asn_item_attribute7		, asn_item_attribute9
			, asn_component				, etlactiveind				, etljobname				, envsourcecd				, datasourcecd	, etlcreatedatetime
		)
		

		SELECT 
			  fh.asn_hr_key				, COALESCE(l.loc_key,-1)	,COALESCE(it.itm_hdr_key,-1),COALESCE(dt.thu_key,-1)	,COALESCE(u.uom_key,-1) 		
			, it.itm_itemgroup			, it.itm_class
			, s.wms_asn_ou				, s.wms_asn_location		, s.wms_asn_no				, s.wms_asn_lineno
			, s.wms_asn_line_status		, s.wms_asn_itm_code		, s.wms_asn_qty				, s.wms_asn_batch_no		, s.wms_asn_srl_no
			, s.wms_asn_manfct_date		, s.wms_asn_exp_date		, s.wms_asn_thu_id			, s.wms_asn_thu_desc		, s.wms_asn_thu_qty
			, s.wms_po_lineno			, s.wms_gr_flag				, s.wms_asn_rec_qty			, s.wms_asn_acc_qty			, s.wms_asn_rej_qty
			, s.wms_asn_thu_srl_no		, s.wms_asn_rem				, s.wms_asn_itm_height		, s.wms_asn_itm_volume		, s.wms_asn_itm_weight
			, s.wms_asn_order_uom		, s.wms_asn_master_uom_qty	, s.wms_asn_cust_sl_no		, s.wms_asn_ref_doc_no1		, s.wms_asn_outboundorder_qty
			, s.wms_asn_bestbeforedate	, s.wms_asn_itm_length		, s.wms_asn_itm_breadth		, s.wms_asn_heightuom		, s.wms_asn_weightuom
			, s.wms_asn_volumeuom		, s.wms_asn_user_def_1		, s.wms_asn_user_def_2		, s.wms_asn_user_def_3		, s.wms_asn_hold
			, s.wms_asn_stock_status	, s.wms_asn_product_status	, s.wms_asn_coo				, s.wms_asn_item_attribute1	, s.wms_asn_item_attribute2
			, s.wms_asn_item_attribute3	, s.wms_asn_itm_cust		, s.wms_asn_cust_po_lineno	, s.wms_inb_wr_serial_no	, s.wms_asn_lottable1
			, s.wms_asn_lottable2		, s.wms_asn_lottable3		, s.wms_asn_item_attribute6	, s.wms_asn_item_attribute7	, s.wms_asn_item_attribute9
			, s.wms_asn_component		, 1 AS etlactiveind			, p_etljobname				, p_envsourcecd				, p_datasourcecd	, NOW()
		FROM stg.stg_wms_asn_detail s
		INNER JOIN dwh.f_asnheader fh 
			ON  s.wms_asn_location 			= fh.asn_location
			AND s.wms_asn_ou 				= fh.asn_ou 
			AND s.wms_asn_no 				= fh.asn_no
		LEFT JOIN dwh.d_location L 		
			ON s.wms_asn_location 			= L.loc_code 
			AND s.wms_asn_ou        		= L.loc_ou
		LEFT JOIN dwh.d_itemheader it 			
			ON s.wms_asn_itm_code 			= it.itm_code
			AND s.wms_asn_ou        		= it.itm_ou
		LEFT JOIN dwh.d_thu dt 		
			ON s.wms_asn_thu_id  			= dt.thu_id 
			AND s.wms_asn_ou        		= dt.thu_ou
		LEFT JOIN dwh.d_uom u 		
			ON s.wms_asn_order_uom  		= u.mas_uomcode 
			AND s.wms_asn_ou        		= u.mas_ouinstance
		LEFT JOIN dwh.f_asndetails fd  	
			ON  s.wms_asn_ou 					= fd.asn_ou 
			AND s.wms_asn_location 				= fd.asn_location 
			AND s.wms_asn_no 					= fd.asn_no
			and s.wms_asn_lineno       			= fd.asn_lineno
		WHERE fd.asn_no IS NULL;
		
		GET DIAGNOSTICS inscnt = ROW_COUNT;
/*
    SELECT 0 INTO updcnt;
		
		update dwh.f_asndetails a
		set asn_hr_key			=	b.asn_hr_key,
		 	etlupdatedatetime	=	now()
		from dwh.f_asnheader b
		where 	b.asn_ou			=	a.asn_ou
		and 	b.asn_location		=	a.asn_location
		and 	b.asn_no			=	a.asn_no
		and COALESCE(b.asn_modified_date,b.asn_created_date)::DATE>=(CURRENT_DATE - INTERVAL '90 days')::DATE;
*/		
    IF p_rawstorageflag = 1
    THEN
		
		INSERT INTO raw.raw_wms_asn_detail
		(
			wms_asn_ou					, wms_asn_location			, wms_asn_no				, wms_asn_lineno				, wms_asn_line_status, 
			wms_asn_itm_code			, wms_asn_qty				, wms_asn_batch_no			, wms_asn_srl_no				, wms_asn_manfct_date, 
			wms_asn_exp_date			, wms_asn_thu_id			, wms_asn_thu_desc			, wms_asn_thu_qty				, wms_po_lineno, 
			wms_gr_flag					, wms_asn_rec_qty			, wms_asn_acc_qty			, wms_asn_rej_qty				, wms_asn_thu_srl_no, 
			wms_asn_uid					, wms_asn_rem				, wms_asn_itm_height		, wms_asn_itm_volume			, wms_asn_itm_weight, 
			wms_asn_customer_item_code	, wms_asn_order_uom			, wms_asn_master_uom_qty	, wms_asn_cust_sl_no			, wms_asn_ref_doc_no1, 
			wms_asn_outboundorder_no	, wms_asn_outboundorder_qty	, wms_asn_consignee			, wms_asn_outboundorder_lineno	, wms_asn_bestbeforedate, 
			wms_asn_itm_length			, wms_asn_itm_breadth		, wms_asn_heightuom			, wms_asn_weightuom				, wms_asn_volumeuom, 
			wms_asn_user_def_1			, wms_asn_user_def_2		, wms_asn_user_def_3		, wms_asn_hold					, wms_asn_stock_status, 
			wms_asn_inv_type			, wms_asn_product_status	, wms_asn_coo				, wms_asn_item_attribute1		, wms_asn_item_attribute2, 
			wms_asn_item_attribute3		, wms_asn_item_attribute4	, wms_asn_item_attribute5	, wms_asn_itm_cust				, wms_asn_cust_po_lineno, 
			wms_inb_wr_serial_no		, wms_asn_item_lineno		, wms_asn_ratio				, wms_asn_lottable1				, wms_asn_lottable2, 
			wms_asn_lottable3			, wms_asn_lottable4			, wms_asn_lottable5			, wms_asn_item_attribute6		, wms_asn_item_attribute7, 
			wms_asn_item_attribute8		, wms_asn_item_attribute9	, wms_asn_item_attribute10	, wms_asn_component				, wms_asn_uid2, 
			wms_asn_su1					, wms_asn_su2				, wms_asn_lottable10		, wms_asn_lottable9				, wms_asn_lottable8, 
			wms_asn_lottable7			, wms_asn_lottable6			, etlcreateddatetime
		
		)
		SELECT 
			wms_asn_ou					, wms_asn_location			, wms_asn_no				, wms_asn_lineno				, wms_asn_line_status, 
			wms_asn_itm_code			, wms_asn_qty				, wms_asn_batch_no			, wms_asn_srl_no				, wms_asn_manfct_date, 
			wms_asn_exp_date			, wms_asn_thu_id			, wms_asn_thu_desc			, wms_asn_thu_qty				, wms_po_lineno, 
			wms_gr_flag					, wms_asn_rec_qty			, wms_asn_acc_qty			, wms_asn_rej_qty				, wms_asn_thu_srl_no, 
			wms_asn_uid					, wms_asn_rem				, wms_asn_itm_height		, wms_asn_itm_volume			, wms_asn_itm_weight, 
			wms_asn_customer_item_code	, wms_asn_order_uom			, wms_asn_master_uom_qty	, wms_asn_cust_sl_no			, wms_asn_ref_doc_no1, 
			wms_asn_outboundorder_no	, wms_asn_outboundorder_qty	, wms_asn_consignee			, wms_asn_outboundorder_lineno	, wms_asn_bestbeforedate, 
			wms_asn_itm_length			, wms_asn_itm_breadth		, wms_asn_heightuom			, wms_asn_weightuom				, wms_asn_volumeuom, 
			wms_asn_user_def_1			, wms_asn_user_def_2		, wms_asn_user_def_3		, wms_asn_hold					, wms_asn_stock_status, 
			wms_asn_inv_type			, wms_asn_product_status	, wms_asn_coo				, wms_asn_item_attribute1		, wms_asn_item_attribute2, 
			wms_asn_item_attribute3		, wms_asn_item_attribute4	, wms_asn_item_attribute5	, wms_asn_itm_cust				, wms_asn_cust_po_lineno, 
			wms_inb_wr_serial_no		, wms_asn_item_lineno		, wms_asn_ratio				, wms_asn_lottable1				, wms_asn_lottable2, 
			wms_asn_lottable3			, wms_asn_lottable4			, wms_asn_lottable5			, wms_asn_item_attribute6		, wms_asn_item_attribute7, 
			wms_asn_item_attribute8		, wms_asn_item_attribute9	, wms_asn_item_attribute10	, wms_asn_component				, wms_asn_uid2, 
			wms_asn_su1					, wms_asn_su2				, wms_asn_lottable10		, wms_asn_lottable9				, wms_asn_lottable8, 
			wms_asn_lottable7			, wms_asn_lottable6			, etlcreateddatetime
		FROM stg.stg_wms_asn_detail;
    END IF;	
		
	    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
		
	EXCEPTION WHEN others THEN       
		   
	GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
			
	CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
			
	SELECT 0 INTO inscnt;
	SELECT 0 INTO updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_asndetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asndetailsweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asndetailsweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
	p_interval integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource, d.intervaldays
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource, p_interval
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
		SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_asn_detail;

		UPDATE dwh.f_asndetails t
		SET 
			  asn_hr_key					= fh.asn_hr_key
			, asn_dtl_loc_key				= COALESCE(l.loc_key,-1)
			, asn_dtl_itm_hdr_key			= COALESCE(it.itm_hdr_key,-1)
			, asn_dtl_thu_key				= COALESCE(dt.thu_key,-1)
			, asn_dtl_uom_key				= COALESCE(u.uom_key,-1)
			, asn_line_status 				= s.wms_asn_line_status
			, asn_itm_code 					= s.wms_asn_itm_code
			, asn_qty 						= s.wms_asn_qty
			, asn_batch_no 					= s.wms_asn_batch_no
			, asn_srl_no 					= s.wms_asn_srl_no
			, asn_manfct_date 				= s.wms_asn_manfct_date
			, asn_exp_date 					= s.wms_asn_exp_date
			, asn_thu_id 					= s.wms_asn_thu_id
			, asn_thu_desc 					= s.wms_asn_thu_desc
			, asn_thu_qty 					= s.wms_asn_thu_qty
			, po_lineno 					= s.wms_po_lineno
			, gr_flag 						= s.wms_gr_flag
			, asn_rec_qty 					= s.wms_asn_rec_qty
			, asn_acc_qty 					= s.wms_asn_acc_qty
			, asn_rej_qty 					= s.wms_asn_rej_qty
			, asn_thu_srl_no 				= s.wms_asn_thu_srl_no
			, asn_rem 						= s.wms_asn_rem
			, asn_itm_height 				= s.wms_asn_itm_height
			, asn_itm_volume 				= s.wms_asn_itm_volume
			, asn_itm_weight 				= s.wms_asn_itm_weight
			, asn_order_uom 				= s.wms_asn_order_uom
			, asn_master_uom_qty 			= s.wms_asn_master_uom_qty
			, asn_cust_sl_no 				= s.wms_asn_cust_sl_no
			, asn_ref_doc_no1 				= s.wms_asn_ref_doc_no1
			, asn_outboundorder_qty 		= s.wms_asn_outboundorder_qty
			, asn_bestbeforedate 			= s.wms_asn_bestbeforedate
			, asn_itm_length 				= s.wms_asn_itm_length
			, asn_itm_breadth 				= s.wms_asn_itm_breadth
			, asn_heightuom 				= s.wms_asn_heightuom
			, asn_weightuom 				= s.wms_asn_weightuom
			, asn_volumeuom 				= s.wms_asn_volumeuom
			, asn_user_def_1 				= s.wms_asn_user_def_1
			, asn_user_def_2 				= s.wms_asn_user_def_2
			, asn_user_def_3 				= s.wms_asn_user_def_3
			, asn_hold 						= s.wms_asn_hold
			, asn_stock_status 				= s.wms_asn_stock_status
			, asn_product_status 			= s.wms_asn_product_status
			, asn_coo 						= s.wms_asn_coo
			, asn_item_attribute1 			= s.wms_asn_item_attribute1
			, asn_item_attribute2 			= s.wms_asn_item_attribute2
			, asn_item_attribute3 			= s.wms_asn_item_attribute3
			, asn_itm_cust 					= s.wms_asn_itm_cust
			, asn_cust_po_lineno 			= s.wms_asn_cust_po_lineno
			, inb_wr_serial_no 				= s.wms_inb_wr_serial_no
			, asn_lottable1 				= s.wms_asn_lottable1
			, asn_lottable2 				= s.wms_asn_lottable2
			, asn_lottable3 				= s.wms_asn_lottable3
			, asn_item_attribute6 			= s.wms_asn_item_attribute6
			, asn_item_attribute7 			= s.wms_asn_item_attribute7
			, asn_item_attribute9 			= s.wms_asn_item_attribute9
			, asn_component 				= s.wms_asn_component
			, etlactiveind 					= 1
			, etljobname 					= p_etljobname
			, envsourcecd 					= p_envsourcecd
			, datasourcecd 					= p_datasourcecd
			, etlupdatedatetime 			= NOW()	
		FROM stg.stg_wms_asn_detail s
		INNER JOIN 	dwh.f_asnheader fh 
			ON  s.wms_asn_ou 				= fh.asn_ou 
			AND s.wms_asn_location 			= fh.asn_location 
			AND s.wms_asn_no 				= fh.asn_no
		LEFT JOIN dwh.d_location L 		
			ON s.wms_asn_location 			= L.loc_code 
			AND s.wms_asn_ou        		= L.loc_ou
		LEFT JOIN dwh.d_itemheader it 			
			ON s.wms_asn_itm_code 			= it.itm_code
			AND s.wms_asn_ou        		= it.itm_ou
		LEFT JOIN dwh.d_thu dt 		
			ON s.wms_asn_thu_id  			= dt.thu_id 
			AND s.wms_asn_ou        		= dt.thu_ou
		LEFT JOIN dwh.d_uom u 		
			ON s.wms_asn_order_uom  		= u.mas_uomcode 
			AND s.wms_asn_ou        		= u.mas_ouinstance	
		WHERE t.asn_ou 						= s.wms_asn_ou
			AND	t.asn_location 				= s.wms_asn_location
			AND	t.asn_no 					= s.wms_asn_no
			AND	t.asn_lineno 				= s.wms_asn_lineno;
		
		
		GET DIAGNOSTICS updcnt = ROW_COUNT;
/*

		DELETE FROM dwh.f_asndetails fd
		USING 	stg.stg_wms_asn_detail s
			where  s.wms_asn_ou 		= fd.asn_ou 
			AND s.wms_asn_location 		= fd.asn_location 
			AND s.wms_asn_no 			= fd.asn_no
			and s.wms_asn_lineno       	= fd.asn_lineno;
-- 	AND 	COALESCE(fh.asn_modified_date,fh.asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
*/	
		INSERT INTO dwh.f_asndetails
		(
			  asn_hr_key				, asn_dtl_loc_key			, asn_dtl_itm_hdr_key		, asn_dtl_thu_key			, asn_dtl_uom_key 		
			, asn_itm_itemgroup			, asn_itm_class			
			, asn_ou					, asn_location				, asn_no					, asn_lineno
			, asn_line_status			, asn_itm_code				, asn_qty					, asn_batch_no				, asn_srl_no
			, asn_manfct_date			, asn_exp_date				, asn_thu_id				, asn_thu_desc				, asn_thu_qty
			, po_lineno					, gr_flag					, asn_rec_qty				, asn_acc_qty				, asn_rej_qty
			, asn_thu_srl_no			, asn_rem					, asn_itm_height			, asn_itm_volume			, asn_itm_weight
			, asn_order_uom				, asn_master_uom_qty		, asn_cust_sl_no			, asn_ref_doc_no1			, asn_outboundorder_qty
			, asn_bestbeforedate		, asn_itm_length			, asn_itm_breadth			, asn_heightuom				, asn_weightuom
			, asn_volumeuom				, asn_user_def_1			, asn_user_def_2			, asn_user_def_3			, asn_hold
			, asn_stock_status			, asn_product_status		, asn_coo					, asn_item_attribute1		, asn_item_attribute2
			, asn_item_attribute3		, asn_itm_cust				, asn_cust_po_lineno		, inb_wr_serial_no			, asn_lottable1
			, asn_lottable2				, asn_lottable3				, asn_item_attribute6		, asn_item_attribute7		, asn_item_attribute9
			, asn_component				, etlactiveind				, etljobname				, envsourcecd				, datasourcecd	, etlcreatedatetime
		)
		

		SELECT 
			  fh.asn_hr_key				, COALESCE(l.loc_key,-1)	,COALESCE(it.itm_hdr_key,-1),COALESCE(dt.thu_key,-1)	,COALESCE(u.uom_key,-1) 		
			, it.itm_itemgroup			, it.itm_class
			, s.wms_asn_ou				, s.wms_asn_location		, s.wms_asn_no				, s.wms_asn_lineno
			, s.wms_asn_line_status		, s.wms_asn_itm_code		, s.wms_asn_qty				, s.wms_asn_batch_no		, s.wms_asn_srl_no
			, s.wms_asn_manfct_date		, s.wms_asn_exp_date		, s.wms_asn_thu_id			, s.wms_asn_thu_desc		, s.wms_asn_thu_qty
			, s.wms_po_lineno			, s.wms_gr_flag				, s.wms_asn_rec_qty			, s.wms_asn_acc_qty			, s.wms_asn_rej_qty
			, s.wms_asn_thu_srl_no		, s.wms_asn_rem				, s.wms_asn_itm_height		, s.wms_asn_itm_volume		, s.wms_asn_itm_weight
			, s.wms_asn_order_uom		, s.wms_asn_master_uom_qty	, s.wms_asn_cust_sl_no		, s.wms_asn_ref_doc_no1		, s.wms_asn_outboundorder_qty
			, s.wms_asn_bestbeforedate	, s.wms_asn_itm_length		, s.wms_asn_itm_breadth		, s.wms_asn_heightuom		, s.wms_asn_weightuom
			, s.wms_asn_volumeuom		, s.wms_asn_user_def_1		, s.wms_asn_user_def_2		, s.wms_asn_user_def_3		, s.wms_asn_hold
			, s.wms_asn_stock_status	, s.wms_asn_product_status	, s.wms_asn_coo				, s.wms_asn_item_attribute1	, s.wms_asn_item_attribute2
			, s.wms_asn_item_attribute3	, s.wms_asn_itm_cust		, s.wms_asn_cust_po_lineno	, s.wms_inb_wr_serial_no	, s.wms_asn_lottable1
			, s.wms_asn_lottable2		, s.wms_asn_lottable3		, s.wms_asn_item_attribute6	, s.wms_asn_item_attribute7	, s.wms_asn_item_attribute9
			, s.wms_asn_component		, 1 AS etlactiveind			, p_etljobname				, p_envsourcecd				, p_datasourcecd	, NOW()
		FROM stg.stg_wms_asn_detail s
		INNER JOIN dwh.f_asnheader fh 
			ON  s.wms_asn_location 			= fh.asn_location
			AND s.wms_asn_ou 				= fh.asn_ou 
			AND s.wms_asn_no 				= fh.asn_no
		LEFT JOIN dwh.d_location L 		
			ON s.wms_asn_location 			= L.loc_code 
			AND s.wms_asn_ou        		= L.loc_ou
		LEFT JOIN dwh.d_itemheader it 			
			ON s.wms_asn_itm_code 			= it.itm_code
			AND s.wms_asn_ou        		= it.itm_ou
		LEFT JOIN dwh.d_thu dt 		
			ON s.wms_asn_thu_id  			= dt.thu_id 
			AND s.wms_asn_ou        		= dt.thu_ou
		LEFT JOIN dwh.d_uom u 		
			ON s.wms_asn_order_uom  		= u.mas_uomcode 
			AND s.wms_asn_ou        		= u.mas_ouinstance
		LEFT JOIN dwh.f_asndetails fd  	
			ON  s.wms_asn_ou 					= fd.asn_ou 
			AND s.wms_asn_location 				= fd.asn_location 
			AND s.wms_asn_no 					= fd.asn_no
			and s.wms_asn_lineno       			= fd.asn_lineno
		WHERE fd.asn_no IS NULL;
		
		GET DIAGNOSTICS inscnt = ROW_COUNT;
		
		update dwh.f_asndetails t1
		 set etlactiveind =  0,
		etlupdatedatetime = Now()::timestamp
		from dwh.f_asndetails t
		left join stg.stg_wms_asn_detail s
		on t.asn_ou 					= s.wms_asn_ou
		AND	t.asn_location 				= s.wms_asn_location
		AND	t.asn_no 					= s.wms_asn_no
		AND	t.asn_lineno 				= s.wms_asn_lineno
		and t.asn_hr_key				= t1.asn_hr_key
		WHERE COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
		AND s.wms_asn_ou IS NULL;
		
/*
    SELECT 0 INTO updcnt;
		
		update dwh.f_asndetails a
		set asn_hr_key			=	b.asn_hr_key,
		 	etlupdatedatetime	=	now()
		from dwh.f_asnheader b
		where 	b.asn_ou			=	a.asn_ou
		and 	b.asn_location		=	a.asn_location
		and 	b.asn_no			=	a.asn_no
		and COALESCE(b.asn_modified_date,b.asn_created_date)::DATE>=(CURRENT_DATE - INTERVAL '90 days')::DATE;
*/		
    IF p_rawstorageflag = 1
    THEN
		
		INSERT INTO raw.raw_wms_asn_detail
		(
			wms_asn_ou					, wms_asn_location			, wms_asn_no				, wms_asn_lineno				, wms_asn_line_status, 
			wms_asn_itm_code			, wms_asn_qty				, wms_asn_batch_no			, wms_asn_srl_no				, wms_asn_manfct_date, 
			wms_asn_exp_date			, wms_asn_thu_id			, wms_asn_thu_desc			, wms_asn_thu_qty				, wms_po_lineno, 
			wms_gr_flag					, wms_asn_rec_qty			, wms_asn_acc_qty			, wms_asn_rej_qty				, wms_asn_thu_srl_no, 
			wms_asn_uid					, wms_asn_rem				, wms_asn_itm_height		, wms_asn_itm_volume			, wms_asn_itm_weight, 
			wms_asn_customer_item_code	, wms_asn_order_uom			, wms_asn_master_uom_qty	, wms_asn_cust_sl_no			, wms_asn_ref_doc_no1, 
			wms_asn_outboundorder_no	, wms_asn_outboundorder_qty	, wms_asn_consignee			, wms_asn_outboundorder_lineno	, wms_asn_bestbeforedate, 
			wms_asn_itm_length			, wms_asn_itm_breadth		, wms_asn_heightuom			, wms_asn_weightuom				, wms_asn_volumeuom, 
			wms_asn_user_def_1			, wms_asn_user_def_2		, wms_asn_user_def_3		, wms_asn_hold					, wms_asn_stock_status, 
			wms_asn_inv_type			, wms_asn_product_status	, wms_asn_coo				, wms_asn_item_attribute1		, wms_asn_item_attribute2, 
			wms_asn_item_attribute3		, wms_asn_item_attribute4	, wms_asn_item_attribute5	, wms_asn_itm_cust				, wms_asn_cust_po_lineno, 
			wms_inb_wr_serial_no		, wms_asn_item_lineno		, wms_asn_ratio				, wms_asn_lottable1				, wms_asn_lottable2, 
			wms_asn_lottable3			, wms_asn_lottable4			, wms_asn_lottable5			, wms_asn_item_attribute6		, wms_asn_item_attribute7, 
			wms_asn_item_attribute8		, wms_asn_item_attribute9	, wms_asn_item_attribute10	, wms_asn_component				, wms_asn_uid2, 
			wms_asn_su1					, wms_asn_su2				, wms_asn_lottable10		, wms_asn_lottable9				, wms_asn_lottable8, 
			wms_asn_lottable7			, wms_asn_lottable6			, etlcreateddatetime
		
		)
		SELECT 
			wms_asn_ou					, wms_asn_location			, wms_asn_no				, wms_asn_lineno				, wms_asn_line_status, 
			wms_asn_itm_code			, wms_asn_qty				, wms_asn_batch_no			, wms_asn_srl_no				, wms_asn_manfct_date, 
			wms_asn_exp_date			, wms_asn_thu_id			, wms_asn_thu_desc			, wms_asn_thu_qty				, wms_po_lineno, 
			wms_gr_flag					, wms_asn_rec_qty			, wms_asn_acc_qty			, wms_asn_rej_qty				, wms_asn_thu_srl_no, 
			wms_asn_uid					, wms_asn_rem				, wms_asn_itm_height		, wms_asn_itm_volume			, wms_asn_itm_weight, 
			wms_asn_customer_item_code	, wms_asn_order_uom			, wms_asn_master_uom_qty	, wms_asn_cust_sl_no			, wms_asn_ref_doc_no1, 
			wms_asn_outboundorder_no	, wms_asn_outboundorder_qty	, wms_asn_consignee			, wms_asn_outboundorder_lineno	, wms_asn_bestbeforedate, 
			wms_asn_itm_length			, wms_asn_itm_breadth		, wms_asn_heightuom			, wms_asn_weightuom				, wms_asn_volumeuom, 
			wms_asn_user_def_1			, wms_asn_user_def_2		, wms_asn_user_def_3		, wms_asn_hold					, wms_asn_stock_status, 
			wms_asn_inv_type			, wms_asn_product_status	, wms_asn_coo				, wms_asn_item_attribute1		, wms_asn_item_attribute2, 
			wms_asn_item_attribute3		, wms_asn_item_attribute4	, wms_asn_item_attribute5	, wms_asn_itm_cust				, wms_asn_cust_po_lineno, 
			wms_inb_wr_serial_no		, wms_asn_item_lineno		, wms_asn_ratio				, wms_asn_lottable1				, wms_asn_lottable2, 
			wms_asn_lottable3			, wms_asn_lottable4			, wms_asn_lottable5			, wms_asn_item_attribute6		, wms_asn_item_attribute7, 
			wms_asn_item_attribute8		, wms_asn_item_attribute9	, wms_asn_item_attribute10	, wms_asn_component				, wms_asn_uid2, 
			wms_asn_su1					, wms_asn_su2				, wms_asn_lottable10		, wms_asn_lottable9				, wms_asn_lottable8, 
			wms_asn_lottable7			, wms_asn_lottable6			, etlcreateddatetime
		FROM stg.stg_wms_asn_detail;
    END IF;	
		
	    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
		
	EXCEPTION WHEN others THEN       
		   
	GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
			
	CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
			
	SELECT 0 INTO inscnt;
	SELECT 0 INTO updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_asndetailsweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asnheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asnheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_asn_header;

	UPDATE dwh.f_asnheader t
    SET 
          asn_loc_key                   = COALESCE(l.loc_key,-1)
        , asn_date_key                  = COALESCE(d.datekey,-1)
        , asn_cust_key                  = COALESCE(c.customer_key,-1)
        , asn_supp_key                  = COALESCE(v.vendor_key,-1)
		, asn_prefdoc_type 				= s.wms_asn_prefdoc_type
		, asn_prefdoc_no 				= s.wms_asn_prefdoc_no
		, asn_prefdoc_date 				= s.wms_asn_prefdoc_date
		, asn_date 						= s.wms_asn_date
		, asn_status 					= s.wms_asn_status
		, asn_operation_status 			= s.wms_asn_operation_status
		, asn_ib_order 					= s.wms_asn_ib_order
		, asn_ship_frm 					= s.wms_asn_ship_frm
		, asn_ship_date 				= s.wms_asn_ship_date
		, asn_dlv_loc 					= s.wms_asn_dlv_loc
		, asn_dlv_date 					= s.wms_asn_dlv_date
		, asn_sup_asn_no 				= s.wms_asn_sup_asn_no
		, asn_sup_asn_date 				= s.wms_asn_sup_asn_date
		, asn_sent_by 					= s.wms_asn_sent_by
		, asn_rem 						= s.wms_asn_rem
		, asn_shp_ref_typ 				= s.wms_asn_shp_ref_typ
		, asn_shp_ref_no 				= s.wms_asn_shp_ref_no
		, asn_shp_ref_date 				= s.wms_asn_shp_ref_date
		, asn_shp_carrier 				= s.wms_asn_shp_carrier
		, asn_shp_mode 					= s.wms_asn_shp_mode
		, asn_shp_vh_typ 				= s.wms_asn_shp_vh_typ
		, asn_shp_vh_no 				= s.wms_asn_shp_vh_no
		, asn_shp_eqp_typ 				= s.wms_asn_shp_eqp_typ
		, asn_shp_eqp_no 				= s.wms_asn_shp_eqp_no
		, asn_shp_grs_wt 				= s.wms_asn_shp_grs_wt
		, asn_shp_nt_wt 				= s.wms_asn_shp_nt_wt
		, asn_shp_wt_uom 				= s.wms_asn_shp_wt_uom
		, asn_shp_vol 					= s.wms_asn_shp_vol
		, asn_shp_vol_uom 				= s.wms_asn_shp_vol_uom
		, asn_shp_pallt 				= s.wms_asn_shp_pallt
		, asn_shp_rem 					= s.wms_asn_shp_rem
		, asn_cnt_typ 					= s.wms_asn_cnt_typ
		, asn_cnt_no 					= s.wms_asn_cnt_no
		, asn_cnt_qtyp 					= s.wms_asn_cnt_qtyp
		, asn_cnt_qsts 					= s.wms_asn_cnt_qsts
		, asn_timestamp 				= s.wms_asn_timestamp
		, asn_usrdf1 					= s.wms_asn_usrdf1
		, asn_usrdf2 					= s.wms_asn_usrdf2
		, asn_usrdf3 					= s.wms_asn_usrdf3
		, asn_createdby 				= s.wms_asn_createdby
		, asn_created_date 				= s.wms_asn_created_date
		, asn_modifiedby 				= s.wms_asn_modifiedby
		, asn_modified_date 			= s.wms_asn_modified_date
		, asn_gen_frm 					= s.wms_asn_gen_frm
		, asn_release_date 				= s.wms_asn_release_date
		, asn_release_number 			= s.wms_asn_release_number
		, asn_block_stage 				= s.wms_asn_block_stage
		, asn_amendno 					= s.wms_asn_amendno
		, asn_cust_code 				= s.wms_asn_cust_code
		, asn_supp_code 				= s.wms_asn_supp_code
		, asn_quaran_bil_status 		= s.wms_asn_quaran_bil_status
		, dock_no 						= s.wms_dock_no
		, total_value				 	= s.wms_total_value
		, asn_gate_no 					= s.wms_asn_gate_no
		, asn_type 						= s.wms_asn_type
		, asn_wchboinv_bil_status 		= s.wms_asn_wchboinv_bil_status
		, asn_adfepasn_bil_status 		= s.wms_asn_adfepasn_bil_status
		, asn_reason_code 				= s.wms_asn_reason_code
		, asn_whimchpd_sell_bil_status 	= s.wms_asn_whimchpd_sell_bil_status
		, asn_wichbain_sell_bil_status 	= s.wms_asn_wichbain_sell_bil_status
		, asn_STPCGTHU_bil_status 		= s.wms_asn_STPCGTHU_bil_status
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_asn_header s
	LEFT JOIN dwh.d_location L 		
		ON s.wms_asn_location 	= L.loc_code 
        AND s.wms_asn_ou        = L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON s.wms_asn_date::date = D.dateactual
	LEFT JOIN dwh.d_customer C 		
		ON s.wms_asn_cust_code  = C.customer_id 
        AND s.wms_asn_ou        = C.customer_ou
	LEFT JOIN dwh.d_vendor V 		
		ON s.wms_asn_supp_code  = V.vendor_id 
        AND s.wms_asn_ou        = V.vendor_ou	
    WHERE t.asn_ou 						= s.wms_asn_ou
		AND t.asn_location 				= s.wms_asn_location
		AND t.asn_no 					= s.wms_asn_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
	
/*
	
	DELETE FROM dwh.f_asnheader FH
	using stg.stg_wms_asn_header AH
		WHERE  FH.asn_ou 			= AH.wms_asn_ou 
		AND FH.asn_location 		= AH.wms_asn_location 
		AND FH.asn_no 				= AH.wms_asn_no;
-- 	 	AND COALESCE(asn_modified_date,asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
	INSERT INTO dwh.f_asnheader
	(
		  asn_loc_key							, asn_date_key							, asn_cust_key					, asn_supp_key 					, asn_ou
		, asn_location							, asn_no								, asn_prefdoc_type				, asn_prefdoc_no				, asn_prefdoc_date
		, asn_date								, asn_status							, asn_operation_status			, asn_ib_order					, asn_ship_frm
		, asn_ship_date							, asn_dlv_loc							, asn_dlv_date					, asn_sup_asn_no				, asn_sup_asn_date
		, asn_sent_by							, asn_rem								, asn_shp_ref_typ				, asn_shp_ref_no				, asn_shp_ref_date
		, asn_shp_carrier						, asn_shp_mode							, asn_shp_vh_typ				, asn_shp_vh_no					, asn_shp_eqp_typ
		, asn_shp_eqp_no						, asn_shp_grs_wt						, asn_shp_nt_wt					, asn_shp_wt_uom				, asn_shp_vol
		, asn_shp_vol_uom						, asn_shp_pallt							, asn_shp_rem					, asn_cnt_typ					, asn_cnt_no
		, asn_cnt_qtyp							, asn_cnt_qsts							, asn_timestamp					, asn_usrdf1					, asn_usrdf2
		, asn_usrdf3							, asn_createdby							, asn_created_date				, asn_modifiedby				, asn_modified_date
		, asn_gen_frm							, asn_release_date						, asn_release_number			, asn_block_stage				, asn_amendno
		, asn_cust_code							, asn_supp_code							, asn_quaran_bil_status			, dock_no						, total_value
		, asn_gate_no							, asn_type								, asn_wchboinv_bil_status		, asn_adfepasn_bil_status		, asn_reason_code
		, asn_whimchpd_sell_bil_status			, asn_wichbain_sell_bil_status			, asn_stpcgthu_bil_status		, etlactiveind					, etljobname
		, envsourcecd							, datasourcecd							, etlcreatedatetime
	)
	
	SELECT 
	   	  COALESCE(L.loc_key,-1)				, D.datekey								, COALESCE(C.customer_key,-1)	, COALESCE(V.vendor_key,-1)		, AH.wms_asn_ou
		, AH.wms_asn_location					, AH.wms_asn_no							, AH.wms_asn_prefdoc_type		, AH.wms_asn_prefdoc_no			, AH.wms_asn_prefdoc_date
		, AH.wms_asn_date						, AH.wms_asn_status						, AH.wms_asn_operation_status	, AH.wms_asn_ib_order			, AH.wms_asn_ship_frm
		, AH.wms_asn_ship_date					, AH.wms_asn_dlv_loc					, AH.wms_asn_dlv_date			, AH.wms_asn_sup_asn_no			, AH.wms_asn_sup_asn_date
		, AH.wms_asn_sent_by					, AH.wms_asn_rem						, AH.wms_asn_shp_ref_typ		, AH.wms_asn_shp_ref_no			, AH.wms_asn_shp_ref_date
		, AH.wms_asn_shp_carrier				, AH.wms_asn_shp_mode					, AH.wms_asn_shp_vh_typ			, AH.wms_asn_shp_vh_no			, AH.wms_asn_shp_eqp_typ
		, AH.wms_asn_shp_eqp_no					, AH.wms_asn_shp_grs_wt					, AH.wms_asn_shp_nt_wt			, AH.wms_asn_shp_wt_uom			, AH.wms_asn_shp_vol
		, AH.wms_asn_shp_vol_uom				, AH.wms_asn_shp_pallt					, AH.wms_asn_shp_rem			, AH.wms_asn_cnt_typ			, AH.wms_asn_cnt_no
		, AH.wms_asn_cnt_qtyp					, AH.wms_asn_cnt_qsts					, AH.wms_asn_timestamp			, AH.wms_asn_usrdf1				, AH.wms_asn_usrdf2
		, AH.wms_asn_usrdf3						, AH.wms_asn_createdby					, AH.wms_asn_created_date		, AH.wms_asn_modifiedby			, AH.wms_asn_modified_date
		, AH.wms_asn_gen_frm					, AH.wms_asn_release_date				, AH.wms_asn_release_number		, AH.wms_asn_block_stage		, AH.wms_asn_amendno
		, AH.wms_asn_cust_code					, AH.wms_asn_supp_code					, AH.wms_asn_quaran_bil_status	, AH.wms_dock_no				, AH.wms_total_value
		, AH.wms_asn_gate_no					, AH.wms_asn_type						, AH.wms_asn_wchboinv_bil_status, AH.wms_asn_adfepasn_bil_status, AH.wms_asn_reason_code
		, AH.wms_asn_whimchpd_sell_bil_status	, AH.wms_asn_wichbain_sell_bil_status	, AH.wms_asn_stpcgthu_bil_status, 1 AS etlactiveind				, p_etljobname
		, p_envsourcecd							, p_datasourcecd						, NOW()
	FROM stg.stg_wms_asn_header AH
	LEFT JOIN dwh.d_location L 		
		ON AH.wms_asn_location 	    = L.loc_code 
        AND AH.wms_asn_ou           = L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON AH.wms_asn_date::date 	= D.dateactual
	LEFT JOIN dwh.d_customer C 		
		ON AH.wms_asn_cust_code	    = C.customer_id 
        AND AH.wms_asn_ou           = C.customer_ou
	LEFT JOIN dwh.d_vendor V 		
		ON AH.wms_asn_supp_code 	= V.vendor_id 
        AND AH.wms_asn_ou           = V.vendor_ou
	LEFT JOIN dwh.f_asnheader FH 	
		ON  FH.asn_ou 				= AH.wms_asn_ou 
		AND FH.asn_location 		= AH.wms_asn_location 
		AND FH.asn_no 				= AH.wms_asn_no
   WHERE FH.asn_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
--	select 0 into updcnt;  
	
	
	
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_asn_header
	(
		wms_asn_ou				, wms_asn_location					, wms_asn_no						, wms_asn_prefdoc_type			, wms_asn_prefdoc_no, 
		wms_asn_prefdoc_date	, wms_asn_date						, wms_asn_status					, wms_asn_operation_status		, wms_asn_ib_order, 
		wms_asn_ship_frm		, wms_asn_ship_date					, wms_asn_dlv_loc					, wms_asn_dlv_date				, wms_asn_sup_asn_no, 
		wms_asn_sup_asn_date	, wms_asn_sent_by					, wms_asn_rem						, wms_asn_shp_ref_typ			, wms_asn_shp_ref_no, 
		wms_asn_shp_ref_date	, wms_asn_shp_carrier				, wms_asn_shp_mode					, wms_asn_shp_vh_typ			, wms_asn_shp_vh_no, 
		wms_asn_shp_eqp_typ		, wms_asn_shp_eqp_no				, wms_asn_shp_grs_wt				, wms_asn_shp_nt_wt				, wms_asn_shp_wt_uom, 
		wms_asn_shp_vol			, wms_asn_shp_vol_uom				, wms_asn_shp_pallt					, wms_asn_shp_rem				, wms_asn_cnt_typ, 
		wms_asn_cnt_no			, wms_asn_cnt_qtyp					, wms_asn_cnt_qsts					, wms_asn_timestamp				, wms_asn_usrdf1, 
		wms_asn_usrdf2			, wms_asn_usrdf3					, wms_asn_createdby					, wms_asn_created_date			, wms_asn_modifiedby, 
		wms_asn_modified_date	, wms_asn_gen_frm					, wms_asn_release_date				, wms_asn_release_number		, wms_asn_block_stage, 
		wms_asn_amendno			, wms_asn_cust_code					, wms_asn_supp_code					, wms_asn_quaran_bil_status		, wms_dock_no, 
		wms_total_value			, wms_asn_gate_no					, wms_asn_type						, wms_asn_wchboinv_bil_status	, wms_asn_adfepasn_bil_status, 
		wms_asn_reason_code		, wms_asn_whimchpd_sell_bil_status	, wms_asn_wichbain_sell_bil_status	, wms_asn_stpcgthu_bil_status	, etlcreateddatetime
	
	)
	SELECT 
		wms_asn_ou				, wms_asn_location					, wms_asn_no						, wms_asn_prefdoc_type			, wms_asn_prefdoc_no, 
		wms_asn_prefdoc_date	, wms_asn_date						, wms_asn_status					, wms_asn_operation_status		, wms_asn_ib_order, 
		wms_asn_ship_frm		, wms_asn_ship_date					, wms_asn_dlv_loc					, wms_asn_dlv_date				, wms_asn_sup_asn_no, 
		wms_asn_sup_asn_date	, wms_asn_sent_by					, wms_asn_rem						, wms_asn_shp_ref_typ			, wms_asn_shp_ref_no, 
		wms_asn_shp_ref_date	, wms_asn_shp_carrier				, wms_asn_shp_mode					, wms_asn_shp_vh_typ			, wms_asn_shp_vh_no, 
		wms_asn_shp_eqp_typ		, wms_asn_shp_eqp_no				, wms_asn_shp_grs_wt				, wms_asn_shp_nt_wt				, wms_asn_shp_wt_uom, 
		wms_asn_shp_vol			, wms_asn_shp_vol_uom				, wms_asn_shp_pallt					, wms_asn_shp_rem				, wms_asn_cnt_typ, 
		wms_asn_cnt_no			, wms_asn_cnt_qtyp					, wms_asn_cnt_qsts					, wms_asn_timestamp				, wms_asn_usrdf1, 
		wms_asn_usrdf2			, wms_asn_usrdf3					, wms_asn_createdby					, wms_asn_created_date			, wms_asn_modifiedby, 
		wms_asn_modified_date	, wms_asn_gen_frm					, wms_asn_release_date				, wms_asn_release_number		, wms_asn_block_stage, 
		wms_asn_amendno			, wms_asn_cust_code					, wms_asn_supp_code					, wms_asn_quaran_bil_status		, wms_dock_no, 
		wms_total_value			, wms_asn_gate_no					, wms_asn_type						, wms_asn_wchboinv_bil_status	, wms_asn_adfepasn_bil_status, 
		wms_asn_reason_code		, wms_asn_whimchpd_sell_bil_status	, wms_asn_wichbain_sell_bil_status	, wms_asn_stpcgthu_bil_status	, etlcreateddatetime
	FROM stg.stg_wms_asn_header;
    END IF;
    
    EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_asnheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asnheaderhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asnheaderhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_asn_header_h;


    UPDATE dwh.F_ASNHeaderHistory t
    SET
        asn_hdr_hst_loc_key		  = COALESCE(l.loc_key,-1),
		asn_hdr_hst_datekey		  = COALESCE(d.datekey,-1),
		asn_hdr_hst_customer_key  = COALESCE(c.customer_key,-1),
        asn_prefdoc_type          = s.wms_asn_prefdoc_type,
        asn_prefdoc_no            = s.wms_asn_prefdoc_no,
        asn_prefdoc_date          = s.wms_asn_prefdoc_date,
        asn_date                  = s.wms_asn_date,
        asn_status                = s.wms_asn_status,
        asn_ib_order              = s.wms_asn_ib_order,
        asn_ship_frm              = s.wms_asn_ship_frm,
        asn_ship_date             = s.wms_asn_ship_date,
        asn_dlv_date              = s.wms_asn_dlv_date,
        asn_sup_asn_no            = s.wms_asn_sup_asn_no,
        asn_sup_asn_date          = s.wms_asn_sup_asn_date,
        asn_sent_by               = s.wms_asn_sent_by,
        asn_rem                   = s.wms_asn_rem,
        asn_shp_ref_typ           = s.wms_asn_shp_ref_typ,
        asn_shp_ref_no            = s.wms_asn_shp_ref_no,
        asn_shp_ref_date          = s.wms_asn_shp_ref_date,
        asn_shp_carrier           = s.wms_asn_shp_carrier,
        asn_shp_mode              = s.wms_asn_shp_mode,
        asn_shp_vh_typ            = s.wms_asn_shp_vh_typ,
        asn_shp_vh_no             = s.wms_asn_shp_vh_no,
        asn_shp_eqp_typ           = s.wms_asn_shp_eqp_typ,
        asn_shp_eqp_no            = s.wms_asn_shp_eqp_no,
        asn_shp_grs_wt            = s.wms_asn_shp_grs_wt,
        asn_shp_wt_uom            = s.wms_asn_shp_wt_uom,
        asn_shp_pallt             = s.wms_asn_shp_pallt,
        asn_shp_rem               = s.wms_asn_shp_rem,
        asn_cnt_no                = s.wms_asn_cnt_no,
        asn_timestamp             = s.wms_asn_timestamp,
        asn_createdby             = s.wms_asn_createdby,
        asn_created_date          = s.wms_asn_created_date,
        asn_modifiedby            = s.wms_asn_modifiedby,
        asn_modified_date         = s.wms_asn_modified_date,
        asn_release_number        = s.wms_asn_release_number,
        asn_block_stage           = s.wms_asn_block_stage,
        asn_cust_code             = s.wms_asn_cust_code,
        dock_no                   = s.wms_dock_no,
        asn_reason_code           = s.wms_asn_reason_code,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_wms_asn_header_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON  s.wms_asn_date::date = d.dateactual
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_asn_cust_code  = c.customer_id
		AND s.wms_asn_ou 		 = c.customer_ou
    WHERE 	t.asn_ou 			= s.wms_asn_ou
    AND 	t.asn_location 		= s.wms_asn_location
    AND 	t.asn_no 			= s.wms_asn_no
    AND 	t.asn_amendno 		= s.wms_asn_amendno;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
     SELECT 0 INTO updcnt ;

    Delete from dwh.F_ASNHeaderHistory t
	USING stg.stg_wms_asn_header_h s
	where	t.asn_ou 			= s.wms_asn_ou
    AND 	t.asn_location 		= s.wms_asn_location
    AND 	t.asn_no 			= s.wms_asn_no
    AND 	t.asn_amendno 		= s.wms_asn_amendno;
	--AND COALESCE(wms_asn_modified_date,wms_asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/    
    INSERT INTO dwh.F_ASNHeaderHistory
    (
		asn_hdr_hst_loc_key,  asn_hdr_hst_datekey,  asn_hdr_hst_customer_key,
        asn_ou, 			  asn_location, 		asn_no, 				asn_amendno, 		asn_prefdoc_type, 
		asn_prefdoc_no, 	  asn_prefdoc_date, 	asn_date, 				asn_status, 		asn_ib_order, 
		asn_ship_frm, 		  asn_ship_date, 		asn_dlv_date, 			asn_sup_asn_no, 	asn_sup_asn_date, 
		asn_sent_by, 		  asn_rem, 				asn_shp_ref_typ, 		asn_shp_ref_no, 	asn_shp_ref_date, 
		asn_shp_carrier, 	  asn_shp_mode, 		asn_shp_vh_typ, 		asn_shp_vh_no, 		asn_shp_eqp_typ, 
		asn_shp_eqp_no, 	  asn_shp_grs_wt, 		asn_shp_wt_uom, 		asn_shp_pallt, 		asn_shp_rem, 
		asn_cnt_no, 		  asn_timestamp, 		asn_createdby, 			asn_created_date, 	asn_modifiedby, 
		asn_modified_date, 	  asn_release_number, 	asn_block_stage, 		asn_cust_code, 		dock_no, 
		asn_reason_code, 	  etlactiveind, 		etljobname, 			envsourcecd, 		datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),	 COALESCE(d.datekey,-1),	COALESCE(c.customer_key,-1),	
        s.wms_asn_ou, 			 s.wms_asn_location, 		s.wms_asn_no, 			s.wms_asn_amendno, 		s.wms_asn_prefdoc_type, 
		s.wms_asn_prefdoc_no, 	 s.wms_asn_prefdoc_date, 	s.wms_asn_date, 		s.wms_asn_status, 		s.wms_asn_ib_order, 
		s.wms_asn_ship_frm, 	 s.wms_asn_ship_date, 		s.wms_asn_dlv_date, 	s.wms_asn_sup_asn_no, 	s.wms_asn_sup_asn_date, 
		s.wms_asn_sent_by, 		 s.wms_asn_rem, 			s.wms_asn_shp_ref_typ, 	s.wms_asn_shp_ref_no, 	s.wms_asn_shp_ref_date, 
		s.wms_asn_shp_carrier, 	 s.wms_asn_shp_mode, 		s.wms_asn_shp_vh_typ, 	s.wms_asn_shp_vh_no, 	s.wms_asn_shp_eqp_typ, 
		s.wms_asn_shp_eqp_no, 	 s.wms_asn_shp_grs_wt, 		s.wms_asn_shp_wt_uom, 	s.wms_asn_shp_pallt, 	s.wms_asn_shp_rem, 
		s.wms_asn_cnt_no, 		 s.wms_asn_timestamp, 		s.wms_asn_createdby, 	s.wms_asn_created_date, s.wms_asn_modifiedby, 
		s.wms_asn_modified_date, s.wms_asn_release_number, 	s.wms_asn_block_stage, 	s.wms_asn_cust_code, 	s.wms_dock_no, 
		s.wms_asn_reason_code, 	 1, 						p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 
		NOW()
    FROM stg.stg_wms_asn_header_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON  s.wms_asn_date::date = d.dateactual
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_asn_cust_code  = c.customer_id
		AND s.wms_asn_ou 		 = c.customer_ou
    LEFT JOIN dwh.F_ASNHeaderHistory t
    ON s.wms_asn_ou = t.asn_ou
    AND s.wms_asn_location = t.asn_location
    AND s.wms_asn_no = t.asn_no
    AND s.wms_asn_amendno = t.asn_amendno
    WHERE t.asn_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_asn_header_h
    (
        wms_asn_ou, 			wms_asn_location, 		wms_asn_no, 			wms_asn_amendno, 		wms_asn_prefdoc_type, 
		wms_asn_prefdoc_no, 	wms_asn_prefdoc_date, 	wms_asn_date, 			wms_asn_status, 		wms_asn_operation_status, 
		wms_asn_ib_order, 		wms_asn_ship_frm, 		wms_asn_ship_date, 		wms_asn_dlv_loc, 		wms_asn_dlv_date, 
		wms_asn_sup_asn_no, 	wms_asn_sup_asn_date, 	wms_asn_sent_by, 		wms_asn_rem, 			wms_asn_shp_ref_typ, 
		wms_asn_shp_ref_no, 	wms_asn_shp_ref_date, 	wms_asn_shp_carrier,	wms_asn_shp_mode, 		wms_asn_shp_vh_typ, 
		wms_asn_shp_vh_no, 		wms_asn_shp_eqp_typ, 	wms_asn_shp_eqp_no, 	wms_asn_shp_grs_wt, 	wms_asn_shp_nt_wt, 
		wms_asn_shp_wt_uom, 	wms_asn_shp_vol, 		wms_asn_shp_vol_uom,	wms_asn_shp_pallt, 		wms_asn_shp_rem, 
		wms_asn_cnt_typ, 		wms_asn_cnt_no, 		wms_asn_cnt_qtyp, 		wms_asn_cnt_qsts, 		wms_asn_timestamp, 
		wms_asn_usrdf1, 		wms_asn_usrdf2, 		wms_asn_usrdf3, 		wms_asn_createdby, 		wms_asn_created_date, 
		wms_asn_modifiedby, 	wms_asn_modified_date, 	wms_asn_gen_frm, 		wms_asn_release_date, 	wms_asn_release_number, 
		wms_asn_block_stage,	wms_asn_cust_code, 		wms_asn_supp_code, 		wms_dock_no, 			wms_total_value, 
		wms_asn_gate_no, 		wms_asn_reason_code, 	etlcreateddatetime
    )
    SELECT
        wms_asn_ou, 			wms_asn_location, 		wms_asn_no, 			wms_asn_amendno, 		wms_asn_prefdoc_type, 
		wms_asn_prefdoc_no, 	wms_asn_prefdoc_date, 	wms_asn_date, 			wms_asn_status, 		wms_asn_operation_status, 
		wms_asn_ib_order, 		wms_asn_ship_frm, 		wms_asn_ship_date, 		wms_asn_dlv_loc, 		wms_asn_dlv_date, 
		wms_asn_sup_asn_no, 	wms_asn_sup_asn_date, 	wms_asn_sent_by, 		wms_asn_rem, 			wms_asn_shp_ref_typ, 
		wms_asn_shp_ref_no, 	wms_asn_shp_ref_date, 	wms_asn_shp_carrier,	wms_asn_shp_mode, 		wms_asn_shp_vh_typ, 
		wms_asn_shp_vh_no, 		wms_asn_shp_eqp_typ, 	wms_asn_shp_eqp_no, 	wms_asn_shp_grs_wt, 	wms_asn_shp_nt_wt, 
		wms_asn_shp_wt_uom, 	wms_asn_shp_vol, 		wms_asn_shp_vol_uom,	wms_asn_shp_pallt, 		wms_asn_shp_rem, 
		wms_asn_cnt_typ, 		wms_asn_cnt_no, 		wms_asn_cnt_qtyp, 		wms_asn_cnt_qsts, 		wms_asn_timestamp, 
		wms_asn_usrdf1, 		wms_asn_usrdf2, 		wms_asn_usrdf3, 		wms_asn_createdby, 		wms_asn_created_date, 
		wms_asn_modifiedby, 	wms_asn_modified_date, 	wms_asn_gen_frm, 		wms_asn_release_date, 	wms_asn_release_number, 
		wms_asn_block_stage,	wms_asn_cust_code, 		wms_asn_supp_code, 		wms_dock_no, 			wms_total_value, 
		wms_asn_gate_no, 		wms_asn_reason_code, 	etlcreateddatetime
    FROM stg.stg_wms_asn_header_h;
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_asnheaderhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asnheaderhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asnheaderhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
    p_interval integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_interval
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_asn_header_h;

    UPDATE dwh.F_ASNHeaderHistory t
    SET
        asn_hdr_hst_loc_key		  = COALESCE(l.loc_key,-1),
		asn_hdr_hst_datekey		  = COALESCE(d.datekey,-1),
		asn_hdr_hst_customer_key  = COALESCE(c.customer_key,-1),
        asn_prefdoc_type          = s.wms_asn_prefdoc_type,
        asn_prefdoc_no            = s.wms_asn_prefdoc_no,
        asn_prefdoc_date          = s.wms_asn_prefdoc_date,
        asn_date                  = s.wms_asn_date,
        asn_status                = s.wms_asn_status,
        asn_ib_order              = s.wms_asn_ib_order,
        asn_ship_frm              = s.wms_asn_ship_frm,
        asn_ship_date             = s.wms_asn_ship_date,
        asn_dlv_date              = s.wms_asn_dlv_date,
        asn_sup_asn_no            = s.wms_asn_sup_asn_no,
        asn_sup_asn_date          = s.wms_asn_sup_asn_date,
        asn_sent_by               = s.wms_asn_sent_by,
        asn_rem                   = s.wms_asn_rem,
        asn_shp_ref_typ           = s.wms_asn_shp_ref_typ,
        asn_shp_ref_no            = s.wms_asn_shp_ref_no,
        asn_shp_ref_date          = s.wms_asn_shp_ref_date,
        asn_shp_carrier           = s.wms_asn_shp_carrier,
        asn_shp_mode              = s.wms_asn_shp_mode,
        asn_shp_vh_typ            = s.wms_asn_shp_vh_typ,
        asn_shp_vh_no             = s.wms_asn_shp_vh_no,
        asn_shp_eqp_typ           = s.wms_asn_shp_eqp_typ,
        asn_shp_eqp_no            = s.wms_asn_shp_eqp_no,
        asn_shp_grs_wt            = s.wms_asn_shp_grs_wt,
        asn_shp_wt_uom            = s.wms_asn_shp_wt_uom,
        asn_shp_pallt             = s.wms_asn_shp_pallt,
        asn_shp_rem               = s.wms_asn_shp_rem,
        asn_cnt_no                = s.wms_asn_cnt_no,
        asn_timestamp             = s.wms_asn_timestamp,
        asn_createdby             = s.wms_asn_createdby,
        asn_created_date          = s.wms_asn_created_date,
        asn_modifiedby            = s.wms_asn_modifiedby,
        asn_modified_date         = s.wms_asn_modified_date,
        asn_release_number        = s.wms_asn_release_number,
        asn_block_stage           = s.wms_asn_block_stage,
        asn_cust_code             = s.wms_asn_cust_code,
        dock_no                   = s.wms_dock_no,
        asn_reason_code           = s.wms_asn_reason_code,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_wms_asn_header_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON  s.wms_asn_date::date = d.dateactual
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_asn_cust_code  = c.customer_id
		AND s.wms_asn_ou 		 = c.customer_ou
    WHERE 	t.asn_ou 			= s.wms_asn_ou
    AND 	t.asn_location 		= s.wms_asn_location
    AND 	t.asn_no 			= s.wms_asn_no
    AND 	t.asn_amendno 		= s.wms_asn_amendno;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
     SELECT 0 INTO updcnt ;

    Delete from dwh.F_ASNHeaderHistory t
	USING stg.stg_wms_asn_header_h s
	where	t.asn_ou 			= s.wms_asn_ou
    AND 	t.asn_location 		= s.wms_asn_location
    AND 	t.asn_no 			= s.wms_asn_no
    AND 	t.asn_amendno 		= s.wms_asn_amendno;
	--AND COALESCE(wms_asn_modified_date,wms_asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/    
    INSERT INTO dwh.F_ASNHeaderHistory
    (
		asn_hdr_hst_loc_key,  asn_hdr_hst_datekey,  asn_hdr_hst_customer_key,
        asn_ou, 			  asn_location, 		asn_no, 				asn_amendno, 		asn_prefdoc_type, 
		asn_prefdoc_no, 	  asn_prefdoc_date, 	asn_date, 				asn_status, 		asn_ib_order, 
		asn_ship_frm, 		  asn_ship_date, 		asn_dlv_date, 			asn_sup_asn_no, 	asn_sup_asn_date, 
		asn_sent_by, 		  asn_rem, 				asn_shp_ref_typ, 		asn_shp_ref_no, 	asn_shp_ref_date, 
		asn_shp_carrier, 	  asn_shp_mode, 		asn_shp_vh_typ, 		asn_shp_vh_no, 		asn_shp_eqp_typ, 
		asn_shp_eqp_no, 	  asn_shp_grs_wt, 		asn_shp_wt_uom, 		asn_shp_pallt, 		asn_shp_rem, 
		asn_cnt_no, 		  asn_timestamp, 		asn_createdby, 			asn_created_date, 	asn_modifiedby, 
		asn_modified_date, 	  asn_release_number, 	asn_block_stage, 		asn_cust_code, 		dock_no, 
		asn_reason_code, 	  etlactiveind, 		etljobname, 			envsourcecd, 		datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),	 COALESCE(d.datekey,-1),	COALESCE(c.customer_key,-1),	
        s.wms_asn_ou, 			 s.wms_asn_location, 		s.wms_asn_no, 			s.wms_asn_amendno, 		s.wms_asn_prefdoc_type, 
		s.wms_asn_prefdoc_no, 	 s.wms_asn_prefdoc_date, 	s.wms_asn_date, 		s.wms_asn_status, 		s.wms_asn_ib_order, 
		s.wms_asn_ship_frm, 	 s.wms_asn_ship_date, 		s.wms_asn_dlv_date, 	s.wms_asn_sup_asn_no, 	s.wms_asn_sup_asn_date, 
		s.wms_asn_sent_by, 		 s.wms_asn_rem, 			s.wms_asn_shp_ref_typ, 	s.wms_asn_shp_ref_no, 	s.wms_asn_shp_ref_date, 
		s.wms_asn_shp_carrier, 	 s.wms_asn_shp_mode, 		s.wms_asn_shp_vh_typ, 	s.wms_asn_shp_vh_no, 	s.wms_asn_shp_eqp_typ, 
		s.wms_asn_shp_eqp_no, 	 s.wms_asn_shp_grs_wt, 		s.wms_asn_shp_wt_uom, 	s.wms_asn_shp_pallt, 	s.wms_asn_shp_rem, 
		s.wms_asn_cnt_no, 		 s.wms_asn_timestamp, 		s.wms_asn_createdby, 	s.wms_asn_created_date, s.wms_asn_modifiedby, 
		s.wms_asn_modified_date, s.wms_asn_release_number, 	s.wms_asn_block_stage, 	s.wms_asn_cust_code, 	s.wms_dock_no, 
		s.wms_asn_reason_code, 	 1, 						p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 
		NOW()
    FROM stg.stg_wms_asn_header_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_asn_location   = l.loc_code 
        AND s.wms_asn_ou         = l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON  s.wms_asn_date::date = d.dateactual
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_asn_cust_code  = c.customer_id
		AND s.wms_asn_ou 		 = c.customer_ou
    LEFT JOIN dwh.F_ASNHeaderHistory t
    ON s.wms_asn_ou = t.asn_ou
    AND s.wms_asn_location = t.asn_location
    AND s.wms_asn_no = t.asn_no
    AND s.wms_asn_amendno = t.asn_amendno
    WHERE t.asn_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    
    UPDATE dwh.f_asnheaderhistory t1
    SET etlactiveind =  0,
    etlupdatedatetime = Now()::timestamp
    FROM dwh.f_asnheaderhistory t
    LEFT join stg.stg_wms_asn_header_h s
    ON t.asn_ou             = s.wms_asn_ou
    AND     t.asn_location      = s.wms_asn_location
    AND     t.asn_no            = s.wms_asn_no
    AND     t.asn_amendno       = s.wms_asn_amendno
    WHERE t.asn_hdr_hst_key = t1.asn_hdr_hst_key
    AND   COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
    AND   s.wms_asn_ou is null;


    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_asn_header_h
    (
        wms_asn_ou, 			wms_asn_location, 		wms_asn_no, 			wms_asn_amendno, 		wms_asn_prefdoc_type, 
		wms_asn_prefdoc_no, 	wms_asn_prefdoc_date, 	wms_asn_date, 			wms_asn_status, 		wms_asn_operation_status, 
		wms_asn_ib_order, 		wms_asn_ship_frm, 		wms_asn_ship_date, 		wms_asn_dlv_loc, 		wms_asn_dlv_date, 
		wms_asn_sup_asn_no, 	wms_asn_sup_asn_date, 	wms_asn_sent_by, 		wms_asn_rem, 			wms_asn_shp_ref_typ, 
		wms_asn_shp_ref_no, 	wms_asn_shp_ref_date, 	wms_asn_shp_carrier,	wms_asn_shp_mode, 		wms_asn_shp_vh_typ, 
		wms_asn_shp_vh_no, 		wms_asn_shp_eqp_typ, 	wms_asn_shp_eqp_no, 	wms_asn_shp_grs_wt, 	wms_asn_shp_nt_wt, 
		wms_asn_shp_wt_uom, 	wms_asn_shp_vol, 		wms_asn_shp_vol_uom,	wms_asn_shp_pallt, 		wms_asn_shp_rem, 
		wms_asn_cnt_typ, 		wms_asn_cnt_no, 		wms_asn_cnt_qtyp, 		wms_asn_cnt_qsts, 		wms_asn_timestamp, 
		wms_asn_usrdf1, 		wms_asn_usrdf2, 		wms_asn_usrdf3, 		wms_asn_createdby, 		wms_asn_created_date, 
		wms_asn_modifiedby, 	wms_asn_modified_date, 	wms_asn_gen_frm, 		wms_asn_release_date, 	wms_asn_release_number, 
		wms_asn_block_stage,	wms_asn_cust_code, 		wms_asn_supp_code, 		wms_dock_no, 			wms_total_value, 
		wms_asn_gate_no, 		wms_asn_reason_code, 	etlcreateddatetime
    )
    SELECT
        wms_asn_ou, 			wms_asn_location, 		wms_asn_no, 			wms_asn_amendno, 		wms_asn_prefdoc_type, 
		wms_asn_prefdoc_no, 	wms_asn_prefdoc_date, 	wms_asn_date, 			wms_asn_status, 		wms_asn_operation_status, 
		wms_asn_ib_order, 		wms_asn_ship_frm, 		wms_asn_ship_date, 		wms_asn_dlv_loc, 		wms_asn_dlv_date, 
		wms_asn_sup_asn_no, 	wms_asn_sup_asn_date, 	wms_asn_sent_by, 		wms_asn_rem, 			wms_asn_shp_ref_typ, 
		wms_asn_shp_ref_no, 	wms_asn_shp_ref_date, 	wms_asn_shp_carrier,	wms_asn_shp_mode, 		wms_asn_shp_vh_typ, 
		wms_asn_shp_vh_no, 		wms_asn_shp_eqp_typ, 	wms_asn_shp_eqp_no, 	wms_asn_shp_grs_wt, 	wms_asn_shp_nt_wt, 
		wms_asn_shp_wt_uom, 	wms_asn_shp_vol, 		wms_asn_shp_vol_uom,	wms_asn_shp_pallt, 		wms_asn_shp_rem, 
		wms_asn_cnt_typ, 		wms_asn_cnt_no, 		wms_asn_cnt_qtyp, 		wms_asn_cnt_qsts, 		wms_asn_timestamp, 
		wms_asn_usrdf1, 		wms_asn_usrdf2, 		wms_asn_usrdf3, 		wms_asn_createdby, 		wms_asn_created_date, 
		wms_asn_modifiedby, 	wms_asn_modified_date, 	wms_asn_gen_frm, 		wms_asn_release_date, 	wms_asn_release_number, 
		wms_asn_block_stage,	wms_asn_cust_code, 		wms_asn_supp_code, 		wms_dock_no, 			wms_total_value, 
		wms_asn_gate_no, 		wms_asn_reason_code, 	etlcreateddatetime
    FROM stg.stg_wms_asn_header_h;
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_asnheaderhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_asnheaderweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_asnheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;    
    p_rawstorageflag integer;
    p_interval integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,d.intervaldays
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_interval
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_asn_header;

	UPDATE dwh.f_asnheader t
    SET 
          asn_loc_key                   = COALESCE(l.loc_key,-1)
        , asn_date_key                  = COALESCE(d.datekey,-1)
        , asn_cust_key                  = COALESCE(c.customer_key,-1)
        , asn_supp_key                  = COALESCE(v.vendor_key,-1)
		, asn_prefdoc_type 				= s.wms_asn_prefdoc_type
		, asn_prefdoc_no 				= s.wms_asn_prefdoc_no
		, asn_prefdoc_date 				= s.wms_asn_prefdoc_date
		, asn_date 						= s.wms_asn_date
		, asn_status 					= s.wms_asn_status
		, asn_operation_status 			= s.wms_asn_operation_status
		, asn_ib_order 					= s.wms_asn_ib_order
		, asn_ship_frm 					= s.wms_asn_ship_frm
		, asn_ship_date 				= s.wms_asn_ship_date
		, asn_dlv_loc 					= s.wms_asn_dlv_loc
		, asn_dlv_date 					= s.wms_asn_dlv_date
		, asn_sup_asn_no 				= s.wms_asn_sup_asn_no
		, asn_sup_asn_date 				= s.wms_asn_sup_asn_date
		, asn_sent_by 					= s.wms_asn_sent_by
		, asn_rem 						= s.wms_asn_rem
		, asn_shp_ref_typ 				= s.wms_asn_shp_ref_typ
		, asn_shp_ref_no 				= s.wms_asn_shp_ref_no
		, asn_shp_ref_date 				= s.wms_asn_shp_ref_date
		, asn_shp_carrier 				= s.wms_asn_shp_carrier
		, asn_shp_mode 					= s.wms_asn_shp_mode
		, asn_shp_vh_typ 				= s.wms_asn_shp_vh_typ
		, asn_shp_vh_no 				= s.wms_asn_shp_vh_no
		, asn_shp_eqp_typ 				= s.wms_asn_shp_eqp_typ
		, asn_shp_eqp_no 				= s.wms_asn_shp_eqp_no
		, asn_shp_grs_wt 				= s.wms_asn_shp_grs_wt
		, asn_shp_nt_wt 				= s.wms_asn_shp_nt_wt
		, asn_shp_wt_uom 				= s.wms_asn_shp_wt_uom
		, asn_shp_vol 					= s.wms_asn_shp_vol
		, asn_shp_vol_uom 				= s.wms_asn_shp_vol_uom
		, asn_shp_pallt 				= s.wms_asn_shp_pallt
		, asn_shp_rem 					= s.wms_asn_shp_rem
		, asn_cnt_typ 					= s.wms_asn_cnt_typ
		, asn_cnt_no 					= s.wms_asn_cnt_no
		, asn_cnt_qtyp 					= s.wms_asn_cnt_qtyp
		, asn_cnt_qsts 					= s.wms_asn_cnt_qsts
		, asn_timestamp 				= s.wms_asn_timestamp
		, asn_usrdf1 					= s.wms_asn_usrdf1
		, asn_usrdf2 					= s.wms_asn_usrdf2
		, asn_usrdf3 					= s.wms_asn_usrdf3
		, asn_createdby 				= s.wms_asn_createdby
		, asn_created_date 				= s.wms_asn_created_date
		, asn_modifiedby 				= s.wms_asn_modifiedby
		, asn_modified_date 			= s.wms_asn_modified_date
		, asn_gen_frm 					= s.wms_asn_gen_frm
		, asn_release_date 				= s.wms_asn_release_date
		, asn_release_number 			= s.wms_asn_release_number
		, asn_block_stage 				= s.wms_asn_block_stage
		, asn_amendno 					= s.wms_asn_amendno
		, asn_cust_code 				= s.wms_asn_cust_code
		, asn_supp_code 				= s.wms_asn_supp_code
		, asn_quaran_bil_status 		= s.wms_asn_quaran_bil_status
		, dock_no 						= s.wms_dock_no
		, total_value				 	= s.wms_total_value
		, asn_gate_no 					= s.wms_asn_gate_no
		, asn_type 						= s.wms_asn_type
		, asn_wchboinv_bil_status 		= s.wms_asn_wchboinv_bil_status
		, asn_adfepasn_bil_status 		= s.wms_asn_adfepasn_bil_status
		, asn_reason_code 				= s.wms_asn_reason_code
		, asn_whimchpd_sell_bil_status 	= s.wms_asn_whimchpd_sell_bil_status
		, asn_wichbain_sell_bil_status 	= s.wms_asn_wichbain_sell_bil_status
		, asn_STPCGTHU_bil_status 		= s.wms_asn_STPCGTHU_bil_status
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_asn_header s
	LEFT JOIN dwh.d_location L 		
		ON s.wms_asn_location 	= L.loc_code 
        AND s.wms_asn_ou        = L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON s.wms_asn_date::date = D.dateactual
	LEFT JOIN dwh.d_customer C 		
		ON s.wms_asn_cust_code  = C.customer_id 
        AND s.wms_asn_ou        = C.customer_ou
	LEFT JOIN dwh.d_vendor V 		
		ON s.wms_asn_supp_code  = V.vendor_id 
        AND s.wms_asn_ou        = V.vendor_ou	
    WHERE t.asn_ou 						= s.wms_asn_ou
		AND t.asn_location 				= s.wms_asn_location
		AND t.asn_no 					= s.wms_asn_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
	
/*
	
	DELETE FROM dwh.f_asnheader FH
	using stg.stg_wms_asn_header AH
		WHERE  FH.asn_ou 			= AH.wms_asn_ou 
		AND FH.asn_location 		= AH.wms_asn_location 
		AND FH.asn_no 				= AH.wms_asn_no;
-- 	 	AND COALESCE(asn_modified_date,asn_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
	INSERT INTO dwh.f_asnheader
	(
		  asn_loc_key							, asn_date_key							, asn_cust_key					, asn_supp_key 					, asn_ou
		, asn_location							, asn_no								, asn_prefdoc_type				, asn_prefdoc_no				, asn_prefdoc_date
		, asn_date								, asn_status							, asn_operation_status			, asn_ib_order					, asn_ship_frm
		, asn_ship_date							, asn_dlv_loc							, asn_dlv_date					, asn_sup_asn_no				, asn_sup_asn_date
		, asn_sent_by							, asn_rem								, asn_shp_ref_typ				, asn_shp_ref_no				, asn_shp_ref_date
		, asn_shp_carrier						, asn_shp_mode							, asn_shp_vh_typ				, asn_shp_vh_no					, asn_shp_eqp_typ
		, asn_shp_eqp_no						, asn_shp_grs_wt						, asn_shp_nt_wt					, asn_shp_wt_uom				, asn_shp_vol
		, asn_shp_vol_uom						, asn_shp_pallt							, asn_shp_rem					, asn_cnt_typ					, asn_cnt_no
		, asn_cnt_qtyp							, asn_cnt_qsts							, asn_timestamp					, asn_usrdf1					, asn_usrdf2
		, asn_usrdf3							, asn_createdby							, asn_created_date				, asn_modifiedby				, asn_modified_date
		, asn_gen_frm							, asn_release_date						, asn_release_number			, asn_block_stage				, asn_amendno
		, asn_cust_code							, asn_supp_code							, asn_quaran_bil_status			, dock_no						, total_value
		, asn_gate_no							, asn_type								, asn_wchboinv_bil_status		, asn_adfepasn_bil_status		, asn_reason_code
		, asn_whimchpd_sell_bil_status			, asn_wichbain_sell_bil_status			, asn_stpcgthu_bil_status		, etlactiveind					, etljobname
		, envsourcecd							, datasourcecd							, etlcreatedatetime
	)
	
	SELECT 
	   	  COALESCE(L.loc_key,-1)				, D.datekey								, COALESCE(C.customer_key,-1)	, COALESCE(V.vendor_key,-1)		, AH.wms_asn_ou
		, AH.wms_asn_location					, AH.wms_asn_no							, AH.wms_asn_prefdoc_type		, AH.wms_asn_prefdoc_no			, AH.wms_asn_prefdoc_date
		, AH.wms_asn_date						, AH.wms_asn_status						, AH.wms_asn_operation_status	, AH.wms_asn_ib_order			, AH.wms_asn_ship_frm
		, AH.wms_asn_ship_date					, AH.wms_asn_dlv_loc					, AH.wms_asn_dlv_date			, AH.wms_asn_sup_asn_no			, AH.wms_asn_sup_asn_date
		, AH.wms_asn_sent_by					, AH.wms_asn_rem						, AH.wms_asn_shp_ref_typ		, AH.wms_asn_shp_ref_no			, AH.wms_asn_shp_ref_date
		, AH.wms_asn_shp_carrier				, AH.wms_asn_shp_mode					, AH.wms_asn_shp_vh_typ			, AH.wms_asn_shp_vh_no			, AH.wms_asn_shp_eqp_typ
		, AH.wms_asn_shp_eqp_no					, AH.wms_asn_shp_grs_wt					, AH.wms_asn_shp_nt_wt			, AH.wms_asn_shp_wt_uom			, AH.wms_asn_shp_vol
		, AH.wms_asn_shp_vol_uom				, AH.wms_asn_shp_pallt					, AH.wms_asn_shp_rem			, AH.wms_asn_cnt_typ			, AH.wms_asn_cnt_no
		, AH.wms_asn_cnt_qtyp					, AH.wms_asn_cnt_qsts					, AH.wms_asn_timestamp			, AH.wms_asn_usrdf1				, AH.wms_asn_usrdf2
		, AH.wms_asn_usrdf3						, AH.wms_asn_createdby					, AH.wms_asn_created_date		, AH.wms_asn_modifiedby			, AH.wms_asn_modified_date
		, AH.wms_asn_gen_frm					, AH.wms_asn_release_date				, AH.wms_asn_release_number		, AH.wms_asn_block_stage		, AH.wms_asn_amendno
		, AH.wms_asn_cust_code					, AH.wms_asn_supp_code					, AH.wms_asn_quaran_bil_status	, AH.wms_dock_no				, AH.wms_total_value
		, AH.wms_asn_gate_no					, AH.wms_asn_type						, AH.wms_asn_wchboinv_bil_status, AH.wms_asn_adfepasn_bil_status, AH.wms_asn_reason_code
		, AH.wms_asn_whimchpd_sell_bil_status	, AH.wms_asn_wichbain_sell_bil_status	, AH.wms_asn_stpcgthu_bil_status, 1 AS etlactiveind				, p_etljobname
		, p_envsourcecd							, p_datasourcecd						, NOW()
	FROM stg.stg_wms_asn_header AH
	LEFT JOIN dwh.d_location L 		
		ON AH.wms_asn_location 	    = L.loc_code 
        AND AH.wms_asn_ou           = L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON AH.wms_asn_date::date 	= D.dateactual
	LEFT JOIN dwh.d_customer C 		
		ON AH.wms_asn_cust_code	    = C.customer_id 
        AND AH.wms_asn_ou           = C.customer_ou
	LEFT JOIN dwh.d_vendor V 		
		ON AH.wms_asn_supp_code 	= V.vendor_id 
        AND AH.wms_asn_ou           = V.vendor_ou
	LEFT JOIN dwh.f_asnheader FH 	
		ON  FH.asn_ou 				= AH.wms_asn_ou 
		AND FH.asn_location 		= AH.wms_asn_location 
		AND FH.asn_no 				= AH.wms_asn_no
   WHERE FH.asn_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
--	select 0 into updcnt;  
	
	 UPDATE dwh.f_asnheader t1
     SET etlactiveind =  0,
     etlupdatedatetime = Now()::timestamp
     FROM dwh.f_asnheader t
     LEFT join stg.stg_wms_asn_header s
     ON t.asn_ou                        = s.wms_asn_ou
     AND t.asn_location              = s.wms_asn_location
     AND t.asn_no                    = s.wms_asn_no
     WHERE t.asn_hr_key = t1.asn_hr_key
     AND   COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
     AND  s.wms_asn_no is null;

	
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_asn_header
	(
		wms_asn_ou				, wms_asn_location					, wms_asn_no						, wms_asn_prefdoc_type			, wms_asn_prefdoc_no, 
		wms_asn_prefdoc_date	, wms_asn_date						, wms_asn_status					, wms_asn_operation_status		, wms_asn_ib_order, 
		wms_asn_ship_frm		, wms_asn_ship_date					, wms_asn_dlv_loc					, wms_asn_dlv_date				, wms_asn_sup_asn_no, 
		wms_asn_sup_asn_date	, wms_asn_sent_by					, wms_asn_rem						, wms_asn_shp_ref_typ			, wms_asn_shp_ref_no, 
		wms_asn_shp_ref_date	, wms_asn_shp_carrier				, wms_asn_shp_mode					, wms_asn_shp_vh_typ			, wms_asn_shp_vh_no, 
		wms_asn_shp_eqp_typ		, wms_asn_shp_eqp_no				, wms_asn_shp_grs_wt				, wms_asn_shp_nt_wt				, wms_asn_shp_wt_uom, 
		wms_asn_shp_vol			, wms_asn_shp_vol_uom				, wms_asn_shp_pallt					, wms_asn_shp_rem				, wms_asn_cnt_typ, 
		wms_asn_cnt_no			, wms_asn_cnt_qtyp					, wms_asn_cnt_qsts					, wms_asn_timestamp				, wms_asn_usrdf1, 
		wms_asn_usrdf2			, wms_asn_usrdf3					, wms_asn_createdby					, wms_asn_created_date			, wms_asn_modifiedby, 
		wms_asn_modified_date	, wms_asn_gen_frm					, wms_asn_release_date				, wms_asn_release_number		, wms_asn_block_stage, 
		wms_asn_amendno			, wms_asn_cust_code					, wms_asn_supp_code					, wms_asn_quaran_bil_status		, wms_dock_no, 
		wms_total_value			, wms_asn_gate_no					, wms_asn_type						, wms_asn_wchboinv_bil_status	, wms_asn_adfepasn_bil_status, 
		wms_asn_reason_code		, wms_asn_whimchpd_sell_bil_status	, wms_asn_wichbain_sell_bil_status	, wms_asn_stpcgthu_bil_status	, etlcreateddatetime
	
	)
	SELECT 
		wms_asn_ou				, wms_asn_location					, wms_asn_no						, wms_asn_prefdoc_type			, wms_asn_prefdoc_no, 
		wms_asn_prefdoc_date	, wms_asn_date						, wms_asn_status					, wms_asn_operation_status		, wms_asn_ib_order, 
		wms_asn_ship_frm		, wms_asn_ship_date					, wms_asn_dlv_loc					, wms_asn_dlv_date				, wms_asn_sup_asn_no, 
		wms_asn_sup_asn_date	, wms_asn_sent_by					, wms_asn_rem						, wms_asn_shp_ref_typ			, wms_asn_shp_ref_no, 
		wms_asn_shp_ref_date	, wms_asn_shp_carrier				, wms_asn_shp_mode					, wms_asn_shp_vh_typ			, wms_asn_shp_vh_no, 
		wms_asn_shp_eqp_typ		, wms_asn_shp_eqp_no				, wms_asn_shp_grs_wt				, wms_asn_shp_nt_wt				, wms_asn_shp_wt_uom, 
		wms_asn_shp_vol			, wms_asn_shp_vol_uom				, wms_asn_shp_pallt					, wms_asn_shp_rem				, wms_asn_cnt_typ, 
		wms_asn_cnt_no			, wms_asn_cnt_qtyp					, wms_asn_cnt_qsts					, wms_asn_timestamp				, wms_asn_usrdf1, 
		wms_asn_usrdf2			, wms_asn_usrdf3					, wms_asn_createdby					, wms_asn_created_date			, wms_asn_modifiedby, 
		wms_asn_modified_date	, wms_asn_gen_frm					, wms_asn_release_date				, wms_asn_release_number		, wms_asn_block_stage, 
		wms_asn_amendno			, wms_asn_cust_code					, wms_asn_supp_code					, wms_asn_quaran_bil_status		, wms_dock_no, 
		wms_total_value			, wms_asn_gate_no					, wms_asn_type						, wms_asn_wchboinv_bil_status	, wms_asn_adfepasn_bil_status, 
		wms_asn_reason_code		, wms_asn_whimchpd_sell_bil_status	, wms_asn_wichbain_sell_bil_status	, wms_asn_stpcgthu_bil_status	, etlcreateddatetime
	FROM stg.stg_wms_asn_header;
    END IF;
    
    EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_asnheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_bindetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_bindetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;	
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_bin_dtl;

	UPDATE dwh.f_bindetails t
    SET 
		bin_typ_key						= COALESCE(bt.bin_typ_key,-1)
		, bin_loc_key				    = COALESCE(l.loc_key,-1)
		, bin_zone_key					= COALESCE(z.zone_key,-1)
		, bin_desc                      = s.wms_bin_desc
		, bin_cap_indicator             = s.wms_bin_cap_indicator
		, bin_aisle                     = s.wms_bin_aisle
		, bin_level                     = s.wms_bin_level
		, bin_seq_no                    = s.wms_bin_seq_no
		, bin_blocked                   = s.wms_bin_blocked
		, bin_reason_code               = s.wms_bin_reason_code
		, bin_timestamp                 = s.wms_bin_timestamp
		, bin_created_by                = s.wms_bin_created_by
		, bin_created_dt                = s.wms_bin_created_dt
		, bin_modified_by               = s.wms_bin_modified_by
		, bin_modified_dt               = s.wms_bin_modified_dt
		, bin_status                    = s.wms_bin_status
		, bin_stock_exist               = s.wms_bin_stock_exist
		, bin_one_bin_one_pal           = s.wms_bin_one_bin_one_pal
		, bin_permitted_uids            = s.wms_bin_permitted_uids
		, bin_blocking_reason_ml        = s.wms_bin_blocking_reason_ml
		, bin_blocked_pick_ml           = s.wms_bin_blocked_pick_ml
		, bin_blocked_pawy_ml           = s.wms_bin_blocked_pawy_ml
		, bin_blocked_sa_ml             = s.wms_bin_blocked_sa_ml
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_bin_dtl s
	LEFT JOIN dwh.d_bintypes bt
		ON	bt.bin_typ_code 		= s.wms_bin_type
		AND	bt.bin_typ_ou	 		= s.wms_bin_ou
		AND	bt.bin_typ_loc_code 	= s.wms_bin_loc_code
	LEFT JOIN dwh.d_zone z 			
		ON  s.wms_bin_zone 			= z.zone_code
		AND s.wms_bin_ou			= z.zone_ou
	    AND s.wms_bin_loc_code		= z.zone_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_bin_loc_code		= l.loc_code 
		AND s.wms_bin_ou			= l.loc_ou	 	
    WHERE   t.bin_ou 				= s.wms_bin_ou
		AND	t.bin_code 				= s.wms_bin_code
		AND	t.bin_loc_code 			= s.wms_bin_loc_code
		AND	t.bin_zone		        = s.wms_bin_zone
        AND	t.bin_type		        = s.wms_bin_type;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_bindetails
	(
		 bin_typ_key
		, bin_loc_key			  , bin_zone_key			
        , bin_code				  , bin_desc				, bin_loc_code				, bin_zone				, bin_type
		, bin_cap_indicator		  , bin_aisle				, bin_level					, bin_seq_no			, bin_blocked
		, bin_reason_code		  , bin_timestamp			, bin_created_by			, bin_created_dt		, bin_modified_by
		, bin_modified_dt		  , bin_status			    , bin_stock_exist			, bin_one_bin_one_pal	, bin_permitted_uids
		, bin_blocking_reason_ml  , bin_blocked_pick_ml	    , bin_blocked_pawy_ml		, bin_blocked_sa_ml		, bin_ou
        , etlactiveind			  , etljobname              , envsourcecd				, datasourcecd			, etlcreatedatetime
	)
	
	SELECT DISTINCT
		COALESCE(bt.bin_typ_key,-1)
		, COALESCE(l.loc_key,-1)          , COALESCE(z.zone_key,-1)
        , s.wms_bin_code				  , s.wms_bin_desc				    , s.wms_bin_loc_code				, s.wms_bin_zone				, s.wms_bin_type
		, s.wms_bin_cap_indicator		  , s.wms_bin_aisle				    , s.wms_bin_level					, s.wms_bin_seq_no				, s.wms_bin_blocked
		, s.wms_bin_reason_code		  	  , s.wms_bin_timestamp			    , s.wms_bin_created_by				, s.wms_bin_created_dt			, s.wms_bin_modified_by
		, s.wms_bin_modified_dt		      , s.wms_bin_status			    , s.wms_bin_stock_exist				, s.wms_bin_one_bin_one_pal		, s.wms_bin_permitted_uids
		, s.wms_bin_blocking_reason_ml    , s.wms_bin_blocked_pick_ml	    , s.wms_bin_blocked_pawy_ml			, s.wms_bin_blocked_sa_ml		, s.wms_bin_ou
		, 1 AS etlactiveind				  , p_etljobname                    , p_envsourcecd					    , p_datasourcecd				, NOW()
	FROM stg.stg_wms_bin_dtl s
	LEFT JOIN dwh.d_bintypes bt
		ON	bt.bin_typ_code 		= s.wms_bin_type
		AND	bt.bin_typ_ou	 		= s.wms_bin_ou
		AND	bt.bin_typ_loc_code 	= s.wms_bin_loc_code
	LEFT JOIN dwh.d_zone z 			
		ON  s.wms_bin_zone 			= z.zone_code
		AND s.wms_bin_ou			= z.zone_ou
	    AND s.wms_bin_loc_code		= z.zone_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_bin_loc_code		= l.loc_code 
		AND s.wms_bin_ou			= l.loc_ou
	LEFT JOIN dwh.f_bindetails t  	
		ON  t.bin_ou 				= s.wms_bin_ou
		AND	t.bin_code 				= s.wms_bin_code
		AND	t.bin_loc_code 			= s.wms_bin_loc_code
		AND	t.bin_zone		        = s.wms_bin_zone
        AND	t.bin_type		        = s.wms_bin_type
    WHERE t.bin_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_bin_dtl
	(
		wms_bin_ou, 				wms_bin_code, 				wms_bin_desc, 				wms_bin_loc_code, 				wms_bin_zone, 
		wms_bin_type, 				wms_bin_cap_indicator, 		wms_bin_aisle, 				wms_bin_stack, 					wms_bin_level, 
		wms_bin_section, 			wms_bin_seq_no, 			wms_bin_blocked, 			wms_bin_reason_code, 			wms_bin_user_def1, 
		wms_bin_user_def2, 			wms_bin_user_def3, 			wms_bin_timestamp, 			wms_bin_created_by, 			wms_bin_created_dt, 
		wms_bin_modified_by, 		wms_bin_modified_dt, 		wms_bin_status, 			wms_bin_stock_exist, 			wms_bin_one_bin_one_pal, 
		wms_bin_permitted_uids, 	wms_bin_curr_plnno, 		wms_bin_curr_created_date, 	wms_bin_curr_created_time, 		wms_bin_last_plnno, 
		wms_bin_last_created_date,  wms_bin_last_created_time, 	wms_bin_anti_cap_ethu, 		wms_bin_anti_cap_ci, 			wms_bin_anti_cap_wgt, 
		wms_bin_anti_cap_qty, 		wms_bin_anti_cap_vol, 		wms_bin_rem_cap_qty, 		wms_bin_rem_cap_ci, 			wms_bin_rem_cap_ethu, 
		wms_bin_rem_cap_vol, 		wms_bin_rem_cap_wgt, 		wms_bin_blocking_reason_ml, wms_bin_blocked_pick_ml, 		wms_bin_blocked_pawy_ml, 
		wms_bin_bin_checkbit_ml, 	wms_bin_bin_full_ml, 		wms_bin_blocked_sa_ml, 		wms_error_code, 				etlcreateddatetime
	)
	SELECT 
		wms_bin_ou, 				wms_bin_code, 				wms_bin_desc, 				wms_bin_loc_code, 				wms_bin_zone, 
		wms_bin_type, 				wms_bin_cap_indicator, 		wms_bin_aisle, 				wms_bin_stack, 					wms_bin_level, 
		wms_bin_section, 			wms_bin_seq_no, 			wms_bin_blocked, 			wms_bin_reason_code, 			wms_bin_user_def1, 
		wms_bin_user_def2, 			wms_bin_user_def3, 			wms_bin_timestamp, 			wms_bin_created_by, 			wms_bin_created_dt, 
		wms_bin_modified_by, 		wms_bin_modified_dt, 		wms_bin_status, 			wms_bin_stock_exist, 			wms_bin_one_bin_one_pal, 
		wms_bin_permitted_uids, 	wms_bin_curr_plnno, 		wms_bin_curr_created_date, 	wms_bin_curr_created_time, 		wms_bin_last_plnno, 
		wms_bin_last_created_date,  wms_bin_last_created_time, 	wms_bin_anti_cap_ethu, 		wms_bin_anti_cap_ci, 			wms_bin_anti_cap_wgt, 
		wms_bin_anti_cap_qty, 		wms_bin_anti_cap_vol, 		wms_bin_rem_cap_qty, 		wms_bin_rem_cap_ci, 			wms_bin_rem_cap_ethu, 
		wms_bin_rem_cap_vol, 		wms_bin_rem_cap_wgt, 		wms_bin_blocking_reason_ml, wms_bin_blocked_pick_ml, 		wms_bin_blocked_pawy_ml, 
		wms_bin_bin_checkbit_ml, 	wms_bin_bin_full_ml, 		wms_bin_blocked_sa_ml, 		wms_error_code, 				etlcreateddatetime
	FROM stg.stg_wms_bin_dtl;
    END IF;	
	
    EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
        
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt; 	
END;
$$;


ALTER PROCEDURE dwh.usp_f_bindetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_binexecdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_binexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN


	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_bin_exec_item_dtl;

	UPDATE dwh.f_binexecdetail t
    SET 
		  bin_exec_hdr_key			= COALESCE(bh.bin_hdr_key,-1)
		, bin_exec_loc_key			= COALESCE(l.loc_key,-1)
		, bin_exec_itm_hdr_key		= COALESCE(i.itm_hdr_key,-1)
		, bin_exec_thu_key			= COALESCE(th.thu_key,-1)
		, bin_pln_no 				= s.wms_bin_pln_no
		, bin_pln_ou 				= s.wms_bin_pln_ou
		, bin_item 					= s.wms_bin_item
		, bin_item_batch_no 		= s.wms_bin_item_batch_no
		, bin_item_sr_no 			= s.wms_bin_item_sr_no
		, bin_uid 					= s.wms_bin_uid
		, bin_src_bin 				= s.wms_bin_src_bin
		, bin_src_zone 				= s.wms_bin_src_zone
		, bin_su 					= s.wms_bin_su
		, bin_su_qty 				= s.wms_bin_su_qty
		, bin_avial_qty 			= s.wms_bin_avial_qty
		, bin_trn_out_qty 			= s.wms_bin_trn_out_qty
		, bin_act_bin 				= s.wms_bin_act_bin
		, bin_act_zone 				= s.wms_bin_act_zone
		, bin_tar_zone 				= s.wms_bin_tar_zone
		, bin_tar_bin 				= s.wms_bin_tar_bin
		, bin_act_qty 				= s.wms_bin_act_qty
		, bin_lot_no 				= s.wms_bin_lot_no
		, bin_su_slno 				= s.wms_bin_su_slno
		, bin_uid_slno 				= s.wms_bin_uid_slno
		, bin_thu_typ 				= s.wms_bin_thu_typ
		, bin_thu_id 				= s.wms_bin_thu_id
		, bin_src_staging_id 		= s.wms_bin_src_staging_id
		, bin_trgt_staging_id 		= s.wms_bin_trgt_staging_id
		, bin_stk_line_no 			= s.wms_bin_stk_line_no
		, bin_stk_status 			= s.wms_bin_stk_status
		, bin_su_type 				= s.wms_bin_su_type
		, bin_status 				= s.wms_bin_status
		, bin_src_status 			= s.wms_bin_src_status
		, bin_from_thu_sl_no 		= s.wms_bin_from_thu_sl_no
		, bin_target_thu_sl_no 		= s.wms_bin_target_thu_sl_no
		, bin_rsn_code			 	= s.wms_bin_rsn_code
		, bin_pal_status 			= s.wms_bin_pal_status
		, bin_repl_alloc_ln_no 		= s.wms_bin_repl_alloc_ln_no
		, bin_repl_doc_line_no 		= s.wms_bin_repl_doc_line_no
		, bin_item_attr1 			= s.wms_bin_item_attr1
		, etlactiveind 				= 1
		, etljobname 				= p_etljobname
		, envsourcecd 				= p_envsourcecd
		, datasourcecd 				= p_datasourcecd
		, etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_bin_exec_item_dtl s
	INNER JOIN dwh.f_binexechdr bh 
		ON  s.wms_bin_exec_ou		= bh.bin_exec_ou
		AND s.wms_bin_exec_no 		= bh.bin_exec_no 
		AND s.wms_bin_loc_code		= bh.bin_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_bin_loc_code 		= l.loc_code 
		AND s.wms_bin_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_itemheader i 	
		ON  s.wms_bin_item 			= i.itm_code 
		AND s.wms_bin_exec_ou 		= i.itm_ou 
	LEFT JOIN dwh.d_thu th 			
		ON  s.wms_bin_thu_id 		= th.thu_id
		AND s.wms_bin_exec_ou		= th.thu_ou
    WHERE   t.bin_loc_code			= s.wms_bin_loc_code
		AND	t.bin_exec_no 			= s.wms_bin_exec_no
		AND	t.bin_pln_lineno 		= s.wms_bin_pln_lineno
		AND	t.bin_exec_ou	 		= s.wms_bin_exec_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_binexecdetail
	(
		  bin_exec_hdr_key				, bin_exec_loc_key				, bin_exec_itm_hdr_key			, bin_exec_thu_key							
		, bin_loc_code					, bin_exec_no					, bin_exec_ou					, bin_pln_lineno
		, bin_pln_no					, bin_pln_ou					, bin_item						, bin_item_batch_no
		, bin_item_sr_no				, bin_uid						, bin_src_bin					, bin_src_zone
		, bin_su						, bin_su_qty					, bin_avial_qty					, bin_trn_out_qty
		, bin_act_bin					, bin_act_zone					, bin_tar_zone					, bin_tar_bin
		, bin_act_qty					, bin_lot_no					, bin_su_slno					, bin_uid_slno
		, bin_thu_typ					, bin_thu_id					, bin_src_staging_id			, bin_trgt_staging_id
		, bin_stk_line_no				, bin_stk_status				, bin_su_type					, bin_status
		, bin_src_status				, bin_from_thu_sl_no			, bin_target_thu_sl_no			, bin_rsn_code
		, bin_pal_status				, bin_repl_alloc_ln_no			, bin_repl_doc_line_no			, bin_item_attr1				
		, etlactiveind					, etljobname					, envsourcecd					, datasourcecd					, etlcreatedatetime	
	)	
		
	SELECT DISTINCT 	
		  COALESCE(bh.bin_hdr_key,-1)	, COALESCE(l.loc_key,-1)		, COALESCE(i.itm_hdr_key,-1)	, COALESCE(th.thu_key,-1)			
		, s.wms_bin_loc_code			, s.wms_bin_exec_no				, s.wms_bin_exec_ou				, s.wms_bin_pln_lineno
		, s.wms_bin_pln_no				, s.wms_bin_pln_ou				, s.wms_bin_item				, s.wms_bin_item_batch_no
		, s.wms_bin_item_sr_no			, s.wms_bin_uid					, s.wms_bin_src_bin				, s.wms_bin_src_zone
		, s.wms_bin_su					, s.wms_bin_su_qty				, s.wms_bin_avial_qty			, s.wms_bin_trn_out_qty
		, s.wms_bin_act_bin				, s.wms_bin_act_zone			, s.wms_bin_tar_zone			, s.wms_bin_tar_bin
		, s.wms_bin_act_qty				, s.wms_bin_lot_no				, s.wms_bin_su_slno				, s.wms_bin_uid_slno
		, s.wms_bin_thu_typ				, s.wms_bin_thu_id				, s.wms_bin_src_staging_id		, s.wms_bin_trgt_staging_id
		, s.wms_bin_stk_line_no			, s.wms_bin_stk_status			, s.wms_bin_su_type				, s.wms_bin_status
		, s.wms_bin_src_status			, s.wms_bin_from_thu_sl_no		, s.wms_bin_target_thu_sl_no	, s.wms_bin_rsn_code
		, s.wms_bin_pal_status			, s.wms_bin_repl_alloc_ln_no	, s.wms_bin_repl_doc_line_no	, s.wms_bin_item_attr1			
		, 1 AS etlactiveind				, p_etljobname					, p_envsourcecd					, p_datasourcecd				, NOW()
	FROM stg.stg_wms_bin_exec_item_dtl s
	INNER JOIN dwh.f_binexechdr bh 
		ON  s.wms_bin_exec_ou		= bh.bin_exec_ou
		AND s.wms_bin_exec_no 		= bh.bin_exec_no 
		AND s.wms_bin_loc_code		= bh.bin_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_bin_loc_code 		= l.loc_code 
		AND s.wms_bin_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_itemheader i 	
		ON  s.wms_bin_item 			= i.itm_code 
		AND s.wms_bin_exec_ou 		= i.itm_ou 
	LEFT JOIN dwh.d_thu th 			
		ON  s.wms_bin_thu_id 		= th.thu_id
		AND s.wms_bin_exec_ou		= th.thu_ou
	LEFT JOIN dwh.f_binexecdetail t  	
		ON  t.bin_loc_code			= s.wms_bin_loc_code
		AND	t.bin_exec_no 			= s.wms_bin_exec_no
		AND	t.bin_pln_lineno 		= s.wms_bin_pln_lineno
		AND	t.bin_exec_ou	 		= s.wms_bin_exec_ou
    WHERE   t.bin_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_bin_exec_item_dtl
	(
		  wms_bin_loc_code			, wms_bin_exec_no			, wms_bin_exec_ou			, wms_bin_pln_lineno
		, wms_bin_pln_no			, wms_bin_pln_ou			, wms_bin_item				, wms_bin_item_batch_no
		, wms_bin_item_sr_no		, wms_bin_uid				, wms_bin_src_bin			, wms_bin_src_zone
		, wms_bin_su				, wms_bin_su_qty			, wms_bin_avial_qty			, wms_bin_trn_out_qty
		, wms_bin_act_bin			, wms_bin_act_zone			, wms_bin_trn_in_qty		, wms_bin_tar_zone
		, wms_bin_tar_bin			, wms_bin_act_qty			, wms_bin_lot_no			, wms_bin_su_slno
		, wms_bin_uid_slno			, wms_bin_thu_typ			, wms_bin_thu_id			, wms_bin_src_staging_id
		, wms_bin_trgt_staging_id	, wms_bin_stk_line_no		, wms_bin_stk_status		, wms_bin_su_type
		, wms_bin_consignee			, wms_bin_customer			, wms_bin_gr_date			, wms_bin_status
		, wms_bin_trans_date		, wms_bin_trans_number		, wms_bin_trans_type		, wms_bin_src_status
		, wms_bin_mul_batch_flg		, wms_bin_from_thu_sl_no	, wms_bin_target_thu_sl_no	, wms_bin_rsn_code
		, wms_bin_pal_status		, wms_bin_thu2_id			, wms_bin_thu2_sl_no		, wms_bin_repl_alloc_ln_no
		, wms_bin_repl_doc_line_no	, wms_bin_su2				, wms_bin_su_slno2			, wms_bin_su_qty2
		, wms_bin_prof_type			, wms_bin_pick_scan_flg		, wms_bin_pway_scan_flg		, wms_bin_trans_uom
		, wms_bin_trans_uom_qty		, wms_bin_item_attr1		, wms_bin_item_attr10		, wms_bin_item_attr2
		, wms_bin_item_attr3		, wms_bin_item_attr4		, wms_bin_item_attr5		, wms_bin_item_attr6
		, wms_bin_item_attr7		, wms_bin_item_attr8		, wms_bin_item_attr9		, etlcreateddatetime
	
	)
	SELECT 
		  wms_bin_loc_code			, wms_bin_exec_no			, wms_bin_exec_ou			, wms_bin_pln_lineno
		, wms_bin_pln_no			, wms_bin_pln_ou			, wms_bin_item				, wms_bin_item_batch_no
		, wms_bin_item_sr_no		, wms_bin_uid				, wms_bin_src_bin			, wms_bin_src_zone
		, wms_bin_su				, wms_bin_su_qty			, wms_bin_avial_qty			, wms_bin_trn_out_qty
		, wms_bin_act_bin			, wms_bin_act_zone			, wms_bin_trn_in_qty		, wms_bin_tar_zone
		, wms_bin_tar_bin			, wms_bin_act_qty			, wms_bin_lot_no			, wms_bin_su_slno
		, wms_bin_uid_slno			, wms_bin_thu_typ			, wms_bin_thu_id			, wms_bin_src_staging_id
		, wms_bin_trgt_staging_id	, wms_bin_stk_line_no		, wms_bin_stk_status		, wms_bin_su_type
		, wms_bin_consignee			, wms_bin_customer			, wms_bin_gr_date			, wms_bin_status
		, wms_bin_trans_date		, wms_bin_trans_number		, wms_bin_trans_type		, wms_bin_src_status
		, wms_bin_mul_batch_flg		, wms_bin_from_thu_sl_no	, wms_bin_target_thu_sl_no	, wms_bin_rsn_code
		, wms_bin_pal_status		, wms_bin_thu2_id			, wms_bin_thu2_sl_no		, wms_bin_repl_alloc_ln_no
		, wms_bin_repl_doc_line_no	, wms_bin_su2				, wms_bin_su_slno2			, wms_bin_su_qty2
		, wms_bin_prof_type			, wms_bin_pick_scan_flg		, wms_bin_pway_scan_flg		, wms_bin_trans_uom
		, wms_bin_trans_uom_qty		, wms_bin_item_attr1		, wms_bin_item_attr10		, wms_bin_item_attr2
		, wms_bin_item_attr3		, wms_bin_item_attr4		, wms_bin_item_attr5		, wms_bin_item_attr6
		, wms_bin_item_attr7		, wms_bin_item_attr8		, wms_bin_item_attr9		, etlcreateddatetime
	FROM stg.stg_wms_bin_exec_item_dtl;
    END IF;	
	
    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
		
	EXCEPTION WHEN others THEN       
		   
	GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
			
	CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
			
	SELECT 0 INTO inscnt;
	SELECT 0 INTO updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_binexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_binexechdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_binexechdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_bin_exec_hdr;

	UPDATE dwh.f_binexechdr t
    SET 
          bin_loc_key           		= COALESCE(l.loc_key,-1)
        , bin_date_key          		= COALESCE(d.datekey,-1)
        , bin_emp_hdr_key       		= COALESCE(e.emp_hdr_key,-1)
		, bin_exec_status 				= s.wms_bin_exec_status
		, bin_exec_date 				= s.wms_bin_exec_date
		, bin_pln_no 					= s.wms_bin_pln_no
		, bin_mhe_id 					= s.wms_bin_mhe_id
		, bin_employee_id 				= s.wms_bin_employee_id
		, bin_exec_start_date 			= s.wms_bin_exec_start_date
		, bin_exec_end_date 			= s.wms_bin_exec_end_date
		, bin_created_by 				= s.wms_bin_created_by
		, bin_created_date 				= s.wms_bin_created_date
		, bin_modified_by 				= s.wms_bin_modified_by
		, bin_modified_date 			= s.wms_bin_modified_date
		, bin_timestamp 				= s.wms_bin_timestamp
		, bin_refdoc_no 				= s.wms_bin_refdoc_no
		, bin_gen_from 					= s.wms_bin_gen_from
		, bin_fr_insp 					= s.wms_bin_fr_insp
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_bin_exec_hdr s
	LEFT JOIN dwh.d_location L 		
		ON  s.wms_bin_loc_code 			= L.loc_code 
        AND s.wms_bin_exec_ou        	= L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON  s.wms_bin_exec_date::date 	= D.dateactual
	LEFT JOIN dwh.d_employeeheader e		
		ON  s.wms_bin_employee_id  		= e.emp_employee_code 
        AND s.wms_bin_exec_ou        	= e.emp_ou	
    WHERE   t.bin_loc_code 				= s.wms_bin_loc_code
		AND t.bin_exec_no 				= s.wms_bin_exec_no
		AND t.bin_exec_ou 				= s.wms_bin_exec_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_binexechdr
	(
		bin_loc_key				, bin_date_key				, bin_emp_hdr_key				, bin_loc_code, 
		bin_exec_no				, bin_exec_ou				, bin_exec_status				, bin_exec_date				, bin_pln_no, 
		bin_mhe_id				, bin_employee_id			, bin_exec_start_date			, bin_exec_end_date			, bin_created_by, 
		bin_created_date		, bin_modified_by			, bin_modified_date				, bin_timestamp				, bin_refdoc_no, 
		bin_gen_from			, bin_fr_insp				, etlactiveind					, etljobname				, envsourcecd, 
		datasourcecd			, etlcreatedatetime
	)
	
	SELECT 
	   	COALESCE(l.loc_key,-1)	, COALESCE(d.datekey,-1)	, COALESCE(e.emp_hdr_key,-1)	, s.wms_bin_loc_code, 
		s.wms_bin_exec_no		, s.wms_bin_exec_ou			, s.wms_bin_exec_status			, s.wms_bin_exec_date		, s.wms_bin_pln_no, 
		s.wms_bin_mhe_id		, s.wms_bin_employee_id		, s.wms_bin_exec_start_date		, s.wms_bin_exec_end_date	, s.wms_bin_created_by, 
		s.wms_bin_created_date	, s.wms_bin_modified_by		, s.wms_bin_modified_date		, s.wms_bin_timestamp		, s.wms_bin_refdoc_no, 
		s.wms_bin_gen_from		, s.wms_bin_fr_insp			, 1 AS etlactiveind				, p_etljobname				, p_envsourcecd, 
		p_datasourcecd			, NOW()
	FROM stg.stg_wms_bin_exec_hdr s
	LEFT JOIN dwh.d_location L 		
		ON  s.wms_bin_loc_code 			= L.loc_code 
        AND s.wms_bin_exec_ou        	= L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON  s.wms_bin_exec_date::date 	= D.dateactual
	LEFT JOIN dwh.d_employeeheader e		
		ON  s.wms_bin_employee_id  		= e.emp_employee_code 
        AND s.wms_bin_exec_ou        	= e.emp_ou
	LEFT JOIN dwh.f_binexechdr fh 	
		ON  fh.bin_loc_code 			= s.wms_bin_loc_code
		AND fh.bin_exec_no 				= s.wms_bin_exec_no
		AND fh.bin_exec_ou 				= s.wms_bin_exec_ou
    WHERE fh.bin_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_bin_exec_hdr
	(
		wms_bin_loc_code		, wms_bin_exec_no		, wms_bin_exec_ou				, wms_bin_exec_status			, wms_bin_exec_date, 
		wms_bin_pln_no			, wms_bin_mhe_id		, wms_bin_employee_id			, wms_bin_exec_start_date		, wms_bin_exec_end_date, 
		wms_bin_created_by		, wms_bin_created_date	, wms_bin_modified_by			, wms_bin_modified_date			, wms_bin_timestamp, 
		wms_bin_userdefined1	, wms_bin_userdefined2	, wms_bin_userdefined3			, wms_bin_refdoc_no				, wms_bin_billing_status, 
		wms_bin_bill_value		, wms_bin_gen_from		, wms_bin_inthumov_bil_status	, wms_bin_lbchprhr_bil_status	, wms_bin_fr_insp, 
		wms_bin_source_docno	, wms_bin_source_stage	, etlcreateddatetime
	
	)
	SELECT 
		wms_bin_loc_code		, wms_bin_exec_no		, wms_bin_exec_ou				, wms_bin_exec_status			, wms_bin_exec_date, 
		wms_bin_pln_no			, wms_bin_mhe_id		, wms_bin_employee_id			, wms_bin_exec_start_date		, wms_bin_exec_end_date, 
		wms_bin_created_by		, wms_bin_created_date	, wms_bin_modified_by			, wms_bin_modified_date			, wms_bin_timestamp, 
		wms_bin_userdefined1	, wms_bin_userdefined2	, wms_bin_userdefined3			, wms_bin_refdoc_no				, wms_bin_billing_status, 
		wms_bin_bill_value		, wms_bin_gen_from		, wms_bin_inthumov_bil_status	, wms_bin_lbchprhr_bil_status	, wms_bin_fr_insp, 
		wms_bin_source_docno	, wms_bin_source_stage	, etlcreateddatetime
	FROM stg.stg_wms_bin_exec_hdr;
    END IF;
    
    EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_binexechdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_binexecitemdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_binexecitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN


	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_bin_exec_item_detail;

	UPDATE dwh.f_binexecitemdetail t
    SET 
		  bin_hdr_key				= COALESCE(bh.bin_hdr_key,-1)
		, bin_loc_key				= COALESCE(l.loc_key,-1)
		, bin_itm_hdr_key			= COALESCE(i.itm_hdr_key,-1)
		, bin_thu_key				= COALESCE(th.thu_key,-1)
		, bin_item 					= s.wms_bin_item
		, bin_src_bin	 			= s.wms_bin_src_bin
		, bin_src_zone 				= s.wms_bin_src_zone
		, bin_src_staging_id 		= s.wms_bin_src_staging_id
		, bin_stk_avial_qty 		= s.wms_bin_stk_avial_qty
		, bin_trn_out_qty 			= s.wms_bin_trn_out_qty
		, bin_tar_bin 				= s.wms_bin_tar_bin
		, bin_tar_zone 				= s.wms_bin_tar_zone
		, bin_trgt_staging_id 		= s.wms_bin_trgt_staging_id
		, bin_lot_no 				= s.wms_bin_lot_no
		, bin_item_sr_no 			= s.wms_bin_item_sr_no
		, bin_item_batch_no 		= s.wms_bin_item_batch_no
		, bin_su_slno 				= s.wms_bin_su_slno
		, bin_su_type 				= s.wms_bin_su_type
		, bin_stk_line_no 			= s.wms_bin_stk_line_no
		, bin_stk_status 			= s.wms_bin_stk_status
		, bin_src_status 			= s.wms_bin_src_status
		, bin_from_thu_sl_no 		= s.wms_bin_from_thu_sl_no
		, bin_target_thu_sl_no 		= s.wms_bin_target_thu_sl_no
		, bin_su 					= s.wms_bin_su
        , bin_thu_id                = s.wms_bin_thu_id 
		, etlactiveind 				= 1
		, etljobname 				= p_etljobname
		, envsourcecd 				= p_envsourcecd
		, datasourcecd 				= p_datasourcecd
		, etlupdatedatetime 		= NOW()	
    FROM stg.stg_wms_bin_exec_item_detail s
	INNER JOIN dwh.f_binexechdr bh 
		ON  s.wms_bin_exec_ou		= bh.bin_exec_ou
		AND s.wms_bin_exec_no 		= bh.bin_exec_no 
		AND s.wms_bin_loc_code		= bh.bin_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_bin_loc_code 		= l.loc_code 
		AND s.wms_bin_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_itemheader i 	
		ON  s.wms_bin_item 			= i.itm_code 
		AND s.wms_bin_exec_ou 		= i.itm_ou 
	LEFT JOIN dwh.d_thu th 			
		ON  s.wms_bin_thu_id 		= th.thu_id
		AND s.wms_bin_exec_ou		= th.thu_ou
    WHERE   t.bin_loc_code			= s.wms_bin_loc_code
		AND	t.bin_exec_no 			= s.wms_bin_exec_no
		AND	t.bin_exec_lineno 		= s.wms_bin_exec_lineno
		AND	t.bin_ref_lineno 		= s.wms_bin_ref_lineno
		AND	t.bin_exec_ou	 		= s.wms_bin_exec_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_binexecitemdetail
	(
		  bin_hdr_key					, bin_loc_key					, bin_itm_hdr_key				, bin_thu_key							
		, bin_loc_code					, bin_exec_no					, bin_exec_lineno				, bin_ref_lineno
		, bin_exec_ou					, bin_item						, bin_src_bin					, bin_src_zone
		, bin_src_staging_id			, bin_stk_avial_qty				, bin_trn_out_qty				, bin_tar_bin
		, bin_tar_zone					, bin_trgt_staging_id			, bin_lot_no					, bin_item_sr_no
		, bin_item_batch_no				, bin_su_slno					, bin_su_type					, bin_stk_line_no
		, bin_stk_status				, bin_src_status				, bin_from_thu_sl_no			, bin_target_thu_sl_no
		, bin_su						, bin_thu_id					, etlactiveind					, etljobname
		, envsourcecd					, datasourcecd					, etlcreatedatetime	
	)	
		
	SELECT DISTINCT 	
		  COALESCE(bh.bin_hdr_key,-1)	, COALESCE(l.loc_key,-1)		, COALESCE(i.itm_hdr_key,-1)	, COALESCE(th.thu_key,-1)			
		, s.wms_bin_loc_code			, s.wms_bin_exec_no				, s.wms_bin_exec_lineno			, s.wms_bin_ref_lineno
		, s.wms_bin_exec_ou				, s.wms_bin_item				, s.wms_bin_src_bin				, s.wms_bin_src_zone
		, s.wms_bin_src_staging_id		, s.wms_bin_stk_avial_qty		, s.wms_bin_trn_out_qty			, s.wms_bin_tar_bin
		, s.wms_bin_tar_zone			, s.wms_bin_trgt_staging_id		, s.wms_bin_lot_no				, s.wms_bin_item_sr_no
		, s.wms_bin_item_batch_no		, s.wms_bin_su_slno				, s.wms_bin_su_type				, s.wms_bin_stk_line_no
		, s.wms_bin_stk_status			, s.wms_bin_src_status			, s.wms_bin_from_thu_sl_no		, s.wms_bin_target_thu_sl_no
		, s.wms_bin_su					, s.wms_bin_thu_id				, 1 AS etlactiveind				, p_etljobname
		, p_envsourcecd					, p_datasourcecd				, NOW()
	FROM stg.stg_wms_bin_exec_item_detail s
	INNER JOIN dwh.f_binexechdr bh 
		ON  s.wms_bin_exec_ou		= bh.bin_exec_ou
		AND s.wms_bin_exec_no 		= bh.bin_exec_no 
		AND s.wms_bin_loc_code		= bh.bin_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_bin_loc_code 		= l.loc_code 
		AND s.wms_bin_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_itemheader i 	
		ON  s.wms_bin_item 			= i.itm_code 
		AND s.wms_bin_exec_ou 		= i.itm_ou 
	LEFT JOIN dwh.d_thu th 			
		ON  s.wms_bin_thu_id 		= th.thu_id
		AND s.wms_bin_exec_ou		= th.thu_ou
	LEFT JOIN dwh.f_binexecitemdetail t  	
		ON  t.bin_loc_code			= s.wms_bin_loc_code
		AND	t.bin_exec_no 			= s.wms_bin_exec_no
		AND	t.bin_exec_lineno 		= s.wms_bin_exec_lineno
		AND	t.bin_ref_lineno 		= s.wms_bin_ref_lineno
		AND	t.bin_exec_ou	 		= s.wms_bin_exec_ou
    WHERE   t.bin_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_bin_exec_item_detail
	(
		  wms_bin_loc_code			, wms_bin_exec_no			, wms_bin_exec_lineno		, wms_bin_ref_lineno
		, wms_bin_exec_ou			, wms_bin_item				, wms_bin_src_bin			, wms_bin_src_zone
		, wms_bin_src_staging_id	, wms_bin_stk_avial_qty		, wms_bin_trn_out_qty		, wms_bin_tar_bin
		, wms_bin_tar_zone			, wms_bin_trgt_staging_id	, wms_bin_lot_no			, wms_bin_item_sr_no
		, wms_bin_item_batch_no		, wms_bin_su_slno			, wms_bin_su_type			, wms_bin_stk_line_no
		, wms_bin_stk_status		, wms_bin_src_status		, wms_bin_from_thu_sl_no	, wms_bin_target_thu_sl_no
		, wms_bin_su				, wms_bin_su2				, wms_bin_su_slno2			, wms_bin_thu_id			, etlcreateddatetime
	
	)
	SELECT 
		  wms_bin_loc_code			, wms_bin_exec_no			, wms_bin_exec_lineno		, wms_bin_ref_lineno
		, wms_bin_exec_ou			, wms_bin_item				, wms_bin_src_bin			, wms_bin_src_zone
		, wms_bin_src_staging_id	, wms_bin_stk_avial_qty		, wms_bin_trn_out_qty		, wms_bin_tar_bin
		, wms_bin_tar_zone			, wms_bin_trgt_staging_id	, wms_bin_lot_no			, wms_bin_item_sr_no
		, wms_bin_item_batch_no		, wms_bin_su_slno			, wms_bin_su_type			, wms_bin_stk_line_no
		, wms_bin_stk_status		, wms_bin_src_status		, wms_bin_from_thu_sl_no	, wms_bin_target_thu_sl_no
		, wms_bin_su				, wms_bin_su2				, wms_bin_su_slno2			, wms_bin_thu_id			, etlcreateddatetime
	FROM stg.stg_wms_bin_exec_item_detail;
    END IF;	
	
    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
		
	EXCEPTION WHEN others THEN       
		   
	GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
			
	CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
			
	SELECT 0 INTO inscnt;
	SELECT 0 INTO updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_binexecitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_binplandetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_binplandetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_depsource VARCHAR(100);

    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
    
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_bin_plan_item_dtl;

	UPDATE dwh.f_binplandetails t
    SET  
	    bin_hdr_key                   				=  bb.bin_hdr_key,
    	bin_loc_dl_key					                = COALESCE(l.loc_key,-1),
        bin_item_batch_no                       		=   s.wms_bin_item_batch_no,
        bin_src_bin                             		=   s.wms_bin_src_bin,
        bin_src_zone                             		=   s.wms_bin_src_zone,
        bin_su                             				=   s.wms_bin_su,
        bin_su_qty                             			=   s.wms_bin_su_qty,
        bin_avial_qty                             		=   s.wms_bin_avial_qty,
        bin_trn_out_qty                             	=   s.wms_bin_trn_out_qty,
        bin_tar_bin                             		=   s.wms_bin_tar_bin,
        bin_tar_zone                             		=   s.wms_bin_tar_zone,
        bin_lot_no                             			=   s.wms_bin_lot_no,
        bin_su_type                             		=   s.wms_bin_su_type,
        bin_su_slno                             		=   s.wms_bin_su_slno,
        bin_thu_typ                             		=   s.wms_bin_thu_typ,
        bin_thu_id                             			=   s.wms_bin_thu_id,
        bin_src_staging_id                             	=   s.wms_bin_src_staging_id,
        bin_trgt_staging_id                             =   s.wms_bin_trgt_staging_id,
        bin_stk_line_no                             	=   s.wms_bin_stk_line_no,
        bin_stk_status                             		=   s.wms_bin_stk_status,
        bin_status                             			=   s.wms_bin_status,
        bin_src_status                             		=   s.wms_bin_src_status,
        bin_from_thu_sl_no                             	=   s.wms_bin_from_thu_sl_no,
        bin_target_thu_sl_no                            =   s.wms_bin_target_thu_sl_no,
        bin_pal_status                             		=   s.wms_bin_pal_status,
        bin_repl_alloc_ln_no                            =   s.wms_bin_repl_alloc_ln_no,
        bin_repl_doc_line_no                            =   s.wms_bin_repl_doc_line_no,
        bin_plan_rsn_code                             	=   s.wms_bin_plan_rsn_code,
        bin_pln_itm_attr1                             	=   s.wms_bin_pln_itm_attr1 ,
		etlactiveind 					                = 1
		, etljobname 					                = p_etljobname
		, envsourcecd 					                = p_envsourcecd
		, datasourcecd 					                = p_datasourcecd
		, etlupdatedatetime 			                = NOW()	
    FROM stg.stg_wms_bin_plan_item_dtl s
	INNER JOIN dwh.f_binplanheader bb
	
     ON  s.wms_bin_loc_code = bb.bin_loc_code 
     and s.wms_bin_pln_no =bb.bin_pln_no 
     and s.wms_bin_pln_ou = bb.bin_pln_ou

	LEFT JOIN dwh.d_location L 		
		ON s.wms_bin_loc_code 	= L.loc_code 
        AND s.wms_bin_pln_ou          = L.loc_ou

    WHERE   
    	       t.bin_loc_code                                	=   s.wms_bin_loc_code
		AND    t.bin_pln_no                                  	=   s.wms_bin_pln_no
		AND    t.bin_pln_lineno                            	  	=   s.wms_bin_pln_lineno
		AND    t.bin_pln_ou                       				=   s.wms_bin_pln_ou
		AND    t.bin_hdr_key                   				=  bb.bin_hdr_key;     

    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_binplandetails
	(   bin_hdr_key, bin_loc_dl_key, bin_loc_code,  bin_pln_no,  bin_pln_lineno,  bin_pln_ou,  bin_item,  bin_item_batch_no,  bin_src_bin,  bin_src_zone,  bin_su,  bin_su_qty,  bin_avial_qty,  bin_trn_out_qty,  bin_tar_bin,  bin_tar_zone,  bin_lot_no,  bin_su_type,  bin_su_slno,  bin_thu_typ,  bin_thu_id,  bin_src_staging_id,  bin_trgt_staging_id,  bin_stk_line_no,  bin_stk_status,  bin_status,  bin_src_status,  bin_from_thu_sl_no,  bin_target_thu_sl_no,  bin_pal_status,  bin_repl_alloc_ln_no,  bin_repl_doc_line_no,  bin_plan_rsn_code,  bin_pln_itm_attr1,   etlactiveind					, etljobname				, envsourcecd, 
		datasourcecd			, etlcreatedatetime
		
	)
	
	SELECT 

      bb.bin_hdr_key, COALESCE(l.loc_key,-1),OH.wms_bin_loc_code,  OH.wms_bin_pln_no,  OH.wms_bin_pln_lineno,  OH.wms_bin_pln_ou,  OH.wms_bin_item,  OH.wms_bin_item_batch_no,  OH.wms_bin_src_bin,  OH.wms_bin_src_zone,  OH.wms_bin_su,  OH.wms_bin_su_qty,  OH.wms_bin_avial_qty,  OH.wms_bin_trn_out_qty,  OH.wms_bin_tar_bin,  OH.wms_bin_tar_zone,  OH.wms_bin_lot_no,  OH.wms_bin_su_type,  OH.wms_bin_su_slno,  OH.wms_bin_thu_typ,  OH.wms_bin_thu_id,  OH.wms_bin_src_staging_id,  OH.wms_bin_trgt_staging_id,  OH.wms_bin_stk_line_no,  OH.wms_bin_stk_status,  OH.wms_bin_status,  OH.wms_bin_src_status,  OH.wms_bin_from_thu_sl_no,  OH.wms_bin_target_thu_sl_no,  OH.wms_bin_pal_status,  OH.wms_bin_repl_alloc_ln_no,  OH.wms_bin_repl_doc_line_no,  OH.wms_bin_plan_rsn_code,  OH.wms_bin_pln_itm_attr1,
           1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,                      NOW()
      
	FROM stg.stg_wms_bin_plan_item_dtl OH
	INNER JOIN dwh.f_binplanheader bb
	
     ON  OH.wms_bin_loc_code = bb.bin_loc_code 
     and OH.wms_bin_pln_no =bb.bin_pln_no 
     and OH.wms_bin_pln_ou = bb.bin_pln_ou

	LEFT JOIN dwh.d_location L 		
		ON OH.wms_bin_loc_code 	= L.loc_code 
        AND OH.wms_bin_pln_ou          = L.loc_ou

  

	LEFT JOIN dwh.f_binplandetails FH 	
		ON 
  
    	   	    FH.bin_loc_code      =   OH.wms_bin_loc_code
 			AND	FH.bin_pln_no        =   OH.wms_bin_pln_no
 			AND	FH.bin_pln_lineno    =   OH.wms_bin_pln_lineno
 			AND	FH.bin_pln_ou        =   OH.wms_bin_pln_ou
			AND FH.bin_hdr_key         =  bb.bin_hdr_key
	
    WHERE FH.bin_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_bin_plan_item_dtl

	(wms_bin_loc_code,  wms_bin_pln_no,  wms_bin_pln_lineno,  wms_bin_pln_ou,  wms_bin_pln_status,  wms_bin_item,  wms_bin_item_batch_no,  wms_bin_item_sr_no,  wms_bin_uid,  wms_bin_src_bin,  wms_bin_src_zone,  wms_bin_su,  wms_bin_su_qty,  wms_bin_avial_qty,  wms_bin_trn_out_qty,  wms_bin_tar_bin,  wms_bin_tar_zone,  wms_bin_trn_in_qty,  wms_bin_lot_no,  wms_bin_su_type,  wms_bin_su_slno,  wms_bin_uid_slno,  wms_bin_thu_typ,  wms_bin_thu_id,  wms_bin_src_staging_id,  wms_bin_trgt_staging_id,  wms_bin_stk_line_no,  wms_bin_stk_status,  wms_bin_consignee,  wms_bin_customer,  wms_bin_gr_date,  wms_bin_status,  wms_bin_trans_date,  wms_bin_trans_number,  wms_bin_trans_type,  wms_bin_src_status,  wms_bin_mul_batch_flg,  wms_bin_from_thu_sl_no,  wms_bin_target_thu_sl_no,  wms_bin_pal_status,  wms_bin_thu2_sl_no,  wms_bin_repl_alloc_ln_no,  wms_bin_repl_doc_line_no,  wms_bin_thu2_id,  wms_bin_su2,  wms_bin_su_slno2,  wms_bin_su_qty2,  wms_bin_prof_type,  wms_bin_trans_uom,  wms_bin_trans_uom_qty,  wms_bin_plan_rsn_code,  wms_bin_pln_itm_attr1,  wms_bin_pln_itm_attr10,  wms_bin_pln_itm_attr2,  wms_bin_pln_itm_attr3,  wms_bin_pln_itm_attr4,  wms_bin_pln_itm_attr5,  wms_bin_pln_itm_attr6,  wms_bin_pln_itm_attr7,  wms_bin_pln_itm_attr8,  wms_bin_pln_itm_attr9,
	 etlcreateddatetime
	)
	SELECT 

	wms_bin_loc_code,  wms_bin_pln_no,  wms_bin_pln_lineno,  wms_bin_pln_ou,  wms_bin_pln_status,  wms_bin_item,  wms_bin_item_batch_no,  wms_bin_item_sr_no,  wms_bin_uid,  wms_bin_src_bin,  wms_bin_src_zone,  wms_bin_su,  wms_bin_su_qty,  wms_bin_avial_qty,  wms_bin_trn_out_qty,  wms_bin_tar_bin,  wms_bin_tar_zone,  wms_bin_trn_in_qty,  wms_bin_lot_no,  wms_bin_su_type,  wms_bin_su_slno,  wms_bin_uid_slno,  wms_bin_thu_typ,  wms_bin_thu_id,  wms_bin_src_staging_id,  wms_bin_trgt_staging_id,  wms_bin_stk_line_no,  wms_bin_stk_status,  wms_bin_consignee,  wms_bin_customer,  wms_bin_gr_date,  wms_bin_status,  wms_bin_trans_date,  wms_bin_trans_number,  wms_bin_trans_type,  wms_bin_src_status,  wms_bin_mul_batch_flg,  wms_bin_from_thu_sl_no,  wms_bin_target_thu_sl_no,  wms_bin_pal_status,  wms_bin_thu2_sl_no,  wms_bin_repl_alloc_ln_no,  wms_bin_repl_doc_line_no,  wms_bin_thu2_id,  wms_bin_su2,  wms_bin_su_slno2,  wms_bin_su_qty2,  wms_bin_prof_type,  wms_bin_trans_uom,  wms_bin_trans_uom_qty,  wms_bin_plan_rsn_code,  wms_bin_pln_itm_attr1,  wms_bin_pln_itm_attr10,  wms_bin_pln_itm_attr2,  wms_bin_pln_itm_attr3,  wms_bin_pln_itm_attr4,  wms_bin_pln_itm_attr5,  wms_bin_pln_itm_attr6,  wms_bin_pln_itm_attr7,  wms_bin_pln_itm_attr8,  wms_bin_pln_itm_attr9,        
 	etlcreateddatetime
	FROM stg.stg_wms_bin_plan_item_dtl;
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
  
    EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
    
 
   
END;
$$;


ALTER PROCEDURE dwh.usp_f_binplandetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_binplanheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_binplanheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_bin_plan_hdr;

	UPDATE dwh.f_binPlanHeader t
    SET  
    	bin_loc_key					    = COALESCE(l.loc_key,-1),
		bin_pln_date       =   s.wms_bin_pln_date,
		bin_pln_status     =   s.wms_bin_pln_status,
		bin_mhe            =   s.wms_bin_mhe,
		bin_employee       =   s.wms_bin_employee,
		bin_created_by     =   s.wms_bin_created_by,
		bin_created_date   =   s.wms_bin_created_date,
		bin_modified_by    =   s.wms_bin_modified_by,
		bin_modified_date  =   s.wms_bin_modified_date,
		bin_timestamp      =   s.wms_bin_timestamp,
		bin_refdoc_no      =   s.wms_bin_refdoc_no,
		bin_gen_from       =   s.wms_bin_gen_from,
		bin_source_docno   =   s.wms_bin_source_docno,
		bin_source_stage   =   s.wms_bin_source_stage,
		bin_fr_insp        =   s.wms_bin_fr_insp,
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_bin_plan_hdr s
	LEFT JOIN dwh.d_location L 		
		ON s.wms_bin_loc_code 	= L.loc_code 
        AND s.wms_bin_pln_ou          = L.loc_ou

    WHERE   
    	      bin_loc_code =s.wms_bin_loc_code
		AND   bin_pln_no   =s.wms_bin_pln_no  
		AND   bin_pln_ou   =s.wms_bin_pln_ou;  

    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_binPlanHeader
	(   bin_loc_key,  bin_loc_code,  bin_pln_no,  bin_pln_ou,  bin_pln_date,  bin_pln_status,  bin_mhe,  bin_employee,  bin_created_by,  bin_created_date,  bin_modified_by,  bin_modified_date,  bin_timestamp,  bin_refdoc_no,  bin_gen_from,  bin_source_docno,  bin_source_stage,  bin_fr_insp,   etlactiveind					, etljobname				, envsourcecd, 
		datasourcecd			, etlcreatedatetime
		
	)
	
	SELECT 

      COALESCE(l.loc_key,-1),OH.wms_bin_loc_code,  OH.wms_bin_pln_no,  OH.wms_bin_pln_ou,  OH.wms_bin_pln_date,  OH.wms_bin_pln_status,  OH.wms_bin_mhe,  OH.wms_bin_employee,  OH.wms_bin_created_by,  OH.wms_bin_created_date,  OH.wms_bin_modified_by,  OH.wms_bin_modified_date,  OH.wms_bin_timestamp,  OH.wms_bin_refdoc_no,  OH.wms_bin_gen_from,  OH.wms_bin_source_docno,  OH.wms_bin_source_stage,  OH.wms_bin_fr_insp,
           1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,                      NOW()
      
	FROM stg.stg_wms_bin_plan_hdr OH
	LEFT JOIN dwh.d_location L 		
		ON OH.wms_bin_loc_code 	= L.loc_code 
        AND OH.wms_bin_pln_ou          = L.loc_ou


  

	LEFT JOIN dwh.f_binPlanHeader FH 	
		ON 
  
    	      FH.bin_loc_code =OH.wms_bin_loc_code
		AND   FH.bin_pln_no   =OH.wms_bin_pln_no  
		AND   FH.bin_pln_ou   =OH.wms_bin_pln_ou 
	
    WHERE FH.bin_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_bin_plan_hdr

	(wms_bin_loc_code,  wms_bin_pln_no,  wms_bin_pln_ou,  wms_bin_pln_date,  wms_bin_pln_status,  wms_bin_mhe,  wms_bin_employee,  wms_bin_created_by,  wms_bin_created_date,  wms_bin_modified_by,  wms_bin_modified_date,  wms_bin_timestamp,  wms_bin_userdefined1,  wms_bin_userdefined2,  wms_bin_userdefined3,  wms_bin_refdoc_no,  wms_bin_gen_from,  wms_bin_source_docno,  wms_bin_source_stage,  wms_bin_fr_insp,  wms_bin_mul_repl,  wms_bin_first_pln_no,  wms_bin_comp_flag,
	 etlcreateddatetime
	)
	SELECT wms_bin_loc_code,  wms_bin_pln_no,  wms_bin_pln_ou,  wms_bin_pln_date,  wms_bin_pln_status,  wms_bin_mhe,  wms_bin_employee,  wms_bin_created_by,  wms_bin_created_date,  wms_bin_modified_by,  wms_bin_modified_date,  wms_bin_timestamp,  wms_bin_userdefined1,  wms_bin_userdefined2,  wms_bin_userdefined3,  wms_bin_refdoc_no,  wms_bin_gen_from,  wms_bin_source_docno,  wms_bin_source_stage,  wms_bin_fr_insp,  wms_bin_mul_repl,  wms_bin_first_pln_no,  wms_bin_comp_flag,        
 etlcreateddatetime
	FROM stg.stg_wms_bin_plan_hdr;
    END IF;
    
    
     EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
       
    
 
   
END;
$$;


ALTER PROCEDURE dwh.usp_f_binplanheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_bookingrequest(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_bookingrequest(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_br_booking_request_hdr;

    UPDATE dwh.F_BookingRequest t
    SET
    
        br_loc_key							= COALESCE(l.loc_key,-1),
		br_curr_key							= COALESCE(c.curr_key,-1),
		br_rou_key							= COALESCE(r.rou_key,-1),
		br_customer_key						= COALESCE(ct.customer_key,-1),
        br_customer_id                      = s.br_customer_id,
        br_status                           = s.br_status,
        br_type                             = s.br_type,
        br_customer_ref_no                  = s.br_customer_ref_no,
        br_receiver_ref_no                  = s.br_receiver_ref_no,
        br_payment_ref_no                   = s.br_payment_ref_no,
        br_service_type                     = s.br_service_type,
        br_sub_service_type                 = s.br_sub_service_type,
        br_transport_mode                   = s.br_transport_mode,
        br_inco_terms                       = s.br_inco_terms,
        br_comments                         = s.br_comments,
        br_consigner_customer_same          = s.br_consigner_customer_same,
        br_timestamp                        = s.br_timestamp,
        br_original_br_id                   = s.br_original_br_id,
        br_request_confirmation_date        = s.br_request_confirmation_date,
        br_validation_profile_id            = s.br_validation_profile_id,
        br_contract_id                      = s.br_contract_id,
        br_route_id                         = s.br_route_id,
        br_revenue                          = s.br_revenue,
        br_error_code                       = s.br_error_code,
        br_priority                         = s.br_priority,
        br_recurring_flag                   = s.br_recurring_flag,
        br_customer_location                = s.br_customer_location,
        br_payment_type                     = s.br_payment_type,
        br_customer_primary_phone           = s.br_customer_primary_phone,
        br_customer_email_id                = s.br_customer_email_id,
        br_sender_ref_no                    = s.br_sender_ref_no,
        br_create_as_template               = s.br_create_as_template,
        br_creation_date                    = s.br_creation_date,
        br_created_by                       = s.br_created_by,
        br_last_modified_date               = s.br_last_modified_date,
        br_last_modified_by                 = s.br_last_modified_by,
        br_billing_status                   = s.br_billing_status,
        br_requested_date                   = s.br_requested_date,
        br_reason_code                      = s.br_reason_code,
        br_remarks                          = s.br_remarks,
        br_contract_amend_no                = s.br_contract_amend_no,
        br_Hazardous                        = s.br_Hazardous,
        br_order_type                       = s.br_order_type,
        br_inslia_redington                 = s.br_inslia_redington,
        br_shippers_inv_no                  = s.br_shippers_inv_no,
        br_invoice_value                    = s.br_invoice_value,
        br_currency                         = s.br_currency,
        brrd_shippers_invoice_date          = s.brrd_shippers_invoice_date,
        br_bill_to_id                       = s.br_bill_to_id,
        br_creation_source                  = s.br_creation_source,
        br_wf_guid                          = s.br_wf_guid,
        br_previous_status                  = s.br_previous_status,
        br_status_prior_Amend               = s.br_status_prior_Amend,
        br_declared_value                   = s.br_declared_value,
        br_Insurance_value                  = s.br_Insurance_value,
        br_cod                              = s.br_cod,
        br_cop                              = s.br_cop,
        br_shipping_fee                     = s.br_shipping_fee,
        br_collection_mode                  = s.br_collection_mode,
        br_include                          = s.br_include,
        br_reversal_jv_date                 = s.br_reversal_jv_date,
        etlactiveind                        = 1,
        etljobname                          = p_etljobname,
        envsourcecd                         = p_envsourcecd,
        datasourcecd                        = p_datasourcecd,
        etlupdatedatetime                   = NOW()
    FROM stg.stg_tms_br_booking_request_hdr s
	LEFT JOIN dwh.d_location l 		
		ON 	s.br_customer_location 			= l.loc_code 
        AND s.br_ouinstance        			= l.loc_ou
	LEFT JOIN dwh.d_customer ct 		
		ON 	s.br_customer_id  				= ct.customer_id 
        AND s.br_ouinstance        			= ct.customer_ou
	LEFT JOIN dwh.d_currency c 		
		ON 	s.br_currency  					= c.iso_curr_code 
	LEFT JOIN dwh.d_route r 		
		ON 	s.br_route_id  					= r.rou_route_id 
        AND s.br_ouinstance        			= r.rou_ou
    WHERE 	t.br_ouinstance 				= s.br_ouinstance
    AND 	t.br_request_Id 				= s.br_request_Id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_BookingRequest
    (
		br_loc_key,					br_curr_key,					br_rou_key,					br_customer_key,
        br_ouinstance, 				br_request_Id, 					br_customer_id, 			br_status, 					br_type, 
		br_customer_ref_no, 		br_receiver_ref_no, 			br_payment_ref_no, 			br_service_type, 			br_sub_service_type, 
		br_transport_mode, 			br_inco_terms, 					br_comments, 				br_consigner_customer_same, br_timestamp, 
		br_original_br_id, 			br_request_confirmation_date, 	br_validation_profile_id, 	br_contract_id, 			br_route_id, 
		br_revenue, 				br_error_code, 					br_priority, 				br_recurring_flag, 			br_customer_location, 
		br_payment_type, 			br_customer_primary_phone, 		br_customer_email_id, 		br_sender_ref_no, 			br_create_as_template, 
		br_creation_date, 			br_created_by, 					br_last_modified_date, 		br_last_modified_by, 		br_billing_status, 
		br_requested_date, 			br_reason_code, 				br_remarks, 				br_contract_amend_no, 		br_Hazardous, 
		br_order_type, 				br_inslia_redington, 			br_shippers_inv_no, 		br_invoice_value, 			br_currency, 
		brrd_shippers_invoice_date, br_bill_to_id, 					br_creation_source, 		br_wf_guid, 				br_previous_status, 
		br_status_prior_Amend, 		br_declared_value, 				br_Insurance_value, 		br_cod, br_cop, 			br_shipping_fee, 
		br_collection_mode, 		br_include, 					br_reversal_jv_date, 		etlactiveind, 				etljobname, 
		envsourcecd, 				datasourcecd, 					etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),			COALESCE(c.curr_key,-1),			COALESCE(r.rou_key,-1),			COALESCE(ct.customer_key,-1),
		s.br_ouinstance, 				s.br_request_Id, 					s.br_customer_id, 				s.br_status, 					s.br_type, 
		s.br_customer_ref_no, 			s.br_receiver_ref_no, 				s.br_payment_ref_no, 			s.br_service_type, 				s.br_sub_service_type, 
		s.br_transport_mode, 			s.br_inco_terms, 					s.br_comments, 					s.br_consigner_customer_same, 	s.br_timestamp, 
		s.br_original_br_id, 			s.br_request_confirmation_date, 	s.br_validation_profile_id, 	s.br_contract_id, 				s.br_route_id, 
		s.br_revenue, 					s.br_error_code, 					s.br_priority, 					s.br_recurring_flag, 			s.br_customer_location, 
		s.br_payment_type, 				s.br_customer_primary_phone, 		s.br_customer_email_id, 		s.br_sender_ref_no, 			s.br_create_as_template, 
		s.br_creation_date, 			s.br_created_by, 					s.br_last_modified_date, 		s.br_last_modified_by, 			s.br_billing_status, 
		s.br_requested_date, 			s.br_reason_code, 					s.br_remarks, 					s.br_contract_amend_no, 		s.br_Hazardous, 
		s.br_order_type, 				s.br_inslia_redington, 				s.br_shippers_inv_no, 			s.br_invoice_value, 			s.br_currency, 
		s.brrd_shippers_invoice_date, 	s.br_bill_to_id, 					s.br_creation_source, 			s.br_wf_guid, 					s.br_previous_status, 
		s.br_status_prior_Amend, 		s.br_declared_value, 				s.br_Insurance_value, 			s.br_cod, s.br_cop, 			s.br_shipping_fee, 
		s.br_collection_mode, 			s.br_include, 						s.br_reversal_jv_date, 		
        1, 								p_etljobname, 						p_envsourcecd, 					p_datasourcecd, 				NOW()
    FROM stg.stg_tms_br_booking_request_hdr s
	LEFT JOIN dwh.d_location l 		
		ON 	s.br_customer_location 			= l.loc_code 
        AND s.br_ouinstance        			= l.loc_ou
	LEFT JOIN dwh.d_customer ct 		
		ON 	s.br_customer_id  				= ct.customer_id 
        AND s.br_ouinstance        			= ct.customer_ou
	LEFT JOIN dwh.d_currency c 		
		ON 	s.br_currency  					= c.iso_curr_code 
	LEFT JOIN dwh.d_route r 		
		ON 	s.br_route_id  					= r.rou_route_id 
        AND s.br_ouinstance        			= r.rou_ou
    LEFT JOIN dwh.F_BookingRequest t
    ON 		s.br_ouinstance 				= t.br_ouinstance
    AND 	s.br_request_Id 				= t.br_request_Id
    WHERE 	t.br_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_br_booking_request_hdr
    (
        br_ouinstance, 			br_request_Id, 					br_customer_id, 			br_status, 					br_type, 
		br_customer_ref_no, 	br_receiver_ref_no, 			br_payment_ref_no, 			br_service_type, 			br_sub_service_type, 
		br_transport_mode, 		br_inco_terms, 					br_ref_doc_type1, 			br_ref_doc_type2, 			br_ref_doc_type3, 
		br_ref_doc_no1, 		br_ref_doc_no2, 				br_ref_doc_no3, 			br_quote_requested, 		br_requestor_name, 
		br_phone_no, 			br_email_id, 					br_comments, 				br_consigner_customer_same, br_quote_currency, 
		br_pref_cha_name, 		br_pref_cha_phone_no, 			br_pref_cha_email_id, 		br_timestamp, 				br_original_br_id, 
		br_unique_id, 			br_request_confirmation_date, 	br_validation_profile_id, 	br_contract_id, 			br_rate_id, 
		br_route_id, 			br_sales_account, 				br_revenue, 				br_error_code, 				br_priority, 
		br_recurring_flag, 		br_customer_location, 			br_payment_type, 			br_customer_primary_phone, 	br_customer_email_id, 
		br_consignor_id, 		br_consignor_primary_phone, 	br_consignor_email_id, 		br_sender_ref_no, 			br_create_as_template, 
		br_creation_date, 		br_created_by, 					br_last_modified_date, 		br_last_modified_by, 		br_fc_or_regular, 
		br_billing_status, 		br_requested_date, 				br_reason_code, 			br_remarks, 				br_contract_amend_no, 
		br_Hazardous, 			br_break_burst_parent, 			br_break_burst_type, 		br_order_type, 				br_inslia_redington, 
		br_shippers_inv_no, 	br_invoice_value, 				br_currency, 				br_cargo_desc, 				br_marks_and_numbers, 
		br_load_type, 			br_delivery_terms, 				brrd_shippers_invoice_date, br_operating_plan_ref, 		br_bill_to_id, 
		br_creation_source, 	br_creation_source_id, 			br_workflow_status, 		br_workflow_error, 			br_wf_guid, 
		br_previous_status, 	br_status_prior_Amend, 			br_clubbing_type, 			br_time_bound, 				br_source, 
		br_declared_value, 		br_Insurance_value, 			br_tariff_adv_YN, 			br_cod, 					br_cop, 
		br_shipping_fee, 		br_collection_mode, 			br_advance_tariff_YN, 		br_penalty_flag, 			br_include, 
		br_error_desc, 			br_Franchisee_bill_status, 		br_creationservice_name, 	br_sla_period, 				br_sla_period_uom, 
		br_sla_breach_date, 	br_accrual_jv_no, 				br_reversal_jv_no, 			br_remit_billing_status, 	br_remit_no, 
		br_remit_date, 			br_remit_status, 				br_accrual_jv_date, 		br_accrual_jv_amount, 		br_reversal_jv_date, 
		br_reversal_jv_amount, 	br_promo_dis_amount, 			br_promo_code, 				etlcreateddatetime
    )
    SELECT
        br_ouinstance, 			br_request_Id, 					br_customer_id, 			br_status, 					br_type, 
		br_customer_ref_no, 	br_receiver_ref_no, 			br_payment_ref_no, 			br_service_type, 			br_sub_service_type, 
		br_transport_mode, 		br_inco_terms, 					br_ref_doc_type1, 			br_ref_doc_type2, 			br_ref_doc_type3, 
		br_ref_doc_no1, 		br_ref_doc_no2, 				br_ref_doc_no3, 			br_quote_requested, 		br_requestor_name, 
		br_phone_no, 			br_email_id, 					br_comments, 				br_consigner_customer_same, br_quote_currency, 
		br_pref_cha_name, 		br_pref_cha_phone_no, 			br_pref_cha_email_id, 		br_timestamp, 				br_original_br_id, 
		br_unique_id, 			br_request_confirmation_date, 	br_validation_profile_id, 	br_contract_id, 			br_rate_id, 
		br_route_id, 			br_sales_account, 				br_revenue, 				br_error_code, 				br_priority, 
		br_recurring_flag, 		br_customer_location, 			br_payment_type, 			br_customer_primary_phone, 	br_customer_email_id, 
		br_consignor_id, 		br_consignor_primary_phone, 	br_consignor_email_id, 		br_sender_ref_no, 			br_create_as_template, 
		br_creation_date, 		br_created_by, 					br_last_modified_date, 		br_last_modified_by, 		br_fc_or_regular, 
		br_billing_status, 		br_requested_date, 				br_reason_code, 			br_remarks, 				br_contract_amend_no, 
		br_Hazardous, 			br_break_burst_parent, 			br_break_burst_type, 		br_order_type, 				br_inslia_redington, 
		br_shippers_inv_no, 	br_invoice_value, 				br_currency, 				br_cargo_desc, 				br_marks_and_numbers, 
		br_load_type, 			br_delivery_terms, 				brrd_shippers_invoice_date, br_operating_plan_ref, 		br_bill_to_id, 
		br_creation_source, 	br_creation_source_id, 			br_workflow_status, 		br_workflow_error, 			br_wf_guid, 
		br_previous_status, 	br_status_prior_Amend, 			br_clubbing_type, 			br_time_bound, 				br_source, 
		br_declared_value, 		br_Insurance_value, 			br_tariff_adv_YN, 			br_cod, 					br_cop, 
		br_shipping_fee, 		br_collection_mode, 			br_advance_tariff_YN, 		br_penalty_flag, 			br_include, 
		br_error_desc, 			br_Franchisee_bill_status, 		br_creationservice_name, 	br_sla_period, 				br_sla_period_uom, 
		br_sla_breach_date, 	br_accrual_jv_no, 				br_reversal_jv_no, 			br_remit_billing_status, 	br_remit_no, 
		br_remit_date, 			br_remit_status, 				br_accrual_jv_date, 		br_accrual_jv_amount, 		br_reversal_jv_date, 
		br_reversal_jv_amount, 	br_promo_dis_amount, 			br_promo_code, 				etlcreateddatetime
    FROM stg.stg_tms_br_booking_request_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_bookingrequest(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_bookingrequestreasonhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_bookingrequestreasonhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;
DECLARE
  v_min INTEGER;
 v_max INTEGER;
 v_amendno_f INTEGER;
 v_createddate character varying(100);
 v_br_ouinstance INTEGER;
 v_br_request_id character varying(72);
 v_amend_no_stg INTEGER;
BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_br_booking_request_reason_hist;

	call dwh.usp_booking_his_amendno_update();
	
    UPDATE dwh.f_bookingRequestReasonHistory t
    SET
	    br_hdr_key           = fh.br_key,
        br_status            = s.br_status,
        reason_code          = s.reason_code,
        reason_desc          = s.reason_desc,
        created_date         = s.created_date,
        etlactiveind         = 1,
        etljobname           = p_etljobname,
        envsourcecd          = p_envsourcecd,
        datasourcecd         = p_datasourcecd,
        etlupdatedatetime    = NOW()
    FROM	stg.stg_tms_br_booking_request_reason_hist s
	INNER JOIN dwh.f_bookingrequest fh
	ON      s.br_request_Id     = fh.br_request_id
	AND     s.br_ouinstance     = fh.br_ouinstance
    WHERE	t.br_ouinstance		= s.br_ouinstance
    AND		t.br_request_Id		= s.br_request_Id
    AND		t.amend_no			= s.amend_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_bookingRequestReasonHistory
    (
        br_hdr_key,br_ouinstance, br_request_Id, amend_no, br_status, reason_code, reason_desc, created_date, etlactiveind, etljobname, 
		envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.br_key,s.br_ouinstance, s.br_request_Id, s.amend_no, s.br_status, s.reason_code, s.reason_desc, s.created_date, 1, p_etljobname, 
		p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_br_booking_request_reason_hist s
	INNER JOIN dwh.f_bookingrequest fh
	ON      s.br_request_Id     = fh.br_request_id
	AND     s.br_ouinstance     = fh.br_ouinstance
    LEFT JOIN dwh.f_bookingRequestReasonHistory t
    ON s.br_ouinstance = t.br_ouinstance
    AND s.br_request_Id = t.br_request_Id
    AND s.amend_no = t.amend_no
    WHERE t.br_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_br_booking_request_reason_hist
    (
        br_ouinstance, br_request_Id, amend_no, br_status, reason_code, reason_desc, created_date, etlcreateddatetime
    )
    SELECT
        br_ouinstance, br_request_Id, amend_no, br_status, reason_code, reason_desc, created_date, etlcreateddatetime
    FROM stg.stg_tms_br_booking_request_reason_hist;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_bookingrequestreasonhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brconsignmentconsigneedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brconsignmentconsigneedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_brccd_consgt_consignee_details;

    UPDATE dwh.F_BRConsignmentConsigneeDetail t
    SET 
		br_key								= fh.br_key,
		brccd_consignee_hdr_key				= COALESCE(c.consignee_hdr_key,-1),
        ccd_consignee_id                    = s.ccd_consignee_id,
        ccd_consignee_name                  = s.ccd_consignee_name,
        ccd_consignee_contact_person        = s.ccd_consignee_contact_person,
        ccd_consignee_address_line1         = s.ccd_consignee_address_line1,
        ccd_consignee_address_line2         = s.ccd_consignee_address_line2,
        ccd_consignee_address_line3         = s.ccd_consignee_address_line3,
        ccd_consignee_postal_code           = s.ccd_consignee_postal_code,
        ccd_consignee_subzone               = s.ccd_consignee_subzone,
        ccd_consignee_city                  = s.ccd_consignee_city,
        ccd_consignee_zone                  = s.ccd_consignee_zone,
        ccd_consignee_state                 = s.ccd_consignee_state,
        ccd_consignee_region                = s.ccd_consignee_region,
        ccd_consignee_country               = s.ccd_consignee_country,
        ccd_created_by                      = s.ccd_created_by,
        ccd_created_Date                    = s.ccd_created_Date,
        ccd_last_modified_date              = s.ccd_last_modified_date,
        ccd_last_modified_by                = s.ccd_last_modified_by,
        etlactiveind                        = 1,
        etljobname                          = p_etljobname,
        envsourcecd                         = p_envsourcecd,
        datasourcecd                        = p_datasourcecd,
        etlupdatedatetime                   = NOW()
    FROM stg.stg_tms_brccd_consgt_consignee_details s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.ccd_ouinstance 			= fh.br_ouinstance
            AND S.ccd_br_id                 = fh.br_request_Id
	LEFT JOIN dwh.d_consignee c 			
			ON 	s.ccd_consignee_id 			= c.consignee_id
			AND s.ccd_ouinstance        	= c.consignee_ou
    WHERE 		t.ccd_ouinstance 			= s.ccd_ouinstance
    AND 		t.ccd_br_id 				= s.ccd_br_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_BRConsignmentConsigneeDetail
    (
        br_key,                         brccd_consignee_hdr_key,
        ccd_ouinstance, 				ccd_br_id, 						ccd_consignee_id, 				ccd_consignee_name, 		ccd_consignee_contact_person, 
		ccd_consignee_address_line1, 	ccd_consignee_address_line2, 	ccd_consignee_address_line3, 	ccd_consignee_postal_code, 	ccd_consignee_subzone, 
		ccd_consignee_city, 			ccd_consignee_zone, 			ccd_consignee_state, 			ccd_consignee_region, 		ccd_consignee_country, 
		ccd_created_by, 				ccd_created_Date, 				ccd_last_modified_date, 		ccd_last_modified_by, 		etlactiveind, 
		etljobname, 					envsourcecd, 					datasourcecd, 					etlcreatedatetime
    )

    SELECT
        fh.br_key,                      COALESCE(c.consignee_hdr_key,-1),
        s.ccd_ouinstance, 				s.ccd_br_id, 					s.ccd_consignee_id, 			s.ccd_consignee_name, 			s.ccd_consignee_contact_person, 
		s.ccd_consignee_address_line1, 	s.ccd_consignee_address_line2, 	s.ccd_consignee_address_line3, 	s.ccd_consignee_postal_code, 	s.ccd_consignee_subzone, 
		s.ccd_consignee_city, 			s.ccd_consignee_zone, 			s.ccd_consignee_state, 			s.ccd_consignee_region, 		s.ccd_consignee_country, 
		s.ccd_created_by, 				s.ccd_created_Date, 			s.ccd_last_modified_date, 		s.ccd_last_modified_by, 		1,
		p_etljobname,					p_envsourcecd, 					p_datasourcecd, NOW()
    FROM stg.stg_tms_brccd_consgt_consignee_details s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.ccd_ouinstance 			= fh.br_ouinstance
            AND S.ccd_br_id                 = fh.br_request_Id
	LEFT JOIN 	dwh.d_consignee c 			
			ON 	s.ccd_consignee_id 			= c.consignee_id
			AND s.ccd_ouinstance        	= c.consignee_ou
    LEFT JOIN 	dwh.F_BRConsignmentConsigneeDetail t
    ON 			s.ccd_ouinstance 			= t.ccd_ouinstance
    AND 		s.ccd_br_id 				= t.ccd_br_id
    WHERE 		t.ccd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_brccd_consgt_consignee_details
    (
        ccd_ouinstance, 				ccd_br_id, 						ccd_consignee_id, 				ccd_consignee_name, 			ccd_consignee_contact_person, 
		ccd_consignee_address_line1, 	ccd_consignee_address_line2, 	ccd_consignee_address_line3, 	ccd_consignee_postal_code, 		ccd_consignee_subzone, 
		ccd_consignee_city, 			ccd_consignee_zone, 			ccd_consignee_state, 			ccd_consignee_region, 			ccd_consignee_country, 
		ccd_np_sameas_consignee, 		ccd_notify_party_id, 			ccd_np_name, 					ccd_np_contact_person, 			ccd_np_address_line1, 
		ccd_np_address_line2, 			ccd_np_address_line3, 			ccd_np_postal_code, 			ccd_np_subzone, 				ccd_np_city, 
		ccd_np_zone, 					ccd_np_state, 					ccd_np_region, 					ccd_np_country, 				ccd_np_primary_phone, 
		ccd_np_secondary_phone, 		ccd_np_email_id, 				ccd_created_by, 				ccd_created_Date, 				ccd_last_modified_date, 
		ccd_last_modified_by, 			ccd_consignee_type_of_entry, 	ccd_timestamp, 					etlcreateddatetime
    )
    SELECT
		ccd_ouinstance, 				ccd_br_id, 						ccd_consignee_id, 				ccd_consignee_name, 			ccd_consignee_contact_person, 
		ccd_consignee_address_line1, 	ccd_consignee_address_line2, 	ccd_consignee_address_line3, 	ccd_consignee_postal_code, 		ccd_consignee_subzone, 
		ccd_consignee_city, 			ccd_consignee_zone, 			ccd_consignee_state, 			ccd_consignee_region, 			ccd_consignee_country, 
		ccd_np_sameas_consignee, 		ccd_notify_party_id, 			ccd_np_name, 					ccd_np_contact_person, 			ccd_np_address_line1, 
		ccd_np_address_line2, 			ccd_np_address_line3, 			ccd_np_postal_code, 			ccd_np_subzone, 				ccd_np_city, 
		ccd_np_zone, 					ccd_np_state, 					ccd_np_region, 					ccd_np_country, 				ccd_np_primary_phone, 
		ccd_np_secondary_phone, 		ccd_np_email_id, 				ccd_created_by, 				ccd_created_Date, 				ccd_last_modified_date, 
		ccd_last_modified_by, 			ccd_consignee_type_of_entry, 	ccd_timestamp, 					etlcreateddatetime
    FROM stg.stg_tms_brccd_consgt_consignee_details;
    END IF;
    ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_brconsignmentconsigneedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brconsignmentdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brconsignmentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_brcd_consgt_details;

    UPDATE dwh.F_BRConsignmentDetail t
    SET
		br_key							  = fh.br_key,
		brcd_thu_key			  		  = COALESCE(th.thu_key,-1),
		brcd_curr_key			  		  = COALESCE(c.curr_key,-1),
        cd_thu_id                         = s.cd_thu_id,
        cd_thu_qty                        = s.cd_thu_qty,
        cd_thu_qty_uom                    = s.cd_thu_qty_uom,
        cd_declared_value_of_goods        = s.cd_declared_value_of_goods,
        cd_insurance_value                = s.cd_insurance_value,
        cd_currency                       = s.cd_currency,
        cd_class_of_stores                = s.cd_class_of_stores,
        cd_volume                         = s.cd_volume,
        cd_volume_uom                     = s.cd_volume_uom,
        cd_gross_weight                   = s.cd_gross_weight,
        cd_weight_uom                     = s.cd_weight_uom,
        cd_creation_date                  = s.cd_creation_date,
        cd_created_by                     = s.cd_created_by,
        cd_last_modified_date             = s.cd_last_modified_date,
        cd_last_modified_by               = s.cd_last_modified_by,
        cd_unique_id                      = s.cd_unique_id,
        cd_no_of_pallet_space             = s.cd_no_of_pallet_space,
        cd_transfer_to                    = s.cd_transfer_to,
        cd_commoditycode                  = s.cd_commoditycode,
        cd_commodityuom                   = s.cd_commodityuom,
        cd_net_weight                     = s.cd_net_weight,
        cd_shipper_invoice_value          = s.cd_shipper_invoice_value,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_tms_brcd_consgt_details s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.cd_ouinstance 			= fh.br_ouinstance
            AND S.cd_br_id                 	= fh.br_request_Id
	LEFT JOIN dwh.d_thu th 			
			ON 	s.cd_thu_id 			    = th.thu_id
			AND s.cd_ouinstance        	    = th.thu_ou
	LEFT JOIN dwh.d_currency c 			
			ON 	s.cd_currency 			    = c.iso_curr_code
    WHERE 		t.cd_ouinstance 			= s.cd_ouinstance
    AND 		t.cd_br_id 					= s.cd_br_id
    AND 		t.cd_line_no 				= s.cd_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_BRConsignmentDetail
    (
        br_key,brcd_thu_key,brcd_curr_key,
        cd_ouinstance, cd_br_id, cd_line_no, cd_thu_id, cd_thu_qty, cd_thu_qty_uom, cd_declared_value_of_goods, cd_insurance_value, cd_currency, cd_class_of_stores, cd_volume, cd_volume_uom, cd_gross_weight, cd_weight_uom, cd_creation_date, cd_created_by, cd_last_modified_date, cd_last_modified_by, cd_unique_id, cd_no_of_pallet_space, cd_transfer_to, cd_commoditycode, cd_commodityuom, cd_net_weight, cd_shipper_invoice_value, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.br_key,COALESCE(th.thu_key,-1),COALESCE(c.curr_key,-1),
        s.cd_ouinstance, s.cd_br_id, s.cd_line_no, s.cd_thu_id, s.cd_thu_qty, s.cd_thu_qty_uom, s.cd_declared_value_of_goods, s.cd_insurance_value, s.cd_currency, s.cd_class_of_stores, s.cd_volume, s.cd_volume_uom, s.cd_gross_weight, s.cd_weight_uom, s.cd_creation_date, s.cd_created_by, s.cd_last_modified_date, s.cd_last_modified_by, s.cd_unique_id, s.cd_no_of_pallet_space, s.cd_transfer_to, s.cd_commoditycode, s.cd_commodityuom, s.cd_net_weight, s.cd_shipper_invoice_value, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_brcd_consgt_details s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.cd_ouinstance 			= fh.br_ouinstance
            AND S.cd_br_id                 	= fh.br_request_Id
	LEFT JOIN dwh.d_thu th 			
			ON 	s.cd_thu_id 			    = th.thu_id
			AND s.cd_ouinstance        	    = th.thu_ou
	LEFT JOIN dwh.d_currency c 			
			ON 	s.cd_currency 			    = c.iso_curr_code
    LEFT JOIN dwh.F_BRConsignmentDetail t
    ON 			s.cd_ouinstance 			= t.cd_ouinstance
    AND 		s.cd_br_id 					= t.cd_br_id
    AND 		s.cd_line_no 				= t.cd_line_no
    WHERE 		t.cd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_brcd_consgt_details
    (
        cd_ouinstance, cd_br_id, cd_line_no, cd_thu_id, cd_thu_qty, cd_thu_qty_uom, cd_declared_value_of_goods, cd_insurance_value, cd_currency, cd_class_of_stores, cd_volume, cd_volume_uom, cd_gross_weight, cd_weight_uom, cd_creation_date, cd_created_by, cd_last_modified_date, cd_last_modified_by, cd_unique_id, cd_br_billing_status, cd_no_of_pallet_space, cd_added_for_equ_vehicle, cd_transfer_type, cd_transfer_to, cd_transfer_Account, cd_vendor_thu_id, cd_trans_doc_no, cd_vendor_ac_no, cd_commoditycode, cd_commodityqty, cd_commodityuom, cd_com_parent_line_id, cd_net_weight, cd_timestamp, cd_amount_collected, cd_shipper_invoice_no, cd_shipper_invoice_value, cd_shipper_invoice_date, etlcreateddatetime
    )
    SELECT
        cd_ouinstance, cd_br_id, cd_line_no, cd_thu_id, cd_thu_qty, cd_thu_qty_uom, cd_declared_value_of_goods, cd_insurance_value, cd_currency, cd_class_of_stores, cd_volume, cd_volume_uom, cd_gross_weight, cd_weight_uom, cd_creation_date, cd_created_by, cd_last_modified_date, cd_last_modified_by, cd_unique_id, cd_br_billing_status, cd_no_of_pallet_space, cd_added_for_equ_vehicle, cd_transfer_type, cd_transfer_to, cd_transfer_Account, cd_vendor_thu_id, cd_trans_doc_no, cd_vendor_ac_no, cd_commoditycode, cd_commodityqty, cd_commodityuom, cd_com_parent_line_id, cd_net_weight, cd_timestamp, cd_amount_collected, cd_shipper_invoice_no, cd_shipper_invoice_value, cd_shipper_invoice_date, etlcreateddatetime
    FROM stg.stg_tms_brcd_consgt_details;
    END IF;
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_brconsignmentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brconsignmentskudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brconsignmentskudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
		
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_brcsd_consgt_sku_details;

    UPDATE dwh.F_BRConsignmentSKUDetail t
    SET
	    br_key					  = fh.br_key,
        brcsd_serial_no           = s.brcsd_serial_no,
        brcsd_sku_id              = s.brcsd_sku_id,
        brcsd_sku_rate            = s.brcsd_sku_rate,
        brcsd_sku_quantity        = s.brcsd_sku_quantity,
        brcsd_sku_value           = s.brcsd_sku_value,
        brcsd_created_by          = s.brcsd_created_by,
        brcsd_created_date        = s.brcsd_created_date,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_tms_brcsd_consgt_sku_details s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.brcsd_ou 			= fh.br_ouinstance
            AND S.brcsd_br_id       = fh.br_request_Id
    WHERE t.brcsd_ou = s.brcsd_ou
    AND t.brcsd_br_id = s.brcsd_br_id
    AND t.brcsd_thu_line_no = s.brcsd_thu_line_no
    AND t.brcsd_sku_line_no = s.brcsd_sku_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_BRConsignmentSKUDetail
    (
        br_key,
        brcsd_ou, brcsd_br_id, brcsd_thu_line_no, brcsd_serial_no, brcsd_sku_line_no, brcsd_sku_id, brcsd_sku_rate, brcsd_sku_quantity, brcsd_sku_value, brcsd_created_by, brcsd_created_date, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.br_key,
        s.brcsd_ou, s.brcsd_br_id, s.brcsd_thu_line_no, s.brcsd_serial_no, s.brcsd_sku_line_no, s.brcsd_sku_id, s.brcsd_sku_rate, s.brcsd_sku_quantity, s.brcsd_sku_value, s.brcsd_created_by, s.brcsd_created_date, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_brcsd_consgt_sku_details s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.brcsd_ou 			= fh.br_ouinstance
            AND S.brcsd_br_id       = fh.br_request_Id
    LEFT JOIN dwh.F_BRConsignmentSKUDetail t
    ON s.brcsd_ou = t.brcsd_ou
    AND s.brcsd_br_id = t.brcsd_br_id
    AND s.brcsd_thu_line_no = t.brcsd_thu_line_no
    AND s.brcsd_sku_line_no = t.brcsd_sku_line_no
    WHERE t.brcsd_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_brcsd_consgt_sku_details
    (
        brcsd_ou, brcsd_br_id, brcsd_thu_line_no, brcsd_serial_no, brcsd_child_thu_id, brcsd_child_serial_no, brcsd_sku_line_no, brcsd_sku_id, brcsd_sku_rate, brcsd_sku_quantity, brcsd_sku_value, brcsd_sku_batch_id, brcsd_sku_mfg_date, brcsd_sku_expiry_date, brcsd_created_by, brcsd_created_date, brcsd_modified_by, brcsd_modified_date, brcsd_timestamp, brcsd_igst_amount, brcsd_cgst_amount, brcsd_sgst_amount, brcsd_utgst_amount, brcsd_cess_amount, etlcreateddatetime
    )
    SELECT
        brcsd_ou, brcsd_br_id, brcsd_thu_line_no, brcsd_serial_no, brcsd_child_thu_id, brcsd_child_serial_no, brcsd_sku_line_no, brcsd_sku_id, brcsd_sku_rate, brcsd_sku_quantity, brcsd_sku_value, brcsd_sku_batch_id, brcsd_sku_mfg_date, brcsd_sku_expiry_date, brcsd_created_by, brcsd_created_date, brcsd_modified_by, brcsd_modified_date, brcsd_timestamp, brcsd_igst_amount, brcsd_cgst_amount, brcsd_sgst_amount, brcsd_utgst_amount, brcsd_cess_amount, etlcreateddatetime
    FROM stg.stg_tms_brcsd_consgt_sku_details;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_brconsignmentskudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brconsignmentthuserialdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brconsignmentthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
	

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_brctd_consgt_thu_serial_details;

    UPDATE dwh.f_bRConsignmentTHUSerialDetail t
    SET
	    ctsd_br_key						= fh.br_key,
        ctsd_serial_no					= s.ctsd_serial_no,
        ctsd_hazmat_code				= s.ctsd_hazmat_code,
        ctsd_length						= s.ctsd_length,
        ctsd_breadth					= s.ctsd_breadth,
        ctsd_height						= s.ctsd_height,
        ctsd_lbh_uom					= s.ctsd_lbh_uom,
        ctsd_gross_weight				= s.ctsd_gross_weight,
        ctsd_gross_weight_uom			= s.ctsd_gross_weight_uom,
        ctsd_created_date				= s.ctsd_created_date,
        ctsd_created_by					= s.ctsd_created_by,
        ctsd_last_modified_by			= s.ctsd_last_modified_by,
        ctsd_last_modified_Date			= s.ctsd_last_modified_Date,
        ctsd_AltQty						= s.ctsd_AltQty,
        ctsd_AltQty_Uom					= s.ctsd_AltQty_Uom,
        etlactiveind					= 1,
        etljobname						= p_etljobname,
        envsourcecd						= p_envsourcecd,
        datasourcecd					= p_datasourcecd,
        etlupdatedatetime				= NOW()
    FROM stg.stg_tms_brctd_consgt_thu_serial_details s
	INNER JOIN dwh.f_bookingrequest fh
	ON   s.ctsd_ouinstance				=	fh.br_ouinstance
	AND  s.ctsd_br_id					=	fh.br_request_id
    WHERE t.ctsd_ouinstance				=	s.ctsd_ouinstance
    AND t.ctsd_br_id					=	s.ctsd_br_id
    AND t.ctsd_thu_line_no				=	s.ctsd_thu_line_no
    AND t.ctsd_thu_serial_line_no		=	s.ctsd_thu_serial_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_bRConsignmentTHUSerialDetail
    (
        ctsd_br_key,ctsd_ouinstance, ctsd_br_id, ctsd_thu_line_no, ctsd_thu_serial_line_no, ctsd_serial_no, ctsd_hazmat_code, ctsd_length, 
		ctsd_breadth, ctsd_height, ctsd_lbh_uom, ctsd_gross_weight, ctsd_gross_weight_uom, ctsd_created_date, ctsd_created_by, ctsd_last_modified_by, 
		ctsd_last_modified_Date, ctsd_AltQty, ctsd_AltQty_Uom, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.br_key,s.ctsd_ouinstance, s.ctsd_br_id, s.ctsd_thu_line_no, s.ctsd_thu_serial_line_no, s.ctsd_serial_no, s.ctsd_hazmat_code, s.ctsd_length, 
		s.ctsd_breadth, s.ctsd_height, s.ctsd_lbh_uom, s.ctsd_gross_weight, s.ctsd_gross_weight_uom, s.ctsd_created_date, s.ctsd_created_by, s.ctsd_last_modified_by, 
		s.ctsd_last_modified_Date, s.ctsd_AltQty, s.ctsd_AltQty_Uom, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_brctd_consgt_thu_serial_details s
	INNER JOIN dwh.f_bookingrequest fh
	ON   s.ctsd_ouinstance			=	fh.br_ouinstance
	AND  s.ctsd_br_id				=	fh.br_request_id
    LEFT JOIN dwh.f_bRConsignmentTHUSerialDetail t
    ON s.ctsd_ouinstance			=	t.ctsd_ouinstance
    AND s.ctsd_br_id				=	t.ctsd_br_id
    AND s.ctsd_thu_line_no			=	t.ctsd_thu_line_no
    AND s.ctsd_thu_serial_line_no	=	t.ctsd_thu_serial_line_no
	WHERE t.ctsd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_brctd_consgt_thu_serial_details
    (
        ctsd_ouinstance, ctsd_br_id, ctsd_thu_line_no, ctsd_thu_serial_line_no, ctsd_serial_no, ctsd_seat_no, ctsd_UN_code, ctsd_class_code, 
		ctsd_hs_code, ctsd_hazmat_code, ctsd_HAC_code, ctsd_length, ctsd_breadth, ctsd_height, ctsd_lbh_uom, ctsd_gross_weight, ctsd_gross_weight_uom, 
		ctsd_created_date, ctsd_created_by, ctsd_last_modified_by, ctsd_last_modified_Date, ctsd_AltQty, ctsd_AltQty_Uom, ctsd_customer_serial_no, 
		ctsd_timestamp, etlcreateddatetime
    )
    SELECT
        ctsd_ouinstance, ctsd_br_id, ctsd_thu_line_no, ctsd_thu_serial_line_no, ctsd_serial_no, ctsd_seat_no, ctsd_UN_code, ctsd_class_code, 
		ctsd_hs_code, ctsd_hazmat_code, ctsd_HAC_code, ctsd_length, ctsd_breadth, ctsd_height, ctsd_lbh_uom, ctsd_gross_weight, ctsd_gross_weight_uom, 
		ctsd_created_date, ctsd_created_by, ctsd_last_modified_by, ctsd_last_modified_Date, ctsd_AltQty, ctsd_AltQty_Uom, ctsd_customer_serial_no, 
		ctsd_timestamp, etlcreateddatetime
    FROM stg.stg_tms_brctd_consgt_thu_serial_details;
    END IF;
	
	

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;

END;
$$;


ALTER PROCEDURE dwh.usp_f_brconsignmentthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brewaybilldetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brewaybilldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
		SELECT COUNT(1) INTO srccnt FROM stg.stg_tms_br_ewayBill_details;

		INSERT INTO dwh.f_brewaybilldetail
	(
	    br_key,
		ewbd_br_no,					ewbd_ouinstance,			ewbd_bill_no,			ewbd_ewaybl_guid,
		ewbd_remarks,				ewbd_created_date,			ewbd_created_by,		ewbd_modified_date,
		ewbd_modified_by,			ewbd_timestamp,				ewbd_expiry_date,		ewbd_shipper_invoice_date,
		ewbd_shipper_invoice_value,	ewbd_shipper_invoice_no,
		etlactiveind,       		etljobname, 				envsourcecd, 			datasourcecd, 	
        etlcreatedatetime
	)
	
    SELECT 
	    fh.br_key,
		s.ewbd_br_no,					s.ewbd_ouinstance,				s.ewbd_bill_no,			s.ewbd_ewaybl_guid,
		s.ewbd_remarks,					s.ewbd_created_date,			s.ewbd_created_by,		s.ewbd_modified_date,
		s.ewbd_modified_by,				s.ewbd_timestamp,				s.ewbd_expiry_date,		s.ewbd_shipper_invoice_date,
		s.ewbd_shipper_invoice_value,	s.ewbd_shipper_invoice_no,
		1,                    			p_etljobname,		 			p_envsourcecd,	   		p_datasourcecd,			
        NOW()
	FROM stg.stg_tms_br_ewayBill_details s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.ewbd_ouinstance 						= fh.br_ouinstance
            AND S.ewbd_br_no                            = fh.br_request_Id
    LEFT JOIN dwh.f_brewaybilldetail t
    ON 	COALESCE(s.ewbd_br_no,'NULL') 	    			= COALESCE(t.ewbd_br_no,'NULL')
	AND COALESCE(s.ewbd_ouinstance,0)  			        = COALESCE(t.ewbd_ouinstance,0)
	AND COALESCE(s.ewbd_bill_no,'NULL')  				= COALESCE(t.ewbd_bill_no,'NULL')
	AND COALESCE(s.ewbd_ewaybl_guid,'NULL') 			= COALESCE(t.ewbd_ewaybl_guid ,'NULL')
    AND COALESCE(s.ewbd_remarks,'NULL') 				= COALESCE(t.ewbd_remarks,'NULL')
    --AND COALESCE(s.ewbd_created_date,'NULL') 			= COALESCE(t.ewbd_created_date,'NULL')
    AND COALESCE(s.ewbd_created_by,'NULL') 				= COALESCE(t.ewbd_created_by,'NULL')
    --AND COALESCE(s.ewbd_modified_date,'NULL')  			= COALESCE(t.ewbd_modified_date,'NULL')
    AND COALESCE(s.ewbd_modified_by,'NULL') 			= COALESCE(t.ewbd_modified_by,'NULL')
    --AND COALESCE(s.ewbd_timestamp,0)  			        = COALESCE(t.ewbd_timestamp,0)
    --AND COALESCE(s.ewbd_expiry_date,'NULL') 			= COALESCE(t.ewbd_expiry_date,'NULL')
	--AND COALESCE(s.ewbd_shipper_invoice_date,'NULL') 	= COALESCE(t.ewbd_shipper_invoice_date,'NULL')
	AND COALESCE(s.ewbd_shipper_invoice_value,0) 	    = COALESCE(t.ewbd_shipper_invoice_value,0)
	AND COALESCE(s.ewbd_shipper_invoice_no,'NULL') 		= COALESCE(t.ewbd_shipper_invoice_no,'NULL')
    WHERE t.ewbd_ouinstance IS NULL;
   
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	select 0 into updcnt;
	
	
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_tms_br_ewayBill_details
	(
		ewbd_br_no, 			ewbd_ouinstance, 			ewbd_bill_no, 				ewbd_ewaybl_guid, 			ewbd_remarks, 
		ewbd_created_date, 		ewbd_created_by, 			ewbd_modified_date, 		ewbd_modified_by, 			ewbd_timestamp, 
		ewbd_expiry_date, 		ewbd_shipper_invoice_date, 	ewbd_shipper_invoice_value, ewbd_shipper_invoice_no, 	etlcreateddatetime

	)
	SELECT 
		ewbd_br_no, 			ewbd_ouinstance, 			ewbd_bill_no, 				ewbd_ewaybl_guid, 			ewbd_remarks, 
		ewbd_created_date, 		ewbd_created_by, 			ewbd_modified_date, 		ewbd_modified_by, 			ewbd_timestamp, 
		ewbd_expiry_date, 		ewbd_shipper_invoice_date, 	ewbd_shipper_invoice_value, ewbd_shipper_invoice_no, 	etlcreateddatetime

	FROM stg.stg_tms_br_ewayBill_details;
    END IF;	
		
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_brewaybilldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brplanningprofiledetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brplanningprofiledetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_brppd_planning_profile_dtl;

    UPDATE dwh.f_bRPlanningProfileDetail t
    SET
	    brppd_cust_key                = COALESCE(c.customer_key,-1),  
		brppd_loc_key                 = COALESCE(l.loc_key,-1),
        brppd_direct_entry            = s.brppd_direct_entry,
        brppd_auto_entry              = s.brppd_auto_entry,
        brppd_created_by              = s.brppd_created_by,
        brppd_created_date            = s.brppd_created_date,
        brppd_priority                = s.brppd_priority,
        brppd_param_priority          = s.brppd_param_priority,
        brppd_customer_id             = s.brppd_customer_id,
        brppd_customer_name           = s.brppd_customer_name,
        brppd_execution_plan          = s.brppd_execution_plan,
        brppd_ship_from_id            = s.brppd_ship_from_id,
        brppd_ship_from_desc          = s.brppd_ship_from_desc,
        brppd_ship_from_postal        = s.brppd_ship_from_postal,
        brppd_ship_from_suburb        = s.brppd_ship_from_suburb,
        brppd_ship_to_id              = s.brppd_ship_to_id,
        brppd_ship_to_desc            = s.brppd_ship_to_desc,
        brppd_ship_to_postal          = s.brppd_ship_to_postal,
        brppd_ship_to_suburb          = s.brppd_ship_to_suburb,
        brppd_pickup_date             = s.brppd_pickup_date,
        brppd_pickup_timeslot         = s.brppd_pickup_timeslot,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_tms_brppd_planning_profile_dtl s
	LEFT JOIN dwh.d_location L 		
	ON		s.brppd_ship_from_id= L.loc_code 
    AND		s.brppd_ouinstance	= L.loc_ou
	LEFT JOIN dwh.d_customer c
	ON      s.brppd_customer_id = c.customer_id
	AND     s.brppd_ouinstance	= c.customer_ou
    WHERE	t.brppd_ouinstance	= s.brppd_ouinstance
    AND		t.brppd_profile_id	= s.brppd_profile_id
    AND		t.brppd_br_id		= s.brppd_br_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_bRPlanningProfileDetail
    (
        brppd_cust_key,brppd_loc_key,brppd_ouinstance, brppd_profile_id, brppd_br_id, brppd_direct_entry, brppd_auto_entry, brppd_created_by, brppd_created_date, brppd_priority, brppd_param_priority, 
		brppd_customer_id, brppd_customer_name, brppd_execution_plan, brppd_ship_from_id, brppd_ship_from_desc, brppd_ship_from_postal, 
		brppd_ship_from_suburb, brppd_ship_to_id, brppd_ship_to_desc, brppd_ship_to_postal, brppd_ship_to_suburb, brppd_pickup_date, brppd_pickup_timeslot, 
		etlactiveind, etljobname, envsourcecd, datasourcecd,etlcreatedatetime
    )

    SELECT
        COALESCE(c.customer_key,-1),COALESCE(l.loc_key,-1),s.brppd_ouinstance, s.brppd_profile_id, s.brppd_br_id, s.brppd_direct_entry, s.brppd_auto_entry, s.brppd_created_by, s.brppd_created_date, s.brppd_priority, 
		s.brppd_param_priority, s.brppd_customer_id, s.brppd_customer_name, s.brppd_execution_plan, s.brppd_ship_from_id, s.brppd_ship_from_desc, s.brppd_ship_from_postal, 
		s.brppd_ship_from_suburb, s.brppd_ship_to_id, s.brppd_ship_to_desc, s.brppd_ship_to_postal, s.brppd_ship_to_suburb, s.brppd_pickup_date, s.brppd_pickup_timeslot, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_brppd_planning_profile_dtl s
	LEFT JOIN dwh.d_location L 		
	ON		s.brppd_ship_from_id= L.loc_code 
    AND		s.brppd_ouinstance	= L.loc_ou
	LEFT JOIN dwh.d_customer c
	ON      s.brppd_customer_id = c.customer_id
	AND     s.brppd_ouinstance	= c.customer_ou
    LEFT JOIN dwh.f_bRPlanningProfileDetail t
    ON		s.brppd_ouinstance	= t.brppd_ouinstance
    AND		s.brppd_profile_id	= t.brppd_profile_id
    AND		s.brppd_br_id		= t.brppd_br_id
    WHERE t.brppd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_brppd_planning_profile_dtl
    (
        brppd_ouinstance, brppd_profile_id, brppd_br_id, brppd_direct_entry, brppd_auto_entry, brppd_created_by, brppd_created_date, brppd_priority, brppd_param_priority, 
		brppd_customer_id, brppd_customer_name, brppd_execution_plan, brppd_ship_from_id, brppd_ship_from_desc, brppd_ship_from_postal, brppd_ship_from_suburb, brppd_ship_to_id, 
		brppd_ship_to_desc, brppd_ship_to_postal, brppd_ship_to_suburb, brppd_pickup_date, brppd_pickup_timeslot, etlcreateddatetime
    )
    SELECT
        brppd_ouinstance, brppd_profile_id, brppd_br_id, brppd_direct_entry, brppd_auto_entry, brppd_created_by, brppd_created_date, brppd_priority, brppd_param_priority, 
		brppd_customer_id, brppd_customer_name, brppd_execution_plan, brppd_ship_from_id, brppd_ship_from_desc, brppd_ship_from_postal, brppd_ship_from_suburb, brppd_ship_to_id, 
		brppd_ship_to_desc, brppd_ship_to_postal, brppd_ship_to_suburb, brppd_pickup_date, brppd_pickup_timeslot, etlcreateddatetime
    FROM stg.stg_tms_brppd_planning_profile_dtl;
    END IF;


	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_brplanningprofiledetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brshipmentdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brshipmentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_brsd_shipment_details;

    UPDATE dwh.f_bRShipmentDetail t
    SET
	    brsd_br_key                                 =	fh.br_key,
        brsd_from_ship_point_id                     =	s.brsd_from_ship_point_id,
        brsd_from_ship_point_name                   =	s.brsd_from_ship_point_name,
        brsd_from_contact_person                    =	s.brsd_from_contact_person,
        brsd_from_address_line1                     =	s.brsd_from_address_line1,
        brsd_from_address_line2                     =	s.brsd_from_address_line2,
        brsd_from_address_line3                     =	s.brsd_from_address_line3,
        brsd_from_postal_code                       =	s.brsd_from_postal_code,
        brsd_from_subzone                           =	s.brsd_from_subzone,
        brsd_from_city                              =	s.brsd_from_city,
        brsd_from_zone                              =	s.brsd_from_zone,
        brsd_from_state                             =	s.brsd_from_state,
        brsd_from_region                            =	s.brsd_from_region,
        brsd_from_country                           =	s.brsd_from_country,
        brsd_from_primary_phone                     =	s.brsd_from_primary_phone,
        brsd_from_secondary_phone                   =	s.brsd_from_secondary_phone,
        brsd_from_pick_date                         =	s.brsd_from_pick_date,
        brsd_from_picktime_slot_from                =	s.brsd_from_picktime_slot_from,
        brsd_from_picktime_slot_to                  =	s.brsd_from_picktime_slot_to,
        brsd_from_creation_date                     =	s.brsd_from_creation_date,
        brsd_from_created_by                        =	s.brsd_from_created_by,
        brsd_from_last_modified_date                =	s.brsd_from_last_modified_date,
        brsd_from_last_modified_by                  =	s.brsd_from_last_modified_by,
        brsd_to_ship_point_id                       =	s.brsd_to_ship_point_id,
        brsd_to_ship_point_name                     =	s.brsd_to_ship_point_name,
        brsd_to_contact_person                      =	s.brsd_to_contact_person,
        brsd_to_address_line1                       =	s.brsd_to_address_line1,
        brsd_to_address_line2                       =	s.brsd_to_address_line2,
        brsd_to_address_line3                       =	s.brsd_to_address_line3,
        brsd_to_postal_code                         =	s.brsd_to_postal_code,
        brsd_to_subzone                             =	s.brsd_to_subzone,
        brsd_to_city                                =	s.brsd_to_city,
        brsd_to_zone                                =	s.brsd_to_zone,
        brsd_to_state                               =	s.brsd_to_state,
        brsd_to_region                              =	s.brsd_to_region,
        brsd_to_country                             =	s.brsd_to_country,
        brsd_to_primary_phone                       =	s.brsd_to_primary_phone,
        brsd_to_secondary_phone                     =	s.brsd_to_secondary_phone,
        brsd_to_creation_date                       =	s.brsd_to_creation_date,
        brsd_to_created_by                          =	s.brsd_to_created_by,
        brsd_to_last_modified_date                  =	s.brsd_to_last_modified_date,
        brsd_to_last_modified_by                    =	s.brsd_to_last_modified_by,
        brsd_unique_id                              =	s.brsd_unique_id,
        brsd_to_delivery_date                       =	s.brsd_to_delivery_date,
        brsd_to_deliverytime_slot_from              =	s.brsd_to_deliverytime_slot_from,
        brsd_to_deliverytime_slot_to                =	s.brsd_to_deliverytime_slot_to,
        brsd_to_consignee_same_as_ship_to           =	s.brsd_to_consignee_same_as_ship_to,
        brsd_from_suburb                            =	s.brsd_from_suburb,
        brsd_to_suburb                              =	s.brsd_to_suburb,
        brsd_alternate_to_ship_point_id             =	s.brsd_alternate_to_ship_point_id,
        brsd_alternate_to_ship_point_name           =	s.brsd_alternate_to_ship_point_name,
        brsd_alternate_to_contact_person            =	s.brsd_alternate_to_contact_person,
        brsd_alternate_to_address_line1             =	s.brsd_alternate_to_address_line1,
        brsd_alternate_to_address_line2             =	s.brsd_alternate_to_address_line2,
        brsd_alternate_to_postal_code               =	s.brsd_alternate_to_postal_code,
        brsd_alternate_to_city                      =	s.brsd_alternate_to_city,
        brsd_alternate_to_state                     =	s.brsd_alternate_to_state,
        brsd_alternate_to_country                   =	s.brsd_alternate_to_country,
        brsd_alternate_to_last_modified_date        =	s.brsd_alternate_to_last_modified_date,
        brsd_alternate_to_last_modified_by          =	s.brsd_alternate_to_last_modified_by,
        brsd_alternate_to_suburb                    =	s.brsd_alternate_to_suburb,
        brsd_alternate_to_remarks                   =	s.brsd_alternate_to_remarks,
        brsd_from_email_id                          =	s.brsd_from_email_id,
        brsd_to_email_id                            =	s.brsd_to_email_id,
        etlactiveind                                =	1,
        etljobname                                  =	p_etljobname,
        envsourcecd                                 =	p_envsourcecd,
        datasourcecd                                =	p_datasourcecd,
        etlupdatedatetime                           =	NOW()
    FROM stg.stg_tms_brsd_shipment_details s
	INNER JOIN dwh.f_bookingrequest fh
	ON		s.brsd_ouinstance						=	fh.br_ouinstance
	AND		s.brsd_br_id							=	fh.br_request_id
    WHERE	t.brsd_ouinstance						=	s.brsd_ouinstance
    AND		t.brsd_br_id							=	s.brsd_br_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_bRShipmentDetail
    (
        brsd_br_key,brsd_ouinstance, brsd_br_id, brsd_from_ship_point_id, brsd_from_ship_point_name, brsd_from_contact_person, brsd_from_address_line1, 
		brsd_from_address_line2, brsd_from_address_line3, brsd_from_postal_code, brsd_from_subzone, brsd_from_city, brsd_from_zone, brsd_from_state, 
		brsd_from_region, brsd_from_country, brsd_from_primary_phone, brsd_from_secondary_phone, brsd_from_pick_date, brsd_from_picktime_slot_from, 
		brsd_from_picktime_slot_to, brsd_from_creation_date, brsd_from_created_by, brsd_from_last_modified_date, brsd_from_last_modified_by, 
		brsd_to_ship_point_id, brsd_to_ship_point_name, brsd_to_contact_person, brsd_to_address_line1, brsd_to_address_line2, brsd_to_address_line3, 
		brsd_to_postal_code, brsd_to_subzone, brsd_to_city, brsd_to_zone, brsd_to_state, brsd_to_region, brsd_to_country, brsd_to_primary_phone, 
		brsd_to_secondary_phone, brsd_to_creation_date, brsd_to_created_by, brsd_to_last_modified_date, brsd_to_last_modified_by, brsd_unique_id, 
		brsd_to_delivery_date, brsd_to_deliverytime_slot_from, brsd_to_deliverytime_slot_to, brsd_to_consignee_same_as_ship_to, brsd_from_suburb, 
		brsd_to_suburb, brsd_alternate_to_ship_point_id, brsd_alternate_to_ship_point_name, brsd_alternate_to_contact_person, brsd_alternate_to_address_line1, 
		brsd_alternate_to_address_line2, brsd_alternate_to_postal_code, brsd_alternate_to_city, brsd_alternate_to_state, brsd_alternate_to_country, 
		brsd_alternate_to_last_modified_date, brsd_alternate_to_last_modified_by, brsd_alternate_to_suburb, brsd_alternate_to_remarks, brsd_from_email_id, 
		brsd_to_email_id, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.br_key,s.brsd_ouinstance, s.brsd_br_id, s.brsd_from_ship_point_id, s.brsd_from_ship_point_name, s.brsd_from_contact_person, s.brsd_from_address_line1, 
		s.brsd_from_address_line2, s.brsd_from_address_line3, s.brsd_from_postal_code, s.brsd_from_subzone, s.brsd_from_city, s.brsd_from_zone, s.brsd_from_state, 
		s.brsd_from_region, s.brsd_from_country, s.brsd_from_primary_phone, s.brsd_from_secondary_phone, s.brsd_from_pick_date, s.brsd_from_picktime_slot_from, 
		s.brsd_from_picktime_slot_to, s.brsd_from_creation_date, s.brsd_from_created_by, s.brsd_from_last_modified_date, s.brsd_from_last_modified_by, 
		s.brsd_to_ship_point_id, s.brsd_to_ship_point_name, s.brsd_to_contact_person, s.brsd_to_address_line1, s.brsd_to_address_line2, s.brsd_to_address_line3, 
		s.brsd_to_postal_code, s.brsd_to_subzone, s.brsd_to_city, s.brsd_to_zone, s.brsd_to_state, s.brsd_to_region, s.brsd_to_country, s.brsd_to_primary_phone, 
		s.brsd_to_secondary_phone, s.brsd_to_creation_date, s.brsd_to_created_by, s.brsd_to_last_modified_date, s.brsd_to_last_modified_by, s.brsd_unique_id, 
		s.brsd_to_delivery_date, s.brsd_to_deliverytime_slot_from, s.brsd_to_deliverytime_slot_to, s.brsd_to_consignee_same_as_ship_to, s.brsd_from_suburb, 
		s.brsd_to_suburb, s.brsd_alternate_to_ship_point_id, s.brsd_alternate_to_ship_point_name, s.brsd_alternate_to_contact_person, s.brsd_alternate_to_address_line1, 
		s.brsd_alternate_to_address_line2, s.brsd_alternate_to_postal_code, s.brsd_alternate_to_city, s.brsd_alternate_to_state, s.brsd_alternate_to_country, 
		s.brsd_alternate_to_last_modified_date, s.brsd_alternate_to_last_modified_by, s.brsd_alternate_to_suburb, s.brsd_alternate_to_remarks, s.brsd_from_email_id, 
		s.brsd_to_email_id, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_brsd_shipment_details s
	INNER JOIN dwh.f_bookingrequest fh
	ON		s.brsd_ouinstance						=	fh.br_ouinstance
	AND		s.brsd_br_id							=	fh.br_request_id
    LEFT JOIN dwh.f_bRShipmentDetail t
    ON		s.brsd_ouinstance						=	t.brsd_ouinstance
    AND		s.brsd_br_id							=	t.brsd_br_id
	AND     fh.br_key                               =   t.brsd_br_key
    WHERE t.brsd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_brsd_shipment_details
    (
        brsd_ouinstance, brsd_br_id, brsd_from_ship_point_id, brsd_from_ship_point_name, brsd_from_contact_person, brsd_from_address_line1, 
		brsd_from_address_line2, brsd_from_address_line3, brsd_from_postal_code, brsd_from_subzone, brsd_from_city, brsd_from_zone, brsd_from_state, brsd_from_region, 
		brsd_from_country, brsd_from_primary_phone, brsd_from_secondary_phone, brsd_from_pick_date, brsd_from_picktime_slot_from, brsd_from_picktime_slot_to, 
		brsd_from_creation_date, brsd_from_created_by, brsd_from_last_modified_date, brsd_from_last_modified_by, brsd_to_ship_point_id, brsd_to_ship_point_name, 
		brsd_to_contact_person, brsd_to_address_line1, brsd_to_address_line2, brsd_to_address_line3, brsd_to_postal_code, brsd_to_subzone, brsd_to_city, brsd_to_zone, 
		brsd_to_state, brsd_to_region, brsd_to_country, brsd_to_primary_phone, brsd_to_secondary_phone, brsd_to_creation_date, brsd_to_created_by, brsd_to_last_modified_date, 
		brsd_to_last_modified_by, brsd_unique_id, brsd_to_delivery_date, brsd_to_deliverytime_slot_from, brsd_to_deliverytime_slot_to, brsd_to_consignee_same_as_ship_to, 
		brsd_from_suburb, brsd_to_suburb, brsd_alternate_to_ship_point_id, brsd_alternate_to_ship_point_name, brsd_alternate_to_contact_person, brsd_alternate_to_address_line1, 
		brsd_alternate_to_address_line2, brsd_alternate_to_address_line3, brsd_alternate_to_postal_code, brsd_alternate_to_subzone, brsd_alternate_to_city, brsd_alternate_to_zone, 
		brsd_alternate_to_state, brsd_alternate_to_region, brsd_alternate_to_country, brsd_alternate_to_primary_phone, brsd_alternate_to_secondary_phone, 
		brsd_alternate_to_creation_date, brsd_alternate_to_created_by, brsd_alternate_to_last_modified_date, brsd_alternate_to_last_modified_by, 
		brsd_alternate_to_consignee_same_as_ship_to, brsd_alternate_to_suburb, brsd_alternate_to_remarks, brsd_from_email_id, brsd_from_remarks, brsd_to_email_id, 
		brsd_to_remarks, brsd_timestamp, brsd_alternate_Contact_remarks, brsd_alternate_email_id, etlcreateddatetime
    )
    SELECT
        brsd_ouinstance, brsd_br_id, brsd_from_ship_point_id, brsd_from_ship_point_name, brsd_from_contact_person, brsd_from_address_line1, 
		brsd_from_address_line2, brsd_from_address_line3, brsd_from_postal_code, brsd_from_subzone, brsd_from_city, brsd_from_zone, brsd_from_state, brsd_from_region, 
		brsd_from_country, brsd_from_primary_phone, brsd_from_secondary_phone, brsd_from_pick_date, brsd_from_picktime_slot_from, brsd_from_picktime_slot_to, 
		brsd_from_creation_date, brsd_from_created_by, brsd_from_last_modified_date, brsd_from_last_modified_by, brsd_to_ship_point_id, brsd_to_ship_point_name, 
		brsd_to_contact_person, brsd_to_address_line1, brsd_to_address_line2, brsd_to_address_line3, brsd_to_postal_code, brsd_to_subzone, brsd_to_city, brsd_to_zone, 
		brsd_to_state, brsd_to_region, brsd_to_country, brsd_to_primary_phone, brsd_to_secondary_phone, brsd_to_creation_date, brsd_to_created_by, brsd_to_last_modified_date, 
		brsd_to_last_modified_by, brsd_unique_id, brsd_to_delivery_date, brsd_to_deliverytime_slot_from, brsd_to_deliverytime_slot_to, brsd_to_consignee_same_as_ship_to, 
		brsd_from_suburb, brsd_to_suburb, brsd_alternate_to_ship_point_id, brsd_alternate_to_ship_point_name, brsd_alternate_to_contact_person, brsd_alternate_to_address_line1, 
		brsd_alternate_to_address_line2, brsd_alternate_to_address_line3, brsd_alternate_to_postal_code, brsd_alternate_to_subzone, brsd_alternate_to_city, brsd_alternate_to_zone, 
		brsd_alternate_to_state, brsd_alternate_to_region, brsd_alternate_to_country, brsd_alternate_to_primary_phone, brsd_alternate_to_secondary_phone, 
		brsd_alternate_to_creation_date, brsd_alternate_to_created_by, brsd_alternate_to_last_modified_date, brsd_alternate_to_last_modified_by, 
		brsd_alternate_to_consignee_same_as_ship_to, brsd_alternate_to_suburb, brsd_alternate_to_remarks, brsd_from_email_id, brsd_from_remarks, brsd_to_email_id, 
		brsd_to_remarks, brsd_timestamp, brsd_alternate_Contact_remarks, brsd_alternate_email_id, etlcreateddatetime
    FROM stg.stg_tms_brsd_shipment_details;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_brshipmentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_brthucontractdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_brthucontractdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_brctd_br_thu_wise_contract_tariff_dtls;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
    UPDATE dwh.F_BRThuContractDetail t
    SET
		br_key					  				= fh.br_key,
        brctd_thu_line_no                       = COALESCE(s.brctd_thu_line_no,''),
        brctd_contract_id                       = s.brctd_contract_id,
        brctd_cont_type                         = s.brctd_cont_type,
        brctd_cont_service_type                 = s.brctd_cont_service_type,
        brctd_cont_valid_from                   = s.brctd_cont_valid_from,
        brctd_cont_valid_to                     = s.brctd_cont_valid_to,
        brctd_tf_tp_type_code                   = s.brctd_tf_tp_type_code,
        brctd_tf_tp_validity_id                 = s.brctd_tf_tp_validity_id,
        brctd_tf_tp_frm_ship_point              = s.brctd_tf_tp_frm_ship_point,
        brctd_tf_tp_to_ship_point               = s.brctd_tf_tp_to_ship_point,
        brctd_tf_tp_frm_geo_type                = s.brctd_tf_tp_frm_geo_type,
        brctd_tf_tp_frm_geo                     = s.brctd_tf_tp_frm_geo,
        brctd_tf_tp_to_geo_type                 = s.brctd_tf_tp_to_geo_type,
        brctd_tf_tp_to_geo                      = s.brctd_tf_tp_to_geo,
        brctd_tf_tp_dist_check                  = s.brctd_tf_tp_dist_check,
        brctd_tf_tp_wt                          = s.brctd_tf_tp_wt,
        brctd_tf_tp_wt_min                      = s.brctd_tf_tp_wt_min,
        brctd_tf_tp_wt_max                      = s.brctd_tf_tp_wt_max,
        brctd_tf_tp_wt_uom                      = s.brctd_tf_tp_wt_uom,
        brctd_tf_tp_vol                         = s.brctd_tf_tp_vol,
        brctd_tf_tp_trip_time                   = s.brctd_tf_tp_trip_time,
        brctd_tf_tp_vol_conversion              = s.brctd_tf_tp_vol_conversion,
        brctd_tf_tp_service                     = s.brctd_tf_tp_service,
        brctd_tf_tp_sub_service                 = s.brctd_tf_tp_sub_service,
        brctd_tf_tp_thu_type                    = s.brctd_tf_tp_thu_type,
        brctd_tf_tp_min_no_thu                  = s.brctd_tf_tp_min_no_thu,
        brctd_tf_tp_max_no_thu                  = s.brctd_tf_tp_max_no_thu,
        brctd_tf_tp_veh_type                    = s.brctd_tf_tp_veh_type,
        brctd_billable_weight                   = s.brctd_billable_weight,
        brctd_rate_for_billable_weight          = s.brctd_rate_for_billable_weight,
        brctd_stage_of_tariff_derivation        = s.brctd_stage_of_tariff_derivation,
        brctd_staging_ref_document              = s.brctd_staging_ref_document,
        brctd_created_by                        = s.brctd_created_by,
        brctd_created_date                      = s.brctd_created_date,
        brctd_cont_amend_no                     = s.brctd_cont_amend_no,
        brctd_billable_quantity                 = s.brctd_billable_quantity,
        brctd_dd_br_volume                      = s.brctd_dd_br_volume,
        brctd_no_of_pallet                      = s.brctd_no_of_pallet,
        brctd_actual_weight                     = s.brctd_actual_weight,
        brctd_actual_weight_uom                 = s.brctd_actual_weight_uom,
        brctd_actual_volume                     = s.brctd_actual_volume,
        brctd_actual_volume_uom                 = s.brctd_actual_volume_uom,
        brctd_basic_charge                      = s.brctd_basic_charge,
        brctd_cont_min_charge                   = s.brctd_cont_min_charge,
        brctd_chargeable_qty                    = s.brctd_chargeable_qty,
        etlactiveind                            = 1,
        etljobname                              = p_etljobname,
        envsourcecd                             = p_envsourcecd,
        datasourcecd                            = p_datasourcecd,
        etlupdatedatetime                       = NOW()
    FROM stg.stg_tms_brctd_br_thu_wise_contract_tariff_dtls s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.brctd_ou 			= fh.br_ouinstance
            AND S.brctd_br_id       = fh.br_request_Id
    WHERE t.brctd_ou = s.brctd_ou
    AND t.brctd_br_id = s.brctd_br_id
    AND t.brctd_tariff_id = s.brctd_tariff_id
	AND COALESCE(t.brctd_thu_line_no,'') = COALESCE(s.brctd_thu_line_no,'')
	AND t.brctd_staging_ref_document =  s.brctd_staging_ref_document;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_BRThuContractDetail
    (
            br_key,
        brctd_ou, brctd_br_id, brctd_thu_line_no, brctd_contract_id, brctd_cont_type, brctd_cont_service_type, brctd_cont_valid_from, brctd_cont_valid_to, brctd_tariff_id, brctd_tf_tp_type_code, brctd_tf_tp_validity_id, brctd_tf_tp_frm_ship_point, brctd_tf_tp_to_ship_point, brctd_tf_tp_frm_geo_type, brctd_tf_tp_frm_geo, brctd_tf_tp_to_geo_type, brctd_tf_tp_to_geo, brctd_tf_tp_dist_check, brctd_tf_tp_wt, brctd_tf_tp_wt_min, brctd_tf_tp_wt_max, brctd_tf_tp_wt_uom, brctd_tf_tp_vol, brctd_tf_tp_trip_time, brctd_tf_tp_vol_conversion, brctd_tf_tp_service, brctd_tf_tp_sub_service, brctd_tf_tp_thu_type, brctd_tf_tp_min_no_thu, brctd_tf_tp_max_no_thu, brctd_tf_tp_veh_type, brctd_billable_weight, brctd_rate_for_billable_weight, brctd_stage_of_tariff_derivation, brctd_staging_ref_document, brctd_created_by, brctd_created_date, brctd_cont_amend_no, brctd_billable_quantity, brctd_dd_br_volume, brctd_no_of_pallet, brctd_actual_weight, brctd_actual_weight_uom, brctd_actual_volume, brctd_actual_volume_uom, brctd_basic_charge, brctd_cont_min_charge, brctd_chargeable_qty, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.br_key,
        s.brctd_ou, s.brctd_br_id, COALESCE(s.brctd_thu_line_no,''), s.brctd_contract_id, s.brctd_cont_type, s.brctd_cont_service_type, s.brctd_cont_valid_from, s.brctd_cont_valid_to, s.brctd_tariff_id, s.brctd_tf_tp_type_code, s.brctd_tf_tp_validity_id, s.brctd_tf_tp_frm_ship_point, s.brctd_tf_tp_to_ship_point, s.brctd_tf_tp_frm_geo_type, s.brctd_tf_tp_frm_geo, s.brctd_tf_tp_to_geo_type, s.brctd_tf_tp_to_geo, s.brctd_tf_tp_dist_check, s.brctd_tf_tp_wt, s.brctd_tf_tp_wt_min, s.brctd_tf_tp_wt_max, s.brctd_tf_tp_wt_uom, s.brctd_tf_tp_vol, s.brctd_tf_tp_trip_time, s.brctd_tf_tp_vol_conversion, s.brctd_tf_tp_service, s.brctd_tf_tp_sub_service, s.brctd_tf_tp_thu_type, s.brctd_tf_tp_min_no_thu, s.brctd_tf_tp_max_no_thu, s.brctd_tf_tp_veh_type, s.brctd_billable_weight, s.brctd_rate_for_billable_weight, s.brctd_stage_of_tariff_derivation, s.brctd_staging_ref_document, s.brctd_created_by, s.brctd_created_date, s.brctd_cont_amend_no, s.brctd_billable_quantity, s.brctd_dd_br_volume, s.brctd_no_of_pallet, s.brctd_actual_weight, s.brctd_actual_weight_uom, s.brctd_actual_volume, s.brctd_actual_volume_uom, s.brctd_basic_charge, s.brctd_cont_min_charge, s.brctd_chargeable_qty, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_brctd_br_thu_wise_contract_tariff_dtls s
	INNER JOIN 	dwh.f_bookingrequest fh 
			ON  s.brctd_ou 			= fh.br_ouinstance
            AND S.brctd_br_id       = fh.br_request_Id
    LEFT JOIN dwh.F_BRThuContractDetail t
    ON s.brctd_ou = t.brctd_ou
    AND s.brctd_br_id = t.brctd_br_id
    AND s.brctd_tariff_id = t.brctd_tariff_id
	AND COALESCE(t.brctd_thu_line_no,'') = COALESCE(s.brctd_thu_line_no,'')
	AND t.brctd_staging_ref_document =  s.brctd_staging_ref_document
    WHERE t.brctd_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_brctd_br_thu_wise_contract_tariff_dtls
    (
        brctd_ou, brctd_br_id, brctd_thu_line_no, brctd_contract_id, brctd_cont_type, brctd_cont_service_type, brctd_cont_valid_from, brctd_cont_valid_to, brctd_tariff_id, brctd_tf_tp_type_code, brctd_tf_tp_division, brctd_tf_tp_location, brctd_tf_tp_validity_id, brctd_tf_tp_frm_ship_point, brctd_tf_tp_to_ship_point, brctd_tf_tp_frm_geo_type, brctd_tf_tp_frm_geo, brctd_tf_tp_to_geo_type, brctd_tf_tp_to_geo, brctd_tf_tp_dist_check, brctd_tf_tp_dist_min, brctd_tf_tp_dist_max, brctd_tf_tp_dist_uom, brctd_tf_tp_wt, brctd_tf_tp_wt_min, brctd_tf_tp_wt_max, brctd_tf_tp_wt_uom, brctd_tf_tp_vol, brctd_tf_tp_vol_min, brctd_tf_tp_vol_max, brctd_tf_tp_vol_uom, brctd_tf_tp_trip_time, brctd_tf_tp_trip_time_min, brctd_tf_tp_trip_time_max, brctd_tf_tp_trip_time_uom, brctd_tf_tp_vol_conversion, brctd_tf_tp_service, brctd_tf_tp_sub_service, brctd_tf_tp_thu_type, brctd_tf_tp_min_no_thu, brctd_tf_tp_max_no_thu, brctd_tf_tp_class_of_stores, brctd_tf_tp_thu_space_frm, brctd_tf_tp_thu_space_to, brctd_tf_tp_equip_type, brctd_tf_tp_veh_type, brctd_billable_weight, brctd_rate_for_billable_weight, brctd_stage_of_tariff_derivation, brctd_staging_ref_document, brctd_created_by, brctd_created_date, brctd_last_modified_by, brctd_last_modified_date, brctd_timestamp, brctd_cont_amend_no, brctd_billable_quantity, brctd_dd_br_volume, brctd_no_of_pallet, brctd_actual_weight, brctd_actual_weight_uom, brctd_actual_volume, brctd_actual_volume_uom, brctd_basic_charge, brctd_cont_min_charge, brctd_leg_behaviour_id, brctd_chargeable_qty, etlcreateddatetime
    )
    SELECT
        brctd_ou, brctd_br_id, brctd_thu_line_no, brctd_contract_id, brctd_cont_type, brctd_cont_service_type, brctd_cont_valid_from, brctd_cont_valid_to, brctd_tariff_id, brctd_tf_tp_type_code, brctd_tf_tp_division, brctd_tf_tp_location, brctd_tf_tp_validity_id, brctd_tf_tp_frm_ship_point, brctd_tf_tp_to_ship_point, brctd_tf_tp_frm_geo_type, brctd_tf_tp_frm_geo, brctd_tf_tp_to_geo_type, brctd_tf_tp_to_geo, brctd_tf_tp_dist_check, brctd_tf_tp_dist_min, brctd_tf_tp_dist_max, brctd_tf_tp_dist_uom, brctd_tf_tp_wt, brctd_tf_tp_wt_min, brctd_tf_tp_wt_max, brctd_tf_tp_wt_uom, brctd_tf_tp_vol, brctd_tf_tp_vol_min, brctd_tf_tp_vol_max, brctd_tf_tp_vol_uom, brctd_tf_tp_trip_time, brctd_tf_tp_trip_time_min, brctd_tf_tp_trip_time_max, brctd_tf_tp_trip_time_uom, brctd_tf_tp_vol_conversion, brctd_tf_tp_service, brctd_tf_tp_sub_service, brctd_tf_tp_thu_type, brctd_tf_tp_min_no_thu, brctd_tf_tp_max_no_thu, brctd_tf_tp_class_of_stores, brctd_tf_tp_thu_space_frm, brctd_tf_tp_thu_space_to, brctd_tf_tp_equip_type, brctd_tf_tp_veh_type, brctd_billable_weight, brctd_rate_for_billable_weight, brctd_stage_of_tariff_derivation, brctd_staging_ref_document, brctd_created_by, brctd_created_date, brctd_last_modified_by, brctd_last_modified_date, brctd_timestamp, brctd_cont_amend_no, brctd_billable_quantity, brctd_dd_br_volume, brctd_no_of_pallet, brctd_actual_weight, brctd_actual_weight_uom, brctd_actual_volume, brctd_actual_volume_uom, brctd_basic_charge, brctd_cont_min_charge, brctd_leg_behaviour_id, brctd_chargeable_qty, etlcreateddatetime
    FROM stg.stg_tms_brctd_br_thu_wise_contract_tariff_dtls;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_brthucontractdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cbadjadjvcrdocdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cbadjadjvcrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_cbadj_adjv_crdoc_dtl;

        UPDATE dwh.F_cbadjadjvcrdocdtl t
        SET

        ou_id                      = s.ou_id,
        adj_voucher_no             = s.adj_voucher_no,
        cr_doc_ou                  = s.cr_doc_ou,
        cr_doc_type                = s.cr_doc_type,
        cr_doc_no                  = s.cr_doc_no,
        term_no                    = s.term_no,
        voucher_tran_type          = s.voucher_tran_type,
        cr_doc_adj_amt             = s.cr_doc_adj_amt,
        au_cr_doc_unadj_amt        = s.au_cr_doc_unadj_amt,
        au_cr_doc_date             = s.au_cr_doc_date,
        au_cr_doc_cur              = s.au_cr_doc_cur,
        au_fb_id                   = s.au_fb_id,
        au_receipt_type            = s.au_receipt_type,
        au_billing_point           = s.au_billing_point,
        parent_key                 = s.parent_key,
        current_key                = s.current_key,
        tran_type                  = s.tran_type,
        batch_id                   = s.batch_id,
        au_base_exrate             = s.au_base_exrate,
        au_par_base_exrate         = s.au_par_base_exrate,
        writeoff_amount            = s.writeoff_amount,
        res_writeoff_perc          = s.res_writeoff_perc,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
        FROM stg.stg_cbadj_adjv_crdoc_dtl s
        WHERE t.ou_id = s.ou_id
    AND t.adj_voucher_no = s.adj_voucher_no
    AND t.cr_doc_ou = s.cr_doc_ou
    AND t.cr_doc_type = s.cr_doc_type
    AND t.cr_doc_no = s.cr_doc_no
    AND t.term_no = s.term_no
    AND t.voucher_tran_type = s.voucher_tran_type;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_cbadjadjvcrdocdtl
        (
            ou_id, adj_voucher_no, cr_doc_ou, cr_doc_type, cr_doc_no, term_no, voucher_tran_type, cr_doc_adj_amt, au_cr_doc_unadj_amt, au_cr_doc_date, au_cr_doc_cur, au_fb_id, au_receipt_type, au_billing_point, parent_key, current_key, tran_type, batch_id, au_base_exrate, au_par_base_exrate, writeoff_amount, res_writeoff_perc, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            s.ou_id, s.adj_voucher_no, s.cr_doc_ou, s.cr_doc_type, s.cr_doc_no, s.term_no, s.voucher_tran_type, s.cr_doc_adj_amt, s.au_cr_doc_unadj_amt, s.au_cr_doc_date, s.au_cr_doc_cur, s.au_fb_id, s.au_receipt_type, s.au_billing_point, s.parent_key, s.current_key, s.tran_type, s.batch_id, s.au_base_exrate, s.au_par_base_exrate, s.writeoff_amount, s.res_writeoff_perc, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_cbadj_adjv_crdoc_dtl s
        LEFT JOIN dwh.F_cbadjadjvcrdocdtl t
        ON s.ou_id = t.ou_id
    AND s.adj_voucher_no = t.adj_voucher_no
    AND s.cr_doc_ou = t.cr_doc_ou
    AND s.cr_doc_type = t.cr_doc_type
    AND s.cr_doc_no = t.cr_doc_no
    AND s.term_no = t.term_no
    AND s.voucher_tran_type = t.voucher_tran_type
        WHERE t.ou_id IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_cbadj_adjv_crdoc_dtl
        (
            ou_id, adj_voucher_no, cr_doc_ou, cr_doc_type, cr_doc_no, term_no, voucher_tran_type, cr_doc_adj_amt, au_cr_doc_unadj_amt, au_cr_doc_date, au_cr_doc_cur, au_fb_id, au_receipt_type, au_billing_point, parent_key, current_key, tran_type, batch_id, au_base_exrate, au_par_base_exrate, BookingNo, MasterBillOfLadingNo, BillOfLadingNo, writeoff_amount, project_ou, Project_code, afe_number, job_number, refcostcenter_hdr, res_writeoff_perc, au_crosscur_erate, etlcreateddatetime
        )
        SELECT
            ou_id, adj_voucher_no, cr_doc_ou, cr_doc_type, cr_doc_no, term_no, voucher_tran_type, cr_doc_adj_amt, au_cr_doc_unadj_amt, au_cr_doc_date, au_cr_doc_cur, au_fb_id, au_receipt_type, au_billing_point, parent_key, current_key, tran_type, batch_id, au_base_exrate, au_par_base_exrate, BookingNo, MasterBillOfLadingNo, BillOfLadingNo, writeoff_amount, project_ou, Project_code, afe_number, job_number, refcostcenter_hdr, res_writeoff_perc, au_crosscur_erate, etlcreateddatetime
        FROM stg.stg_cbadj_adjv_crdoc_dtl;
    END IF;

   
   EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cbadjadjvcrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cbadjadjvdrdocdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cbadjadjvdrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

   
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_cbadj_adjv_drdoc_dtl;

        UPDATE dwh.F_cbadjadjvdrdocdtl t
        SET
            ou_id                      = s.ou_id,
        adj_voucher_no             = s.adj_voucher_no,
        dr_doc_ou                  = s.dr_doc_ou,
        dr_doc_type                = s.dr_doc_type,
        dr_doc_no                  = s.dr_doc_no,
        term_no                    = s.term_no,
        voucher_tran_type          = s.voucher_tran_type,
        dr_doc_adj_amt             = s.dr_doc_adj_amt,
        discount                   = s.discount,
        proposed_discount          = s.proposed_discount,
        charges                    = s.charges,
        proposed_charges           = s.proposed_charges,
        au_dr_doc_unadj_amt        = s.au_dr_doc_unadj_amt,
        au_dr_doc_cur              = s.au_dr_doc_cur,
        au_crosscur_erate          = s.au_crosscur_erate,
        au_discount_date           = s.au_discount_date,
        au_dr_doc_date             = s.au_dr_doc_date,
        au_fb_id                   = s.au_fb_id,
        au_billing_point           = s.au_billing_point,
        parent_key                 = s.parent_key,
        current_key                = s.current_key,
        au_due_date                = s.au_due_date,
        au_disc_available          = s.au_disc_available,
        au_cust_code               = s.au_cust_code,
        batch_id                   = s.batch_id,
        au_base_exrate             = s.au_base_exrate,
        au_par_base_exrate         = s.au_par_base_exrate,
        res_writeoff_perc          = s.res_writeoff_perc,
        writeoff_amount            = s.writeoff_amount,
        cr_doc_adjusted            = s.cr_doc_adjusted,
        cr_doc_disc                = s.cr_doc_disc,
        cr_doc_charge              = s.cr_doc_charge,
            etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
        FROM stg.stg_cbadj_adjv_drdoc_dtl s
        WHERE t.ou_id = s.ou_id
    AND t.adj_voucher_no = s.adj_voucher_no
    AND t.dr_doc_ou = s.dr_doc_ou
    AND t.dr_doc_type = s.dr_doc_type
    AND t.dr_doc_no = s.dr_doc_no
    AND t.term_no = s.term_no
    AND t.voucher_tran_type = s.voucher_tran_type;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_cbadjadjvdrdocdtl
        (
            ou_id, adj_voucher_no, dr_doc_ou, dr_doc_type, dr_doc_no, term_no, voucher_tran_type, dr_doc_adj_amt, discount, proposed_discount, charges, proposed_charges, au_dr_doc_unadj_amt, au_dr_doc_cur, au_crosscur_erate, au_discount_date, au_dr_doc_date, au_fb_id, au_billing_point, parent_key, current_key, au_due_date, au_disc_available, au_cust_code, batch_id, au_base_exrate, au_par_base_exrate, res_writeoff_perc, writeoff_amount, cr_doc_adjusted, cr_doc_disc, cr_doc_charge, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            s.ou_id, s.adj_voucher_no, s.dr_doc_ou, s.dr_doc_type, s.dr_doc_no, s.term_no, s.voucher_tran_type, s.dr_doc_adj_amt, s.discount, s.proposed_discount, s.charges, s.proposed_charges, s.au_dr_doc_unadj_amt, s.au_dr_doc_cur, s.au_crosscur_erate, s.au_discount_date, s.au_dr_doc_date, s.au_fb_id, s.au_billing_point, s.parent_key, s.current_key, s.au_due_date, s.au_disc_available, s.au_cust_code, s.batch_id, s.au_base_exrate, s.au_par_base_exrate, s.res_writeoff_perc, s.writeoff_amount, s.cr_doc_adjusted, s.cr_doc_disc, s.cr_doc_charge, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_cbadj_adjv_drdoc_dtl s
        LEFT JOIN dwh.F_cbadjadjvdrdocdtl t
        ON s.ou_id = t.ou_id
    AND s.adj_voucher_no = t.adj_voucher_no
    AND s.dr_doc_ou = t.dr_doc_ou
    AND s.dr_doc_type = t.dr_doc_type
    AND s.dr_doc_no = t.dr_doc_no
    AND s.term_no = t.term_no
    AND s.voucher_tran_type = t.voucher_tran_type
        WHERE t.ou_id IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_cbadj_adjv_drdoc_dtl
        (
            ou_id, adj_voucher_no, dr_doc_ou, dr_doc_type, dr_doc_no, term_no, voucher_tran_type, dr_doc_adj_amt, discount, proposed_discount, charges, proposed_charges, cost_center, analysis_code, subanalysis_code, au_pur_ord_ref, au_dr_doc_unadj_amt, au_dr_doc_cur, au_crosscur_erate, au_discount_date, au_dr_doc_date, au_fb_id, au_billing_point, parent_key, current_key, au_sale_ord_ref, au_due_date, au_disc_available, au_cust_code, batch_id, au_base_exrate, au_par_base_exrate, tcal_status, tcal_exclusive_amt, total_tcal_amount, res_writeoff_perc, writeoff_amount, cr_doc_adjusted, cr_doc_disc, cr_doc_charge, BookingNo, MasterBillOfLadingNo, BillOfLadingNo, NonTaxable_amt, Taxable_amt, ServiceTaxamt, project_ou, Project_code, afe_number, job_number, refcostcenter_hdr, tax_adj_jvno, etlcreateddatetime
        )
        SELECT
            ou_id, adj_voucher_no, dr_doc_ou, dr_doc_type, dr_doc_no, term_no, voucher_tran_type, dr_doc_adj_amt, discount, proposed_discount, charges, proposed_charges, cost_center, analysis_code, subanalysis_code, au_pur_ord_ref, au_dr_doc_unadj_amt, au_dr_doc_cur, au_crosscur_erate, au_discount_date, au_dr_doc_date, au_fb_id, au_billing_point, parent_key, current_key, au_sale_ord_ref, au_due_date, au_disc_available, au_cust_code, batch_id, au_base_exrate, au_par_base_exrate, tcal_status, tcal_exclusive_amt, total_tcal_amount, res_writeoff_perc, writeoff_amount, cr_doc_adjusted, cr_doc_disc, cr_doc_charge, BookingNo, MasterBillOfLadingNo, BillOfLadingNo, NonTaxable_amt, Taxable_amt, ServiceTaxamt, project_ou, Project_code, afe_number, job_number, refcostcenter_hdr, tax_adj_jvno, etlcreateddatetime
        FROM stg.stg_cbadj_adjv_drdoc_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cbadjadjvdrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cbadjadjvoucherhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cbadjadjvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;


        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_cbadj_adjvoucher_hdr;

        UPDATE dwh.F_cbadjadjvoucherhdr t
        SET
            ou_id                     = s.ou_id,
        adj_voucher_no            = s.adj_voucher_no,
        voucher_tran_type         = s.voucher_tran_type,
        timestamp                 = s.timestamp,
        voucher_date              = s.voucher_date,
        fb_id                     = s.fb_id,
        voucher_amount            = s.voucher_amount,
        status                    = s.status,
        cust_code                 = s.cust_code,
        cust_hierarchy            = s.cust_hierarchy,
        adjust_seq                = s.adjust_seq,
        currency_code             = s.currency_code,
        voucher_type              = s.voucher_type,
        rev_voucher_no            = s.rev_voucher_no,
        reversal_date             = s.reversal_date,
        notype_no                 = s.notype_no,
        currentkey                = s.currentkey,
        batch_id                  = s.batch_id,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        tcal_status               = s.tcal_status,
        tcal_exclusive_amt        = s.tcal_exclusive_amt,
            etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
        FROM stg.stg_cbadj_adjvoucher_hdr s
        WHERE t.ou_id = s.ou_id
    AND t.adj_voucher_no = s.adj_voucher_no
    AND t.voucher_tran_type = s.voucher_tran_type;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_cbadjadjvoucherhdr
        (
            ou_id, adj_voucher_no, voucher_tran_type, timestamp, voucher_date, fb_id, voucher_amount, status, cust_code, cust_hierarchy, adjust_seq, currency_code, voucher_type, rev_voucher_no, reversal_date, notype_no, currentkey, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_status, tcal_exclusive_amt, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            s.ou_id, s.adj_voucher_no, s.voucher_tran_type, s.timestamp, s.voucher_date, s.fb_id, s.voucher_amount, s.status, s.cust_code, s.cust_hierarchy, s.adjust_seq, s.currency_code, s.voucher_type, s.rev_voucher_no, s.reversal_date, s.notype_no, s.currentkey, s.batch_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.tcal_status, s.tcal_exclusive_amt, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_cbadj_adjvoucher_hdr s
        LEFT JOIN dwh.F_cbadjadjvoucherhdr t
        ON s.ou_id = t.ou_id
    AND s.adj_voucher_no = t.adj_voucher_no
    AND s.voucher_tran_type = t.voucher_tran_type
        WHERE t.ou_id IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_cbadj_adjvoucher_hdr
        (
            ou_id, adj_voucher_no, voucher_tran_type, timestamp, voucher_date, fb_id, voucher_amount, status, cust_code, cust_hierarchy, adjust_seq, currency_code, voucher_type, rev_voucher_no, reversal_date, notype_no, reason_code, remarks, currentkey, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_status, tcal_exclusive_amt, total_tcal_amount, consistency_stamp, voucher_amount_OvrAdj, ims_flag, scheme_code, CrNoteNo, DrNoteNo, CrNoteOU, DrNoteOU, CrNoteFB, DrNoteFB, CrVoucNo, DrVoucNo, SrDocType, DestiBU, RevCrNoteNo, RevDrNoteNo, RevCrVoucNo, RevDrVoucNo, workflow_status, pdc_flag, etlcreateddatetime
        )
        SELECT
            ou_id, adj_voucher_no, voucher_tran_type, timestamp, voucher_date, fb_id, voucher_amount, status, cust_code, cust_hierarchy, adjust_seq, currency_code, voucher_type, rev_voucher_no, reversal_date, notype_no, reason_code, remarks, currentkey, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_status, tcal_exclusive_amt, total_tcal_amount, consistency_stamp, voucher_amount_OvrAdj, ims_flag, scheme_code, CrNoteNo, DrNoteNo, CrNoteOU, DrNoteOU, CrNoteFB, DrNoteFB, CrVoucNo, DrVoucNo, SrDocType, DestiBU, RevCrNoteNo, RevDrNoteNo, RevCrVoucNo, RevDrVoucNo, workflow_status, pdc_flag, etlcreateddatetime
        FROM stg.stg_cbadj_adjvoucher_hdr;
    END IF;


    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cbadjadjvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cdcnaccdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cdcnaccdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_cdcn_acc_dtl;

        UPDATE dwh.F_cdcnaccdtl t
        SET
        timestamp               = s.ctimestamp,
        account_code            = s.account_code,
        drcr_id                 = s.drcr_id,
        ref_doc_type            = s.ref_doc_type,
        ref_doc_no              = s.ref_doc_no,
        ref_doc_date            = s.ref_doc_date,
        ref_doc_amount          = s.ref_doc_amount,
        ordering_ou             = s.ordering_ou,
        tran_amount             = s.tran_amount,
        remarks                 = s.remarks,
        cost_center             = s.cost_center,
        base_amount             = s.base_amount,
        par_base_amount         = s.par_base_amount,
        createddate             = s.createddate,
        modifieddate            = s.modifieddate,
        usageid                 = s.usageid,
        MAIL_SENT               = s.MAIL_SENT,
        Desti_ACCDescrip        = s.Desti_ACCDescrip,
        own_tax_region          = s.own_tax_region,
        decl_tax_region         = s.decl_tax_region,
        party_tax_region        = s.party_tax_region,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
        FROM stg.stg_cdcn_acc_dtl s
        WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.line_no = s.line_no;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_cdcnaccdtl
        (
            tran_type, tran_ou, tran_no, line_no, timestamp, account_code, drcr_id, ref_doc_type, ref_doc_no, ref_doc_date, ref_doc_amount, ordering_ou, tran_amount, remarks, cost_center, base_amount, par_base_amount, createddate, modifieddate ,usageid, MAIL_SENT, Desti_ACCDescrip, own_tax_region, decl_tax_region, party_tax_region, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            s.tran_type, s.tran_ou, s.tran_no, s.line_no, s.ctimestamp, s.account_code, s.drcr_id, s.ref_doc_type, s.ref_doc_no, s.ref_doc_date, s.ref_doc_amount, s.ordering_ou, s.tran_amount, s.remarks, s.cost_center, s.base_amount, s.par_base_amount, s.createddate,s.modifieddate, s.usageid, s.MAIL_SENT, s.Desti_ACCDescrip, s.own_tax_region, s.decl_tax_region, s.party_tax_region, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_cdcn_acc_dtl s
        LEFT JOIN dwh.F_cdcnaccdtl t
        ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.line_no = t.line_no
        WHERE t.tran_type IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_cdcn_acc_dtl
        (
            tran_type, tran_ou, tran_no, line_no, account_code, drcr_id, ref_doc_type, ref_doc_no, ref_doc_date, ref_doc_amount, ordering_ou, tran_amount, remarks, cost_center, analysis_code, subanalysis_code, base_amount, par_base_amount, createdby, createddate, modifiedby, modifieddate, BookingNo, BillOfLadingNo, MasterBillOfLadingNo, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, dest_usageid, incomeexpense, dest_subanalysis_code, dest_analysis_code, dest_cost_center, dest_remarks, dest_tran_amount, dest_drcr_id, dest_account_code, usageid, ccdesc, MAIL_SENT, draf_bill_no, draf_bill_line_no, Desti_OU, Desti_SAC, InterFBJVNO, Desti_AC, Desti_ACCCode, Desti_ACCDescrip, Desti_CC, Desti_Comp, Desti_FB, account_code_int, ifb_recon_jvno, own_tax_region, decl_tax_region, party_tax_region, etlcreateddatetime
        )
        SELECT
            tran_type, tran_ou, tran_no, line_no, account_code, drcr_id, ref_doc_type, ref_doc_no, ref_doc_date, ref_doc_amount, ordering_ou, tran_amount, remarks, cost_center, analysis_code, subanalysis_code, base_amount, par_base_amount, createdby, createddate, modifiedby, modifieddate, BookingNo, BillOfLadingNo, MasterBillOfLadingNo, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, dest_usageid, incomeexpense, dest_subanalysis_code, dest_analysis_code, dest_cost_center, dest_remarks, dest_tran_amount, dest_drcr_id, dest_account_code, usageid, ccdesc, MAIL_SENT, draf_bill_no, draf_bill_line_no, Desti_OU, Desti_SAC, InterFBJVNO, Desti_AC, Desti_ACCCode, Desti_ACCDescrip, Desti_CC, Desti_Comp, Desti_FB, account_code_int, ifb_recon_jvno, own_tax_region, decl_tax_region, party_tax_region, etlcreateddatetime
        FROM stg.stg_cdcn_acc_dtl;
    END IF;

   EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cdcnaccdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cdcnarpostingsdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cdcnarpostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_cdcn_ar_postings_dtl;

    UPDATE dwh.F_cdcnarpostingsdtl t
    SET
    
        cdcnarpostingsdtl_customer_key= COALESCE(cs.customer_key,-1),
        tran_type                = s.tran_type,
        tran_ou                  = s.tran_ou,
        tran_no                  = s.tran_no,
        posting_line_no          = s.posting_line_no,
        ctimestamp               = s.ctimestamp,
        line_no                  = s.line_no,
        company_code             = s.company_code,
        posting_status           = s.posting_status,
        posting_date             = s.posting_date,
        fb_id                    = s.fb_id,
        tran_date                = s.tran_date,
        account_type             = s.account_type,
        account_code             = s.account_code,
        drcr_id                  = s.drcr_id,
        tran_currency            = s.tran_currency,
        tran_amount              = s.tran_amount,
        exchange_rate            = s.exchange_rate,
        base_amount              = s.base_amount,
        par_exchange_rate        = s.par_exchange_rate,
        par_base_amount          = s.par_base_amount,
        cost_center              = s.cost_center,
        guid                     = s.guid,
        cust_code                = s.cust_code,
        entry_date               = s.entry_date,
        auth_date                = s.auth_date,
        item_code                = s.item_code,
        item_variant             = s.item_variant,
        quantity                 = s.quantity,
        reftran_fbid             = s.reftran_fbid,
        reftran_no               = s.reftran_no,
        reftran_ou               = s.reftran_ou,
        ref_tran_type            = s.ref_tran_type,
        source_comp              = s.source_comp,
        hdrremarks               = s.hdrremarks,
        mlremarks                = s.mlremarks,
        item_tcd_type            = s.item_tcd_type,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_cdcn_ar_postings_dtl s
    LEFT JOIN dwh.d_customer cs
		ON  s.cust_code			= cs.customer_id	
		AND s.tran_ou			= cs.customer_ou
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.posting_line_no = s.posting_line_no
    AND t.ctimestamp = s.ctimestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_cdcnarpostingsdtl
    (
        cdcnarpostingsdtl_customer_key,tran_type, tran_ou, tran_no, posting_line_no, ctimestamp, line_no, company_code, posting_status, posting_date, fb_id, tran_date, account_type, account_code, drcr_id, tran_currency, tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, cost_center, guid, cust_code, entry_date, auth_date, item_code, item_variant, quantity, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, source_comp, hdrremarks, mlremarks, item_tcd_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(cs.customer_key,-1),s.tran_type, s.tran_ou, s.tran_no, s.posting_line_no, s.ctimestamp, s.line_no, s.company_code, s.posting_status, s.posting_date, s.fb_id, s.tran_date, s.account_type, s.account_code, s.drcr_id, s.tran_currency, s.tran_amount, s.exchange_rate, s.base_amount, s.par_exchange_rate, s.par_base_amount, s.cost_center, s.guid, s.cust_code, s.entry_date, s.auth_date, s.item_code, s.item_variant, s.quantity, s.reftran_fbid, s.reftran_no, s.reftran_ou, s.ref_tran_type, s.source_comp, s.hdrremarks, s.mlremarks, s.item_tcd_type, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_cdcn_ar_postings_dtl s
    LEFT JOIN dwh.d_customer cs
		ON  s.cust_code			= cs.customer_id	
		AND s.tran_ou			= cs.customer_ou
    LEFT JOIN dwh.F_cdcnarpostingsdtl t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.posting_line_no = t.posting_line_no
    AND s.ctimestamp = t.ctimestamp
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_cdcn_ar_postings_dtl
    (
        tran_type, tran_ou, tran_no, posting_line_no, ctimestamp, line_no, company_code, posting_status, posting_date, fb_id, tran_date, account_type, account_code, drcr_id, tran_currency, tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, cost_center, analysis_code, subanalysis_code, guid, createdby, createddate, modifiedby, modifieddate, cust_code, entry_date, auth_date, item_code, item_variant, quantity, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, uom, org_vat_base_amt, vat_line_no, source_comp, hdrremarks, mlremarks, item_tcd_type, address_id, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, posting_line_no, ctimestamp, line_no, company_code, posting_status, posting_date, fb_id, tran_date, account_type, account_code, drcr_id, tran_currency, tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, cost_center, analysis_code, subanalysis_code, guid, createdby, createddate, modifiedby, modifieddate, cust_code, entry_date, auth_date, item_code, item_variant, quantity, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, uom, org_vat_base_amt, vat_line_no, source_comp, hdrremarks, mlremarks, item_tcd_type, address_id, etlcreateddatetime
    FROM stg.stg_cdcn_ar_postings_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cdcnarpostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cdiarpostingsdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cdiarpostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
    ON    d.sourceid			= h.sourceid
    WHERE d.sourceid		    = p_sourceId
    AND   d.dataflowflag		= p_dataflowflag
    AND   d.targetobject		= p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_cdi_ar_postings_dtl;

    UPDATE dwh.f_cdiarpostingsdtl t
    SET
		company_key				= COALESCE(c.company_key,-1),
		fb_key					= -1,
		curr_key				= COALESCE(cr.curr_key,-1),
		itm_hdr_key				= COALESCE(i.itm_hdr_key,-1),
		uom_key					= COALESCE(u.uom_key,-1),
		customer_key			= COALESCE(cs.customer_key,-1),
		mac_post_flag	 		= s.mac_post_flag,
		vat_line_no	 			= s.vat_line_no,
		vatusageid	 			= s.vatusageid,
		line_no	 				= s.line_no,
		company_code	 		= s.company_code,
		posting_status	 		= s.posting_status,
		posting_date	 		= s.posting_date,
		fb_id	 				= s.fb_id,
		tran_date	 			= s.tran_date,
		account_type	 		= s.account_type,
		account_code	 		= s.account_code,
		drcr_id	 				= s.drcr_id,
		tran_currency	 		= s.tran_currency,
		tran_amount	 			= s.tran_amount,
		exchange_rate	 		= s.exchange_rate,
		base_amount	 			= s.base_amount,
		par_exchange_rate	 	= s.par_exchange_rate,
		par_base_amount	 		= s.par_base_amount,
		cost_center	 			= s.cost_center,
		analysis_code	 		= s.analysis_code,
		subanalysis_code	 	= s.subanalysis_code,
		guid	 				= s.guid,
		entry_date	 			= s.entry_date,
		auth_date	 			= s.auth_date,
		item_code	 			= s.item_code,
		item_variant	 		= s.item_variant,
		quantity	 			= s.quantity,
		reftran_fbid	 		= s.reftran_fbid,
		reftran_no	 			= s.reftran_no,
		reftran_ou	 			= s.reftran_ou,
		reftran_type	 		= s.reftran_type,
		uom	 					= s.uom,
		cust_code	 			= s.cust_code,
		createdby	 			= s.createdby,
		createddate	 			= s.createddate,
		modifiedby	 			= s.modifiedby,
		modifieddate	 		= s.modifieddate,
		hdrremarks	 			= s.hdrremarks,
		mlremarks	 			= s.mlremarks,
		roundoff_flag	 		= s.roundoff_flag,
		item_tcd_type	 		= s.item_tcd_type,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_cdi_ar_postings_dtl s
	LEFT JOIN dwh.d_company c
		ON  s.company_code		= c.company_code
-- 	LEFT JOIN dwh.d_financebook f
-- 		ON  s.fb_id				= f.fb_id
	LEFT JOIN dwh.d_currency cr
		ON  s.tran_currency		= cr.iso_curr_code
	LEFT JOIN dwh.d_itemheader i
		ON  s.item_code			= i.itm_code
		AND s.tran_ou			= i.itm_ou
	LEFT JOIN dwh.d_uom u
		ON  s.uom				= u.mas_uomcode
		AND s.tran_ou			= u.mas_ouinstance
	LEFT JOIN dwh.d_customer cs
		ON  s.cust_code			= cs.customer_id	
		AND s.tran_ou			= cs.customer_ou
    WHERE 	t.tran_type	 		= s.tran_type
		AND	t.tran_ou	 		= s.tran_ou
		AND	t.tran_no	 		= s.tran_no
		AND t.posting_line_no	= s.posting_line_no
		AND t.ctimestamp	 	= s.ctimestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_cdiarpostingsdtl
    (
    	company_key					, fb_key				, curr_key,
		itm_hdr_key					, uom_key				, customer_key 					, tran_type, 
		tran_ou						, tran_no				, posting_line_no				, mac_post_flag, 
		vat_line_no					, vatusageid			, ctimestamp					, line_no, 
		company_code				, posting_status		, posting_date					, fb_id, 
		tran_date					, account_type			, account_code					, drcr_id, 
		tran_currency				, tran_amount			, exchange_rate					, base_amount, 
		par_exchange_rate			, par_base_amount		, cost_center					, analysis_code, 
		subanalysis_code			, guid					, entry_date					, auth_date, 
		item_code					, item_variant			, quantity						, reftran_fbid, 
		reftran_no					, reftran_ou			, reftran_type					, uom, 
		cust_code					, createdby				, createddate					, modifiedby, 
		modifieddate				, hdrremarks			, mlremarks						, roundoff_flag, 
		item_tcd_type				, etlactiveind			, etljobname					, envsourcecd, 
		datasourcecd				, etlcreatedatetime
    )

    SELECT
		COALESCE(c.company_key,-1)	, -1					, COALESCE(cr.curr_key,-1),
		COALESCE(i.itm_hdr_key,-1)	, COALESCE(u.uom_key,-1), COALESCE(cs.customer_key,-1)	, s.tran_type, 
		s.tran_ou					, s.tran_no				, s.posting_line_no				, s.mac_post_flag, 
		s.vat_line_no				, s.vatusageid			, s.ctimestamp					, s.line_no, 
		s.company_code				, s.posting_status		, s.posting_date				, s.fb_id, 
		s.tran_date					, s.account_type		, s.account_code				, s.drcr_id, 
		s.tran_currency				, s.tran_amount			, s.exchange_rate				, s.base_amount, 
		s.par_exchange_rate			, s.par_base_amount		, s.cost_center					, s.analysis_code, 
		s.subanalysis_code			, s.guid				, s.entry_date					, s.auth_date, 
		s.item_code					, s.item_variant		, s.quantity					, s.reftran_fbid, 
		s.reftran_no				, s.reftran_ou			, s.reftran_type				, s.uom, 
		s.cust_code					, s.createdby			, s.createddate					, s.modifiedby, 
		s.modifieddate				, s.hdrremarks			, s.mlremarks					, s.roundoff_flag, 
		s.item_tcd_type				, 1						, p_etljobname					, p_envsourcecd, 
		p_datasourcecd				, NOW()	
    FROM stg.stg_cdi_ar_postings_dtl s
	LEFT JOIN dwh.d_company c
		ON  s.company_code		= c.company_code
-- 	LEFT JOIN dwh.d_financebook f
-- 		ON  s.fb_id				= f.fb_id
	LEFT JOIN dwh.d_currency cr
		ON  s.tran_currency		= cr.iso_curr_code
	LEFT JOIN dwh.d_itemheader i
		ON  s.item_code			= i.itm_code
		AND s.tran_ou			= i.itm_ou
	LEFT JOIN dwh.d_uom u
		ON  s.uom				= u.mas_uomcode
		AND s.tran_ou			= u.mas_ouinstance
	LEFT JOIN dwh.d_customer cs
		ON  s.cust_code			= cs.customer_id	
		AND s.tran_ou			= cs.customer_ou	
    LEFT JOIN dwh.f_cdiarpostingsdtl t
    ON		t.tran_type	 		= s.tran_type
		AND	t.tran_ou	 		= s.tran_ou
		AND	t.tran_no	 		= s.tran_no
		AND t.posting_line_no	= s.posting_line_no
		AND t.ctimestamp	 	= s.ctimestamp
    WHERE	t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_cdi_ar_postings_dtl
    (
        tran_type		, tran_ou			, tran_no			, posting_line_no	, mac_post_flag, 
		vat_line_no		, vatusageid		, ctimestamp		, line_no			, company_code, 
		posting_status	, posting_date		, fb_id				, tran_date			, account_type, 
		account_code	, drcr_id			, tran_currency		, tran_amount		, exchange_rate, 
		base_amount		, par_exchange_rate	, par_base_amount	, cost_center		, analysis_code, 
		subanalysis_code, guid				, entry_date		, auth_date			, item_code, 
		item_variant	, quantity			, reftran_fbid		, reftran_no		, reftran_ou, 
		reftran_type	, uom				, cust_code			, org_vat_base_amt	, createdby, 
		createddate		, modifiedby		, modifieddate		, hdrremarks		, mlremarks, 
		roundoff_flag	, item_tcd_type		, address_id		, etlcreateddatetime
    )
    SELECT
        tran_type		, tran_ou			, tran_no			, posting_line_no	, mac_post_flag, 
		vat_line_no		, vatusageid		, ctimestamp		, line_no			, company_code, 
		posting_status	, posting_date		, fb_id				, tran_date			, account_type, 
		account_code	, drcr_id			, tran_currency		, tran_amount		, exchange_rate, 
		base_amount		, par_exchange_rate	, par_base_amount	, cost_center		, analysis_code, 
		subanalysis_code, guid				, entry_date		, auth_date			, item_code, 
		item_variant	, quantity			, reftran_fbid		, reftran_no		, reftran_ou, 
		reftran_type	, uom				, cust_code			, org_vat_base_amt	, createdby, 
		createddate		, modifiedby		, modifieddate		, hdrremarks		, mlremarks, 
		roundoff_flag	, item_tcd_type		, address_id		, etlcreateddatetime
    FROM stg.stg_cdi_ar_postings_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cdiarpostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cdiinvoicehdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cdiinvoicehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_cdi_invoice_hdr;

    UPDATE dwh.F_cdiinvoicehdr t
    SET
        fb_key                    	= -1,
        curr_key                    = COALESCE(cr.curr_key,-1),		
        tran_status                 = s.tran_status,
        tran_date                   = s.tran_date,
        anchor_date                 = s.anchor_date,
        fb_id                       = s.fb_id,
        bill_to_cust                = s.bill_to_cust,
        auto_adjust                 = s.auto_adjust,
        tran_currency               = s.tran_currency,
        exchange_rate               = s.exchange_rate,
        pay_term                    = s.pay_term,
        payterm_version             = s.payterm_version,
        receipt_method              = s.receipt_method,
        comments                    = s.comments,
        tran_amount                 = s.tran_amount,
        receipt_type                = s.receipt_type,
        sales_channel               = s.sales_channel,
        sales_type                  = s.sales_type,
        ship_to_cust                = s.ship_to_cust,
        ship_to_id                  = s.ship_to_id,
        item_amount                 = s.item_amount,
        gross_frt_amount            = s.gross_frt_amount,
        net_frt_amount              = s.net_frt_amount,
        base_amount                 = s.base_amount,
        rev_doc_no                  = s.rev_doc_no,
        rev_doc_ou                  = s.rev_doc_ou,
        rev_date                    = s.rev_date,
        ref_doc_no                  = s.ref_doc_no,
        ref_doc_ou                  = s.ref_doc_ou,
        rev_reason_code             = s.rev_reason_code,
        rev_remarks                 = s.rev_remarks,
        disc_comp_basis             = s.disc_comp_basis,
        disc_proportional           = s.disc_proportional,
        vat_applicable              = s.vat_applicable,
        pre_round_off_amount        = s.pre_round_off_amount,
        rounded_off_amount          = s.rounded_off_amount,
        batch_id                    = s.batch_id,
        createdby                   = s.createdby,
        createddate                 = s.createddate,
        modifiedby                  = s.modifiedby,
        modifieddate                = s.modifieddate,
        tcal_status                 = s.tcal_status,
        tcal_exclusive_amt          = s.tcal_exclusive_amt,
        total_tcal_amount           = s.total_tcal_amount,
        bill_toid                   = s.bill_toid,
        draft_flag                  = s.draft_flag,
        cust_account_code           = s.cust_account_code,
        ibe_flag                    = s.ibe_flag,
        autogen_flag                = s.autogen_flag,
        autogen_comp_id             = s.autogen_comp_id,
        prev_trnamt                 = s.prev_trnamt,
        num_series                  = s.num_series,
        retamount                   = s.retamount,
        holdamt                     = s.holdamt,
        trnsfr_bill_no              = s.trnsfr_bill_no,
        trnsfr_bill_date            = s.trnsfr_bill_date,
        trnsfr_bill_ou              = s.trnsfr_bill_ou,
        own_taxregion               = s.own_taxregion,
        OT_cust_name                = s.OT_cust_name,
        otc_flag                    = s.otc_flag,
        rpt_ou                      = s.rpt_ou,
        cbadj_ou                    = s.cbadj_ou,
        auto_adjust_chk             = s.auto_adjust_chk,
        receipt_currency            = s.receipt_currency,
        receipt_exchangerate        = s.receipt_exchangerate,
        receipt_instr_type          = s.receipt_instr_type,
        rpt_notype_no               = s.rpt_notype_no,
        rec_tran_type               = s.rec_tran_type,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_cdi_invoice_hdr s
/*	LEFT JOIN dwh.d_financebook f
		ON  s.fb_id					= f.fb_id
		AND s.tran_ou				= f.resou_id*/
	LEFT JOIN dwh.d_currency cr
		ON  s.tran_currency			= cr.iso_curr_code	
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.ctimestamp = s.ctimestamp
    AND t.ict_flag = s.ict_flag
    AND t.lgt_invoice = s.lgt_invoice
    AND t.MAIL_SENT = s.MAIL_SENT;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_cdiinvoicehdr
    (
        fb_key,curr_key,tran_type, tran_ou, tran_no, ctimestamp, tran_status, tran_date, anchor_date, fb_id, bill_to_cust, auto_adjust, tran_currency, exchange_rate, pay_term, payterm_version, receipt_method, comments, tran_amount, receipt_type, sales_channel, sales_type, ship_to_cust, ship_to_id, item_amount, gross_frt_amount, net_frt_amount, base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, disc_comp_basis, disc_proportional, vat_applicable, pre_round_off_amount, rounded_off_amount, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_status, tcal_exclusive_amt, total_tcal_amount, bill_toid, draft_flag, cust_account_code, ibe_flag, autogen_flag, autogen_comp_id, prev_trnamt, ict_flag, num_series, retamount, holdamt, lgt_invoice, trnsfr_bill_no, trnsfr_bill_date, trnsfr_bill_ou, MAIL_SENT, own_taxregion, OT_cust_name, otc_flag, rpt_ou, cbadj_ou, auto_adjust_chk, receipt_currency, receipt_exchangerate, receipt_instr_type, rpt_notype_no, rec_tran_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        -1,COALESCE(cr.curr_key,-1),s.tran_type, s.tran_ou, s.tran_no, s.ctimestamp, s.tran_status, s.tran_date, s.anchor_date, s.fb_id, s.bill_to_cust, s.auto_adjust, s.tran_currency, s.exchange_rate, s.pay_term, s.payterm_version, s.receipt_method, s.comments, s.tran_amount, s.receipt_type, s.sales_channel, s.sales_type, s.ship_to_cust, s.ship_to_id, s.item_amount, s.gross_frt_amount, s.net_frt_amount, s.base_amount, s.rev_doc_no, s.rev_doc_ou, s.rev_date, s.ref_doc_no, s.ref_doc_ou, s.rev_reason_code, s.rev_remarks, s.disc_comp_basis, s.disc_proportional, s.vat_applicable, s.pre_round_off_amount, s.rounded_off_amount, s.batch_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.tcal_status, s.tcal_exclusive_amt, s.total_tcal_amount, s.bill_toid, s.draft_flag, s.cust_account_code, s.ibe_flag, s.autogen_flag, s.autogen_comp_id, s.prev_trnamt, s.ict_flag, s.num_series, s.retamount, s.holdamt, s.lgt_invoice, s.trnsfr_bill_no, s.trnsfr_bill_date, s.trnsfr_bill_ou, s.MAIL_SENT, s.own_taxregion, s.OT_cust_name, s.otc_flag, s.rpt_ou, s.cbadj_ou, s.auto_adjust_chk, s.receipt_currency, s.receipt_exchangerate, s.receipt_instr_type, s.rpt_notype_no, s.rec_tran_type, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_cdi_invoice_hdr s
	/*LEFT JOIN dwh.d_financebook f
		ON  s.fb_id					= f.fb_id
		AND s.tran_ou				= f.resou_id*/
	LEFT JOIN dwh.d_currency cr
		ON  s.tran_currency			= cr.iso_curr_code		
    LEFT JOIN dwh.F_cdiinvoicehdr t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.ctimestamp = t.ctimestamp
    AND s.ict_flag = t.ict_flag
    AND s.lgt_invoice = t.lgt_invoice
    AND s.MAIL_SENT = t.MAIL_SENT
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_cdi_invoice_hdr
    (
        tran_type, tran_ou, tran_no, ctimestamp, tran_status, tran_date, anchor_date, fb_id, bill_to_cust, auto_adjust, tran_currency, exchange_rate, pay_term, payterm_version, receipt_method, comments, tran_amount, receipt_type, sales_channel, sales_type, ship_to_cust, ship_to_id, price_list_code, sales_person, par_exchange_rate, item_amount, tax_amount, disc_amount, gross_frt_amount, net_frt_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, posting_status, disc_comp_basis, disc_proportional, comp_bp_code, bank_code, lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, cust_bank_acct, cust_bank_id, vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, vat_amount, vat_incl_amount, frt_cost_center, frt_analysis_code, frt_subanalysis_code, pre_round_off_amount, rounded_off_amount, batch_id, createdby, createddate, modifiedby, modifieddate, doc_status, cust_companycode, cust_comppttname, cust_suplbank, cust_suplbankname, cust_swiftid, cust_ibanno, cust_lsvcontractid, cust_contractref, cust_lsvfromdate, cust_lsvtodate, cust_contallowed, cust_contactperson, cust_bankclearno, tcal_status, tcal_exclusive_amt, total_tcal_amount, bill_toid, draft_flag, cust_account_code, cdi_pick_notes, cdi_pack_notes, cdi_shipment_notes, cdi_invoice_notes, cdi_order_priority, cdi_sales_team, ibe_flag, bank_cash_code, BillOfLadingNo, BookingNo, MasterBillOfLadingNo, autogen_flag, autogen_comp_id, consistency_stamp, workflow_status, prev_trnamt, afe_number, job_number, costcenter_hdr, project_ou, Project_code, ict_flag, template_no, num_series, retaccount, retpayterm, retamount, holdaccount, holdpayterm, holdamt, lgt_invoice, trnsfr_bill_no, trnsfr_bill_date, trnsfr_bill_ou, MAIL_SENT, own_taxregion, OT_cust_name, otc_flag, adj_tran_type, rpt_ou, cbadj_ou, auto_adjust_chk, receipt_mode, receipt_currency, receipt_exchangerate, receipt_instr_no, receipt_instr_date, receipt_instr_amount, receipt_micr_no, receipt_bankcode, receipt_instr_type, comp_ref_no, rpt_notype_no, receipt_no, rec_tran_type, cbadj_voucher_no, crdoc_no, diver_status, freigtmethod, invoicetype, cdi_spemp_code, authorization_Date, tms_receipt_date, TMS_invoice, TMS_receipt_no, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, ctimestamp, tran_status, tran_date, anchor_date, fb_id, bill_to_cust, auto_adjust, tran_currency, exchange_rate, pay_term, payterm_version, receipt_method, comments, tran_amount, receipt_type, sales_channel, sales_type, ship_to_cust, ship_to_id, price_list_code, sales_person, par_exchange_rate, item_amount, tax_amount, disc_amount, gross_frt_amount, net_frt_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, posting_status, disc_comp_basis, disc_proportional, comp_bp_code, bank_code, lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, cust_bank_acct, cust_bank_id, vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, vat_amount, vat_incl_amount, frt_cost_center, frt_analysis_code, frt_subanalysis_code, pre_round_off_amount, rounded_off_amount, batch_id, createdby, createddate, modifiedby, modifieddate, doc_status, cust_companycode, cust_comppttname, cust_suplbank, cust_suplbankname, cust_swiftid, cust_ibanno, cust_lsvcontractid, cust_contractref, cust_lsvfromdate, cust_lsvtodate, cust_contallowed, cust_contactperson, cust_bankclearno, tcal_status, tcal_exclusive_amt, total_tcal_amount, bill_toid, draft_flag, cust_account_code, cdi_pick_notes, cdi_pack_notes, cdi_shipment_notes, cdi_invoice_notes, cdi_order_priority, cdi_sales_team, ibe_flag, bank_cash_code, BillOfLadingNo, BookingNo, MasterBillOfLadingNo, autogen_flag, autogen_comp_id, consistency_stamp, workflow_status, prev_trnamt, afe_number, job_number, costcenter_hdr, project_ou, Project_code, ict_flag, template_no, num_series, retaccount, retpayterm, retamount, holdaccount, holdpayterm, holdamt, lgt_invoice, trnsfr_bill_no, trnsfr_bill_date, trnsfr_bill_ou, MAIL_SENT, own_taxregion, OT_cust_name, otc_flag, adj_tran_type, rpt_ou, cbadj_ou, auto_adjust_chk, receipt_mode, receipt_currency, receipt_exchangerate, receipt_instr_no, receipt_instr_date, receipt_instr_amount, receipt_micr_no, receipt_bankcode, receipt_instr_type, comp_ref_no, rpt_notype_no, receipt_no, rec_tran_type, cbadj_voucher_no, crdoc_no, diver_status, freigtmethod, invoicetype, cdi_spemp_code, authorization_Date, tms_receipt_date, TMS_invoice, TMS_receipt_no, etlcreateddatetime
    FROM stg.stg_cdi_invoice_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cdiinvoicehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cdiitemdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cdiitemdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_cdi_item_dtl;

    UPDATE dwh.F_cdiitemdtl t
    SET
        uom_key						= COALESCE(u.uom_key,-1),
        ctimestamp                	= s.ctimestamp,
        visible_line_no           	= s.visible_line_no,
        item_tcd_code             	= s.item_tcd_code,
        item_tcd_var              	= s.item_tcd_var,
        usage_id                  	= s.usage_id,
        item_type                 	= s.item_type,
        uom                       	= s.uom,
        item_qty                  	= s.item_qty,
        unit_price                	= s.unit_price,
        base_value                	= s.base_value,
        item_amount               	= s.item_amount,
        line_amount               	= s.line_amount,
        base_amount               	= s.base_amount,
        sale_purpose              	= s.sale_purpose,
        alloc_method              	= s.alloc_method,
        attr_alloc                	= s.attr_alloc,
        proposal_no               	= s.proposal_no,
        ship_to_cust              	= s.ship_to_cust,
        ship_to_id                	= s.ship_to_id,
        remarks                   	= s.remarks,
        cost_center               	= s.cost_center,
        createdby                 	= s.createdby,
        createddate               	= s.createddate,
        modifiedby                	= s.modifiedby,
        modifieddate              	= s.modifieddate,
        item_desc                 	= s.item_desc,
        usage_desc                	= s.usage_desc,
        draft_bill_line_no        	= s.draft_bill_line_no,
        nature                    	= s.nature,
        draft_bill_no             	= s.draft_bill_no,
        line_account              	= s.line_account,
        own_tax_region            	= s.own_tax_region,
        decl_tax_region           	= s.decl_tax_region,
        party_tax_region          	= s.party_tax_region,
        etlactiveind              	= 1,
        etljobname                	= p_etljobname,
        envsourcecd               	= p_envsourcecd,
        datasourcecd              	= p_datasourcecd,
        etlupdatedatetime         	= NOW()
    FROM stg.stg_cdi_item_dtl s
	LEFT JOIN dwh.d_uom u
		ON  s.uom					= u.mas_uomcode
		AND s.tran_ou				= u.mas_ouinstance	
    WHERE t.tran_type 				= s.tran_type
    AND t.tran_ou 					= s.tran_ou
    AND t.tran_no 					= s.tran_no
    AND t.line_no 					= s.line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_cdiitemdtl
    (
        uom_key, tran_type, tran_ou, tran_no, line_no, ctimestamp, visible_line_no, item_tcd_code, item_tcd_var, usage_id, item_type, uom, item_qty, unit_price, base_value, item_amount, line_amount, base_amount, sale_purpose, alloc_method, attr_alloc, proposal_no, ship_to_cust, ship_to_id, remarks, cost_center, createdby, createddate, modifiedby, modifieddate, item_desc, usage_desc, draft_bill_line_no, nature, draft_bill_no, line_account, own_tax_region, decl_tax_region, party_tax_region, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(u.uom_key,-1), s.tran_type, s.tran_ou, s.tran_no, s.line_no, s.ctimestamp, s.visible_line_no, s.item_tcd_code, s.item_tcd_var, s.usage_id, s.item_type, s.uom, s.item_qty, s.unit_price, s.base_value, s.item_amount, s.line_amount, s.base_amount, s.sale_purpose, s.alloc_method, s.attr_alloc, s.proposal_no, s.ship_to_cust, s.ship_to_id, s.remarks, s.cost_center, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.item_desc, s.usage_desc, s.draft_bill_line_no, s.nature, s.draft_bill_no, s.line_account, s.own_tax_region, s.decl_tax_region, s.party_tax_region, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_cdi_item_dtl s
	LEFT JOIN dwh.d_uom u
		ON  s.uom					= u.mas_uomcode
		AND s.tran_ou				= u.mas_ouinstance	
    LEFT JOIN dwh.F_cdiitemdtl t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.line_no = t.line_no
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_cdi_item_dtl
    (
        tran_type, tran_ou, tran_no, line_no, ctimestamp, visible_line_no, item_tcd_code, item_tcd_var, usage_id, item_type, uom, item_qty, unit_price, base_value, item_amount, tax_amount, disc_amount, line_amount, base_amount, par_base_amount, sale_purpose, warehouse_code, alloc_method, attr_alloc, proposal_no, shipping_ou, ship_to_cust, ship_to_id, packslip_no, packslip_ou, packslip_line_no, remarks, cost_center, analysis_code, subanalysis_code, createdby, createddate, modifiedby, modifieddate, item_desc, cdi_sales_person, cdi_sales_team, alt_uom, alt_tran_qty, usage_desc, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, draft_bill_date, draft_bill_line_no, trnsfr_bill_lineno, location, region, partytype, partycode, line_of_business, department, product, equip_type, service_type, order_type, vehicle_type, activity_type, party_group, nature, currency, draft_bill_no, draft_bill_ref_docno, dest_comp, dest_ou, dest_fbid, dest_costcenter, dest_analysis_code, dest_sub_analysis_code, dest_usageid, Intrfb_jv_no, accountcode_destusage, accountcode_interfb, accountcode_cdi, line_account, fbidml, zoneml, binml, dpi_agreedprice, orginal_item_value, serviceitem, ifb_recon_jvno, own_tax_region, decl_tax_region, party_tax_region, BILLINGPRDFROM, BILLINGPRDTO, BILLINGMILESTONE, MILESTONEDESC, ORDERBOOK_CURRENCY, BILL_LINE_NO, BILL_SCH_SLNO, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, line_no, ctimestamp, visible_line_no, item_tcd_code, item_tcd_var, usage_id, item_type, uom, item_qty, unit_price, base_value, item_amount, tax_amount, disc_amount, line_amount, base_amount, par_base_amount, sale_purpose, warehouse_code, alloc_method, attr_alloc, proposal_no, shipping_ou, ship_to_cust, ship_to_id, packslip_no, packslip_ou, packslip_line_no, remarks, cost_center, analysis_code, subanalysis_code, createdby, createddate, modifiedby, modifieddate, item_desc, cdi_sales_person, cdi_sales_team, alt_uom, alt_tran_qty, usage_desc, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, draft_bill_date, draft_bill_line_no, trnsfr_bill_lineno, location, region, partytype, partycode, line_of_business, department, product, equip_type, service_type, order_type, vehicle_type, activity_type, party_group, nature, currency, draft_bill_no, draft_bill_ref_docno, dest_comp, dest_ou, dest_fbid, dest_costcenter, dest_analysis_code, dest_sub_analysis_code, dest_usageid, Intrfb_jv_no, accountcode_destusage, accountcode_interfb, accountcode_cdi, line_account, fbidml, zoneml, binml, dpi_agreedprice, orginal_item_value, serviceitem, ifb_recon_jvno, own_tax_region, decl_tax_region, party_tax_region, BILLINGPRDFROM, BILLINGPRDTO, BILLINGMILESTONE, MILESTONEDESC, ORDERBOOK_CURRENCY, BILL_LINE_NO, BILL_SCH_SLNO, etlcreateddatetime
    FROM stg.stg_cdi_item_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cdiitemdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_cidochdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_cidochdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_ci_doc_hdr;

    UPDATE dwh.F_cidochdr t
    SET
        company_key					= COALESCE(c.company_key,-1),
        curr_key					= COALESCE(cr.curr_key,-1),
        customer_key				= COALESCE(cs.customer_key,-1),
        fb_key						= -1,
        lo_id                      	= s.lo_id,
        batch_id                   	= s.batch_id,
        fb_id                      	= s.fb_id,
        cust_code                  	= s.cust_code,
        tran_currency              	= s.tran_currency,
        tran_amount                	= s.tran_amount,
        basecur_erate              	= s.basecur_erate,
        par_exchange_rate          	= s.par_exchange_rate,
        doc_status                 	= s.doc_status,
        instr_no                   	= s.instr_no,
        instr_date                 	= s.instr_date,
        instr_status               	= s.instr_status,
        createdby                  	= s.createdby,
        createddate                	= s.createddate,
        modifiedby                 	= s.modifiedby,
        modifieddate               	= s.modifieddate,
        pay_term                   	= s.pay_term,
        due_amount                 	= s.due_amount,
        received_amount            	= s.received_amount,
        adjusted_amount            	= s.adjusted_amount,
        discount_amount            	= s.discount_amount,
        discount_availed           	= s.discount_availed,
        penalty_amount             	= s.penalty_amount,
        write_off_amount           	= s.write_off_amount,
        write_back_amount          	= s.write_back_amount,
        paid_amount                	= s.paid_amount,
        reversed_docno             	= s.reversed_docno,
        reversal_date              	= s.reversal_date,
        adjustment_status          	= s.adjustment_status,
        provision_amount_cm        	= s.provision_amount_cm,
        tran_date                  	= s.tran_date,
        company_code               	= s.company_code,
        ibe_flag                   	= s.ibe_flag,
        base_amount                	= s.base_amount,
        par_base_amount            	= s.par_base_amount,
        report_flag                	= s.report_flag,
        Realization_Date           	= s.Realization_Date,
        otc_flag                   	= s.otc_flag,
        etlactiveind               	= 1,
        etljobname                 	= p_etljobname,
        envsourcecd                	= p_envsourcecd,
        datasourcecd               	= p_datasourcecd,
        etlupdatedatetime          	= NOW()
    FROM stg.stg_ci_doc_hdr s
	LEFT JOIN dwh.d_company c
		ON  s.company_code			= c.company_code
	LEFT JOIN dwh.d_currency cr
		ON  s.tran_currency			= cr.iso_curr_code
	LEFT JOIN dwh.d_customer cs
		ON  s.cust_code				= cs.customer_id	
		AND s.tran_ou				= cs.customer_ou	
-- 	LEFT JOIN dwh.d_financebook f
-- 		ON  s.fb_id					= f.fb_id 
   WHERE t.tran_ou 					= s.tran_ou
    AND t.tran_type 				= s.tran_type
    AND t.tran_no 					= s.tran_no
    AND t.ctimestamp 				= s.ctimestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_cidochdr
    (
        company_key, curr_key, customer_key, fb_key,tran_ou, tran_type, tran_no, ctimestamp, lo_id, batch_id, fb_id, cust_code, tran_currency, tran_amount, basecur_erate, par_exchange_rate, doc_status, instr_no, instr_date, instr_status, createdby, createddate, modifiedby, modifieddate, pay_term, due_amount, received_amount, adjusted_amount, discount_amount, discount_availed, penalty_amount, write_off_amount, write_back_amount, paid_amount, reversed_docno, reversal_date, adjustment_status, provision_amount_cm, tran_date, company_code, ibe_flag, base_amount, par_base_amount, report_flag, Realization_Date, otc_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(c.company_key,-1),COALESCE(cr.curr_key,-1),COALESCE(cs.customer_key,-1),-1,s.tran_ou, s.tran_type, s.tran_no, s.ctimestamp, s.lo_id, s.batch_id, s.fb_id, s.cust_code, s.tran_currency, s.tran_amount, s.basecur_erate, s.par_exchange_rate, s.doc_status, s.instr_no, s.instr_date, s.instr_status, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.pay_term, s.due_amount, s.received_amount, s.adjusted_amount, s.discount_amount, s.discount_availed, s.penalty_amount, s.write_off_amount, s.write_back_amount, s.paid_amount, s.reversed_docno, s.reversal_date, s.adjustment_status, s.provision_amount_cm, s.tran_date, s.company_code, s.ibe_flag, s.base_amount, s.par_base_amount, s.report_flag, s.Realization_Date, s.otc_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_ci_doc_hdr s
	LEFT JOIN dwh.d_company c
		ON  s.company_code			= c.company_code
	LEFT JOIN dwh.d_currency cr
		ON  s.tran_currency			= cr.iso_curr_code
	LEFT JOIN dwh.d_customer cs
		ON  s.cust_code				= cs.customer_id	
		AND s.tran_ou				= cs.customer_ou	
-- 	LEFT JOIN dwh.d_financebook f
-- 		ON  s.fb_id					= f.fb_id	
    LEFT JOIN dwh.F_cidochdr t
    ON s.tran_ou = t.tran_ou
    AND s.tran_type = t.tran_type
    AND s.tran_no = t.tran_no
    AND s.ctimestamp = t.ctimestamp
    WHERE t.tran_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_ci_doc_hdr
    (
        tran_ou, tran_type, tran_no, ctimestamp, lo_id, batch_id, fb_id, cust_code, tran_currency, tran_amount, basecur_erate, par_exchange_rate, doc_status, instr_no, instr_date, instr_status, reason_code, ps_gen_flag, createdby, createddate, modifiedby, modifieddate, pay_term, due_amount, received_amount, adjusted_amount, discount_amount, discount_availed, penalty_amount, write_off_amount, write_back_amount, paid_amount, reversed_docno, reversal_date, adjustment_status, provision_amount_cm, tran_date, company_code, bank_code, payterm_version, transfer_status, vat_incorporate_flag, intbanktran_status, cust_companycode, cust_bank_ref, cust_bank_acct, ibe_flag, base_amount, par_base_amount, lcnumber, refid, lc_applicable, BookingNo, MasterBillOfLadingNo, BillOfLadingNo, pdc_status, ims_flag, scheme_code, project_ou, Project_code, pdc_flag, report_flag, Realization_Date, address_id, otc_flag, etlcreateddatetime
    )
    SELECT
        tran_ou, tran_type, tran_no, ctimestamp, lo_id, batch_id, fb_id, cust_code, tran_currency, tran_amount, basecur_erate, par_exchange_rate, doc_status, instr_no, instr_date, instr_status, reason_code, ps_gen_flag, createdby, createddate, modifiedby, modifieddate, pay_term, due_amount, received_amount, adjusted_amount, discount_amount, discount_availed, penalty_amount, write_off_amount, write_back_amount, paid_amount, reversed_docno, reversal_date, adjustment_status, provision_amount_cm, tran_date, company_code, bank_code, payterm_version, transfer_status, vat_incorporate_flag, intbanktran_status, cust_companycode, cust_bank_ref, cust_bank_acct, ibe_flag, base_amount, par_base_amount, lcnumber, refid, lc_applicable, BookingNo, MasterBillOfLadingNo, BillOfLadingNo, pdc_status, ims_flag, scheme_code, project_ou, Project_code, pdc_flag, report_flag, Realization_Date, address_id, otc_flag, etlcreateddatetime
    FROM stg.stg_ci_doc_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_cidochdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_dtl;


    UPDATE dwh.f_contractDetail t
    SET
	    cont_hdr_key                   = fh.cont_hdr_key,
        cont_tariff_ser_id             = s.wms_cont_tariff_ser_id,
        cont_rate                      = s.wms_cont_rate,
        cont_min_change                = s.wms_cont_min_change,
        cont_min_change_added          = s.wms_cont_min_change_added,
        cont_cost                      = s.wms_cont_cost,
        cont_margin_per                = s.wms_cont_margin_per,
        cont_max_charge                = s.wms_cont_max_charge,
        cont_rate_valid_from           = s.wms_cont_rate_valid_from,
        cont_rate_valid_to             = s.wms_cont_rate_valid_to,
        cont_basic_charge              = s.wms_cont_basic_charge,
        cont_reimbursable              = s.wms_cont_reimbursable,
        cont_percentrate               = s.wms_cont_percentrate,
        cont_val_currency              = s.wms_cont_val_currency,
        cont_bill_currency             = s.wms_cont_bill_currency,
        cont_exchange_rate_type        = s.wms_cont_exchange_rate_type,
        cont_discount                  = s.wms_cont_discount,
        cont_draft_bill_grp            = s.wms_cont_draft_bill_grp,
        cont_created_by                = s.wms_cont_created_by,
        cont_created_dt                = s.wms_cont_created_dt,
        cont_modified_by               = s.wms_cont_modified_by,
        cont_modified_dt               = s.wms_cont_modified_dt,
        cont_advance_chk               = s.wms_cont_advance_chk,
        bill_pay_to_id                 = s.wms_bill_pay_to_id,
        inco_terms                     = s.wms_inco_terms,
        cont_bulk_remarks              = s.wms_cont_bulk_remarks,
        cont_type_ml                   = s.wms_cont_type_ml,
        cont_tariff_bill_stage         = s.wms_cont_tariff_bill_stage,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_contract_dtl s
	INNER JOIN dwh.f_contractheader fh
	on		fh.cont_id			= s.wms_cont_id
	and		fh.cont_ou			= s.wms_cont_ou
    WHERE	t.cont_id			= s.wms_cont_id
    AND		t.cont_lineno		= s.wms_cont_lineno
    AND		t.cont_ou			= s.wms_cont_ou
    AND		t.cont_tariff_id	= s.wms_cont_tariff_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

/*
	Delete from dwh.f_contractDetail t
	USING stg.stg_wms_contract_dtl s
	WHERE	s.wms_cont_id			= t.cont_id
    AND		s.wms_cont_lineno		= t.cont_lineno
    AND		s.wms_cont_ou			= t.cont_ou
    AND		s.wms_cont_tariff_id	= t.cont_tariff_id;
-- 	and COALESCE(ch.cont_modified_dt,ch.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    INSERT INTO dwh.f_contractDetail
    (
        cont_hdr_key,cont_id, cont_lineno, cont_ou, cont_tariff_id, cont_tariff_ser_id, cont_rate, cont_min_change, cont_min_change_added, 
		cont_cost, cont_margin_per, cont_max_charge, cont_rate_valid_from, cont_rate_valid_to, cont_basic_charge, cont_reimbursable, 
		cont_percentrate, cont_val_currency, cont_bill_currency, cont_exchange_rate_type, cont_discount, cont_draft_bill_grp, 
		cont_created_by, cont_created_dt, cont_modified_by, cont_modified_dt, cont_advance_chk, bill_pay_to_id, inco_terms, 
		cont_bulk_remarks, cont_type_ml, cont_tariff_bill_stage, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.cont_hdr_key,s.wms_cont_id, s.wms_cont_lineno, s.wms_cont_ou, s.wms_cont_tariff_id, s.wms_cont_tariff_ser_id, s.wms_cont_rate, s.wms_cont_min_change, s.wms_cont_min_change_added, 
		s.wms_cont_cost, s.wms_cont_margin_per, s.wms_cont_max_charge, s.wms_cont_rate_valid_from, s.wms_cont_rate_valid_to, s.wms_cont_basic_charge, s.wms_cont_reimbursable, 
		s.wms_cont_percentrate, s.wms_cont_val_currency, s.wms_cont_bill_currency, s.wms_cont_exchange_rate_type, s.wms_cont_discount, s.wms_cont_draft_bill_grp, 
		s.wms_cont_created_by, s.wms_cont_created_dt, s.wms_cont_modified_by, s.wms_cont_modified_dt, s.wms_cont_advance_chk, s.wms_bill_pay_to_id, s.wms_inco_terms, 
		s.wms_cont_bulk_remarks, s.wms_cont_type_ml, s.wms_cont_tariff_bill_stage, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_contract_dtl s
	INNER JOIN dwh.f_contractheader fh
	on		fh.cont_id				= s.wms_cont_id
	and		fh.cont_ou				= s.wms_cont_ou
    LEFT JOIN dwh.f_contractDetail t
    ON		s.wms_cont_id			= t.cont_id
    AND		s.wms_cont_lineno		= t.cont_lineno
    AND		s.wms_cont_ou			= t.cont_ou
    AND		s.wms_cont_tariff_id	= t.cont_tariff_id
    WHERE	t.cont_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
--	select 0 into updcnt;
/*
	UPDATE dwh.f_contractDetail t
    SET 	 cont_hdr_key            = fh.cont_hdr_key,
			 etlupdatedatetime       = NOW()
	FROM dwh.f_contractheader fh
	WHERE	t.cont_id	=	fh.cont_id			
	and		t.cont_ou	=	fh.cont_ou		
	and COALESCE(fh.cont_modified_dt,fh.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/	
	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_contract_dtl
    (
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_tariff_id, wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, wms_cont_reimbursable, wms_cont_percentrate, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_draft_bill_grp, wms_cont_created_by, wms_cont_created_dt, 
		wms_cont_modified_by, wms_cont_modified_dt, wms_cont_advance_chk, wms_bill_pay_to_id, wms_inco_terms, wms_cont_bulk_remarks, wms_cont_type_ml, wms_cont_tariff_bill_stage, 
		etlcreateddatetime
    )
    SELECT
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_tariff_id, wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, wms_cont_reimbursable, wms_cont_percentrate, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_draft_bill_grp, wms_cont_created_by, wms_cont_created_dt, 
		wms_cont_modified_by, wms_cont_modified_dt, wms_cont_advance_chk, wms_bill_pay_to_id, wms_inco_terms, wms_cont_bulk_remarks, wms_cont_type_ml, wms_cont_tariff_bill_stage, 
		etlcreateddatetime
    FROM stg.stg_wms_contract_dtl;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractdetailhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractdetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_dtl_h;

    UPDATE dwh.F_ContractDetailHistory t
    SET
        cont_hdr_hst_key			   = fh.cont_hdr_hst_key,
        cont_tariff_id                 = s.wms_cont_tariff_id,
        cont_tariff_ser_id             = s.wms_cont_tariff_ser_id,
        cont_rate                      = s.wms_cont_rate,
        cont_min_change                = s.wms_cont_min_change,
        cont_min_change_added          = s.wms_cont_min_change_added,
        cont_cost                      = s.wms_cont_cost,
        cont_margin_per                = s.wms_cont_margin_per,
        cont_max_charge                = s.wms_cont_max_charge,
        cont_rate_valid_from           = s.wms_cont_rate_valid_from,
        cont_rate_valid_to             = s.wms_cont_rate_valid_to,
        cont_basic_charge              = s.wms_cont_basic_charge,
        cont_val_currency              = s.wms_cont_val_currency,
        cont_bill_currency             = s.wms_cont_bill_currency,
        cont_exchange_rate_type        = s.wms_cont_exchange_rate_type,
        cont_discount                  = s.wms_cont_discount,
        cont_last_day                  = s.wms_cont_last_day,
        cont_draft_bill_grp            = s.wms_cont_draft_bill_grp,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_contract_dtl_h s
	INNER JOIN 	dwh.F_ContractHeaderHistory fh 
			ON  s.wms_cont_id 		= fh.cont_id 
			AND s.wms_cont_ou 		= fh.cont_ou
			AND s.wms_cont_amendno 	= fh.cont_amendno
    WHERE t.cont_id                        = s.wms_cont_id
	and	  t.cont_lineno                    = s.wms_cont_lineno
    and      t.cont_ou                        = s.wms_cont_ou
    and      t.cont_amendno                   = s.wms_cont_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;	

/*
	Delete from dwh.F_ContractDetailHistory t
	USING stg.stg_wms_contract_dtl_h s
	where t.cont_id                        = s.wms_cont_id
	and	  t.cont_lineno                    = s.wms_cont_lineno
    and   t.cont_ou                        = s.wms_cont_ou
    and   t.cont_amendno                   = s.wms_cont_amendno ;
	--and COALESCE(h.cont_modified_dt,h.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

-- 	stg.stg_wms_contract_dtl_h
-- 	WHERE cont_id                        = wms_cont_id
-- 	AND	  cont_lineno                    = wms_cont_lineno
--     AND   cont_ou                        = wms_cont_ou
--     AND   cont_amendno                   = wms_cont_amendno;
	
*/

    INSERT INTO dwh.F_ContractDetailHistory
    (
		cont_hdr_hst_key	,
        cont_id				, cont_lineno		, cont_ou					, cont_amendno			, cont_tariff_id, 
		cont_tariff_ser_id	, cont_rate			, cont_min_change			, cont_min_change_added	, cont_cost, 
		cont_margin_per		, cont_max_charge	, cont_rate_valid_from		, cont_rate_valid_to	, cont_basic_charge, 
		cont_val_currency	, cont_bill_currency, cont_exchange_rate_type	, cont_discount			, cont_last_day, 
		cont_draft_bill_grp	, etlactiveind		, etljobname				, envsourcecd			, datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		fh.cont_hdr_hst_key,
        s.wms_cont_id, 				s.wms_cont_lineno, 			s.wms_cont_ou, 					s.wms_cont_amendno, 			s.wms_cont_tariff_id, 
		s.wms_cont_tariff_ser_id, 	s.wms_cont_rate, 			s.wms_cont_min_change, 			s.wms_cont_min_change_added, 	s.wms_cont_cost, 
		s.wms_cont_margin_per, 		s.wms_cont_max_charge, 		s.wms_cont_rate_valid_from, 	s.wms_cont_rate_valid_to, 		s.wms_cont_basic_charge, 
		s.wms_cont_val_currency, 	s.wms_cont_bill_currency, 	s.wms_cont_exchange_rate_type, 	s.wms_cont_discount, 			s.wms_cont_last_day, 
		s.wms_cont_draft_bill_grp, 	1, 							p_etljobname, 					p_envsourcecd, 					p_datasourcecd, 
		NOW()
    FROM stg.stg_wms_contract_dtl_h s
	INNER JOIN 	dwh.F_ContractHeaderHistory fh 
			ON  s.wms_cont_id 		= fh.cont_id 
			AND s.wms_cont_ou 		= fh.cont_ou
			AND s.wms_cont_amendno 	= fh.cont_amendno
    LEFT JOIN dwh.F_ContractDetailHistory t
    ON    t.cont_id                        = s.wms_cont_id
	AND	  t.cont_lineno                    = s.wms_cont_lineno
    AND   t.cont_ou                        = s.wms_cont_ou
    AND   t.cont_amendno                   = s.wms_cont_amendno
    WHERE t.cont_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
--	select 0 into updcnt;
/*	
	UPDATE	dwh.F_ContractDetailHistory s
    SET		cont_hdr_hst_key	= fh.cont_hdr_hst_key,
	 		etlupdatedatetime	= NOW()
    FROM	dwh.F_ContractHeaderHistory fh  
    WHERE	s.cont_id 		= fh.cont_id 
	AND		s.cont_ou 		= fh.cont_ou
	AND		s.cont_amendno 	= fh.cont_amendno
    AND		COALESCE(fh.cont_modified_dt,fh.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_contract_dtl_h
    (
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_amendno, wms_cont_tariff_id, 
		wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_last_day, 
		wms_cont_draft_bill_grp, etlcreateddatetime
    )
    SELECT
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_amendno, wms_cont_tariff_id, 
		wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_last_day, 
		wms_cont_draft_bill_grp, etlcreateddatetime
    FROM stg.stg_wms_contract_dtl_h;
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractdetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractdetailhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractdetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
    p_interval integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource,d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource,p_interval
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_dtl_h;

    UPDATE dwh.F_ContractDetailHistory t
    SET
        cont_hdr_hst_key			   = fh.cont_hdr_hst_key,
        cont_tariff_id                 = s.wms_cont_tariff_id,
        cont_tariff_ser_id             = s.wms_cont_tariff_ser_id,
        cont_rate                      = s.wms_cont_rate,
        cont_min_change                = s.wms_cont_min_change,
        cont_min_change_added          = s.wms_cont_min_change_added,
        cont_cost                      = s.wms_cont_cost,
        cont_margin_per                = s.wms_cont_margin_per,
        cont_max_charge                = s.wms_cont_max_charge,
        cont_rate_valid_from           = s.wms_cont_rate_valid_from,
        cont_rate_valid_to             = s.wms_cont_rate_valid_to,
        cont_basic_charge              = s.wms_cont_basic_charge,
        cont_val_currency              = s.wms_cont_val_currency,
        cont_bill_currency             = s.wms_cont_bill_currency,
        cont_exchange_rate_type        = s.wms_cont_exchange_rate_type,
        cont_discount                  = s.wms_cont_discount,
        cont_last_day                  = s.wms_cont_last_day,
        cont_draft_bill_grp            = s.wms_cont_draft_bill_grp,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_contract_dtl_h s
	INNER JOIN 	dwh.F_ContractHeaderHistory fh 
			ON  s.wms_cont_id 		= fh.cont_id 
			AND s.wms_cont_ou 		= fh.cont_ou
			AND s.wms_cont_amendno 	= fh.cont_amendno
    WHERE t.cont_id                        = s.wms_cont_id
	and	  t.cont_lineno                    = s.wms_cont_lineno
    and      t.cont_ou                        = s.wms_cont_ou
    and      t.cont_amendno                   = s.wms_cont_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;	

/*
	Delete from dwh.F_ContractDetailHistory t
	USING stg.stg_wms_contract_dtl_h s
	where t.cont_id                        = s.wms_cont_id
	and	  t.cont_lineno                    = s.wms_cont_lineno
    and   t.cont_ou                        = s.wms_cont_ou
    and   t.cont_amendno                   = s.wms_cont_amendno ;
	--and COALESCE(h.cont_modified_dt,h.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

-- 	stg.stg_wms_contract_dtl_h
-- 	WHERE cont_id                        = wms_cont_id
-- 	AND	  cont_lineno                    = wms_cont_lineno
--     AND   cont_ou                        = wms_cont_ou
--     AND   cont_amendno                   = wms_cont_amendno;
	
*/

    INSERT INTO dwh.F_ContractDetailHistory
    (
		cont_hdr_hst_key	,
        cont_id				, cont_lineno		, cont_ou					, cont_amendno			, cont_tariff_id, 
		cont_tariff_ser_id	, cont_rate			, cont_min_change			, cont_min_change_added	, cont_cost, 
		cont_margin_per		, cont_max_charge	, cont_rate_valid_from		, cont_rate_valid_to	, cont_basic_charge, 
		cont_val_currency	, cont_bill_currency, cont_exchange_rate_type	, cont_discount			, cont_last_day, 
		cont_draft_bill_grp	, etlactiveind		, etljobname				, envsourcecd			, datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		fh.cont_hdr_hst_key,
        s.wms_cont_id, 				s.wms_cont_lineno, 			s.wms_cont_ou, 					s.wms_cont_amendno, 			s.wms_cont_tariff_id, 
		s.wms_cont_tariff_ser_id, 	s.wms_cont_rate, 			s.wms_cont_min_change, 			s.wms_cont_min_change_added, 	s.wms_cont_cost, 
		s.wms_cont_margin_per, 		s.wms_cont_max_charge, 		s.wms_cont_rate_valid_from, 	s.wms_cont_rate_valid_to, 		s.wms_cont_basic_charge, 
		s.wms_cont_val_currency, 	s.wms_cont_bill_currency, 	s.wms_cont_exchange_rate_type, 	s.wms_cont_discount, 			s.wms_cont_last_day, 
		s.wms_cont_draft_bill_grp, 	1, 							p_etljobname, 					p_envsourcecd, 					p_datasourcecd, 
		NOW()
    FROM stg.stg_wms_contract_dtl_h s
	INNER JOIN 	dwh.F_ContractHeaderHistory fh 
			ON  s.wms_cont_id 		= fh.cont_id 
			AND s.wms_cont_ou 		= fh.cont_ou
			AND s.wms_cont_amendno 	= fh.cont_amendno
    LEFT JOIN dwh.F_ContractDetailHistory t
    ON    t.cont_id                        = s.wms_cont_id
	AND	  t.cont_lineno                    = s.wms_cont_lineno
    AND   t.cont_ou                        = s.wms_cont_ou
    AND   t.cont_amendno                   = s.wms_cont_amendno
    WHERE t.cont_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
--	select 0 into updcnt;
/*	
	UPDATE	dwh.F_ContractDetailHistory s
    SET		cont_hdr_hst_key	= fh.cont_hdr_hst_key,
	 		etlupdatedatetime	= NOW()
    FROM	dwh.F_ContractHeaderHistory fh  
    WHERE	s.cont_id 		= fh.cont_id 
	AND		s.cont_ou 		= fh.cont_ou
	AND		s.cont_amendno 	= fh.cont_amendno
    AND		COALESCE(fh.cont_modified_dt,fh.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

*/	
   
      UPDATE dwh.f_contractdetailhistory t1
     SET etlactiveind =  0,
     etlupdatedatetime = Now()::timestamp
     FROM dwh.f_contractdetailhistory t
     LEFT join stg.stg_wms_contract_dtl_h s
     ON    t.cont_id                        = s.wms_cont_id
    and   t.cont_lineno                    = s.wms_cont_lineno
    and      t.cont_ou                        = s.wms_cont_ou
    and      t.cont_amendno                   = s.wms_cont_amendno
     WHERE t.cont_dtl_hst_key = t1.cont_dtl_hst_key
     AND   COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
     AND  s.wms_cont_id is null;




    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_contract_dtl_h
    (
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_amendno, wms_cont_tariff_id, 
		wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_last_day, 
		wms_cont_draft_bill_grp, etlcreateddatetime
    )
    SELECT
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_amendno, wms_cont_tariff_id, 
		wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_last_day, 
		wms_cont_draft_bill_grp, etlcreateddatetime
    FROM stg.stg_wms_contract_dtl_h;
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractdetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractdetailweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
    p_interval integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource,d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource,p_interval
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;


	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_dtl;

    UPDATE dwh.f_contractDetail t
    SET
	    cont_hdr_key                   = fh.cont_hdr_key,
        cont_tariff_ser_id             = s.wms_cont_tariff_ser_id,
        cont_rate                      = s.wms_cont_rate,
        cont_min_change                = s.wms_cont_min_change,
        cont_min_change_added          = s.wms_cont_min_change_added,
        cont_cost                      = s.wms_cont_cost,
        cont_margin_per                = s.wms_cont_margin_per,
        cont_max_charge                = s.wms_cont_max_charge,
        cont_rate_valid_from           = s.wms_cont_rate_valid_from,
        cont_rate_valid_to             = s.wms_cont_rate_valid_to,
        cont_basic_charge              = s.wms_cont_basic_charge,
        cont_reimbursable              = s.wms_cont_reimbursable,
        cont_percentrate               = s.wms_cont_percentrate,
        cont_val_currency              = s.wms_cont_val_currency,
        cont_bill_currency             = s.wms_cont_bill_currency,
        cont_exchange_rate_type        = s.wms_cont_exchange_rate_type,
        cont_discount                  = s.wms_cont_discount,
        cont_draft_bill_grp            = s.wms_cont_draft_bill_grp,
        cont_created_by                = s.wms_cont_created_by,
        cont_created_dt                = s.wms_cont_created_dt,
        cont_modified_by               = s.wms_cont_modified_by,
        cont_modified_dt               = s.wms_cont_modified_dt,
        cont_advance_chk               = s.wms_cont_advance_chk,
        bill_pay_to_id                 = s.wms_bill_pay_to_id,
        inco_terms                     = s.wms_inco_terms,
        cont_bulk_remarks              = s.wms_cont_bulk_remarks,
        cont_type_ml                   = s.wms_cont_type_ml,
        cont_tariff_bill_stage         = s.wms_cont_tariff_bill_stage,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_contract_dtl s
	INNER JOIN dwh.f_contractheader fh
	on		fh.cont_id			= s.wms_cont_id
	and		fh.cont_ou			= s.wms_cont_ou
    WHERE	t.cont_id			= s.wms_cont_id
    AND		t.cont_lineno		= s.wms_cont_lineno
    AND		t.cont_ou			= s.wms_cont_ou
    AND		t.cont_tariff_id	= s.wms_cont_tariff_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;
    

    



/*
	Delete from dwh.f_contractDetail t
	USING stg.stg_wms_contract_dtl s
	WHERE	s.wms_cont_id			= t.cont_id
    AND		s.wms_cont_lineno		= t.cont_lineno
    AND		s.wms_cont_ou			= t.cont_ou
    AND		s.wms_cont_tariff_id	= t.cont_tariff_id;
-- 	and COALESCE(ch.cont_modified_dt,ch.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    INSERT INTO dwh.f_contractDetail
    (
        cont_hdr_key,cont_id, cont_lineno, cont_ou, cont_tariff_id, cont_tariff_ser_id, cont_rate, cont_min_change, cont_min_change_added, 
		cont_cost, cont_margin_per, cont_max_charge, cont_rate_valid_from, cont_rate_valid_to, cont_basic_charge, cont_reimbursable, 
		cont_percentrate, cont_val_currency, cont_bill_currency, cont_exchange_rate_type, cont_discount, cont_draft_bill_grp, 
		cont_created_by, cont_created_dt, cont_modified_by, cont_modified_dt, cont_advance_chk, bill_pay_to_id, inco_terms, 
		cont_bulk_remarks, cont_type_ml, cont_tariff_bill_stage, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.cont_hdr_key,s.wms_cont_id, s.wms_cont_lineno, s.wms_cont_ou, s.wms_cont_tariff_id, s.wms_cont_tariff_ser_id, s.wms_cont_rate, s.wms_cont_min_change, s.wms_cont_min_change_added, 
		s.wms_cont_cost, s.wms_cont_margin_per, s.wms_cont_max_charge, s.wms_cont_rate_valid_from, s.wms_cont_rate_valid_to, s.wms_cont_basic_charge, s.wms_cont_reimbursable, 
		s.wms_cont_percentrate, s.wms_cont_val_currency, s.wms_cont_bill_currency, s.wms_cont_exchange_rate_type, s.wms_cont_discount, s.wms_cont_draft_bill_grp, 
		s.wms_cont_created_by, s.wms_cont_created_dt, s.wms_cont_modified_by, s.wms_cont_modified_dt, s.wms_cont_advance_chk, s.wms_bill_pay_to_id, s.wms_inco_terms, 
		s.wms_cont_bulk_remarks, s.wms_cont_type_ml, s.wms_cont_tariff_bill_stage, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_contract_dtl s
	INNER JOIN dwh.f_contractheader fh
	on		fh.cont_id				= s.wms_cont_id
	and		fh.cont_ou				= s.wms_cont_ou
    LEFT JOIN dwh.f_contractDetail t
    ON		s.wms_cont_id			= t.cont_id
    AND		s.wms_cont_lineno		= t.cont_lineno
    AND		s.wms_cont_ou			= t.cont_ou
    AND		s.wms_cont_tariff_id	= t.cont_tariff_id
    WHERE	t.cont_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

UPDATE dwh.f_contractDetail t1
    SET etlactiveind =  0,
    etlupdatedatetime = Now()::timestamp
    FROM dwh.f_contractDetail t
    LEFT join stg.stg_wms_contract_dtl s
    ON  t.cont_id           = s.wms_cont_id
    AND     t.cont_lineno       = s.wms_cont_lineno
    AND     t.cont_ou           = s.wms_cont_ou
    AND     t.cont_tariff_id    = s.wms_cont_tariff_id
    WHERE t.cont_dtl_key = t1.cont_dtl_key
    AND   COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
    AND   s.wms_cont_id is null;


--	select 0 into updcnt;
/*
	UPDATE dwh.f_contractDetail t
    SET 	 cont_hdr_key            = fh.cont_hdr_key,
			 etlupdatedatetime       = NOW()
	FROM dwh.f_contractheader fh
	WHERE	t.cont_id	=	fh.cont_id			
	and		t.cont_ou	=	fh.cont_ou		
	and COALESCE(fh.cont_modified_dt,fh.cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/	
	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_contract_dtl
    (
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_tariff_id, wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, wms_cont_reimbursable, wms_cont_percentrate, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_draft_bill_grp, wms_cont_created_by, wms_cont_created_dt, 
		wms_cont_modified_by, wms_cont_modified_dt, wms_cont_advance_chk, wms_bill_pay_to_id, wms_inco_terms, wms_cont_bulk_remarks, wms_cont_type_ml, wms_cont_tariff_bill_stage, 
		etlcreateddatetime
    )
    SELECT
        wms_cont_id, wms_cont_lineno, wms_cont_ou, wms_cont_tariff_id, wms_cont_tariff_ser_id, wms_cont_rate, wms_cont_min_change, wms_cont_min_change_added, wms_cont_cost, 
		wms_cont_margin_per, wms_cont_max_charge, wms_cont_rate_valid_from, wms_cont_rate_valid_to, wms_cont_basic_charge, wms_cont_reimbursable, wms_cont_percentrate, 
		wms_cont_val_currency, wms_cont_bill_currency, wms_cont_exchange_rate_type, wms_cont_discount, wms_cont_draft_bill_grp, wms_cont_created_by, wms_cont_created_dt, 
		wms_cont_modified_by, wms_cont_modified_dt, wms_cont_advance_chk, wms_bill_pay_to_id, wms_inco_terms, wms_cont_bulk_remarks, wms_cont_type_ml, wms_cont_tariff_bill_stage, 
		etlcreateddatetime
    FROM stg.stg_wms_contract_dtl;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag 
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_contract_hdr;


	UPDATE dwh.f_contractheader t
    SET 
			cont_amendno				=	S.wms_cont_amendno,
			cont_desc					=	S.wms_cont_desc,
			cont_date					=	S.wms_cont_date,
			cont_type					=	S.wms_cont_type,
			cont_status					=	S.wms_cont_status,
			cont_rsn_code				=	S.wms_cont_rsn_code,
			cont_service_type			=	S.wms_cont_service_type,
			cont_valid_from				=	S.wms_cont_valid_from,
			cont_valid_to				=	S.wms_cont_valid_to,
			cont_cust_contract_ref_no	=	S.wms_cont_cust_contract_ref_no,
			cont_customer_id			=	S.wms_cont_customer_id,
			cont_supp_contract_ref_no	=	S.wms_cont_supp_contract_ref_no,
			cont_vendor_id				=	S.wms_cont_vendor_id,
			cont_ref_doc_type			=	S.wms_cont_ref_doc_type,
			cont_ref_doc_no				=	S.wms_cont_ref_doc_no,
			cont_bill_freq				=	S.wms_cont_bill_freq,
			cont_bill_date_day			=	S.wms_cont_bill_date_day,
			cont_billing_stage			=	S.wms_cont_billing_stage,
			cont_currency				=	S.wms_cont_currency,
			cont_exchange_rate			=	S.wms_cont_exchange_rate,
			cont_bulk_rate_chg_per		=	S.wms_cont_bulk_rate_chg_per,
			cont_division				=	S.wms_cont_division,
			cont_location				=	S.wms_cont_location,
			cont_remarks				=	S.wms_cont_remarks,
			cont_slab_type				=	S.wms_cont_slab_type,
			cont_timestamp				=	S.wms_cont_timestamp,
			cont_created_by				=	S.wms_cont_created_by,
			cont_created_dt				=	S.wms_cont_created_dt,
			cont_modified_by			=	S.wms_cont_modified_by,
			cont_modified_dt			=	S.wms_cont_modified_dt,
			cont_space_last_bill_dt		=	S.wms_cont_space_last_bill_dt,
			cont_payment_type			=	S.wms_cont_payment_type,
			cont_std_cont_portal		=	S.wms_cont_std_cont_portal,
			cont_prev_status			=	S.wms_cont_prev_status,
			cont_cust_grp				=	S.wms_cont_cust_grp,
			cont_non_billable			=	S.wms_cont_non_billable,
			non_billable_chk			=	S.wms_non_billable_chk,
			cont_last_day				=	S.wms_cont_last_day,
			cont_div_loc_cust			=	S.wms_cont_div_loc_cust,
			cont_numbering_type			=	S.wms_cont_numbering_type,
			cont_wscchtsa_last_bil_date =	S.wms_cont_wscchtsa_last_bil_date,
			cont_stapbspo_last_bil_date =	S.wms_cont_stapbspo_last_bil_date,
			cont_WHRTCHAP_last_bil_date =	S.wms_cont_WHRTCHAP_last_bil_date,
			cont_Iata_chk				=	S.wms_cont_Iata_chk,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_contract_hdr s
    WHERE	t.cont_id  					=	s.wms_cont_id
	AND		t.cont_ou 					=	s.wms_cont_ou;
	
	
	GET DIAGNOSTICS updcnt = ROW_COUNT;
	
	
/*
	
	Delete from dwh.f_contractheader
	USING stg.stg_wms_contract_hdr
	WHERE wms_cont_id  	= cont_id
	AND  wms_cont_ou 	= cont_ou;
*/
	INSERT INTO dwh.f_contractheader
	(
		cont_vendor_key				,	cont_location_key		,		cont_customer_key		,	cont_date_key
		,cont_id						,cont_ou						,cont_amendno					,cont_desc 
		,cont_date						,cont_type						,cont_status					,cont_rsn_code
		,cont_service_type				,cont_valid_from				,cont_valid_to					,cont_cust_contract_ref_no 
		,cont_customer_id				,cont_supp_contract_ref_no		,cont_vendor_id					,cont_ref_doc_type 
		,cont_ref_doc_no				,cont_bill_freq					,cont_bill_date_day				,cont_billing_stage ,cont_currency 
		,cont_exchange_rate				,cont_bulk_rate_chg_per			,cont_division					,cont_location  
		,cont_remarks					,cont_slab_type					,cont_timestamp					,cont_created_by,cont_created_dt
		,cont_modified_by				,cont_modified_dt				,cont_space_last_bill_dt		,cont_payment_type 
		,cont_std_cont_portal			,cont_prev_status				,cont_cust_grp					,cont_non_billable
		,non_billable_chk				,cont_last_day					,cont_div_loc_cust				,cont_numbering_type
		,cont_wscchtsa_last_bil_date	,cont_stapbspo_last_bil_date	,cont_WHRTCHAP_last_bil_date	,cont_Iata_chk 
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		COALESCE(v.vendor_key,-1)			,COALESCE(l.loc_key,-1)					,COALESCE(c.customer_key,-1),	COALESCE(d.datekey,-1)
		,s.wms_cont_id						,s.wms_cont_ou							,s.wms_cont_amendno					,s.wms_cont_desc
		,s.wms_cont_date					,s.wms_cont_type						,s.wms_cont_status					,s.wms_cont_rsn_code
		,s.wms_cont_service_type			,s.wms_cont_valid_from					,s.wms_cont_valid_to				,s.wms_cont_cust_contract_ref_no
		,s.wms_cont_customer_id				,s.wms_cont_supp_contract_ref_no		,s.wms_cont_vendor_id				,s.wms_cont_ref_doc_type
		,s.wms_cont_ref_doc_no				,s.wms_cont_bill_freq					,s.wms_cont_bill_date_day			,s.wms_cont_billing_stage,s.wms_cont_currency
		,s.wms_cont_exchange_rate			,s.wms_cont_bulk_rate_chg_per			,s.wms_cont_division				,s.wms_cont_location
		,s.wms_cont_remarks					,s.wms_cont_slab_type					,s.wms_cont_timestamp				,s.wms_cont_created_by,s.wms_cont_created_dt			
		,s.wms_cont_modified_by				,s.wms_cont_modified_dt					,s.wms_cont_space_last_bill_dt		,s.wms_cont_payment_type			
		,s.wms_cont_std_cont_portal			,s.wms_cont_prev_status					,s.wms_cont_cust_grp				,s.wms_cont_non_billable			
		,s.wms_non_billable_chk				,s.wms_cont_last_day					,s.wms_cont_div_loc_cust			,s.wms_cont_numbering_type
		,s.wms_cont_wscchtsa_last_bil_date	,s.wms_cont_stapbspo_last_bil_date		,s.wms_cont_WHRTCHAP_last_bil_date	,s.wms_cont_Iata_chk
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_contract_hdr s
	left join dwh.D_Vendor v
	on  v.vendor_id	= s.wms_cont_vendor_id
	and v.vendor_ou	= s.wms_cont_ou
	left join dwh.D_Location l
	on l.loc_code	= s.wms_cont_location
	and l.loc_ou	= s.wms_cont_ou
	left join dwh.D_Customer c
	on c.customer_id = s.wms_cont_customer_id
	and c.customer_ou = s.wms_cont_ou
	LEFT JOIN dwh.d_date d 			
	ON 	s.wms_cont_date::date = d.dateactual	
    LEFT JOIN dwh.f_contractheader t
    ON 	s.wms_cont_id  		= t.cont_id
	AND s.wms_cont_ou 		= t.cont_ou
    WHERE t.cont_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
-- select 0 into updcnt;
	
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_contract_hdr
	(
		wms_cont_id							,wms_cont_ou							,wms_cont_amendno					,wms_cont_desc
		,wms_cont_date						,wms_cont_type							,wms_cont_status					,wms_cont_rsn_code
		,wms_cont_service_type				,wms_cont_valid_from					,wms_cont_valid_to					,wms_cont_cust_contract_ref_no
		,wms_cont_customer_id				,wms_cont_supp_contract_ref_no			,wms_cont_vendor_id					,wms_cont_ref_doc_type
		,wms_cont_ref_doc_no				,wms_cont_bill_freq						,wms_cont_bill_date_day				,wms_cont_billing_stage,wms_cont_currency
		,wms_cont_exchange_rate				,wms_cont_bulk_rate_chg_per				,wms_cont_division					,wms_cont_location
		,wms_cont_remarks					,wms_cont_slab_type						,wms_cont_timestamp					,wms_cont_created_by,wms_cont_created_dt			
		,wms_cont_modified_by				,wms_cont_modified_dt					,wms_cont_space_last_bill_dt		,wms_cont_payment_type			
		,wms_cont_std_cont_portal			,wms_cont_prev_status					,wms_cont_cust_grp					,wms_cont_non_billable			
		,wms_non_billable_chk				,wms_cont_last_day						,wms_cont_div_loc_cust				,wms_cont_numbering_type
		,wms_cont_wscchtsa_last_bil_date	,wms_cont_stapbspo_last_bil_date		,wms_cont_WHRTCHAP_last_bil_date	,wms_cont_Iata_chk
		,etlcreateddatetime
	)
	SELECT 
		wms_cont_id						,wms_cont_ou							,wms_cont_amendno					,wms_cont_desc
		,wms_cont_date						,wms_cont_type							,wms_cont_status					,wms_cont_rsn_code
		,wms_cont_service_type				,wms_cont_valid_from					,wms_cont_valid_to					,wms_cont_cust_contract_ref_no
		,wms_cont_customer_id				,wms_cont_supp_contract_ref_no			,wms_cont_vendor_id					,wms_cont_ref_doc_type
		,wms_cont_ref_doc_no				,wms_cont_bill_freq						,wms_cont_bill_date_day				,wms_cont_billing_stage,wms_cont_currency
		,wms_cont_exchange_rate				,wms_cont_bulk_rate_chg_per				,wms_cont_division					,wms_cont_location
		,wms_cont_remarks					,wms_cont_slab_type						,wms_cont_timestamp					,wms_cont_created_by,wms_cont_created_dt			
		,wms_cont_modified_by				,wms_cont_modified_dt					,wms_cont_space_last_bill_dt		,wms_cont_payment_type			
		,wms_cont_std_cont_portal			,wms_cont_prev_status					,wms_cont_cust_grp					,wms_cont_non_billable			
		,wms_non_billable_chk				,wms_cont_last_day						,wms_cont_div_loc_cust				,wms_cont_numbering_type
		,wms_cont_wscchtsa_last_bil_date	,wms_cont_stapbspo_last_bil_date		,wms_cont_WHRTCHAP_last_bil_date	,wms_cont_Iata_chk 				
		,etlcreateddatetime
	FROM stg.stg_wms_contract_hdr;
    END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractheaderhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractheaderhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_hdr_h;

    UPDATE dwh.F_ContractHeaderHistory t
    SET
        cont_hdr_hst_vendor_key 		 = COALESCE(v.vendor_key,-1),
		cont_hdr_hst_loc_key 	 		 = COALESCE(l.loc_key,-1),
		cont_hdr_hst_customer_key 		 = COALESCE(c.customer_key,-1),
		cont_hdr_hst_datekey 		 	 = COALESCE(d.datekey,-1),
		cont_hdr_hst_curr_key 	 		 = COALESCE(cu.curr_key,-1),
        cont_desc                        = s.wms_cont_desc,
        cont_date                        = s.wms_cont_date,
        cont_type                        = s.wms_cont_type,
        cont_status                      = s.wms_cont_status,
        cont_rsn_code                    = s.wms_cont_rsn_code,
        cont_service_type                = s.wms_cont_service_type,
        cont_valid_from                  = s.wms_cont_valid_from,
        cont_valid_to                    = s.wms_cont_valid_to,
        cont_cust_contract_ref_no        = s.wms_cont_cust_contract_ref_no,
        cont_customer_id                 = s.wms_cont_customer_id,
        cont_supp_contract_ref_no        = s.wms_cont_supp_contract_ref_no,
        cont_vendor_id                   = s.wms_cont_vendor_id,
        cont_ref_doc_type                = s.wms_cont_ref_doc_type,
        cont_ref_doc_no                  = s.wms_cont_ref_doc_no,
        cont_bill_freq                   = s.wms_cont_bill_freq,
        cont_bill_date_day               = s.wms_cont_bill_date_day,
        cont_billing_stage               = s.wms_cont_billing_stage,
        cont_currency                    = s.wms_cont_currency,
        cont_exchange_rate               = s.wms_cont_exchange_rate,
        cont_bulk_rate_chg_per           = s.wms_cont_bulk_rate_chg_per,
        cont_division                    = s.wms_cont_division,
        cont_location                    = s.wms_cont_location,
        cont_remarks                     = s.wms_cont_remarks,
        cont_slab_type                   = s.wms_cont_slab_type,
        cont_timestamp                   = s.wms_cont_timestamp,
        cont_created_by                  = s.wms_cont_created_by,
        cont_created_dt                  = s.wms_cont_created_dt,
        cont_modified_by                 = s.wms_cont_modified_by,
        cont_modified_dt                 = s.wms_cont_modified_dt,
        cont_space_last_bill_dt          = s.wms_cont_space_last_bill_dt,
        cont_payment_type                = s.wms_cont_payment_type,
        cont_std_cont_portal             = s.wms_cont_std_cont_portal,
        cont_vendor_group                = s.wms_cont_vendor_group,
        cont_cust_grp                    = s.wms_cont_cust_grp,
        cont_lag_time                    = s.wms_cont_lag_time,
        cont_lag_time_uom                = s.wms_cont_lag_time_uom,
        cont_non_billable                = s.wms_cont_non_billable,
        non_billable_chk                 = s.wms_non_billable_chk,
        cont_last_day                    = s.wms_cont_last_day,
        cont_div_loc_cust                = s.wms_cont_div_loc_cust,
        cont_numbering_type              = s.wms_cont_numbering_type,
        cont_workflow_status             = s.wms_cont_workflow_status,
        cont_reason_for_return           = s.wms_cont_reason_for_return,
        min_weight                       = s.wms_min_weight,
        volm_conversion                  = s.wms_volm_conversion,
        cont_plan_DIFOT                  = s.wms_cont_plan_DIFOT,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_wms_contract_hdr_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_cont_location   = l.loc_code 
        AND s.wms_cont_ou         = l.loc_ou
	LEFT JOIN dwh.d_customer c 			
		ON  s.wms_cont_customer_id = c.customer_id
		AND s.wms_cont_ou          = c.customer_ou
	LEFT JOIN dwh.d_vendor v 		
		ON  s.wms_cont_vendor_id  	= v.vendor_id
		AND s.wms_cont_ou 			= v.vendor_ou
	LEFT JOIN dwh.d_currency cu 		
		ON  s.wms_cont_currency  	= cu.iso_curr_code
	LEFT JOIN dwh.d_date d 		
		ON  s.wms_cont_date::date   = d.dateactual
	WHERE   t.cont_id 		= s.wms_cont_id
    AND 	t.cont_ou 		= s.wms_cont_ou
    AND 	t.cont_amendno  = s.wms_cont_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;


-- 	Delete from dwh.F_ContractHeaderHistory t
-- 	USING stg.stg_wms_contract_hdr_h s
-- 	where	s.wms_cont_id 		= t.cont_id
--     AND 	s.wms_cont_ou 		= t.cont_ou
--     AND 	s.wms_cont_amendno  = t.cont_amendno;
-- 	AND COALESCE(wms_cont_modified_dt,wms_cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

    INSERT INTO dwh.F_ContractHeaderHistory
    (
		cont_hdr_hst_vendor_key,	cont_hdr_hst_loc_key,	cont_hdr_hst_customer_key,	cont_hdr_hst_datekey,	cont_hdr_hst_curr_key,
        cont_id, 			cont_ou, 					cont_amendno, 			cont_desc, 					cont_date, 
		cont_type, 			cont_status, 				cont_rsn_code, 			cont_service_type, 			cont_valid_from, 
		cont_valid_to, 		cont_cust_contract_ref_no, 	cont_customer_id, 		cont_supp_contract_ref_no, 	cont_vendor_id, 
		cont_ref_doc_type, 	cont_ref_doc_no, 			cont_bill_freq, 		cont_bill_date_day, 		cont_billing_stage, 
		cont_currency, 		cont_exchange_rate, 		cont_bulk_rate_chg_per, cont_division, 				cont_location, 
		cont_remarks, 		cont_slab_type, 			cont_timestamp, 		cont_created_by, 			cont_created_dt, 
		cont_modified_by, 	cont_modified_dt, 			cont_space_last_bill_dt,cont_payment_type, 			cont_std_cont_portal, 
		cont_vendor_group, 	cont_cust_grp, 				cont_lag_time, 			cont_lag_time_uom, 			cont_non_billable, 
		non_billable_chk, 	cont_last_day, 				cont_div_loc_cust, 		cont_numbering_type, 		cont_workflow_status, 
		cont_reason_for_return, min_weight, 			volm_conversion, 		cont_plan_DIFOT, 			etlactiveind, 
		etljobname, 		envsourcecd, 				datasourcecd, 			etlcreatedatetime
    )

    SELECT
        COALESCE(v.vendor_key,-1),  COALESCE(l.loc_key,-1), COALESCE(c.customer_key,-1),    COALESCE(d.datekey,-1),     COALESCE(cu.curr_key,-1),
        s.wms_cont_id, 		     s.wms_cont_ou, 					s.wms_cont_amendno, 			s.wms_cont_desc, 		 		 s.wms_cont_date, 
		s.wms_cont_type, 	 	 s.wms_cont_status, 				s.wms_cont_rsn_code, 			s.wms_cont_service_type, 		 s.wms_cont_valid_from, 
		s.wms_cont_valid_to, 	 s.wms_cont_cust_contract_ref_no, 	s.wms_cont_customer_id, 		s.wms_cont_supp_contract_ref_no, s.wms_cont_vendor_id, 
		s.wms_cont_ref_doc_type, s.wms_cont_ref_doc_no, 			s.wms_cont_bill_freq, 			s.wms_cont_bill_date_day, 		 s.wms_cont_billing_stage, 
		s.wms_cont_currency, 	 s.wms_cont_exchange_rate, 			s.wms_cont_bulk_rate_chg_per, 	s.wms_cont_division, 			 s.wms_cont_location, 
		s.wms_cont_remarks, 	 s.wms_cont_slab_type, 				s.wms_cont_timestamp, 			s.wms_cont_created_by, 			 s.wms_cont_created_dt, 
		s.wms_cont_modified_by,  s.wms_cont_modified_dt, 			s.wms_cont_space_last_bill_dt, 	s.wms_cont_payment_type, 		 s.wms_cont_std_cont_portal, 
		s.wms_cont_vendor_group, s.wms_cont_cust_grp, 				s.wms_cont_lag_time, 			s.wms_cont_lag_time_uom, 		 s.wms_cont_non_billable, 
		s.wms_non_billable_chk,  s.wms_cont_last_day, 				s.wms_cont_div_loc_cust, 		s.wms_cont_numbering_type, 		 s.wms_cont_workflow_status, 
		s.wms_cont_reason_for_return, s.wms_min_weight, 			s.wms_volm_conversion, 			s.wms_cont_plan_DIFOT, 			 1, 
		p_etljobname, 			 p_envsourcecd, 					p_datasourcecd, 				NOW()
    FROM stg.stg_wms_contract_hdr_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_cont_location   = l.loc_code 
        AND s.wms_cont_ou         = l.loc_ou
	LEFT JOIN dwh.d_customer c 			
		ON  s.wms_cont_customer_id = c.customer_id
		AND s.wms_cont_ou          = c.customer_ou
	LEFT JOIN dwh.d_vendor v 		
		ON  s.wms_cont_vendor_id  	= v.vendor_id
		AND s.wms_cont_ou 			= v.vendor_ou
	LEFT JOIN dwh.d_currency cu 		
		ON  s.wms_cont_currency  	= cu.iso_curr_code
	LEFT JOIN dwh.d_date d 		
		ON  s.wms_cont_date::date   = d.dateactual
    LEFT JOIN dwh.F_ContractHeaderHistory t
    ON 		s.wms_cont_id 		= t.cont_id
    AND 	s.wms_cont_ou 		= t.cont_ou
    AND 	s.wms_cont_amendno  = t.cont_amendno
    WHERE t.cont_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_contract_hdr_h
    (
        wms_cont_id, 			wms_cont_ou, 					wms_cont_amendno, 			wms_cont_desc, 					wms_cont_date, 
		wms_cont_type, 			wms_cont_status, 				wms_cont_rsn_code, 			wms_cont_service_type, 			wms_cont_valid_from, 
		wms_cont_valid_to, 		wms_cont_cust_contract_ref_no, 	wms_cont_customer_id, 		wms_cont_supp_contract_ref_no,  wms_cont_vendor_id, 
		wms_cont_ref_doc_type, 	wms_cont_ref_doc_no, 			wms_cont_bill_freq, 		wms_cont_bill_date_day, 		wms_cont_billing_stage, 
		wms_cont_currency, 		wms_cont_exchange_rate, 		wms_cont_bulk_rate_chg_per, wms_cont_division, 				wms_cont_location, 
		wms_cont_remarks, 		wms_cont_slab_type, 			wms_cont_timestamp, 		wms_cont_created_by, 			wms_cont_created_dt, 
		wms_cont_modified_by, 	wms_cont_modified_dt, 			wms_cont_space_last_bill_dt,wms_cont_payment_type, 			wms_cont_std_cont_portal, 
		wms_cont_vendor_group, 	wms_cont_cust_grp, 				wms_cont_lag_time, 			wms_cont_lag_time_uom, 			wms_cont_non_billable, 
		wms_non_billable_chk, 	wms_cont_last_day, 				wms_cont_div_loc_cust, 		wms_cont_numbering_type, 		wms_cont_workflow_status, 
		wms_cont_reason_for_return, wms_min_weight, 			wms_volm_conversion, 		wms_cont_plan_DIFOT, 			etlcreateddatetime
    )
    SELECT
        wms_cont_id, 			wms_cont_ou, 					wms_cont_amendno, 			wms_cont_desc, 					wms_cont_date, 
		wms_cont_type, 			wms_cont_status, 				wms_cont_rsn_code, 			wms_cont_service_type, 			wms_cont_valid_from, 
		wms_cont_valid_to, 		wms_cont_cust_contract_ref_no, 	wms_cont_customer_id, 		wms_cont_supp_contract_ref_no,  wms_cont_vendor_id, 
		wms_cont_ref_doc_type, 	wms_cont_ref_doc_no, 			wms_cont_bill_freq, 		wms_cont_bill_date_day, 		wms_cont_billing_stage, 
		wms_cont_currency, 		wms_cont_exchange_rate, 		wms_cont_bulk_rate_chg_per, wms_cont_division, 				wms_cont_location, 
		wms_cont_remarks, 		wms_cont_slab_type, 			wms_cont_timestamp, 		wms_cont_created_by, 			wms_cont_created_dt, 
		wms_cont_modified_by, 	wms_cont_modified_dt, 			wms_cont_space_last_bill_dt,wms_cont_payment_type, 			wms_cont_std_cont_portal, 
		wms_cont_vendor_group, 	wms_cont_cust_grp, 				wms_cont_lag_time, 			wms_cont_lag_time_uom, 			wms_cont_non_billable, 
		wms_non_billable_chk, 	wms_cont_last_day, 				wms_cont_div_loc_cust, 		wms_cont_numbering_type, 		wms_cont_workflow_status, 
		wms_cont_reason_for_return, wms_min_weight, 			wms_volm_conversion, 		wms_cont_plan_DIFOT, 			etlcreateddatetime
    FROM stg.stg_wms_contract_hdr_h;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractheaderhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractheaderhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractheaderhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
    p_interval integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_interval
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_hdr_h;

    UPDATE dwh.F_ContractHeaderHistory t
    SET
        cont_hdr_hst_vendor_key 		 = COALESCE(v.vendor_key,-1),
		cont_hdr_hst_loc_key 	 		 = COALESCE(l.loc_key,-1),
		cont_hdr_hst_customer_key 		 = COALESCE(c.customer_key,-1),
		cont_hdr_hst_datekey 		 	 = COALESCE(d.datekey,-1),
		cont_hdr_hst_curr_key 	 		 = COALESCE(cu.curr_key,-1),
        cont_desc                        = s.wms_cont_desc,
        cont_date                        = s.wms_cont_date,
        cont_type                        = s.wms_cont_type,
        cont_status                      = s.wms_cont_status,
        cont_rsn_code                    = s.wms_cont_rsn_code,
        cont_service_type                = s.wms_cont_service_type,
        cont_valid_from                  = s.wms_cont_valid_from,
        cont_valid_to                    = s.wms_cont_valid_to,
        cont_cust_contract_ref_no        = s.wms_cont_cust_contract_ref_no,
        cont_customer_id                 = s.wms_cont_customer_id,
        cont_supp_contract_ref_no        = s.wms_cont_supp_contract_ref_no,
        cont_vendor_id                   = s.wms_cont_vendor_id,
        cont_ref_doc_type                = s.wms_cont_ref_doc_type,
        cont_ref_doc_no                  = s.wms_cont_ref_doc_no,
        cont_bill_freq                   = s.wms_cont_bill_freq,
        cont_bill_date_day               = s.wms_cont_bill_date_day,
        cont_billing_stage               = s.wms_cont_billing_stage,
        cont_currency                    = s.wms_cont_currency,
        cont_exchange_rate               = s.wms_cont_exchange_rate,
        cont_bulk_rate_chg_per           = s.wms_cont_bulk_rate_chg_per,
        cont_division                    = s.wms_cont_division,
        cont_location                    = s.wms_cont_location,
        cont_remarks                     = s.wms_cont_remarks,
        cont_slab_type                   = s.wms_cont_slab_type,
        cont_timestamp                   = s.wms_cont_timestamp,
        cont_created_by                  = s.wms_cont_created_by,
        cont_created_dt                  = s.wms_cont_created_dt,
        cont_modified_by                 = s.wms_cont_modified_by,
        cont_modified_dt                 = s.wms_cont_modified_dt,
        cont_space_last_bill_dt          = s.wms_cont_space_last_bill_dt,
        cont_payment_type                = s.wms_cont_payment_type,
        cont_std_cont_portal             = s.wms_cont_std_cont_portal,
        cont_vendor_group                = s.wms_cont_vendor_group,
        cont_cust_grp                    = s.wms_cont_cust_grp,
        cont_lag_time                    = s.wms_cont_lag_time,
        cont_lag_time_uom                = s.wms_cont_lag_time_uom,
        cont_non_billable                = s.wms_cont_non_billable,
        non_billable_chk                 = s.wms_non_billable_chk,
        cont_last_day                    = s.wms_cont_last_day,
        cont_div_loc_cust                = s.wms_cont_div_loc_cust,
        cont_numbering_type              = s.wms_cont_numbering_type,
        cont_workflow_status             = s.wms_cont_workflow_status,
        cont_reason_for_return           = s.wms_cont_reason_for_return,
        min_weight                       = s.wms_min_weight,
        volm_conversion                  = s.wms_volm_conversion,
        cont_plan_DIFOT                  = s.wms_cont_plan_DIFOT,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_wms_contract_hdr_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_cont_location   = l.loc_code 
        AND s.wms_cont_ou         = l.loc_ou
	LEFT JOIN dwh.d_customer c 			
		ON  s.wms_cont_customer_id = c.customer_id
		AND s.wms_cont_ou          = c.customer_ou
	LEFT JOIN dwh.d_vendor v 		
		ON  s.wms_cont_vendor_id  	= v.vendor_id
		AND s.wms_cont_ou 			= v.vendor_ou
	LEFT JOIN dwh.d_currency cu 		
		ON  s.wms_cont_currency  	= cu.iso_curr_code
	LEFT JOIN dwh.d_date d 		
		ON  s.wms_cont_date::date   = d.dateactual
	WHERE   t.cont_id 		= s.wms_cont_id
    AND 	t.cont_ou 		= s.wms_cont_ou
    AND 	t.cont_amendno  = s.wms_cont_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

-- 	Delete from dwh.F_ContractHeaderHistory t
-- 	USING stg.stg_wms_contract_hdr_h s
-- 	where	s.wms_cont_id 		= t.cont_id
--     AND 	s.wms_cont_ou 		= t.cont_ou
--     AND 	s.wms_cont_amendno  = t.cont_amendno;
-- 	AND COALESCE(wms_cont_modified_dt,wms_cont_created_dt)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

    INSERT INTO dwh.F_ContractHeaderHistory
    (
		cont_hdr_hst_vendor_key,	cont_hdr_hst_loc_key,	cont_hdr_hst_customer_key,	cont_hdr_hst_datekey,	cont_hdr_hst_curr_key,
        cont_id, 			cont_ou, 					cont_amendno, 			cont_desc, 					cont_date, 
		cont_type, 			cont_status, 				cont_rsn_code, 			cont_service_type, 			cont_valid_from, 
		cont_valid_to, 		cont_cust_contract_ref_no, 	cont_customer_id, 		cont_supp_contract_ref_no, 	cont_vendor_id, 
		cont_ref_doc_type, 	cont_ref_doc_no, 			cont_bill_freq, 		cont_bill_date_day, 		cont_billing_stage, 
		cont_currency, 		cont_exchange_rate, 		cont_bulk_rate_chg_per, cont_division, 				cont_location, 
		cont_remarks, 		cont_slab_type, 			cont_timestamp, 		cont_created_by, 			cont_created_dt, 
		cont_modified_by, 	cont_modified_dt, 			cont_space_last_bill_dt,cont_payment_type, 			cont_std_cont_portal, 
		cont_vendor_group, 	cont_cust_grp, 				cont_lag_time, 			cont_lag_time_uom, 			cont_non_billable, 
		non_billable_chk, 	cont_last_day, 				cont_div_loc_cust, 		cont_numbering_type, 		cont_workflow_status, 
		cont_reason_for_return, min_weight, 			volm_conversion, 		cont_plan_DIFOT, 			etlactiveind, 
		etljobname, 		envsourcecd, 				datasourcecd, 			etlcreatedatetime
    )

    SELECT
        COALESCE(v.vendor_key,-1),  COALESCE(l.loc_key,-1), COALESCE(c.customer_key,-1),    COALESCE(d.datekey,-1),     COALESCE(cu.curr_key,-1),
        s.wms_cont_id, 		     s.wms_cont_ou, 					s.wms_cont_amendno, 			s.wms_cont_desc, 		 		 s.wms_cont_date, 
		s.wms_cont_type, 	 	 s.wms_cont_status, 				s.wms_cont_rsn_code, 			s.wms_cont_service_type, 		 s.wms_cont_valid_from, 
		s.wms_cont_valid_to, 	 s.wms_cont_cust_contract_ref_no, 	s.wms_cont_customer_id, 		s.wms_cont_supp_contract_ref_no, s.wms_cont_vendor_id, 
		s.wms_cont_ref_doc_type, s.wms_cont_ref_doc_no, 			s.wms_cont_bill_freq, 			s.wms_cont_bill_date_day, 		 s.wms_cont_billing_stage, 
		s.wms_cont_currency, 	 s.wms_cont_exchange_rate, 			s.wms_cont_bulk_rate_chg_per, 	s.wms_cont_division, 			 s.wms_cont_location, 
		s.wms_cont_remarks, 	 s.wms_cont_slab_type, 				s.wms_cont_timestamp, 			s.wms_cont_created_by, 			 s.wms_cont_created_dt, 
		s.wms_cont_modified_by,  s.wms_cont_modified_dt, 			s.wms_cont_space_last_bill_dt, 	s.wms_cont_payment_type, 		 s.wms_cont_std_cont_portal, 
		s.wms_cont_vendor_group, s.wms_cont_cust_grp, 				s.wms_cont_lag_time, 			s.wms_cont_lag_time_uom, 		 s.wms_cont_non_billable, 
		s.wms_non_billable_chk,  s.wms_cont_last_day, 				s.wms_cont_div_loc_cust, 		s.wms_cont_numbering_type, 		 s.wms_cont_workflow_status, 
		s.wms_cont_reason_for_return, s.wms_min_weight, 			s.wms_volm_conversion, 			s.wms_cont_plan_DIFOT, 			 1, 
		p_etljobname, 			 p_envsourcecd, 					p_datasourcecd, 				NOW()
    FROM stg.stg_wms_contract_hdr_h s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_cont_location   = l.loc_code 
        AND s.wms_cont_ou         = l.loc_ou
	LEFT JOIN dwh.d_customer c 			
		ON  s.wms_cont_customer_id = c.customer_id
		AND s.wms_cont_ou          = c.customer_ou
	LEFT JOIN dwh.d_vendor v 		
		ON  s.wms_cont_vendor_id  	= v.vendor_id
		AND s.wms_cont_ou 			= v.vendor_ou
	LEFT JOIN dwh.d_currency cu 		
		ON  s.wms_cont_currency  	= cu.iso_curr_code
	LEFT JOIN dwh.d_date d 		
		ON  s.wms_cont_date::date   = d.dateactual
    LEFT JOIN dwh.F_ContractHeaderHistory t
    ON 		s.wms_cont_id 		= t.cont_id
    AND 	s.wms_cont_ou 		= t.cont_ou
    AND 	s.wms_cont_amendno  = t.cont_amendno
    WHERE t.cont_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    UPDATE dwh.F_ContractHeaderHistory t1
     SET etlactiveind =  0,
     etlupdatedatetime = Now()::timestamp
     FROM dwh.F_ContractHeaderHistory t
     LEFT join stg.stg_wms_contract_hdr_h s
     ON s.wms_cont_id = t.cont_id
     AND s.wms_cont_ou = t.cont_ou
     AND s.wms_cont_amendno = t.cont_amendno
     WHERE t.cont_hdr_hst_key = t1.cont_hdr_hst_key
     AND   COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
     AND  s.wms_cont_id is null;


    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_contract_hdr_h
    (
        wms_cont_id, 			wms_cont_ou, 					wms_cont_amendno, 			wms_cont_desc, 					wms_cont_date, 
		wms_cont_type, 			wms_cont_status, 				wms_cont_rsn_code, 			wms_cont_service_type, 			wms_cont_valid_from, 
		wms_cont_valid_to, 		wms_cont_cust_contract_ref_no, 	wms_cont_customer_id, 		wms_cont_supp_contract_ref_no,  wms_cont_vendor_id, 
		wms_cont_ref_doc_type, 	wms_cont_ref_doc_no, 			wms_cont_bill_freq, 		wms_cont_bill_date_day, 		wms_cont_billing_stage, 
		wms_cont_currency, 		wms_cont_exchange_rate, 		wms_cont_bulk_rate_chg_per, wms_cont_division, 				wms_cont_location, 
		wms_cont_remarks, 		wms_cont_slab_type, 			wms_cont_timestamp, 		wms_cont_created_by, 			wms_cont_created_dt, 
		wms_cont_modified_by, 	wms_cont_modified_dt, 			wms_cont_space_last_bill_dt,wms_cont_payment_type, 			wms_cont_std_cont_portal, 
		wms_cont_vendor_group, 	wms_cont_cust_grp, 				wms_cont_lag_time, 			wms_cont_lag_time_uom, 			wms_cont_non_billable, 
		wms_non_billable_chk, 	wms_cont_last_day, 				wms_cont_div_loc_cust, 		wms_cont_numbering_type, 		wms_cont_workflow_status, 
		wms_cont_reason_for_return, wms_min_weight, 			wms_volm_conversion, 		wms_cont_plan_DIFOT, 			etlcreateddatetime
    )
    SELECT
        wms_cont_id, 			wms_cont_ou, 					wms_cont_amendno, 			wms_cont_desc, 					wms_cont_date, 
		wms_cont_type, 			wms_cont_status, 				wms_cont_rsn_code, 			wms_cont_service_type, 			wms_cont_valid_from, 
		wms_cont_valid_to, 		wms_cont_cust_contract_ref_no, 	wms_cont_customer_id, 		wms_cont_supp_contract_ref_no,  wms_cont_vendor_id, 
		wms_cont_ref_doc_type, 	wms_cont_ref_doc_no, 			wms_cont_bill_freq, 		wms_cont_bill_date_day, 		wms_cont_billing_stage, 
		wms_cont_currency, 		wms_cont_exchange_rate, 		wms_cont_bulk_rate_chg_per, wms_cont_division, 				wms_cont_location, 
		wms_cont_remarks, 		wms_cont_slab_type, 			wms_cont_timestamp, 		wms_cont_created_by, 			wms_cont_created_dt, 
		wms_cont_modified_by, 	wms_cont_modified_dt, 			wms_cont_space_last_bill_dt,wms_cont_payment_type, 			wms_cont_std_cont_portal, 
		wms_cont_vendor_group, 	wms_cont_cust_grp, 				wms_cont_lag_time, 			wms_cont_lag_time_uom, 			wms_cont_non_billable, 
		wms_non_billable_chk, 	wms_cont_last_day, 				wms_cont_div_loc_cust, 		wms_cont_numbering_type, 		wms_cont_workflow_status, 
		wms_cont_reason_for_return, wms_min_weight, 			wms_volm_conversion, 		wms_cont_plan_DIFOT, 			etlcreateddatetime
    FROM stg.stg_wms_contract_hdr_h;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractheaderhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractheaderweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    p_rawstorageflag integer;
	p_interval integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag, d.intervaldays
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_interval
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid 		= h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
		
	--	select 7 into p_interval;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_contract_hdr;

	UPDATE dwh.f_contractheader t
    SET 
			cont_amendno				=	S.wms_cont_amendno,
			cont_desc					=	S.wms_cont_desc,
			cont_date					=	S.wms_cont_date,
			cont_type					=	S.wms_cont_type,
			cont_status					=	S.wms_cont_status,
			cont_rsn_code				=	S.wms_cont_rsn_code,
			cont_service_type			=	S.wms_cont_service_type,
			cont_valid_from				=	S.wms_cont_valid_from,
			cont_valid_to				=	S.wms_cont_valid_to,
			cont_cust_contract_ref_no	=	S.wms_cont_cust_contract_ref_no,
			cont_customer_id			=	S.wms_cont_customer_id,
			cont_supp_contract_ref_no	=	S.wms_cont_supp_contract_ref_no,
			cont_vendor_id				=	S.wms_cont_vendor_id,
			cont_ref_doc_type			=	S.wms_cont_ref_doc_type,
			cont_ref_doc_no				=	S.wms_cont_ref_doc_no,
			cont_bill_freq				=	S.wms_cont_bill_freq,
			cont_bill_date_day			=	S.wms_cont_bill_date_day,
			cont_billing_stage			=	S.wms_cont_billing_stage,
			cont_currency				=	S.wms_cont_currency,
			cont_exchange_rate			=	S.wms_cont_exchange_rate,
			cont_bulk_rate_chg_per		=	S.wms_cont_bulk_rate_chg_per,
			cont_division				=	S.wms_cont_division,
			cont_location				=	S.wms_cont_location,
			cont_remarks				=	S.wms_cont_remarks,
			cont_slab_type				=	S.wms_cont_slab_type,
			cont_timestamp				=	S.wms_cont_timestamp,
			cont_created_by				=	S.wms_cont_created_by,
			cont_created_dt				=	S.wms_cont_created_dt,
			cont_modified_by			=	S.wms_cont_modified_by,
			cont_modified_dt			=	S.wms_cont_modified_dt,
			cont_space_last_bill_dt		=	S.wms_cont_space_last_bill_dt,
			cont_payment_type			=	S.wms_cont_payment_type,
			cont_std_cont_portal		=	S.wms_cont_std_cont_portal,
			cont_prev_status			=	S.wms_cont_prev_status,
			cont_cust_grp				=	S.wms_cont_cust_grp,
			cont_non_billable			=	S.wms_cont_non_billable,
			non_billable_chk			=	S.wms_non_billable_chk,
			cont_last_day				=	S.wms_cont_last_day,
			cont_div_loc_cust			=	S.wms_cont_div_loc_cust,
			cont_numbering_type			=	S.wms_cont_numbering_type,
			cont_wscchtsa_last_bil_date =	S.wms_cont_wscchtsa_last_bil_date,
			cont_stapbspo_last_bil_date =	S.wms_cont_stapbspo_last_bil_date,
			cont_WHRTCHAP_last_bil_date =	S.wms_cont_WHRTCHAP_last_bil_date,
			cont_Iata_chk				=	S.wms_cont_Iata_chk,
			etlactiveind 				=	1,
			etljobname 					=	p_etljobname,
			envsourcecd 				=	p_envsourcecd,
			datasourcecd 				=	p_datasourcecd,
			etlupdatedatetime 			=	NOW()
    FROM    stg.stg_wms_contract_hdr s
    WHERE	t.cont_id  					=	s.wms_cont_id
	AND		t.cont_ou 					=	s.wms_cont_ou;
	
	
	GET DIAGNOSTICS updcnt = ROW_COUNT;
	
	
/*
	
	Delete from dwh.f_contractheader
	USING stg.stg_wms_contract_hdr
	WHERE wms_cont_id  	= cont_id
	AND  wms_cont_ou 	= cont_ou;
*/
	INSERT INTO dwh.f_contractheader
	(
		cont_vendor_key				,	cont_location_key		,		cont_customer_key		,	cont_date_key
		,cont_id						,cont_ou						,cont_amendno					,cont_desc 
		,cont_date						,cont_type						,cont_status					,cont_rsn_code
		,cont_service_type				,cont_valid_from				,cont_valid_to					,cont_cust_contract_ref_no 
		,cont_customer_id				,cont_supp_contract_ref_no		,cont_vendor_id					,cont_ref_doc_type 
		,cont_ref_doc_no				,cont_bill_freq					,cont_bill_date_day				,cont_billing_stage ,cont_currency 
		,cont_exchange_rate				,cont_bulk_rate_chg_per			,cont_division					,cont_location  
		,cont_remarks					,cont_slab_type					,cont_timestamp					,cont_created_by,cont_created_dt
		,cont_modified_by				,cont_modified_dt				,cont_space_last_bill_dt		,cont_payment_type 
		,cont_std_cont_portal			,cont_prev_status				,cont_cust_grp					,cont_non_billable
		,non_billable_chk				,cont_last_day					,cont_div_loc_cust				,cont_numbering_type
		,cont_wscchtsa_last_bil_date	,cont_stapbspo_last_bil_date	,cont_WHRTCHAP_last_bil_date	,cont_Iata_chk 
		,etlactiveind					,etljobname						,envsourcecd					,datasourcecd			,etlcreatedatetime
	)
	
    SELECT 
		COALESCE(v.vendor_key,-1)			,COALESCE(l.loc_key,-1)					,COALESCE(c.customer_key,-1),	COALESCE(d.datekey,-1)
		,s.wms_cont_id						,s.wms_cont_ou							,s.wms_cont_amendno					,s.wms_cont_desc
		,s.wms_cont_date					,s.wms_cont_type						,s.wms_cont_status					,s.wms_cont_rsn_code
		,s.wms_cont_service_type			,s.wms_cont_valid_from					,s.wms_cont_valid_to				,s.wms_cont_cust_contract_ref_no
		,s.wms_cont_customer_id				,s.wms_cont_supp_contract_ref_no		,s.wms_cont_vendor_id				,s.wms_cont_ref_doc_type
		,s.wms_cont_ref_doc_no				,s.wms_cont_bill_freq					,s.wms_cont_bill_date_day			,s.wms_cont_billing_stage,s.wms_cont_currency
		,s.wms_cont_exchange_rate			,s.wms_cont_bulk_rate_chg_per			,s.wms_cont_division				,s.wms_cont_location
		,s.wms_cont_remarks					,s.wms_cont_slab_type					,s.wms_cont_timestamp				,s.wms_cont_created_by,s.wms_cont_created_dt			
		,s.wms_cont_modified_by				,s.wms_cont_modified_dt					,s.wms_cont_space_last_bill_dt		,s.wms_cont_payment_type			
		,s.wms_cont_std_cont_portal			,s.wms_cont_prev_status					,s.wms_cont_cust_grp				,s.wms_cont_non_billable			
		,s.wms_non_billable_chk				,s.wms_cont_last_day					,s.wms_cont_div_loc_cust			,s.wms_cont_numbering_type
		,s.wms_cont_wscchtsa_last_bil_date	,s.wms_cont_stapbspo_last_bil_date		,s.wms_cont_WHRTCHAP_last_bil_date	,s.wms_cont_Iata_chk
		,1									,p_etljobname							,p_envsourcecd						,p_datasourcecd			,NOW()
	FROM stg.stg_wms_contract_hdr s
	left join dwh.D_Vendor v
	on  v.vendor_id	= s.wms_cont_vendor_id
	and v.vendor_ou	= s.wms_cont_ou
	left join dwh.D_Location l
	on l.loc_code	= s.wms_cont_location
	and l.loc_ou	= s.wms_cont_ou
	left join dwh.D_Customer c
	on c.customer_id = s.wms_cont_customer_id
	and c.customer_ou = s.wms_cont_ou
	LEFT JOIN dwh.d_date d 			
	ON 	s.wms_cont_date::date = d.dateactual	
    LEFT JOIN dwh.f_contractheader t
    ON 	s.wms_cont_id  		= t.cont_id
	AND s.wms_cont_ou 		= t.cont_ou
    WHERE t.cont_id IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	update dwh.f_contractheader t1
	set etlactiveind =  0,
	etlupdatedatetime = Now()::timestamp
	from dwh.f_contractheader t
	left join stg.stg_wms_contract_hdr s
	on s.wms_cont_id=t.cont_id
	and s.wms_cont_ou=t.cont_ou
	and s.wms_cont_amendno=t.cont_amendno
	WHERE  t.cont_hdr_key=t1.cont_hdr_key 
	and COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
	AND s.wms_cont_id is null;
	
	--GET DIAGNOSTICS updcnt = ROW_COUNT;
	
-- select 0 into updcnt;
	
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_contract_hdr
	(
		wms_cont_id							,wms_cont_ou							,wms_cont_amendno					,wms_cont_desc
		,wms_cont_date						,wms_cont_type							,wms_cont_status					,wms_cont_rsn_code
		,wms_cont_service_type				,wms_cont_valid_from					,wms_cont_valid_to					,wms_cont_cust_contract_ref_no
		,wms_cont_customer_id				,wms_cont_supp_contract_ref_no			,wms_cont_vendor_id					,wms_cont_ref_doc_type
		,wms_cont_ref_doc_no				,wms_cont_bill_freq						,wms_cont_bill_date_day				,wms_cont_billing_stage,wms_cont_currency
		,wms_cont_exchange_rate				,wms_cont_bulk_rate_chg_per				,wms_cont_division					,wms_cont_location
		,wms_cont_remarks					,wms_cont_slab_type						,wms_cont_timestamp					,wms_cont_created_by,wms_cont_created_dt			
		,wms_cont_modified_by				,wms_cont_modified_dt					,wms_cont_space_last_bill_dt		,wms_cont_payment_type			
		,wms_cont_std_cont_portal			,wms_cont_prev_status					,wms_cont_cust_grp					,wms_cont_non_billable			
		,wms_non_billable_chk				,wms_cont_last_day						,wms_cont_div_loc_cust				,wms_cont_numbering_type
		,wms_cont_wscchtsa_last_bil_date	,wms_cont_stapbspo_last_bil_date		,wms_cont_WHRTCHAP_last_bil_date	,wms_cont_Iata_chk
		,etlcreateddatetime
	)
	SELECT 
		wms_cont_id						,wms_cont_ou							,wms_cont_amendno					,wms_cont_desc
		,wms_cont_date						,wms_cont_type							,wms_cont_status					,wms_cont_rsn_code
		,wms_cont_service_type				,wms_cont_valid_from					,wms_cont_valid_to					,wms_cont_cust_contract_ref_no
		,wms_cont_customer_id				,wms_cont_supp_contract_ref_no			,wms_cont_vendor_id					,wms_cont_ref_doc_type
		,wms_cont_ref_doc_no				,wms_cont_bill_freq						,wms_cont_bill_date_day				,wms_cont_billing_stage,wms_cont_currency
		,wms_cont_exchange_rate				,wms_cont_bulk_rate_chg_per				,wms_cont_division					,wms_cont_location
		,wms_cont_remarks					,wms_cont_slab_type						,wms_cont_timestamp					,wms_cont_created_by,wms_cont_created_dt			
		,wms_cont_modified_by				,wms_cont_modified_dt					,wms_cont_space_last_bill_dt		,wms_cont_payment_type			
		,wms_cont_std_cont_portal			,wms_cont_prev_status					,wms_cont_cust_grp					,wms_cont_non_billable			
		,wms_non_billable_chk				,wms_cont_last_day						,wms_cont_div_loc_cust				,wms_cont_numbering_type
		,wms_cont_wscchtsa_last_bil_date	,wms_cont_stapbspo_last_bil_date		,wms_cont_WHRTCHAP_last_bil_date	,wms_cont_Iata_chk 				
		,etlcreateddatetime
	FROM stg.stg_wms_contract_hdr;
    END IF;
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contractrevleakdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contractrevleakdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
    ON    d.sourceid			= h.sourceid
    WHERE d.sourceid		    = p_sourceId
    AND   d.dataflowflag		= p_dataflowflag
    AND   d.targetobject		= p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_rev_leak_dtl;

    UPDATE dwh.f_contractRevLeakDetail t
    SET
        cont_rev_lkge_contid                  = s.wms_cont_rev_lkge_contid,
        cont_rev_lkge_doc_type                = s.wms_cont_rev_lkge_doc_type,
        cont_rev_lkge_doc_no                  = s.wms_cont_rev_lkge_doc_no,
        cont_rev_lkge_cust_id                 = s.wms_cont_rev_lkge_cust_id,
        cont_rev_lkge_revenue                 = s.wms_cont_rev_lkge_revenue,
        cont_rev_lkge_created_by              = s.wms_cont_rev_lkge_created_by,
        cont_rev_lkge_created_date            = s.wms_cont_rev_lkge_created_date,
        cont_rev_lkge_modified_by             = s.wms_cont_rev_lkge_modified_by,
        cont_rev_lkge_modified_date           = s.wms_cont_rev_lkge_modified_date,
        cont_rev_lkge_timestamp               = s.wms_cont_rev_lkge_timestamp,
        cont_rev_lkge_flag                    = s.wms_cont_rev_lkge_flag,
        cont_rev_lkge_triggering_no           = s.wms_cont_rev_lkge_triggering_no,
        cont_rev_lkge_triggering_type         = s.wms_cont_rev_lkge_triggering_type,
        cont_rev_lkge_Tariffid                = s.wms_cont_rev_lkge_Tariffid,
        cont_rev_lkge_triggering_date         = s.wms_cont_rev_lkge_triggering_date,
        cont_rev_lkge_doc_date                = s.wms_cont_rev_lkge_doc_date,
        cont_rev_lkge_location                = s.wms_cont_rev_lkge_location,
        cont_rev_lkge_supplier                = s.wms_cont_rev_lkge_supplier,
        cont_rev_lkge_remarks                 = s.wms_cont_rev_lkge_remarks,
        cont_rev_lkge_revenue_leakage         = s.wms_cont_rev_lkge_revenue_leakage,
        cont_rev_lkge_tariff_type             = s.wms_cont_rev_lkge_tariff_type,
        cont_rev_lkge_booking_location        = s.wms_cont_rev_lkge_booking_location,
        cont_rev_lkge_reason                  = s.wms_cont_rev_lkge_reason,
        cont_rev_lkge_total_amount            = s.wms_cont_rev_lkge_total_amount,
        cont_rev_lkge_group_flag              = s.wms_cont_rev_lkge_group_flag,
        cont_rev_lkge_resource_type           = s.wms_cont_rev_lkge_resource_type,
        cont_rev_lkge_billable                = s.wms_cont_rev_lkge_billable,
        etlactiveind                          = 1,
        etljobname                            = p_etljobname,
        envsourcecd                           = p_envsourcecd,
        datasourcecd                          = p_datasourcecd,
        etlupdatedatetime                     = NOW()
    FROM stg.stg_wms_contract_rev_leak_dtl s
    WHERE t.cont_rev_lkge_ou				= s.wms_cont_rev_lkge_ou
    AND t.cont_rev_lkge_line_no				= s.wms_cont_rev_lkge_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_contractRevLeakDetail
    (
        cont_rev_lkge_contid, cont_rev_lkge_ou, cont_rev_lkge_line_no, cont_rev_lkge_doc_type, cont_rev_lkge_doc_no, cont_rev_lkge_cust_id,
		cont_rev_lkge_revenue, cont_rev_lkge_created_by, cont_rev_lkge_created_date, cont_rev_lkge_modified_by, cont_rev_lkge_modified_date,
		cont_rev_lkge_timestamp, cont_rev_lkge_flag, cont_rev_lkge_triggering_no, cont_rev_lkge_triggering_type, cont_rev_lkge_Tariffid, 
		cont_rev_lkge_triggering_date, cont_rev_lkge_doc_date, cont_rev_lkge_location, cont_rev_lkge_supplier, cont_rev_lkge_remarks, 
		cont_rev_lkge_revenue_leakage, cont_rev_lkge_tariff_type, cont_rev_lkge_booking_location, cont_rev_lkge_reason, 
		cont_rev_lkge_total_amount, cont_rev_lkge_group_flag, cont_rev_lkge_resource_type, cont_rev_lkge_billable, etlactiveind, 
		etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.wms_cont_rev_lkge_contid, s.wms_cont_rev_lkge_ou, s.wms_cont_rev_lkge_line_no, s.wms_cont_rev_lkge_doc_type, s.wms_cont_rev_lkge_doc_no, s.wms_cont_rev_lkge_cust_id, 
		s.wms_cont_rev_lkge_revenue, s.wms_cont_rev_lkge_created_by, s.wms_cont_rev_lkge_created_date, s.wms_cont_rev_lkge_modified_by, s.wms_cont_rev_lkge_modified_date,
		s.wms_cont_rev_lkge_timestamp, s.wms_cont_rev_lkge_flag, s.wms_cont_rev_lkge_triggering_no, s.wms_cont_rev_lkge_triggering_type, s.wms_cont_rev_lkge_Tariffid,
		s.wms_cont_rev_lkge_triggering_date, s.wms_cont_rev_lkge_doc_date, s.wms_cont_rev_lkge_location, s.wms_cont_rev_lkge_supplier, s.wms_cont_rev_lkge_remarks, 
		s.wms_cont_rev_lkge_revenue_leakage, s.wms_cont_rev_lkge_tariff_type, s.wms_cont_rev_lkge_booking_location, s.wms_cont_rev_lkge_reason, 
		s.wms_cont_rev_lkge_total_amount, s.wms_cont_rev_lkge_group_flag, s.wms_cont_rev_lkge_resource_type, s.wms_cont_rev_lkge_billable, 1,
		p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_contract_rev_leak_dtl s
    LEFT JOIN dwh.f_contractRevLeakDetail t
    ON		s.wms_cont_rev_lkge_ou		= t.cont_rev_lkge_ou
    AND		s.wms_cont_rev_lkge_line_no = t.cont_rev_lkge_line_no
    WHERE	t.cont_rev_lkge_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_contract_rev_leak_dtl
    (
        wms_cont_rev_lkge_contid, wms_cont_rev_lkge_ou, wms_cont_rev_lkge_line_no, wms_cont_rev_lkge_doc_type, wms_cont_rev_lkge_doc_no, 
		wms_cont_rev_lkge_cust_id, wms_cont_rev_lkge_revenue, wms_cont_rev_lkge_created_by, wms_cont_rev_lkge_created_date, 
		wms_cont_rev_lkge_modified_by, wms_cont_rev_lkge_modified_date, wms_cont_rev_lkge_timestamp, wms_cont_rev_lkge_flag, 
		wms_cont_rev_lkge_triggering_no, wms_cont_rev_lkge_triggering_type, wms_cont_rev_lkge_Tariffid, wms_cont_rev_lkge_triggering_date, 
		wms_cont_rev_lkge_doc_date, wms_cont_rev_lkge_location, wms_cont_rev_lkge_supplier, wms_cont_rev_lkge_remarks, 
		wms_cont_rev_lkge_revenue_leakage, wms_cont_rev_lkge_tariff_type, wms_cont_rev_lkge_booking_location, wms_cont_rev_lkge_reason, 
		wms_cont_rev_lkge_total_amount, wms_cont_rev_lkge_group_flag, wms_cont_rev_lkge_resource_type, wms_cont_rev_lkge_billable, 
		etlcreateddatetime
    )
    SELECT
        wms_cont_rev_lkge_contid, wms_cont_rev_lkge_ou, wms_cont_rev_lkge_line_no, wms_cont_rev_lkge_doc_type, wms_cont_rev_lkge_doc_no,
		wms_cont_rev_lkge_cust_id, wms_cont_rev_lkge_revenue, wms_cont_rev_lkge_created_by, wms_cont_rev_lkge_created_date, 
		wms_cont_rev_lkge_modified_by, wms_cont_rev_lkge_modified_date, wms_cont_rev_lkge_timestamp, wms_cont_rev_lkge_flag, 
		wms_cont_rev_lkge_triggering_no, wms_cont_rev_lkge_triggering_type, wms_cont_rev_lkge_Tariffid, wms_cont_rev_lkge_triggering_date,
		wms_cont_rev_lkge_doc_date, wms_cont_rev_lkge_location, wms_cont_rev_lkge_supplier, wms_cont_rev_lkge_remarks, 
		wms_cont_rev_lkge_revenue_leakage, wms_cont_rev_lkge_tariff_type, wms_cont_rev_lkge_booking_location, wms_cont_rev_lkge_reason, 
		wms_cont_rev_lkge_total_amount, wms_cont_rev_lkge_group_flag, wms_cont_rev_lkge_resource_type, wms_cont_rev_lkge_billable, etlcreateddatetime
    FROM stg.stg_wms_contract_rev_leak_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contractrevleakdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contracttransferinvoicedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contracttransferinvoicedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) = NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_transfer_inv_dtl;

    UPDATE dwh.f_contracttransferinvoicedetail t
    SET
        cont_inv_hdr_key                     = fh.cont_hdr_key,
        cont_transfer_contract_id            = s.wms_cont_transfer_contract_id,
        cont_transfer_ref_doc_no             = s.wms_cont_transfer_ref_doc_no,
        cont_transfer_ref_doc_date           = s.wms_cont_transfer_ref_doc_date,
        cont_transfer_draft_inv_no           = s.wms_cont_transfer_draft_inv_no,
        cont_Supplier_id                     = s.wms_cont_Supplier_id,
        cont_customer_id                     = s.wms_cont_customer_id,
        cont_transfer_currency               = s.wms_cont_transfer_currency,
        cont_location                        = s.wms_cont_location,
        cont_fb_id                           = s.wms_cont_fb_id,
        cont_transfer_billing_address        = s.wms_cont_transfer_billing_address,
        cont_refdoc_inv_value                = s.wms_cont_refdoc_inv_value,
        etlactiveind                         = 1,
        etljobname                           = p_etljobname,
        envsourcecd                          = p_envsourcecd,
        datasourcecd                         = p_datasourcecd,
        etlupdatedatetime                    = NOW()
    FROM stg.stg_wms_contract_transfer_inv_dtl s
	Inner Join dwh.f_contracttransferinvoiceheader fh
	on  s.wms_cont_transfer_inv_no =  fh.cont_transfer_inv_no
    and s.wms_cont_transfer_inv_ou =  fh.cont_transfer_inv_ou  
    WHERE t.cont_transfer_inv_no   =  s.wms_cont_transfer_inv_no
    AND t.cont_transfer_lineno     =  s.wms_cont_transfer_lineno
    AND t.cont_transfer_inv_ou     =  s.wms_cont_transfer_inv_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_contracttransferinvoicedetail
    (
        cont_inv_hdr_key,cont_transfer_inv_no, cont_transfer_lineno, cont_transfer_inv_ou, cont_transfer_contract_id, cont_transfer_ref_doc_no, 
		cont_transfer_ref_doc_date, cont_transfer_draft_inv_no, cont_Supplier_id, cont_customer_id, cont_transfer_currency, 
		cont_location, cont_fb_id, cont_transfer_billing_address, cont_refdoc_inv_value, etlactiveind, etljobname, envsourcecd, 
		datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.cont_hdr_key,s.wms_cont_transfer_inv_no, s.wms_cont_transfer_lineno, s.wms_cont_transfer_inv_ou, s.wms_cont_transfer_contract_id, s.wms_cont_transfer_ref_doc_no,
		s.wms_cont_transfer_ref_doc_date, s.wms_cont_transfer_draft_inv_no, s.wms_cont_Supplier_id, s.wms_cont_customer_id, s.wms_cont_transfer_currency,
		s.wms_cont_location, s.wms_cont_fb_id, s.wms_cont_transfer_billing_address, s.wms_cont_refdoc_inv_value, 1, p_etljobname, p_envsourcecd,
		p_datasourcecd, NOW()
    FROM stg.stg_wms_contract_transfer_inv_dtl s
	Inner Join dwh.f_contracttransferinvoiceheader fh
	on  s.wms_cont_transfer_inv_no =  fh.cont_transfer_inv_no
    and s.wms_cont_transfer_inv_ou =  fh.cont_transfer_inv_ou 
    LEFT JOIN dwh.f_contracttransferinvoicedetail t
    ON s.wms_cont_transfer_inv_no = t.cont_transfer_inv_no
    AND s.wms_cont_transfer_lineno = t.cont_transfer_lineno
    AND s.wms_cont_transfer_inv_ou = t.cont_transfer_inv_ou
    WHERE t.cont_transfer_inv_no IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    INSERT INTO raw.raw_wms_contract_transfer_inv_dtl
    (
        wms_cont_transfer_inv_no, wms_cont_transfer_lineno, wms_cont_transfer_inv_ou, wms_cont_transfer_contract_id, 
		wms_cont_transfer_ref_doc_no, wms_cont_transfer_ref_doc_date, wms_cont_transfer_draft_inv_no, wms_cont_Supplier_id, 
		wms_cont_customer_id, wms_cont_transfer_currency, wms_cont_location, wms_cont_fb_id, wms_cont_transfer_billing_address, 
		wms_cont_refdoc_inv_value, etlcreateddatetime
    )
    SELECT
        wms_cont_transfer_inv_no, wms_cont_transfer_lineno, wms_cont_transfer_inv_ou, wms_cont_transfer_contract_id, 
		wms_cont_transfer_ref_doc_no, wms_cont_transfer_ref_doc_date, wms_cont_transfer_draft_inv_no, wms_cont_Supplier_id, 
		wms_cont_customer_id, wms_cont_transfer_currency, wms_cont_location, wms_cont_fb_id, wms_cont_transfer_billing_address, 
		wms_cont_refdoc_inv_value, etlcreateddatetime
    FROM stg.stg_wms_contract_transfer_inv_dtl;

ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contracttransferinvoicedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_contracttransferinvoiceheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_contracttransferinvoiceheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_contract_transfer_inv_hdr;

    UPDATE dwh.f_contracttransferinvoiceheader t
    SET
        cont_transfer_inv_date             = s.wms_cont_transfer_inv_date,
        cont_inv_no                        = s.wms_cont_inv_no,
        cont_inv_date                      = s.wms_cont_inv_date,
        cont_flag                          = s.wms_cont_flag,
        cont_timestamp                     = s.wms_cont_timestamp,
        cont_created_by                    = s.wms_cont_created_by,
        cont_created_dt                    = s.wms_cont_created_dt,
        cont_modified_by                   = s.wms_cont_modified_by,
        cont_modified_dt                   = s.wms_cont_modified_dt,
        cont_tran_type                     = s.wms_cont_tran_type,
        cont_rcti_flag                     = s.wms_cont_rcti_flag,
        cont_billing_profile               = s.wms_cont_billing_profile,
        cont_transfer_received_by          = s.wms_cont_transfer_received_by,
        cont_transfer_date_received        = s.wms_cont_transfer_date_received,
        cont_transfer_inv_value            = s.wms_cont_transfer_inv_value,
        etlactiveind                       = 1,
        etljobname                         = p_etljobname,
        envsourcecd                        = p_envsourcecd,
        datasourcecd                       = p_datasourcecd,
        etlupdatedatetime                  = NOW()
    FROM stg.stg_wms_contract_transfer_inv_hdr s
    WHERE t.cont_transfer_inv_no	= s.wms_cont_transfer_inv_no
    AND t.cont_transfer_inv_ou		= s.wms_cont_transfer_inv_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_contracttransferinvoiceheader
    (
        cont_transfer_inv_no, cont_transfer_inv_ou, cont_transfer_inv_date, cont_inv_no, cont_inv_date, cont_flag, cont_timestamp, 
		cont_created_by, cont_created_dt, cont_modified_by, cont_modified_dt, cont_tran_type, cont_rcti_flag, cont_billing_profile, 
		cont_transfer_received_by, cont_transfer_date_received, cont_transfer_inv_value, etlactiveind, etljobname, envsourcecd, 
		datasourcecd, etlcreatedatetime
    )

    SELECT
        s.wms_cont_transfer_inv_no, s.wms_cont_transfer_inv_ou, s.wms_cont_transfer_inv_date, s.wms_cont_inv_no, s.wms_cont_inv_date, s.wms_cont_flag, s.wms_cont_timestamp,
		s.wms_cont_created_by, s.wms_cont_created_dt, s.wms_cont_modified_by, s.wms_cont_modified_dt, s.wms_cont_tran_type, s.wms_cont_rcti_flag, s.wms_cont_billing_profile,
		s.wms_cont_transfer_received_by, s.wms_cont_transfer_date_received, s.wms_cont_transfer_inv_value, 1, p_etljobname, p_envsourcecd,
		p_datasourcecd, NOW()
    FROM stg.stg_wms_contract_transfer_inv_hdr s
    LEFT JOIN dwh.f_contracttransferinvoiceheader t
    ON s.wms_cont_transfer_inv_no = t.cont_transfer_inv_no
    AND s.wms_cont_transfer_inv_ou = t.cont_transfer_inv_ou
    WHERE t.cont_transfer_inv_no IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    INSERT INTO raw.raw_wms_contract_transfer_inv_hdr
    (
        wms_cont_transfer_inv_no, wms_cont_transfer_inv_ou, wms_cont_transfer_inv_date, wms_cont_inv_no, wms_cont_inv_date, wms_cont_flag, 
		wms_cont_timestamp, wms_cont_created_by, wms_cont_created_dt, wms_cont_modified_by, wms_cont_modified_dt, wms_cont_tran_type, 
		wms_cont_rcti_flag, wms_cont_billing_profile, wms_cont_transfer_received_by, wms_cont_transfer_date_received, 
		wms_cont_transfer_inv_value, etlcreateddatetime
    )
    SELECT
        wms_cont_transfer_inv_no, wms_cont_transfer_inv_ou, wms_cont_transfer_inv_date, wms_cont_inv_no, wms_cont_inv_date, wms_cont_flag, 
		wms_cont_timestamp, wms_cont_created_by, wms_cont_created_dt, wms_cont_modified_by, wms_cont_modified_dt, wms_cont_tran_type,
		wms_cont_rcti_flag, wms_cont_billing_profile, wms_cont_transfer_received_by, wms_cont_transfer_date_received, 
		wms_cont_transfer_inv_value, etlcreateddatetime
    FROM stg.stg_wms_contract_transfer_inv_hdr;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_contracttransferinvoiceheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_deliverydelayreason(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_deliverydelayreason(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_pcsit_rdil_uncontrollable_tbl;

    UPDATE dwh.F_DeliveryDelayReason t
    SET
        wms_loc_key            = COALESCE(l.loc_key,-1),
        InvoiceNo              = s.InvoiceNo,
        InvoiceDate            = s.InvoiceDate,
        InvoiceHoldType        = s.InvoiceHoldType,
        Remarks                = s.Remarks,
        CreatedBy              = s.CreatedBy,
        CreatedDate            = s.CreatedDate,
        GUID                   = s.GUID,
        TranOU                 = s.TranOU,
        Type                   = s.Type,
        Activity               = s.Activity,
        etlactiveind           = 1,
        etljobname             = p_etljobname,
        envsourcecd            = p_envsourcecd,
        datasourcecd           = p_datasourcecd,
        etlupdatedatetime      = NOW()
    FROM stg.stg_pcsit_rdil_uncontrollable_tbl s
    LEFT JOIN dwh.d_location L      
        ON s.LocationCode   = L.loc_code 
        AND s.tranou        = L.loc_ou

    WHERE COALESCE(t.tranou,0) = COALESCE(s.tranou,0)
    AND COALESCE(t.type,'') = COALESCE(s.type,'')
    AND COALESCE(t.activity,'') = COALESCE(s.activity,'')
    AND COALESCE(t.LocationCode,'') = COALESCE(s.LocationCode,'')
    AND COALESCE(t.InvoiceNo,'') = COALESCE(s.InvoiceNo,'')
    AND COALESCE(t.InvoiceDate,'1900-01-01') = COALESCE(s.InvoiceDate,'1900-01-01')
    AND COALESCE(t.invoiceholdtype,'') = COALESCE(s.invoiceholdtype,'')
    and COALESCE(t.guid,'') = COALESCE(s.guid,'')
    and COALESCE(t.remarks,'') = COALESCE(s.remarks,'');

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DeliveryDelayReason
    (
       wms_loc_key, LocationCode    , InvoiceNo     , InvoiceDate, 
        InvoiceHoldType , Remarks       , CreatedBy , 
        CreatedDate     , GUID          , TranOU    , 
        Type            , Activity      , 
        etlactiveind    , etljobname    , envsourcecd, 
        datasourcecd    , etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1),s.LocationCode      , s.InvoiceNo   , s.InvoiceDate , 
        s.InvoiceHoldType   , s.Remarks     , s.CreatedBy   , 
        s.CreatedDate       , s.GUID        , s.TranOU      , 
        s.Type              , s.Activity    , 
                1           , p_etljobname  , p_envsourcecd , 
        p_datasourcecd      , NOW()
    FROM stg.stg_pcsit_rdil_uncontrollable_tbl s
        LEFT JOIN dwh.d_location L      
        ON s.LocationCode   = L.loc_code 
        AND s.tranou        = L.loc_ou

    LEFT JOIN dwh.F_DeliveryDelayReason t
    ON  COALESCE(t.tranou,0) = COALESCE(s.tranou,0)
    AND COALESCE(t.type,'') = COALESCE(s.type,'')
    AND COALESCE(t.activity,'') = COALESCE(s.activity,'')
    AND COALESCE(t.LocationCode,'') = COALESCE(s.LocationCode,'')
    AND COALESCE(t.InvoiceNo,'') = COALESCE(s.InvoiceNo,'')
    AND COALESCE(t.InvoiceDate,'1900-01-01') = COALESCE(s.InvoiceDate,'1900-01-01')
    AND COALESCE(t.invoiceholdtype,'') = COALESCE(s.invoiceholdtype,'')
    and COALESCE(t.guid,'') = COALESCE(s.guid,'')
    and COALESCE(t.remarks,'') = COALESCE(s.remarks,'')
    WHERE t.LocationCode IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    INSERT INTO raw.raw_pcsit_rdil_uncontrollable_tbl
    (
        LocationCode    , InvoiceNo , InvoiceDate, 
        InvoiceHoldType , Remarks   , CreatedBy, 
        CreatedDate     , GUID      , TranOU, 
        Type            , Activity  , etlcreateddatetime
    )
    SELECT
        LocationCode    , InvoiceNo , InvoiceDate, 
        InvoiceHoldType , Remarks   , CreatedBy, 
        CreatedDate     , GUID      , TranOU, 
        Type            , Activity  , etlcreateddatetime
    FROM stg.stg_pcsit_rdil_uncontrollable_tbl;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, 
                                p_batchid,p_taskname, 'sp_ExceptionHandling', 
                                p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_deliverydelayreason(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchconsdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchconsdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid 		= h.sourceid
    WHERE d.sourceid 		= p_sourceId
        AND d.dataflowflag 	= p_dataflowflag
        AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_disp_cons_dtl;

    UPDATE dwh.f_dispatchconsdetail t
    SET
        disp_con_loc_key 			= COALESCE(l.loc_key,-1),
        disp_con_customer_key 		= COALESCE(c.customer_key,-1),
        disp_profile_code 			= s.wms_disp_profile_code,
        disp_customer 				= s.wms_disp_customer,
        disp_lsp 					= s.wms_disp_lsp,
        disp_ship_mode 				= s.wms_disp_ship_mode,
        disp_route 					= s.wms_disp_route,
        disp_ship_point 			= s.wms_disp_ship_point,
        disp_thuid 					= s.wms_disp_thuid,
        disp_delivery_date 			= s.wms_disp_delivery_date,
        etlactiveind 				= 1,
        etljobname 					= p_etljobname,
        envsourcecd 				= p_envsourcecd ,
        datasourcecd 				= p_datasourcecd ,
        etlupdatedatetime 			= NOW()    
    FROM stg.stg_wms_disp_cons_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_disp_location 	= l.loc_code
		AND s.wms_disp_ou			= l.loc_ou
	LEFT JOIN dwh.d_customer c	
		ON  s.wms_disp_customer 	= c.customer_id
		AND s.wms_disp_ou			= c.customer_ou	
    WHERE   t.disp_location 		= s.wms_disp_location
		AND t.disp_ou 				= s.wms_disp_ou
		AND t.disp_lineno 			= s.wms_disp_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_dispatchconsdetail
    (
        disp_con_loc_key			, disp_con_customer_key			, disp_location			, disp_ou, 
		disp_lineno					, disp_profile_code				, disp_customer			, disp_lsp, 
		disp_ship_mode				, disp_route					, disp_ship_point		, disp_thuid, 
		disp_delivery_date			, etlactiveind					, etljobname			, envsourcecd, 
		datasourcecd				, etlcreatedatetime
    )	
		
    SELECT	
        COALESCE(l.loc_key,-1)		, COALESCE(c.customer_key,-1)	, s.wms_disp_location	, s.wms_disp_ou, 
		s.wms_disp_lineno			, s.wms_disp_profile_code		, s.wms_disp_customer	, s.wms_disp_lsp, 
		s.wms_disp_ship_mode		, s.wms_disp_route				, s.wms_disp_ship_point	, s.wms_disp_thuid, 
		s.wms_disp_delivery_date	, 1								, p_etljobname			, p_envsourcecd, 
		p_datasourcecd				, NOW()
    FROM stg.stg_wms_disp_cons_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_disp_location 	= l.loc_code
		AND s.wms_disp_ou			= l.loc_ou
	LEFT JOIN dwh.d_customer c	
		ON  s.wms_disp_customer 	= c.customer_id
		AND s.wms_disp_ou			= c.customer_ou
	LEFT JOIN dwh.f_dispatchconsdetail t
		ON  s.wms_disp_location 	= t.disp_location
		AND s.wms_disp_ou 			= t.disp_ou
		AND s.wms_disp_lineno 		= t.disp_lineno
    WHERE t.disp_location IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_disp_cons_dtl
    (
        wms_disp_location	, wms_disp_ou		, wms_disp_lineno			, wms_disp_profile_code, 
		wms_disp_customer	, wms_disp_lsp		, wms_disp_ship_mode		, wms_disp_route, 
		wms_disp_ship_point	, wms_disp_thuid	, wms_disp_delivery_date	, etlcreateddatetime
    )		
    SELECT		
        wms_disp_location	, wms_disp_ou		, wms_disp_lineno			, wms_disp_profile_code, 
		wms_disp_customer	, wms_disp_lsp		, wms_disp_ship_mode		, wms_disp_route, 
		wms_disp_ship_point	, wms_disp_thuid	, wms_disp_delivery_date	, etlcreateddatetime
    FROM stg.stg_wms_disp_cons_dtl;
    END IF;

    EXCEPTION WHEN others THEN
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchconsdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_dispatch_dtl;

    UPDATE dwh.f_dispatchdetail t
    SET
        dispatch_hdr_key 				= COALESCE(dh.dispatch_hdr_key,-1),
        dispatch_dtl_loc_key 			= COALESCE(l.loc_key,-1),
        dispatch_dtl_thu_key 			= COALESCE(th.thu_key,-1),
        dispatch_dtl_shp_pt_key 		= COALESCE(sp.shp_pt_key,-1),
        dispatch_dtl_customer_key 		= COALESCE(c.customer_key,-1),
        dispatch_so_no 					= s.wms_dispatch_so_no,
        dispatch_thu_id 				= s.wms_dispatch_thu_id,
        dispatch_ship_point 			= s.wms_dispatch_ship_point,
        dispatch_ship_mode 				= s.wms_dispatch_ship_mode,
        dispatch_pack_exec_no 			= s.wms_dispatch_pack_exec_no,
        dispatch_customer 				= s.wms_dispatch_customer,
        dispatch_thu_desc 				= s.wms_dispatch_thu_desc,
        dispatch_thu_class 				= s.wms_dispatch_thu_class,
        dispatch_thu_sr_no 				= s.wms_dispatch_thu_sr_no,
        dispatch_su 					= s.wms_dispatch_su,
        dispatch_exec_stage 			= s.wms_dispatch_exec_stage,
        dispatch_uid_serial_no 			= s.wms_dispatch_uid_serial_no,
        dispatch_thu_weight 			= s.wms_dispatch_thu_weight,
        dispatch_thu_wt_uom 			= s.wms_dispatch_thu_wt_uom,
        dispatch_length_ml 				= s.wms_dispatch_length_ml,
        dispatch_height_ml 				= s.wms_dispatch_height_ml,
        dispatch_breadth_ml 			= s.wms_dispatch_breadth_ml,
        dispatch_thu_sp_ml 				= s.wms_dispatch_thu_sp_ml,
        dispatch_uom_ml 				= s.wms_dispatch_uom_ml,
        dispatch_vol_ml 				= s.wms_dispatch_vol_ml,
        dispatch_vol_uom_ml 			= s.wms_dispatch_vol_uom_ml,
        dispatch_outbound_no 			= s.wms_dispatch_outbound_no,
        dispatch_reasoncode_ml 			= s.wms_dispatch_reasoncode_ml,
        etlactiveind 					= 1,
        etljobname 						= p_etljobname,
        envsourcecd 					= p_envsourcecd ,
        datasourcecd 					= p_datasourcecd ,
        etlupdatedatetime 				= NOW()    
    FROM stg.stg_wms_dispatch_dtl s
	INNER JOIN dwh.F_DispatchHeader dh
		ON  dh.dispatch_loc_code 		= s.wms_dispatch_loc_code
		AND dh.dispatch_ld_sheet_no 	= s.wms_dispatch_ld_sheet_no
		AND dh.dispatch_ld_sheet_ou 	= s.wms_dispatch_ld_sheet_ou	
	LEFT JOIN dwh.d_location l
		ON  s.wms_dispatch_loc_code 	= l.loc_code
		AND s.wms_dispatch_ld_sheet_ou 	= l.loc_ou
	LEFT JOIN dwh.d_thu th
		ON  s.wms_dispatch_thu_id 		= th.thu_id
		AND s.wms_dispatch_ld_sheet_ou 	= th.thu_ou	
	LEFT JOIN dwh.d_shippingpoint sp
		ON  s.wms_dispatch_ship_point 	= sp.shp_pt_id
		AND s.wms_dispatch_ld_sheet_ou 	= sp.shp_pt_ou
	LEFT JOIN dwh.d_customer c
		ON  s.wms_dispatch_customer 	= c.customer_id
		AND s.wms_dispatch_ld_sheet_ou 	= c.customer_ou		
    WHERE   t.dispatch_loc_code 		= s.wms_dispatch_loc_code
		AND t.dispatch_ld_sheet_no 		= s.wms_dispatch_ld_sheet_no
		AND t.dispatch_ld_sheet_ou 		= s.wms_dispatch_ld_sheet_ou
		AND t.dispatch_lineno 			= s.wms_dispatch_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_dispatchdetail 
    (
        dispatch_hdr_key,dispatch_dtl_loc_key,dispatch_dtl_thu_key,dispatch_dtl_shp_pt_key,dispatch_dtl_customer_key,dispatch_loc_code, dispatch_ld_sheet_no, dispatch_ld_sheet_ou, dispatch_lineno, dispatch_so_no, dispatch_thu_id, dispatch_ship_point, dispatch_ship_mode, dispatch_pack_exec_no, dispatch_customer, dispatch_thu_desc, dispatch_thu_class, dispatch_thu_sr_no, dispatch_su, dispatch_exec_stage, dispatch_uid_serial_no, dispatch_thu_weight, dispatch_thu_wt_uom, dispatch_length_ml, dispatch_height_ml, dispatch_breadth_ml, dispatch_thu_sp_ml, dispatch_uom_ml, dispatch_vol_ml, dispatch_vol_uom_ml, dispatch_outbound_no, dispatch_reasoncode_ml, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )
    
    SELECT
		COALESCE(dh.dispatch_hdr_key,-1),COALESCE(l.loc_key,-1),COALESCE(th.thu_key,-1),COALESCE(sp.shp_pt_key,-1),COALESCE(c.customer_key,-1),s.wms_dispatch_loc_code, s.wms_dispatch_ld_sheet_no, s.wms_dispatch_ld_sheet_ou, s.wms_dispatch_lineno, s.wms_dispatch_so_no, s.wms_dispatch_thu_id, s.wms_dispatch_ship_point, s.wms_dispatch_ship_mode, s.wms_dispatch_pack_exec_no, s.wms_dispatch_customer, s.wms_dispatch_thu_desc, s.wms_dispatch_thu_class, s.wms_dispatch_thu_sr_no, s.wms_dispatch_su, s.wms_dispatch_exec_stage, s.wms_dispatch_uid_serial_no, s.wms_dispatch_thu_weight, s.wms_dispatch_thu_wt_uom, s.wms_dispatch_length_ml, s.wms_dispatch_height_ml, s.wms_dispatch_breadth_ml, s.wms_dispatch_thu_sp_ml, s.wms_dispatch_uom_ml, s.wms_dispatch_vol_ml, s.wms_dispatch_vol_uom_ml, s.wms_dispatch_outbound_no, s.wms_dispatch_reasoncode_ml, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_dispatch_dtl s
	INNER JOIN dwh.F_DispatchHeader dh
		ON  dh.dispatch_loc_code 		= s.wms_dispatch_loc_code
		AND dh.dispatch_ld_sheet_no 	= s.wms_dispatch_ld_sheet_no
		AND dh.dispatch_ld_sheet_ou 	= s.wms_dispatch_ld_sheet_ou	
	LEFT JOIN dwh.d_location l
		ON  s.wms_dispatch_loc_code 	= l.loc_code
		AND s.wms_dispatch_ld_sheet_ou 	= l.loc_ou
	LEFT JOIN dwh.d_thu th
		ON  s.wms_dispatch_thu_id 		= th.thu_id
		AND s.wms_dispatch_ld_sheet_ou 	= th.thu_ou	
	LEFT JOIN dwh.d_shippingpoint sp
		ON  s.wms_dispatch_ship_point 	= sp.shp_pt_id
		AND s.wms_dispatch_ld_sheet_ou 	= sp.shp_pt_ou
	LEFT JOIN dwh.d_customer c
		ON  s.wms_dispatch_customer 	= c.customer_id
		AND s.wms_dispatch_ld_sheet_ou 	= c.customer_ou		
    LEFT JOIN dwh.f_dispatchdetail t
		ON  s.wms_dispatch_loc_code 	= t.dispatch_loc_code
		AND s.wms_dispatch_ld_sheet_no 	= t.dispatch_ld_sheet_no
		AND s.wms_dispatch_ld_sheet_ou 	= t.dispatch_ld_sheet_ou
		AND s.wms_dispatch_lineno 		= t.dispatch_lineno
    WHERE t.dispatch_loc_code IS NULL;
	
	GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_dispatch_dtl
    (   
        wms_dispatch_loc_code, wms_dispatch_ld_sheet_no, wms_dispatch_ld_sheet_ou, wms_dispatch_lineno, wms_dispatch_so_no, wms_dispatch_thu_id, wms_dispatch_ship_point, wms_dispatch_ship_mode, wms_dispatch_pack_exec_no, wms_dispatch_customer, wms_dispatch_thu_desc, wms_dispatch_thu_class, wms_dispatch_thu_sr_no, wms_dispatch_thu_acc, wms_dispatch_su, wms_dispatch_exec_stage, wms_dispatch_uid_serial_no, wms_dispatch_thu_weight, wms_dispatch_thu_wt_uom, wms_dispatch_cons_qty, wms_dispatch_cons_ml, wms_dispatch_length_ml, wms_dispatch_height_ml, wms_dispatch_breadth_ml, wms_dispatch_thu_sp_ml, wms_dispatch_uom_ml, wms_dispatch_vol_ml, wms_dispatch_vol_uom_ml, wms_dispatch_outbound_no, wms_dispatch_reasoncode_ml, etlcreateddatetime
    )
    SELECT 
        wms_dispatch_loc_code, wms_dispatch_ld_sheet_no, wms_dispatch_ld_sheet_ou, wms_dispatch_lineno, wms_dispatch_so_no, wms_dispatch_thu_id, wms_dispatch_ship_point, wms_dispatch_ship_mode, wms_dispatch_pack_exec_no, wms_dispatch_customer, wms_dispatch_thu_desc, wms_dispatch_thu_class, wms_dispatch_thu_sr_no, wms_dispatch_thu_acc, wms_dispatch_su, wms_dispatch_exec_stage, wms_dispatch_uid_serial_no, wms_dispatch_thu_weight, wms_dispatch_thu_wt_uom, wms_dispatch_cons_qty, wms_dispatch_cons_ml, wms_dispatch_length_ml, wms_dispatch_height_ml, wms_dispatch_breadth_ml, wms_dispatch_thu_sp_ml, wms_dispatch_uom_ml, wms_dispatch_vol_ml, wms_dispatch_vol_uom_ml, wms_dispatch_outbound_no, wms_dispatch_reasoncode_ml, etlcreateddatetime
    FROM stg.stg_wms_dispatch_dtl;
    END IF;    

    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;  
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 
    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchdocheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchdocheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_ddh_dispatch_document_hdr;

    UPDATE dwh.F_DispatchDocHeader t
    SET
	
		ddh_loc_key							= COALESCE(l.loc_key,-1),
		ddh_curr_key						= COALESCE(c.curr_key,-1),
		ddh_consignee_hdr_key				= COALESCE(co.consignee_hdr_key,-1),
		ddh_customer_key					= COALESCE(ct.customer_key,-1),
        ddh_dispatch_doc_type               = s.ddh_dispatch_doc_type,
        ddh_dispatch_doc_mode               = s.ddh_dispatch_doc_mode,
        ddh_dispatch_doc_num_type           = s.ddh_dispatch_doc_num_type,
        ddh_dispatch_doc_status             = s.ddh_dispatch_doc_status,
        ddh_dispatch_doc_date               = s.ddh_dispatch_doc_date,
        ddh_transport_mode                  = s.ddh_transport_mode,
        ddh_reference_doc_type              = s.ddh_reference_doc_type,
        ddh_reference_doc_no                = s.ddh_reference_doc_no,
        ddh_customer_id                     = s.ddh_customer_id,
        ddh_cust_ref_no                     = s.ddh_cust_ref_no,
        ddh_consignee_id                    = s.ddh_consignee_id,
        ddh_ship_from_id                    = s.ddh_ship_from_id,
        ddh_ship_to_id                      = s.ddh_ship_to_id,
        ddh_declared_goods_value            = s.ddh_declared_goods_value,
        ddh_currency                        = s.ddh_currency,
        ddh_spl_instructions                = s.ddh_spl_instructions,
        ddh_created_by                      = s.ddh_created_by,
        ddh_created_date                    = s.ddh_created_date,
        ddh_last_modified_by                = s.ddh_last_modified_by,
        ddh_lst_modified_date               = s.ddh_lst_modified_date,
        ddh_trip_log                        = s.ddh_trip_log,
        ddh_location                        = s.ddh_location,
        ddh_billing_status                  = s.ddh_billing_status,
        ddh_autocreateCN_YN                 = s.ddh_autocreateCN_YN,
        ddh_pkup_recpt_no                   = s.ddh_pkup_recpt_no,
        ddh_service_type                    = s.ddh_service_type,
        ddh_subservice_type                 = s.ddh_subservice_type,
        ddtd_pick_up_date_time_con          = s.ddtd_pick_up_date_time_con,
        ddtd_delivery_date_time_con         = s.ddtd_delivery_date_time_con,
        ddh_Placeof_Receipt                 = s.ddh_Placeof_Receipt,
        ddh_Final_Destination               = s.ddh_Final_Destination,
        ddh_Net_Weight                      = s.ddh_Net_Weight,
        ddh_Gross_Weight                    = s.ddh_Gross_Weight,
        ddh_Total_Packages                  = s.ddh_Total_Packages,
        ddh_Chargeable_Weight               = s.ddh_Chargeable_Weight,
        ddh_guid                            = s.ddh_guid,
        ddh_weight_uom                      = s.ddh_weight_uom,
        ddh_total_volume                    = s.ddh_total_volume,
        ddh_volume_uom                      = s.ddh_volume_uom,
        ddh_senders_ref_no                  = s.ddh_senders_ref_no,
        ddh_receivers_ref_no                = s.ddh_receivers_ref_no,
        ddh_amend_version_no                = s.ddh_amend_version_no,
        ddh_reason_amendment                = s.ddh_reason_amendment,
        ddh_dispatch_doc_dvry_status        = s.ddh_dispatch_doc_dvry_status,
        etlactiveind                        = 1,
        etljobname                          = p_etljobname,
        envsourcecd                         = p_envsourcecd,
        datasourcecd                        = p_datasourcecd,
        etlupdatedatetime                   = NOW()
    FROM stg.stg_tms_ddh_dispatch_document_hdr s
	LEFT JOIN dwh.d_location l 		
		ON 	s.ddh_location 			= l.loc_code 
        AND s.ddh_ouinstance        = l.loc_ou
	LEFT JOIN dwh.d_customer ct 		
		ON 	s.ddh_customer_id  		= ct.customer_id 
        AND s.ddh_ouinstance        = ct.customer_ou
	LEFT JOIN dwh.d_currency c 		
		ON 	s.ddh_currency  		= c.iso_curr_code 
	LEFT JOIN dwh.d_consignee co 		
		ON 	s.ddh_consignee_id  	= co.consignee_id 
        AND s.ddh_ouinstance        = co.consignee_ou
    WHERE 	t.ddh_ouinstance 		= s.ddh_ouinstance
    AND 	t.ddh_dispatch_doc_no 	= s.ddh_dispatch_doc_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DispatchDocHeader
    (
		ddh_loc_key, ddh_curr_key, ddh_consignee_hdr_key, ddh_customer_key,
        ddh_ouinstance, ddh_dispatch_doc_no, ddh_dispatch_doc_type, ddh_dispatch_doc_mode, ddh_dispatch_doc_num_type, ddh_dispatch_doc_status, ddh_dispatch_doc_date, ddh_transport_mode, ddh_reference_doc_type, ddh_reference_doc_no, ddh_customer_id, ddh_cust_ref_no, ddh_consignee_id, ddh_ship_from_id, ddh_ship_to_id, ddh_declared_goods_value, ddh_currency, ddh_spl_instructions, ddh_created_by, ddh_created_date, ddh_last_modified_by, ddh_lst_modified_date, ddh_trip_log, ddh_location, ddh_billing_status, ddh_autocreateCN_YN, ddh_pkup_recpt_no, ddh_service_type, ddh_subservice_type, ddtd_pick_up_date_time_con, ddtd_delivery_date_time_con, ddh_Placeof_Receipt, ddh_Final_Destination, ddh_Net_Weight, ddh_Gross_Weight, ddh_Total_Packages, ddh_Chargeable_Weight, ddh_guid, ddh_weight_uom, ddh_total_volume, ddh_volume_uom, ddh_senders_ref_no, ddh_receivers_ref_no, ddh_amend_version_no, ddh_reason_amendment, ddh_dispatch_doc_dvry_status, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),COALESCE(c.curr_key,-1),COALESCE(co.consignee_hdr_key,-1),COALESCE(ct.customer_key,-1),
        s.ddh_ouinstance, s.ddh_dispatch_doc_no, s.ddh_dispatch_doc_type, s.ddh_dispatch_doc_mode, s.ddh_dispatch_doc_num_type, s.ddh_dispatch_doc_status, s.ddh_dispatch_doc_date, s.ddh_transport_mode, s.ddh_reference_doc_type, s.ddh_reference_doc_no, s.ddh_customer_id, s.ddh_cust_ref_no, s.ddh_consignee_id, s.ddh_ship_from_id, s.ddh_ship_to_id, s.ddh_declared_goods_value, s.ddh_currency, s.ddh_spl_instructions, s.ddh_created_by, s.ddh_created_date, s.ddh_last_modified_by, s.ddh_lst_modified_date, s.ddh_trip_log, s.ddh_location, s.ddh_billing_status, s.ddh_autocreateCN_YN, s.ddh_pkup_recpt_no, s.ddh_service_type, s.ddh_subservice_type, s.ddtd_pick_up_date_time_con, s.ddtd_delivery_date_time_con, s.ddh_Placeof_Receipt, s.ddh_Final_Destination, s.ddh_Net_Weight, s.ddh_Gross_Weight, s.ddh_Total_Packages, s.ddh_Chargeable_Weight, s.ddh_guid, s.ddh_weight_uom, s.ddh_total_volume, s.ddh_volume_uom, s.ddh_senders_ref_no, s.ddh_receivers_ref_no, s.ddh_amend_version_no, s.ddh_reason_amendment, s.ddh_dispatch_doc_dvry_status, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_ddh_dispatch_document_hdr s
	LEFT JOIN dwh.d_location l 		
		ON 	s.ddh_location 			= l.loc_code 
        AND s.ddh_ouinstance        = l.loc_ou
	LEFT JOIN dwh.d_customer ct 		
		ON 	s.ddh_customer_id  		= ct.customer_id 
        AND s.ddh_ouinstance        = ct.customer_ou
	LEFT JOIN dwh.d_currency c 		
		ON 	s.ddh_currency  		= c.iso_curr_code 
	LEFT JOIN dwh.d_consignee co 		
		ON 	s.ddh_consignee_id  	= co.consignee_id 
        AND s.ddh_ouinstance        = co.consignee_ou
    LEFT JOIN dwh.F_DispatchDocHeader t
    ON 		s.ddh_ouinstance 		= t.ddh_ouinstance
    AND 	s.ddh_dispatch_doc_no 	= t.ddh_dispatch_doc_no
    WHERE t.ddh_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_ddh_dispatch_document_hdr
    (
        ddh_ouinstance, ddh_dispatch_doc_no, ddh_dispatch_doc_type, ddh_dispatch_doc_mode, ddh_dispatch_doc_num_type, ddh_dispatch_doc_status, ddh_dispatch_doc_date, ddh_transport_mode, ddh_reference_doc_type, ddh_reference_doc_no, ddh_customer_id, ddh_cust_ref_no, ddh_consignor_id, ddh_consignee_id, ddh_ship_from_id, ddh_ship_to_id, ddh_declared_goods_value, ddh_currency, ddh_proforma, ddh_ship_agent_id, ddh_ship_agent_address_id, ddh_deliver_agent_id, ddh_deliver_agent_address_id, ddh_notify_party_id, ddh_notify_party_address_id, ddh_carrier_id, ddh_vessel_flight_rail_number, ddh_loading_or_departure_point, ddh_discharge_or_destination_point, ddh_arrival_date, ddh_departure_date, ddh_mbl_of_hbl, ddh_mawb_of_hawb, ddh_spl_instructions, ddh_additional_info, ddh_created_by, ddh_created_date, ddh_last_modified_by, ddh_lst_modified_date, ddh_timestamp, ddh_trip_log, ddh_location, ddh_billing_status, ddh_revenue, ddh_autocreateCN_YN, ddh_pkup_recpt_no, ddh_dlvy_recpt_no, ddh_service_type, ddh_subservice_type, ddtd_pick_up_date_time_con, ddtd_delivery_date_time_con, ddh_Agent, ddh_Forwarding_Agent, ddh_Cargo_Description, ddh_Marks_numbers, ddh_Placeof_Receipt, ddh_Final_Destination, ddh_Net_Weight, ddh_Gross_Weight, ddh_Total_Packages, ddh_Chargeable_Weight, ddh_Freight_Charges, ddh_Delivery_Terms, ddh_guid, ddh_Nature_Quantity_Goods, ddh_AgentIATA_Code, ddh_Rate_Class, ddh_CommodityItemNo, ddh_Accounting_Information, ddh_DeclaredValue_Charge, ddh_Issuing_Carrier_AgentName, ddh_Remarks, ddh_Handling_Information, ddh_Declared_ValueCustoms, ddh_Amount_Insurance, ddh_weight_uom, ddh_total_volume, ddh_volume_uom, ddh_senders_ref_no, ddh_receivers_ref_no, ddh_amend_version_no, ddh_type_of_doc, ddh_registry_no, ddh_cc_charges_destn_currency, ddh_destination_currency, ddh_currency_conver_rate, ddh_charges_code, ddh_reason_amendment, ddh_reason_description, ddh_amendment_remarks, ddh_other_charges, ddh_wtval_charges, ddh_dispatch_doc_dvry_status, etlcreateddatetime
    )
    SELECT
        ddh_ouinstance, ddh_dispatch_doc_no, ddh_dispatch_doc_type, ddh_dispatch_doc_mode, ddh_dispatch_doc_num_type, ddh_dispatch_doc_status, ddh_dispatch_doc_date, ddh_transport_mode, ddh_reference_doc_type, ddh_reference_doc_no, ddh_customer_id, ddh_cust_ref_no, ddh_consignor_id, ddh_consignee_id, ddh_ship_from_id, ddh_ship_to_id, ddh_declared_goods_value, ddh_currency, ddh_proforma, ddh_ship_agent_id, ddh_ship_agent_address_id, ddh_deliver_agent_id, ddh_deliver_agent_address_id, ddh_notify_party_id, ddh_notify_party_address_id, ddh_carrier_id, ddh_vessel_flight_rail_number, ddh_loading_or_departure_point, ddh_discharge_or_destination_point, ddh_arrival_date, ddh_departure_date, ddh_mbl_of_hbl, ddh_mawb_of_hawb, ddh_spl_instructions, ddh_additional_info, ddh_created_by, ddh_created_date, ddh_last_modified_by, ddh_lst_modified_date, ddh_timestamp, ddh_trip_log, ddh_location, ddh_billing_status, ddh_revenue, ddh_autocreateCN_YN, ddh_pkup_recpt_no, ddh_dlvy_recpt_no, ddh_service_type, ddh_subservice_type, ddtd_pick_up_date_time_con, ddtd_delivery_date_time_con, ddh_Agent, ddh_Forwarding_Agent, ddh_Cargo_Description, ddh_Marks_numbers, ddh_Placeof_Receipt, ddh_Final_Destination, ddh_Net_Weight, ddh_Gross_Weight, ddh_Total_Packages, ddh_Chargeable_Weight, ddh_Freight_Charges, ddh_Delivery_Terms, ddh_guid, ddh_Nature_Quantity_Goods, ddh_AgentIATA_Code, ddh_Rate_Class, ddh_CommodityItemNo, ddh_Accounting_Information, ddh_DeclaredValue_Charge, ddh_Issuing_Carrier_AgentName, ddh_Remarks, ddh_Handling_Information, ddh_Declared_ValueCustoms, ddh_Amount_Insurance, ddh_weight_uom, ddh_total_volume, ddh_volume_uom, ddh_senders_ref_no, ddh_receivers_ref_no, ddh_amend_version_no, ddh_type_of_doc, ddh_registry_no, ddh_cc_charges_destn_currency, ddh_destination_currency, ddh_currency_conver_rate, ddh_charges_code, ddh_reason_amendment, ddh_reason_description, ddh_amendment_remarks, ddh_other_charges, ddh_wtval_charges, ddh_dispatch_doc_dvry_status, etlcreateddatetime
    FROM stg.stg_tms_ddh_dispatch_document_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchdocheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchdocsignature(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchdocsignature(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_dds_dispatch_document_signature;

    UPDATE dwh.F_DispatchDocSignature t
    SET
		
		ddh_key			  		 	= fh.ddh_key,
        dds_name                    = s.dds_name,
        dds_signature               = s.dds_signature,
        dds_remarks                 = s.dds_remarks,
        dds_feedback                = s.dds_feedback,
        dds_signature_status        = s.dds_signature_status,
        dds_id_type                 = s.dds_id_type,
        dds_id_no                   = s.dds_id_no,
        dds_designation             = s.dds_designation,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_tms_dds_dispatch_document_signature s
	INNER JOIN 	dwh.f_dispatchdocheader fh 
			ON  s.dds_ouinstance 			= fh.ddh_ouinstance
            AND S.dds_dispatch_doc_no       = fh.ddh_dispatch_doc_no
    WHERE 		t.dds_ouinstance 			= s.dds_ouinstance
    AND 		t.dds_Trip_id				= s.dds_Trip_id
    AND 		t.dds_seqno					= s.dds_seqno
    AND 		t.dds_dispatch_doc_no		= s.dds_dispatch_doc_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DispatchDocSignature
    (
		ddh_key,
        dds_ouinstance, dds_Trip_id, dds_seqno, dds_dispatch_doc_no, dds_name, dds_signature, dds_remarks, dds_feedback, dds_signature_status, dds_id_type, dds_id_no, dds_designation, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		fh.ddh_key,
        s.dds_ouinstance, s.dds_Trip_id, s.dds_seqno, s.dds_dispatch_doc_no, s.dds_name, s.dds_signature, s.dds_remarks, s.dds_feedback, s.dds_signature_status, s.dds_id_type, s.dds_id_no, s.dds_designation, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_dds_dispatch_document_signature s
	INNER JOIN 	dwh.f_dispatchdocheader fh 
			ON  s.dds_ouinstance 			= fh.ddh_ouinstance
            AND S.dds_dispatch_doc_no       = fh.ddh_dispatch_doc_no
    LEFT JOIN dwh.F_DispatchDocSignature t
    ON 			s.dds_ouinstance 			= t.dds_ouinstance
    AND 		s.dds_Trip_id 				= t.dds_Trip_id
    AND 		s.dds_seqno 				= t.dds_seqno
    AND 		s.dds_dispatch_doc_no 		= t.dds_dispatch_doc_no
    WHERE t.dds_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_dds_dispatch_document_signature
    (
        dds_ouinstance, dds_Trip_id, dds_seqno, dds_dispatch_doc_no, dds_name, dds_signature, dds_remarks, dds_feedback, dds_signature_status, dds_id_type, dds_id_no, dds_designation, etlcreateddatetime
    )
    SELECT
        dds_ouinstance, dds_Trip_id, dds_seqno, dds_dispatch_doc_no, dds_name, dds_signature, dds_remarks, dds_feedback, dds_signature_status, dds_id_type, dds_id_no, dds_designation, etlcreateddatetime
    FROM stg.stg_tms_dds_dispatch_document_signature;
    END IF;
	
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchdocsignature(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchdocthuchilddetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchdocthuchilddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
		IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_child_dtl;

    UPDATE dwh.F_DispatchDocTHUChildDetail t
    SET
		ddtd_key							  = fh.ddtd_key,	
        ddtcd_thu_child_id                    = s.ddtcd_thu_child_id,
        ddtcd_thu_child_serial_no             = s.ddtcd_thu_child_serial_no,
        ddtcd_thu_child_qty                   = s.ddtcd_thu_child_qty,
        ddtcd_created_by                      = s.ddtcd_created_by,
        ddtcd_created_date                    = s.ddtcd_created_date,
        ddtcd_last_modified_by                = s.ddtcd_last_modified_by,
        ddtcd_lst_modified_date               = s.ddtcd_lst_modified_date,
        ddtcd_timestamp                       = s.ddtcd_timestamp,
        ddtcd_main_thu_child_serial_no        = s.ddtcd_main_thu_child_serial_no,
        etlactiveind                          = 1,
        etljobname                            = p_etljobname,
        envsourcecd                           = p_envsourcecd,
        datasourcecd                          = p_datasourcecd,
        etlupdatedatetime                     = NOW()
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_child_dtl s
	INNER JOIN 	dwh.f_dispatchdocthudetail fh 
			ON  s.ddtcd_ouinstance 			= fh.ddtd_ouinstance
            AND s.ddtcd_dispatch_doc_no     = fh.ddtd_dispatch_doc_no
			And s.ddtcd_thu_line_no			= fh.ddtd_thu_line_no
    WHERE 		t.ddtcd_ouinstance 			= s.ddtcd_ouinstance
    AND 		t.ddtcd_dispatch_doc_no 	= s.ddtcd_dispatch_doc_no
    AND 		t.ddtcd_thu_line_no 		= s.ddtcd_thu_line_no
    AND 		t.ddtcd_thu_child_line_no 	= s.ddtcd_thu_child_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DispatchDocTHUChildDetail
    (
		ddtd_key,
        ddtcd_ouinstance, ddtcd_dispatch_doc_no, ddtcd_thu_line_no, ddtcd_thu_child_line_no, ddtcd_thu_child_id, ddtcd_thu_child_serial_no, ddtcd_thu_child_qty, ddtcd_created_by, ddtcd_created_date, ddtcd_last_modified_by, ddtcd_lst_modified_date, ddtcd_timestamp, ddtcd_main_thu_child_serial_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		fh.ddtd_key,
        s.ddtcd_ouinstance, s.ddtcd_dispatch_doc_no, s.ddtcd_thu_line_no, s.ddtcd_thu_child_line_no, s.ddtcd_thu_child_id, s.ddtcd_thu_child_serial_no, s.ddtcd_thu_child_qty, s.ddtcd_created_by, s.ddtcd_created_date, s.ddtcd_last_modified_by, s.ddtcd_lst_modified_date, s.ddtcd_timestamp, s.ddtcd_main_thu_child_serial_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_child_dtl s
	INNER JOIN 	dwh.f_dispatchdocthudetail fh 
			ON  s.ddtcd_ouinstance 			= fh.ddtd_ouinstance
            AND S.ddtcd_dispatch_doc_no     = fh.ddtd_dispatch_doc_no
			And s.ddtcd_thu_line_no			= fh.ddtd_thu_line_no
    LEFT JOIN dwh.F_DispatchDocTHUChildDetail t
    ON 			s.ddtcd_ouinstance 			= t.ddtcd_ouinstance
    AND 		s.ddtcd_dispatch_doc_no 	= t.ddtcd_dispatch_doc_no
    AND 		s.ddtcd_thu_line_no 		= t.ddtcd_thu_line_no
    AND 		s.ddtcd_thu_child_line_no 	= t.ddtcd_thu_child_line_no
    WHERE t.ddtcd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_ddtcd_dispatch_document_thu_child_dtl
    (
        ddtcd_ouinstance, ddtcd_dispatch_doc_no, ddtcd_thu_line_no, ddtcd_thu_child_line_no, ddtcd_thu_child_id, ddtcd_thu_child_serial_no, ddtcd_thu_child_qty, ddtcd_created_by, ddtcd_created_date, ddtcd_last_modified_by, ddtcd_lst_modified_date, ddtcd_timestamp, ddtcd_main_thu_child_serial_no, etlcreateddatetime
    )
    SELECT
        ddtcd_ouinstance, ddtcd_dispatch_doc_no, ddtcd_thu_line_no, ddtcd_thu_child_line_no, ddtcd_thu_child_id, ddtcd_thu_child_serial_no, ddtcd_thu_child_qty, ddtcd_created_by, ddtcd_created_date, ddtcd_last_modified_by, ddtcd_lst_modified_date, ddtcd_timestamp, ddtcd_main_thu_child_serial_no, etlcreateddatetime
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_child_dtl;
    END IF;
	
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchdocthuchilddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchdocthudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchdocthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_ddtd_dispatch_document_thu_dtl;

    UPDATE dwh.F_DispatchDocThuDetail t
    SET
		ddh_key			  			  	= fh.ddh_key,
        ddh_thu_key	  					= COALESCE(th.thu_key,-1),
        ddtd_ouinstance                = s.ddtd_ouinstance,
        ddtd_dispatch_doc_no           = s.ddtd_dispatch_doc_no,
        ddtd_thu_line_no               = s.ddtd_thu_line_no,
        ddtd_thu_id                    = s.ddtd_thu_id,
        ddtd_thu_qty                   = s.ddtd_thu_qty,
        ddtd_class_stores              = s.ddtd_class_stores,
        ddtd_thu_desc                  = s.ddtd_thu_desc,
        ddtd_thu_vol                   = s.ddtd_thu_vol,
        ddtd_thu_vol_uom               = s.ddtd_thu_vol_uom,
        ddtd_thu_weight                = s.ddtd_thu_weight,
        ddtd_thu_weight_uom            = s.ddtd_thu_weight_uom,
        ddtd_created_by                = s.ddtd_created_by,
        ddtd_created_date              = s.ddtd_created_date,
        ddtd_last_modified_by          = s.ddtd_last_modified_by,
        ddtd_lst_modified_date         = s.ddtd_lst_modified_date,
        ddtd_timestamp                 = s.ddtd_timestamp,
        ddtd_transfer_type             = s.ddtd_transfer_type,
        ddtd_remarks                   = s.ddtd_remarks,
        ddtd_vendor_thu_id             = s.ddtd_vendor_thu_id,
        ddtd_transfer_doc_no           = s.ddtd_transfer_doc_no,
        ddtd_vendor_ac_no              = s.ddtd_vendor_ac_no,
        ddtd_damaged_qty               = s.ddtd_damaged_qty,
        ddtd_billing_status            = s.ddtd_billing_status,
        ddtd_no_of_pallet_space        = s.ddtd_no_of_pallet_space,
        ddtd_height                    = s.ddtd_height,
        ddtd_Commodityid               = s.ddtd_Commodityid,
        ddtd_Commodity_QTY             = s.ddtd_Commodity_QTY,
        ddtd_Qty_UOM                   = s.ddtd_Qty_UOM,
        ddtd_thu_qty_uom               = s.ddtd_thu_qty_uom,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_tms_ddtd_dispatch_document_thu_dtl s
	INNER JOIN 	dwh.f_dispatchdocheader fh 
			ON  s.ddtd_ouinstance 			= fh.ddh_ouinstance
            AND s.ddtd_dispatch_doc_no      = fh.ddh_dispatch_doc_no
	LEFT JOIN dwh.d_thu th 			
-- 			ON 	s.ddtd_thu_id 			    = th.thu_id
-- 			AND s.ddtd_ouinstance        	= th.thu_ou
		    ON 	s.ddtd_ouinstance        	= th.thu_ou
			AND s.ddtd_thu_id 			    = th.thu_id
    WHERE 		t.ddtd_ouinstance 			= s.ddtd_ouinstance
    AND 		t.ddtd_dispatch_doc_no 		= s.ddtd_dispatch_doc_no
    AND 		t.ddtd_thu_line_no 			= s.ddtd_thu_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DispatchDocThuDetail
    (
		ddh_key, ddh_thu_key,
        ddtd_ouinstance, ddtd_dispatch_doc_no, ddtd_thu_line_no, ddtd_thu_id, ddtd_thu_qty, ddtd_class_stores, ddtd_thu_desc, ddtd_thu_vol, ddtd_thu_vol_uom, ddtd_thu_weight, ddtd_thu_weight_uom, ddtd_created_by, ddtd_created_date, ddtd_last_modified_by, ddtd_lst_modified_date, ddtd_timestamp, ddtd_transfer_type, ddtd_remarks, ddtd_vendor_thu_id, ddtd_transfer_doc_no, ddtd_vendor_ac_no, ddtd_damaged_qty, ddtd_billing_status, ddtd_no_of_pallet_space, ddtd_height, ddtd_Commodityid, ddtd_Commodity_QTY, ddtd_Qty_UOM, ddtd_thu_qty_uom, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		fh.ddh_key, COALESCE(th.thu_key,-1),
        s.ddtd_ouinstance, s.ddtd_dispatch_doc_no, s.ddtd_thu_line_no, s.ddtd_thu_id, s.ddtd_thu_qty, s.ddtd_class_stores, s.ddtd_thu_desc, s.ddtd_thu_vol, s.ddtd_thu_vol_uom, s.ddtd_thu_weight, s.ddtd_thu_weight_uom, s.ddtd_created_by, s.ddtd_created_date, s.ddtd_last_modified_by, s.ddtd_lst_modified_date, s.ddtd_timestamp, s.ddtd_transfer_type, s.ddtd_remarks, s.ddtd_vendor_thu_id, s.ddtd_transfer_doc_no, s.ddtd_vendor_ac_no, s.ddtd_damaged_qty, s.ddtd_billing_status, s.ddtd_no_of_pallet_space, s.ddtd_height, s.ddtd_Commodityid, s.ddtd_Commodity_QTY, s.ddtd_Qty_UOM, s.ddtd_thu_qty_uom, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_ddtd_dispatch_document_thu_dtl s
	INNER JOIN 	dwh.f_dispatchdocheader fh 
			ON  s.ddtd_ouinstance 			= fh.ddh_ouinstance
            AND s.ddtd_dispatch_doc_no      = fh.ddh_dispatch_doc_no
	LEFT JOIN dwh.d_thu th 			
-- 			ON 	s.ddtd_thu_id 			    = th.thu_id
-- 			AND s.ddtd_ouinstance        	= th.thu_ou
			ON 	s.ddtd_ouinstance        	= th.thu_ou
			AND s.ddtd_thu_id 			    = th.thu_id
    LEFT JOIN dwh.F_DispatchDocThuDetail t
    ON 			s.ddtd_ouinstance 			= t.ddtd_ouinstance
    AND 		s.ddtd_dispatch_doc_no 		= t.ddtd_dispatch_doc_no
    AND 		s.ddtd_thu_line_no 			= t.ddtd_thu_line_no
    WHERE t.ddtd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_ddtd_dispatch_document_thu_dtl
    (
        ddtd_ouinstance, ddtd_dispatch_doc_no, ddtd_thu_line_no, ddtd_thu_id, ddtd_thu_qty, ddtd_class_stores, ddtd_thu_desc, ddtd_thu_vol, ddtd_thu_vol_uom, ddtd_thu_weight, ddtd_thu_weight_uom, ddtd_created_by, ddtd_created_date, ddtd_last_modified_by, ddtd_lst_modified_date, ddtd_timestamp, ddtd_transfer_type, ddtd_remarks, ddtd_vendor_thu_id, ddtd_transfer_doc_no, ddtd_vendor_ac_no, ddtd_damaged_qty, ddtd_billing_status, ddtd_no_of_pallet_space, ddtd_height, ddtd_Commodityid, ddtd_Commodity_QTY, ddtd_Qty_UOM, ddtd_thu_qty_uom, etlcreateddatetime
    )
    SELECT
        ddtd_ouinstance, ddtd_dispatch_doc_no, ddtd_thu_line_no, ddtd_thu_id, ddtd_thu_qty, ddtd_class_stores, ddtd_thu_desc, ddtd_thu_vol, ddtd_thu_vol_uom, ddtd_thu_weight, ddtd_thu_weight_uom, ddtd_created_by, ddtd_created_date, ddtd_last_modified_by, ddtd_lst_modified_date, ddtd_timestamp, ddtd_transfer_type, ddtd_remarks, ddtd_vendor_thu_id, ddtd_transfer_doc_no, ddtd_vendor_ac_no, ddtd_damaged_qty, ddtd_billing_status, ddtd_no_of_pallet_space, ddtd_height, ddtd_Commodityid, ddtd_Commodity_QTY, ddtd_Qty_UOM, ddtd_thu_qty_uom, etlcreateddatetime
    FROM stg.stg_tms_ddtd_dispatch_document_thu_dtl;
    END IF;
	
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchdocthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchdocthuserialdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchdocthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_serial_dtl;

    UPDATE dwh.F_DispatchDocThuSerialDetail t
    SET
		ddtd_key			  			  = fh.ddtd_key,
		ddtsd_ouinstance                = s.ddtsd_ouinstance,
        ddtsd_dispatch_doc_no             = s.ddtsd_dispatch_doc_no,
        ddtsd_thu_line_no                 = s.ddtsd_thu_line_no,
        ddtsd_thu_serial_line_no          = s.ddtsd_thu_serial_line_no,
        ddtsd_thu_serial_no               = s.ddtsd_thu_serial_no,
        ddtsd_thu_seal_no                 = s.ddtsd_thu_seal_no,
        ddtsd_UN_code                     = s.ddtsd_UN_code,
        ddtsd_class_code                  = s.ddtsd_class_code,
        ddtsd_hs_code                     = s.ddtsd_hs_code,
        ddtsd_hazmat_code                 = s.ddtsd_hazmat_code,
        ddtsd_HAC_code                    = s.ddtsd_HAC_code,
        ddtsd_length                      = s.ddtsd_length,
        ddtsd_breadth                     = s.ddtsd_breadth,
        ddtsd_height                      = s.ddtsd_height,
        ddtsd_lbh_uom                     = s.ddtsd_lbh_uom,
        ddtsd_gross_weight                = s.ddtsd_gross_weight,
        ddtsd_gross_weight_uom            = s.ddtsd_gross_weight_uom,
        ddtsd_created_by                  = s.ddtsd_created_by,
        ddtsd_created_date                = s.ddtsd_created_date,
        ddtsd_last_modified_by            = s.ddtsd_last_modified_by,
        ddtsd_lst_modified_date           = s.ddtsd_lst_modified_date,
        ddtsd_timestamp                   = s.ddtsd_timestamp,
        ddtsd_AltQty                      = s.ddtsd_AltQty,
        ddtsd_AltQty_Uom                  = s.ddtsd_AltQty_Uom,
        ddtsd_Customs_SealNo              = s.ddtsd_Customs_SealNo,
        ddtsd_Container_Type_Specs        = s.ddtsd_Container_Type_Specs,
        ddtsd_Container_Size_Specs        = s.ddtsd_Container_Size_Specs,
        ddtsd_customer_serial_no          = s.ddtsd_customer_serial_no,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_serial_dtl s
	INNER JOIN 	dwh.f_dispatchdocthudetail fh 
			ON  s.ddtsd_ouinstance 			= fh.ddtd_ouinstance
            AND S.ddtsd_dispatch_doc_no      = fh.ddtd_dispatch_doc_no
			And s.ddtsd_thu_line_no			= fh.ddtd_thu_line_no
    WHERE 		t.ddtsd_ouinstance			= s.ddtsd_ouinstance
	AND 		t.ddtsd_dispatch_doc_no 	= s.ddtsd_dispatch_doc_no
    AND 		t.ddtsd_thu_line_no 		= s.ddtsd_thu_line_no
    AND 		t.ddtsd_thu_serial_line_no 	= s.ddtsd_thu_serial_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DispatchDocThuSerialDetail
    (
        ddtd_key,
        ddtsd_ouinstance,ddtsd_dispatch_doc_no, ddtsd_thu_line_no, ddtsd_thu_serial_line_no, ddtsd_thu_serial_no, ddtsd_thu_seal_no, ddtsd_UN_code, ddtsd_class_code, ddtsd_hs_code, ddtsd_hazmat_code, ddtsd_HAC_code, ddtsd_length, ddtsd_breadth, ddtsd_height, ddtsd_lbh_uom, ddtsd_gross_weight, ddtsd_gross_weight_uom, ddtsd_created_by, ddtsd_created_date, ddtsd_last_modified_by, ddtsd_lst_modified_date, ddtsd_timestamp, ddtsd_AltQty, ddtsd_AltQty_Uom, ddtsd_Customs_SealNo, ddtsd_Container_Type_Specs, ddtsd_Container_Size_Specs, ddtsd_customer_serial_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.ddtd_key,
        s.ddtsd_ouinstance,s.ddtsd_dispatch_doc_no, s.ddtsd_thu_line_no, s.ddtsd_thu_serial_line_no, s.ddtsd_thu_serial_no, s.ddtsd_thu_seal_no, s.ddtsd_UN_code, s.ddtsd_class_code, s.ddtsd_hs_code, s.ddtsd_hazmat_code, s.ddtsd_HAC_code, s.ddtsd_length, s.ddtsd_breadth, s.ddtsd_height, s.ddtsd_lbh_uom, s.ddtsd_gross_weight, s.ddtsd_gross_weight_uom, s.ddtsd_created_by, s.ddtsd_created_date, s.ddtsd_last_modified_by, s.ddtsd_lst_modified_date, s.ddtsd_timestamp, s.ddtsd_AltQty, s.ddtsd_AltQty_Uom, s.ddtsd_Customs_SealNo, s.ddtsd_Container_Type_Specs, s.ddtsd_Container_Size_Specs, s.ddtsd_customer_serial_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_serial_dtl s
	INNER JOIN 	dwh.f_dispatchdocthudetail fh 
			ON  s.ddtsd_ouinstance 			= fh.ddtd_ouinstance
            AND S.ddtsd_dispatch_doc_no      = fh.ddtd_dispatch_doc_no
			And s.ddtsd_thu_line_no			= fh.ddtd_thu_line_no
    LEFT JOIN dwh.F_DispatchDocThuSerialDetail t
    ON  s.ddtsd_ouinstance			= t.ddtsd_ouinstance
	AND s.ddtsd_dispatch_doc_no = t.ddtsd_dispatch_doc_no
    AND s.ddtsd_thu_line_no = t.ddtsd_thu_line_no
    AND s.ddtsd_thu_serial_line_no = t.ddtsd_thu_serial_line_no
    WHERE t.ddtsd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_ddtcd_dispatch_document_thu_serial_dtl
    (
        ddtsd_ouinstance,ddtsd_dispatch_doc_no, ddtsd_thu_line_no, ddtsd_thu_serial_line_no, ddtsd_thu_serial_no, ddtsd_thu_seal_no, ddtsd_UN_code, ddtsd_class_code, ddtsd_hs_code, ddtsd_hazmat_code, ddtsd_HAC_code, ddtsd_length, ddtsd_breadth, ddtsd_height, ddtsd_lbh_uom, ddtsd_gross_weight, ddtsd_gross_weight_uom, ddtsd_created_by, ddtsd_created_date, ddtsd_last_modified_by, ddtsd_lst_modified_date, ddtsd_timestamp, ddtsd_AltQty, ddtsd_AltQty_Uom, ddtsd_Customs_SealNo, ddtsd_Container_Type_Specs, ddtsd_Container_Size_Specs, ddtsd_customer_serial_no, etlcreateddatetime
    )
    SELECT
        ddtsd_ouinstance,ddtsd_dispatch_doc_no, ddtsd_thu_line_no, ddtsd_thu_serial_line_no, ddtsd_thu_serial_no, ddtsd_thu_seal_no, ddtsd_UN_code, ddtsd_class_code, ddtsd_hs_code, ddtsd_hazmat_code, ddtsd_HAC_code, ddtsd_length, ddtsd_breadth, ddtsd_height, ddtsd_lbh_uom, ddtsd_gross_weight, ddtsd_gross_weight_uom, ddtsd_created_by, ddtsd_created_date, ddtsd_last_modified_by, ddtsd_lst_modified_date, ddtsd_timestamp, ddtsd_AltQty, ddtsd_AltQty_Uom, ddtsd_Customs_SealNo, ddtsd_Container_Type_Specs, ddtsd_Container_Size_Specs, ddtsd_customer_serial_no, etlcreateddatetime
    FROM stg.stg_tms_ddtcd_dispatch_document_thu_serial_dtl;
    END IF;

    ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchdocthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchdocthuskudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchdocthuskudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_ddtsd_dispatch_document_thu_sku_dtl;

    UPDATE dwh.F_DispatchDocThuSkuDetail t
    SET
		ddtd_key			  		 = fh.ddtd_key,
        ddtsd_serial_no              = s.ddtsd_serial_no,
        ddtsd_child_thu_id           = s.ddtsd_child_thu_id,
        ddtsd_child_serial_no        = s.ddtsd_child_serial_no,
        ddtsd_sku_line_no            = s.ddtsd_sku_line_no,
        ddtsd_sku_id                 = s.ddtsd_sku_id,
        ddtsd_sku_rate               = s.ddtsd_sku_rate,
        ddtsd_sku_quantity           = s.ddtsd_sku_quantity,
        ddtsd_sku_value              = s.ddtsd_sku_value,
        ddtsd_sku_batch_id           = s.ddtsd_sku_batch_id,
        ddtsd_sku_mfg_date           = s.ddtsd_sku_mfg_date,
        ddtsd_sku_expiry_date        = s.ddtsd_sku_expiry_date,
        ddtsd_created_by             = s.ddtsd_created_by,
        ddtsd_created_date           = s.ddtsd_created_date,
        ddtsd_modified_by            = s.ddtsd_modified_by,
        ddtsd_modified_date          = s.ddtsd_modified_date,
        ddtsd_timestamp              = s.ddtsd_timestamp,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_tms_ddtsd_dispatch_document_thu_sku_dtl s
	INNER JOIN 	dwh.f_dispatchdocthudetail fh 
			ON  s.ddtsd_ou 			        = fh.ddtd_ouinstance
            AND S.ddtsd_dispatch_doc_no     = fh.ddtd_dispatch_doc_no
			And s.ddtsd_thu_line_no			= fh.ddtd_thu_line_no
    WHERE 		t.ddtsd_ou 					= s.ddtsd_ou
    AND 		t.ddtsd_dispatch_doc_no 	= s.ddtsd_dispatch_doc_no
    AND 		t.ddtsd_thu_line_no 		= s.ddtsd_thu_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DispatchDocThuSkuDetail
    (
		ddtd_key,
        ddtsd_ou, ddtsd_dispatch_doc_no, ddtsd_thu_line_no, ddtsd_serial_no, ddtsd_child_thu_id, ddtsd_child_serial_no, ddtsd_sku_line_no, ddtsd_sku_id, ddtsd_sku_rate, ddtsd_sku_quantity, ddtsd_sku_value, ddtsd_sku_batch_id, ddtsd_sku_mfg_date, ddtsd_sku_expiry_date, ddtsd_created_by, ddtsd_created_date, ddtsd_modified_by, ddtsd_modified_date, ddtsd_timestamp, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		fh.ddtd_key,
        s.ddtsd_ou, s.ddtsd_dispatch_doc_no, s.ddtsd_thu_line_no, s.ddtsd_serial_no, s.ddtsd_child_thu_id, s.ddtsd_child_serial_no, s.ddtsd_sku_line_no, s.ddtsd_sku_id, s.ddtsd_sku_rate, s.ddtsd_sku_quantity, s.ddtsd_sku_value, s.ddtsd_sku_batch_id, s.ddtsd_sku_mfg_date, s.ddtsd_sku_expiry_date, s.ddtsd_created_by, s.ddtsd_created_date, s.ddtsd_modified_by, s.ddtsd_modified_date, s.ddtsd_timestamp, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_ddtsd_dispatch_document_thu_sku_dtl s
	INNER JOIN 	dwh.f_dispatchdocthudetail fh 
			ON  s.ddtsd_ou 			        = fh.ddtd_ouinstance
            AND S.ddtsd_dispatch_doc_no     = fh.ddtd_dispatch_doc_no
			And s.ddtsd_thu_line_no			= fh.ddtd_thu_line_no
    LEFT JOIN dwh.F_DispatchDocThuSkuDetail t
    ON 			s.ddtsd_ou 					= t.ddtsd_ou
    AND 		s.ddtsd_dispatch_doc_no 	= t.ddtsd_dispatch_doc_no
    AND 		s.ddtsd_thu_line_no 		= t.ddtsd_thu_line_no
    WHERE t.ddtsd_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_ddtsd_dispatch_document_thu_sku_dtl
    (
        ddtsd_ou, ddtsd_dispatch_doc_no, ddtsd_thu_line_no, ddtsd_serial_no, ddtsd_child_thu_id, ddtsd_child_serial_no, ddtsd_sku_line_no, ddtsd_sku_id, ddtsd_sku_rate, ddtsd_sku_quantity, ddtsd_sku_value, ddtsd_sku_batch_id, ddtsd_sku_mfg_date, ddtsd_sku_expiry_date, ddtsd_created_by, ddtsd_created_date, ddtsd_modified_by, ddtsd_modified_date, ddtsd_timestamp, etlcreateddatetime
    )
    SELECT
        ddtsd_ou, ddtsd_dispatch_doc_no, ddtsd_thu_line_no, ddtsd_serial_no, ddtsd_child_thu_id, ddtsd_child_serial_no, ddtsd_sku_line_no, ddtsd_sku_id, ddtsd_sku_rate, ddtsd_sku_quantity, ddtsd_sku_value, ddtsd_sku_batch_id, ddtsd_sku_mfg_date, ddtsd_sku_expiry_date, ddtsd_created_by, ddtsd_created_date, ddtsd_modified_by, ddtsd_modified_date, ddtsd_timestamp, etlcreateddatetime
    FROM stg.stg_tms_ddtsd_dispatch_document_thu_sku_dtl;
    END IF;

     ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchdocthuskudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_dispatch_hdr;

    UPDATE dwh.F_DispatchHeader t
    SET
		dispatch_hdr_loc_key			= COALESCE(l.loc_key,-1),
		dispatch_hdr_veh_key			= COALESCE(v.veh_key,-1),	
        dispatch_ld_sheet_date 			= s.wms_dispatch_ld_sheet_date,
        dispatch_ld_sheet_status 		= s.wms_dispatch_ld_sheet_status,
        dispatch_staging_id 			= s.wms_dispatch_staging_id,
        dispatch_lsp 					= s.wms_dispatch_lsp,
        dispatch_source_stage 			= s.wms_dispatch_source_stage,
        dispatch_source_docno 			= s.wms_dispatch_source_docno,
        dispatch_created_by 			= s.wms_dispatch_created_by,
        dispatch_created_date 			= s.wms_dispatch_created_date,
        dispatch_modified_by 			= s.wms_dispatch_modified_by,
        dispatch_modified_date 			= s.wms_dispatch_modified_date,
        dispatch_timestamp 				= s.wms_dispatch_timestamp,
        dispatch_booking_req_no 		= s.wms_dispatch_booking_req_no,
        pack_disp_urgent 				= s.wms_pack_disp_urgent,
        dispatch_doc_code 				= s.wms_dispatch_doc_code,
        dispatch_vehicle_code 			= s.wms_dispatch_vehicle_code,
        dispatch_reason_code 			= s.wms_dispatch_reason_code,
        etlactiveind 					= 1,
        etljobname 						= p_etljobname,
        envsourcecd 					= p_envsourcecd ,
        datasourcecd 					= p_datasourcecd ,
        etlupdatedatetime 				= NOW()    
    FROM stg.stg_wms_dispatch_hdr s
	LEFT JOIN dwh.d_location l
		ON  s.wms_dispatch_loc_code 		= l.loc_code
		AND s.wms_dispatch_ld_sheet_ou 		= l.loc_ou
	LEFT JOIN dwh.d_vehicle v
		ON  s.wms_dispatch_vehicle_code 	= v.veh_id
		AND s.wms_dispatch_ld_sheet_ou 		= v.veh_ou
	WHERE   t.dispatch_loc_code 			= s.wms_dispatch_loc_code
		AND t.dispatch_ld_sheet_no 			= s.wms_dispatch_ld_sheet_no
		AND t.dispatch_ld_sheet_ou 			= s.wms_dispatch_ld_sheet_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DispatchHeader 
    (
        dispatch_hdr_loc_key			, dispatch_hdr_veh_key			, dispatch_loc_code					, dispatch_ld_sheet_no, 
		dispatch_ld_sheet_ou			, dispatch_ld_sheet_date		, dispatch_ld_sheet_status			, dispatch_staging_id, 
		dispatch_lsp					, dispatch_source_stage			, dispatch_source_docno				, dispatch_created_by, 
		dispatch_created_date			, dispatch_modified_by			, dispatch_modified_date			, dispatch_timestamp, 
		dispatch_booking_req_no			, pack_disp_urgent				, dispatch_doc_code					, dispatch_vehicle_code, 
		dispatch_reason_code			, etlactiveind					, etljobname						, envsourcecd, 
		datasourcecd					, etlcreatedatetime	
    )	
		
    SELECT	
		COALESCE(l.loc_key,-1)			, COALESCE(v.veh_key,-1)		, s.wms_dispatch_loc_code			, s.wms_dispatch_ld_sheet_no, 
		s.wms_dispatch_ld_sheet_ou		, s.wms_dispatch_ld_sheet_date	, s.wms_dispatch_ld_sheet_status	, s.wms_dispatch_staging_id, 
		s.wms_dispatch_lsp				, s.wms_dispatch_source_stage	, s.wms_dispatch_source_docno		, s.wms_dispatch_created_by, 
		s.wms_dispatch_created_date		, s.wms_dispatch_modified_by	, s.wms_dispatch_modified_date		, s.wms_dispatch_timestamp, 
		s.wms_dispatch_booking_req_no	, s.wms_pack_disp_urgent		, s.wms_dispatch_doc_code			, s.wms_dispatch_vehicle_code, 
		s.wms_dispatch_reason_code		, 1								, p_etljobname						, p_envsourcecd, 
		p_datasourcecd					, NOW()
    FROM stg.stg_wms_dispatch_hdr s
	LEFT JOIN dwh.d_location l
		ON  s.wms_dispatch_loc_code 		= l.loc_code
		AND s.wms_dispatch_ld_sheet_ou 		= l.loc_ou
	LEFT JOIN dwh.d_vehicle v
		ON  s.wms_dispatch_vehicle_code 	= v.veh_id
		AND s.wms_dispatch_ld_sheet_ou 		= v.veh_ou	
    LEFT JOIN dwh.F_DispatchHeader t
		ON  s.wms_dispatch_loc_code 		= t.dispatch_loc_code
		AND s.wms_dispatch_ld_sheet_no 		= t.dispatch_ld_sheet_no
		AND s.wms_dispatch_ld_sheet_ou 		= t.dispatch_ld_sheet_ou
    WHERE t.dispatch_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_dispatch_hdr
    (   
        wms_dispatch_loc_code			, wms_dispatch_ld_sheet_no		, wms_dispatch_ld_sheet_ou	, wms_dispatch_ld_sheet_date, 
		wms_dispatch_ld_sheet_status	, wms_dispatch_staging_id		, wms_dispatch_lsp			, wms_dispatch_source_stage, 
		wms_dispatch_source_docno		, wms_dispatch_created_by		, wms_dispatch_created_date	, wms_dispatch_modified_by, 
		wms_dispatch_modified_date		, wms_dispatch_timestamp		, wms_dispatch_userdefined1	, wms_dispatch_userdefined2, 
		wms_dispatch_userdefined3		, wms_dispatch_booking_req_no	, wms_pack_disp_urgent		, wms_dispatch_doc_code, 
		wms_dispatch_vehicle_code		, wms_dispatch_reason_code		,etlcreateddatetime
    )
    SELECT 
        wms_dispatch_loc_code			, wms_dispatch_ld_sheet_no		, wms_dispatch_ld_sheet_ou	, wms_dispatch_ld_sheet_date, 
		wms_dispatch_ld_sheet_status	, wms_dispatch_staging_id		, wms_dispatch_lsp			, wms_dispatch_source_stage, 
		wms_dispatch_source_docno		, wms_dispatch_created_by		, wms_dispatch_created_date	, wms_dispatch_modified_by, 
		wms_dispatch_modified_date		, wms_dispatch_timestamp		, wms_dispatch_userdefined1	, wms_dispatch_userdefined2, 
		wms_dispatch_userdefined3		, wms_dispatch_booking_req_no	, wms_pack_disp_urgent		, wms_dispatch_doc_code, 
		wms_dispatch_vehicle_code		, wms_dispatch_reason_code		,etlcreateddatetime    
	FROM stg.stg_wms_dispatch_hdr;    
    END IF;

    EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
        
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_dispatchloaddetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_dispatchloaddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_disp_load_dtl;

    UPDATE dwh.f_dispatchloaddetail t
    SET
        disp_load_loc_key 			= COALESCE(l.loc_key,-1),
        disp_load_customer_key 		= COALESCE(c.customer_key,-1),
        disp_customer            	= s.wms_disp_customer,
        disp_profile             	= s.wms_disp_profile,
        disp_ship_mode           	= s.wms_disp_ship_mode,
        disp_urgent              	= s.wms_disp_urgent,
        disp_lsp                 	= s.wms_disp_lsp,
        disp_integ_tms           	= s.wms_disp_integ_tms,
        disp_status              	= s.wms_disp_status,
        disp_tms_location        	= s.wms_disp_tms_location,
        disp_dispatch_bay        	= s.wms_disp_dispatch_bay,
        disp_bkreq_status        	= s.wms_disp_bkreq_status,
        etlactiveind             	= 1,
        etljobname               	= p_etljobname,
        envsourcecd              	= p_envsourcecd,
        datasourcecd             	= p_datasourcecd,
        etlupdatedatetime        	= NOW()
    FROM stg.stg_wms_disp_load_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_disp_location 	= l.loc_code
		AND s.wms_disp_ou			= l.loc_ou
	LEFT JOIN dwh.d_customer c		
		ON  s.wms_disp_customer 	= c.customer_id
		AND s.wms_disp_ou			= c.customer_ou 
	WHERE t.disp_location 			= s.wms_disp_location
    AND t.disp_ou 					= s.wms_disp_ou
    AND t.disp_lineno 				= s.wms_disp_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_dispatchloaddetail
    (
        disp_load_loc_key		, disp_load_customer_key		, disp_location				, disp_ou, 
		disp_lineno				, disp_customer					, disp_profile				, disp_ship_mode, 
		disp_urgent				, disp_lsp						, disp_integ_tms			, disp_status, 
		disp_tms_location		, disp_dispatch_bay				, disp_bkreq_status			, etlactiveind, 
		etljobname				, envsourcecd					, datasourcecd				, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1)	, COALESCE(c.customer_key,-1)	, s.wms_disp_location		, s.wms_disp_ou, 
		s.wms_disp_lineno		, s.wms_disp_customer			, s.wms_disp_profile		, s.wms_disp_ship_mode, 
		s.wms_disp_urgent		, s.wms_disp_lsp				, s.wms_disp_integ_tms		, s.wms_disp_status, 
		s.wms_disp_tms_location	, s.wms_disp_dispatch_bay		, s.wms_disp_bkreq_status	, 1, 
		p_etljobname			, p_envsourcecd					, p_datasourcecd			, NOW()
    FROM stg.stg_wms_disp_load_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_disp_location 	= l.loc_code
		AND s.wms_disp_ou			= l.loc_ou
	LEFT JOIN dwh.d_customer c	
		ON  s.wms_disp_customer 	= c.customer_id
		AND s.wms_disp_ou			= c.customer_ou
    LEFT JOIN dwh.f_dispatchloaddetail t
    ON s.wms_disp_location = t.disp_location
    AND s.wms_disp_ou = t.disp_ou
    AND s.wms_disp_lineno = t.disp_lineno
    WHERE t.disp_location IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_disp_load_dtl
    (
        wms_disp_location		, wms_disp_ou			, wms_disp_lineno			, wms_disp_customer, 
		wms_disp_profile		, wms_disp_route		, wms_disp_geo				, wms_disp_consignee, 
		wms_disp_ship_point		, wms_disp_ship_mode	, wms_disp_urgent			, wms_disp_domestic, 
		wms_disp_lsp			, wms_disp_lsp_email	, wms_disp_customer_email	, wms_disp_integ_tms, 
		wms_disp_status			, wms_disp_tms_location	, wms_disp_geo_type			, wms_disp_dispatch_bay, 
		wms_disp_bkreq_status	, etlcreateddatetime
    )
    SELECT
        wms_disp_location		, wms_disp_ou			, wms_disp_lineno			, wms_disp_customer, 
		wms_disp_profile		, wms_disp_route		, wms_disp_geo				, wms_disp_consignee, 
		wms_disp_ship_point		, wms_disp_ship_mode	, wms_disp_urgent			, wms_disp_domestic, 
		wms_disp_lsp			, wms_disp_lsp_email	, wms_disp_customer_email	, wms_disp_integ_tms, 
		wms_disp_status			, wms_disp_tms_location	, wms_disp_geo_type			, wms_disp_dispatch_bay, 
		wms_disp_bkreq_status	, etlcreateddatetime
	FROM stg.stg_wms_disp_load_dtl;
    END IF;

    EXCEPTION
        WHEN others THEN
        GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_dispatchloaddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_divisionareadetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_divisionareadetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_div_prop_hdr;

    UPDATE dwh.F_DivisionAreaDetail t
    SET
        div_key                  = COALESCE(d.div_key,-1),
        div_length               = s.wms_div_length,
        div_breath               = s.wms_div_breath,
        div_height               = s.wms_div_height,
        div_uom                  = s.wms_div_uom,
        div_area_uom             = s.wms_div_area_uom,
        div_tot_area             = s.wms_div_tot_area,
        div_tot_stag_area        = s.wms_div_tot_stag_area,
        div_storg_area           = s.wms_div_storg_area,
        div_tot_docks            = s.wms_div_tot_docks,
        div_other_area           = s.wms_div_other_area,
        div_office_area          = s.wms_div_office_area,
        div_outbound_area        = s.wms_div_outbound_area,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_wms_div_prop_hdr s
	LEFT JOIN dwh.d_division d
		ON  s.wms_div_code		= d.div_code
		AND s.wms_div_ou		= d.div_ou 
    WHERE   t.div_code			= s.wms_div_code
		AND t.div_ou			= s.wms_div_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DivisionAreaDetail
    (
        div_key, div_code, div_ou, div_length, div_breath, div_height, div_uom, div_area_uom, div_tot_area, div_tot_stag_area, div_storg_area, div_tot_docks, div_other_area, div_office_area, div_outbound_area, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(d.div_key,-1), s.wms_div_code, s.wms_div_ou, s.wms_div_length, s.wms_div_breath, s.wms_div_height, s.wms_div_uom, s.wms_div_area_uom, s.wms_div_tot_area, s.wms_div_tot_stag_area, s.wms_div_storg_area, s.wms_div_tot_docks, s.wms_div_other_area, s.wms_div_office_area, s.wms_div_outbound_area, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_div_prop_hdr s
	LEFT JOIN dwh.d_division d
		ON  s.wms_div_code		= d.div_code
		AND s.wms_div_ou		= d.div_ou
    LEFT JOIN dwh.F_DivisionAreaDetail t
		ON  s.wms_div_code		= t.div_code
		AND s.wms_div_ou		= t.div_ou
    WHERE t.div_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_div_prop_hdr
    (
        wms_div_code, wms_div_ou, wms_div_length, wms_div_breath, wms_div_height, wms_div_uom, wms_div_area_uom, wms_div_tot_area, wms_div_tot_stag_area, wms_div_storg_area, wms_div_tot_docks, wms_div_other_area, wms_div_office_area, wms_div_outbound_area, etlcreateddatetime
    )
    SELECT
        wms_div_code, wms_div_ou, wms_div_length, wms_div_breath, wms_div_height, wms_div_uom, wms_div_area_uom, wms_div_tot_area, wms_div_tot_stag_area, wms_div_storg_area, wms_div_tot_docks, wms_div_other_area, wms_div_office_area, wms_div_outbound_area, etlcreateddatetime
    FROM stg.stg_wms_div_prop_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_divisionareadetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_draftbilldetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_draftbilldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_wms_draft_bill_dtl;

        UPDATE dwh.F_DraftBillDetail t
        SET
        draft_bill_hdr_key                       = COALESCE(oh.draft_bill_hdr_key,-1),
        draft_bill_ref_doc_no                    = s.wms_draft_bill_ref_doc_no,
        draft_bill_ref_doc_typ                   = s.wms_draft_bill_ref_doc_typ,
        draft_bill_triggerring_no                = s.wms_draft_bill_triggerring_no,
        draft_bill_triggerring_type              = s.wms_draft_bill_triggerring_type,
        draft_bill_triggerring_date              = s.wms_draft_bill_triggerring_date,
        draft_bill_tariff_id                     = s.wms_draft_bill_tariff_id,
        draft_bill_uom                           = s.wms_draft_bill_uom,
        draft_bill_qty                           = s.wms_draft_bill_qty,
        draft_bill_rate                          = s.wms_draft_bill_rate,
        draft_bill_value                         = s.wms_draft_bill_value,
        draft_bill_discount                      = s.wms_draft_bill_discount,
        draft_bill_total_value                   = s.wms_draft_bill_total_value,
        draft_bill_br_wt                         = s.wms_draft_bill_br_wt,
        draft_bill_cn_weight                     = s.wms_draft_bill_cn_weight,
        draft_bill_rev_prot_wt                   = s.wms_draft_bill_rev_prot_wt,
        draft_bill_billable_wt                   = s.wms_draft_bill_billable_wt,
        draft_bill_volume                        = s.wms_draft_bill_volume,
        draft_bill_hours                         = s.wms_draft_bill_hours,
        draft_bill_no_of_pallet                  = s.wms_draft_bill_no_of_pallet,
        draft_bill_br_vol                        = s.wms_draft_bill_br_vol,
        draft_bill_cn_vol                        = s.wms_draft_bill_cn_vol,
        draft_bill_rev_prot_vol                  = s.wms_draft_bill_rev_prot_vol,
        draft_bill_no_of_su                      = s.wms_draft_bill_no_of_su,
        draft_bill_count_of_consumables          = s.wms_draft_bill_count_of_consumables,
        draft_bill_thu_id                        = s.wms_draft_bill_thu_id,
        draft_bill_ref_doc_date                  = s.wms_draft_bill_ref_doc_date,
        draft_bill_equipment                     = s.wms_draft_bill_equipment,
        draft_bill_vehicle                       = s.wms_draft_bill_vehicle,
        draft_bill_employee                      = s.wms_draft_bill_employee,
        draft_bill_equipment_type                = s.wms_draft_bill_equipment_type,
        draft_bill_vehicle_type                  = s.wms_draft_bill_vehicle_type,
        invoice_flag                             = s.wms_invoice_flag,
        draft_bill_exec_dt_from                  = s.wms_draft_bill_exec_dt_from,
        draft_bill_exec_dt_to                    = s.wms_draft_bill_exec_dt_to,
        draft_bill_calc_value                    = s.wms_draft_bill_calc_value,
        draft_bill_margin                        = s.wms_draft_bill_margin,
        draft_bill_invoice_no                    = s.wms_draft_bill_invoice_no,
        draft_bill_invoice_ou                    = s.wms_draft_bill_invoice_ou,
        draft_bill_invoice_trantype              = s.wms_draft_bill_invoice_trantype,
        draft_bill_note_no                       = s.wms_draft_bill_note_no,
        draft_bill_note_ou                       = s.wms_draft_bill_note_ou,
        draft_bill_note_trantype                 = s.wms_draft_bill_note_trantype,
        draft_bill_su                            = s.wms_draft_bill_su,
        draft_bill_item_code                     = s.wms_draft_bill_item_code,
        draft_bill_item_qty                      = s.wms_draft_bill_item_qty,
        draft_bill_master_uom                    = s.wms_draft_bill_master_uom,
        draft_bill_item_wt                       = s.wms_draft_bill_item_wt,
        draft_bill_item_wt_uom                   = s.wms_draft_bill_item_wt_uom,
        draft_bill_no_of_weeks                   = s.wms_draft_bill_no_of_weeks,
        draft_bill_distance                      = s.wms_draft_bill_distance,
        draft_bill_transit_time                  = s.wms_draft_bill_transit_time,
        draft_bill_pickup_wt                     = s.wms_draft_bill_pickup_wt,
        draft_bill_delivery_wt                   = s.wms_draft_bill_delivery_wt,
        draft_bill_loading_time                  = s.wms_draft_bill_loading_time,
        draft_bill_unloading_time                = s.wms_draft_bill_unloading_time,
        draft_bill_est_return_time               = s.wms_draft_bill_est_return_time,
        draft_bill_no_of_empl                    = s.wms_draft_bill_no_of_empl,
        draft_bill_service_type                  = s.wms_draft_bill_service_type,
        draft_bill_subserv_type                  = s.wms_draft_bill_subserv_type,
        draft_bill_no_of_containers              = s.wms_draft_bill_no_of_containers,
        draft_bill_supp_bat_no                   = s.wms_draft_bill_supp_bat_no,
        force_match_flag                         = s.wms_force_match_flag,
        draft_bill_reimbursable                  = s.wms_draft_bill_reimbursable,
        draft_bill_remarks                       = s.wms_draft_bill_remarks,
        draft_bill_line_status                   = s.wms_draft_bill_line_status,
        draft_bill_Contract                      = s.wms_draft_bill_Contract,
        draft_bill_periodfrom                    = s.wms_draft_bill_periodfrom,
        draft_bill_periodto                      = s.wms_draft_bill_periodto,
        draft_bill_veh_id                        = s.wms_draft_bill_veh_id,
        draft_bill_veh_type                      = s.wms_draft_bill_veh_type,
        draft_bill_driver_id                     = s.wms_draft_bill_driver_id,
        draft_bill_equip_id                      = s.wms_draft_bill_equip_id,
        draft_bill_equip_type                    = s.wms_draft_bill_equip_type,
        draft_consignee_name                     = s.wms_draft_consignee_name,
        draft_pri_ref_doc                        = s.wms_draft_pri_ref_doc,
        draft_Pri_gateway_auth_no                = s.wms_draft_Pri_gateway_auth_no,
        draft_authorization_date                 = s.wms_draft_authorization_date,
        draft_cust_item_id                       = s.wms_draft_cust_item_id,
        draft_item_id                            = s.wms_draft_item_id,
        draft_item_desc                          = s.wms_draft_item_desc,
        draft_item_qty                           = s.wms_draft_item_qty,
        draft_bill_exchange_rate                 = s.wms_draft_bill_exchange_rate,
        draft_bill_base_amount                   = s.wms_draft_bill_base_amount,
        draft_bill_inv_gen_flag                  = s.wms_draft_bill_inv_gen_flag,
        draft_bill_DD1                           = s.wms_draft_bill_DD1,
        draft_bill_DD2                           = s.wms_draft_bill_DD2,
        draft_leg_behavior                       = s.wms_draft_leg_behavior,
        draft_bill_primary_ref_docno             = s.wms_draft_bill_primary_ref_docno,
        tmp_df_bill_primary_ref_doc_no           = s.tmp_df_bill_primary_ref_doc_no,
        draft_bill_calc_qty                      = s.wms_draft_bill_calc_qty,
        draft_bill_calc_rate                     = s.wms_draft_bill_calc_rate,
        draft_bill_resourcetype                  = s.wms_draft_bill_resourcetype,
        draft_bill_ord_src                       = s.wms_draft_bill_ord_src,
        draft_bill_odo_ref15_hdr                 = s.wms_draft_bill_odo_ref15_hdr,
        draft_bill_approved_by                   = s.wms_draft_bill_approved_by,
        draft_bill_approved_date                 = s.wms_draft_bill_approved_date,
        draft_bill_flex_field6                   = s.wms_draft_bill_flex_field6,
        draft_bill_grp                           = s.wms_draft_bill_grp,
        draft_bill_invoice_type                  = s.wms_draft_bill_invoice_type,
        customer_id                              = s.wms_customer_id,
        Supplier_id                              = s.wms_Supplier_id,
        db_inco_terms                            = s.wms_db_inco_terms,
        draft_bill_created_by                    = s.wms_draft_bill_created_by,
        draft_bill_modified_by                   = s.wms_draft_bill_modified_by,
        draft_bill_created_date                  = s.wms_draft_bill_created_date,
        draft_bill_modified_date                 = s.wms_draft_bill_modified_date,
        draft_bill_service_currency              = s.wms_draft_bill_service_currency,
        draft_bill_int_ord_lineno                = s.wms_draft_bill_int_ord_lineno,
        draft_bill_int_ord_cust_id               = s.wms_draft_bill_int_ord_cust_id,
        draft_bill_channel_type                  = s.wms_draft_bill_channel_type,
        draft_bill_reason_code                   = s.wms_draft_bill_reason_code,
        draft_bill_amend_user                    = s.wms_draft_bill_amend_user,
        draft_bill_amend_date                    = s.wms_draft_bill_amend_date,
        draft_bill_approve_user                  = s.wms_draft_bill_approve_user,
        draft_bill_approve_date                  = s.wms_draft_bill_approve_date,
        draft_bill_cancel_user                   = s.wms_draft_bill_cancel_user,
        draft_bill_cancel_date                   = s.wms_draft_bill_cancel_date,
        draft_bill_Expflg                        = s.wms_draft_bill_Expflg,
        draft_bill_billing_id                    = s.wms_draft_bill_billing_id,
        draft_bill_fuel_tcd_code                 = s.wms_draft_bill_fuel_tcd_code,
        draft_bill_fuel_tcd_variant              = s.wms_draft_bill_fuel_tcd_variant,
        wsm_draft_bill_accrual_jv_no             = s.wsm_draft_bill_accrual_jv_no,
        wsm_draft_bill_reversal_jv_no            = s.wsm_draft_bill_reversal_jv_no,
        wsm_draft_bill_accrual_jv_date           = s.wsm_draft_bill_accrual_jv_date,
        wsm_draft_bill_accrual_jv_amount         = s.wsm_draft_bill_accrual_jv_amount,
        wsm_draft_bill_reversal_jv_date          = s.wsm_draft_bill_reversal_jv_date,
        wsm_draft_bill_reversal_jv_amount        = s.wsm_draft_bill_reversal_jv_amount,
        draft_bill_accural_flag                  = s.wms_draft_bill_accural_flag,
        draft_bill_br_remittance_YN              = s.wms_draft_bill_br_remittance_YN,
        draft_bill_accrual_amend_flag            = s.wms_draft_bill_accrual_amend_flag,
        etlactiveind                             = 1,
        etljobname                               = p_etljobname,
        envsourcecd                              = p_envsourcecd,
        datasourcecd                             = p_datasourcecd,
        etlupdatedatetime                        = NOW()
        FROM stg.stg_wms_draft_bill_dtl s

        LEFT JOIN dwh.f_draftbillheader oh
        ON    s.wms_draft_bill_no   = oh.draft_bill_no
        AND   s.wms_draft_bill_ou	= oh.draft_bill_ou

        WHERE t.draft_bill_no 	= s.wms_draft_bill_no
		AND t.draft_bill_ou 	= s.wms_draft_bill_ou
		AND t.draft_bill_lineno = s.wms_draft_bill_lineno;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_DraftBillDetail
        (
            draft_bill_hdr_key,draft_bill_no, draft_bill_ou, draft_bill_lineno, draft_bill_ref_doc_no, draft_bill_ref_doc_typ, draft_bill_triggerring_no, draft_bill_triggerring_type, draft_bill_triggerring_date, draft_bill_tariff_id, draft_bill_uom, draft_bill_qty, draft_bill_rate, draft_bill_value, draft_bill_discount, draft_bill_total_value, draft_bill_br_wt, draft_bill_cn_weight, draft_bill_rev_prot_wt, draft_bill_billable_wt, draft_bill_volume, draft_bill_hours, draft_bill_no_of_pallet, draft_bill_br_vol, draft_bill_cn_vol, draft_bill_rev_prot_vol, draft_bill_no_of_su, draft_bill_count_of_consumables, draft_bill_thu_id, draft_bill_ref_doc_date, draft_bill_equipment, draft_bill_vehicle, draft_bill_employee, draft_bill_equipment_type, draft_bill_vehicle_type, invoice_flag, draft_bill_exec_dt_from, draft_bill_exec_dt_to, draft_bill_calc_value, draft_bill_margin, draft_bill_invoice_no, draft_bill_invoice_ou, draft_bill_invoice_trantype, draft_bill_note_no, draft_bill_note_ou, draft_bill_note_trantype, draft_bill_su, draft_bill_item_code, draft_bill_item_qty, draft_bill_master_uom, draft_bill_item_wt, draft_bill_item_wt_uom, draft_bill_no_of_weeks, draft_bill_distance, draft_bill_transit_time, draft_bill_pickup_wt, draft_bill_delivery_wt, draft_bill_loading_time, draft_bill_unloading_time, draft_bill_est_return_time, draft_bill_no_of_empl, draft_bill_service_type, draft_bill_subserv_type, draft_bill_no_of_containers, draft_bill_supp_bat_no, force_match_flag, draft_bill_reimbursable, draft_bill_remarks, draft_bill_line_status, draft_bill_Contract, draft_bill_periodfrom, draft_bill_periodto, draft_bill_veh_id, draft_bill_veh_type, draft_bill_driver_id, draft_bill_equip_id, draft_bill_equip_type, draft_consignee_name, draft_pri_ref_doc, draft_Pri_gateway_auth_no, draft_authorization_date, draft_cust_item_id, draft_item_id, draft_item_desc, draft_item_qty, draft_bill_exchange_rate, draft_bill_base_amount, draft_bill_inv_gen_flag, draft_bill_DD1, draft_bill_DD2, draft_leg_behavior, draft_bill_primary_ref_docno, tmp_df_bill_primary_ref_doc_no, draft_bill_calc_qty, draft_bill_calc_rate, draft_bill_resourcetype, draft_bill_ord_src, draft_bill_odo_ref15_hdr, draft_bill_approved_by, draft_bill_approved_date, draft_bill_flex_field6, draft_bill_grp, draft_bill_invoice_type, customer_id, Supplier_id, db_inco_terms, draft_bill_created_by, draft_bill_modified_by, draft_bill_created_date, draft_bill_modified_date, draft_bill_service_currency, draft_bill_int_ord_lineno, draft_bill_int_ord_cust_id, draft_bill_channel_type, draft_bill_reason_code, draft_bill_amend_user, draft_bill_amend_date, draft_bill_approve_user, draft_bill_approve_date, draft_bill_cancel_user, draft_bill_cancel_date, draft_bill_Expflg, draft_bill_billing_id, draft_bill_fuel_tcd_code, draft_bill_fuel_tcd_variant, wsm_draft_bill_accrual_jv_no, wsm_draft_bill_reversal_jv_no, wsm_draft_bill_accrual_jv_date, wsm_draft_bill_accrual_jv_amount, wsm_draft_bill_reversal_jv_date, wsm_draft_bill_reversal_jv_amount, draft_bill_accural_flag, draft_bill_br_remittance_YN, draft_bill_accrual_amend_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            COALESCE(oh.draft_bill_hdr_key,-1),s.wms_draft_bill_no, s.wms_draft_bill_ou, s.wms_draft_bill_lineno, s.wms_draft_bill_ref_doc_no, s.wms_draft_bill_ref_doc_typ, s.wms_draft_bill_triggerring_no, s.wms_draft_bill_triggerring_type, s.wms_draft_bill_triggerring_date, s.wms_draft_bill_tariff_id, s.wms_draft_bill_uom, s.wms_draft_bill_qty, s.wms_draft_bill_rate, s.wms_draft_bill_value, s.wms_draft_bill_discount, s.wms_draft_bill_total_value, s.wms_draft_bill_br_wt, s.wms_draft_bill_cn_weight, s.wms_draft_bill_rev_prot_wt, s.wms_draft_bill_billable_wt, s.wms_draft_bill_volume, s.wms_draft_bill_hours, s.wms_draft_bill_no_of_pallet, s.wms_draft_bill_br_vol, s.wms_draft_bill_cn_vol, s.wms_draft_bill_rev_prot_vol, s.wms_draft_bill_no_of_su, s.wms_draft_bill_count_of_consumables, s.wms_draft_bill_thu_id, s.wms_draft_bill_ref_doc_date, s.wms_draft_bill_equipment, s.wms_draft_bill_vehicle, s.wms_draft_bill_employee, s.wms_draft_bill_equipment_type, s.wms_draft_bill_vehicle_type, s.wms_invoice_flag, s.wms_draft_bill_exec_dt_from, s.wms_draft_bill_exec_dt_to, s.wms_draft_bill_calc_value, s.wms_draft_bill_margin, s.wms_draft_bill_invoice_no, s.wms_draft_bill_invoice_ou, s.wms_draft_bill_invoice_trantype, s.wms_draft_bill_note_no, s.wms_draft_bill_note_ou, s.wms_draft_bill_note_trantype, s.wms_draft_bill_su, s.wms_draft_bill_item_code, s.wms_draft_bill_item_qty, s.wms_draft_bill_master_uom, s.wms_draft_bill_item_wt, s.wms_draft_bill_item_wt_uom, s.wms_draft_bill_no_of_weeks, s.wms_draft_bill_distance, s.wms_draft_bill_transit_time, s.wms_draft_bill_pickup_wt, s.wms_draft_bill_delivery_wt, s.wms_draft_bill_loading_time, s.wms_draft_bill_unloading_time, s.wms_draft_bill_est_return_time, s.wms_draft_bill_no_of_empl, s.wms_draft_bill_service_type, s.wms_draft_bill_subserv_type, s.wms_draft_bill_no_of_containers, s.wms_draft_bill_supp_bat_no, s.wms_force_match_flag, s.wms_draft_bill_reimbursable, s.wms_draft_bill_remarks, s.wms_draft_bill_line_status, s.wms_draft_bill_Contract, s.wms_draft_bill_periodfrom, s.wms_draft_bill_periodto, s.wms_draft_bill_veh_id, s.wms_draft_bill_veh_type, s.wms_draft_bill_driver_id, s.wms_draft_bill_equip_id, s.wms_draft_bill_equip_type, s.wms_draft_consignee_name, s.wms_draft_pri_ref_doc, s.wms_draft_Pri_gateway_auth_no, s.wms_draft_authorization_date, s.wms_draft_cust_item_id, s.wms_draft_item_id, s.wms_draft_item_desc, s.wms_draft_item_qty, s.wms_draft_bill_exchange_rate, s.wms_draft_bill_base_amount, s.wms_draft_bill_inv_gen_flag, s.wms_draft_bill_DD1, s.wms_draft_bill_DD2, s.wms_draft_leg_behavior, s.wms_draft_bill_primary_ref_docno, s.tmp_df_bill_primary_ref_doc_no, s.wms_draft_bill_calc_qty, s.wms_draft_bill_calc_rate, s.wms_draft_bill_resourcetype, s.wms_draft_bill_ord_src, s.wms_draft_bill_odo_ref15_hdr, s.wms_draft_bill_approved_by, s.wms_draft_bill_approved_date, s.wms_draft_bill_flex_field6, s.wms_draft_bill_grp, s.wms_draft_bill_invoice_type, s.wms_customer_id, s.wms_Supplier_id, s.wms_db_inco_terms, s.wms_draft_bill_created_by, s.wms_draft_bill_modified_by, s.wms_draft_bill_created_date, s.wms_draft_bill_modified_date, s.wms_draft_bill_service_currency, s.wms_draft_bill_int_ord_lineno, s.wms_draft_bill_int_ord_cust_id, s.wms_draft_bill_channel_type, s.wms_draft_bill_reason_code, s.wms_draft_bill_amend_user, s.wms_draft_bill_amend_date, s.wms_draft_bill_approve_user, s.wms_draft_bill_approve_date, s.wms_draft_bill_cancel_user, s.wms_draft_bill_cancel_date, s.wms_draft_bill_Expflg, s.wms_draft_bill_billing_id, s.wms_draft_bill_fuel_tcd_code, s.wms_draft_bill_fuel_tcd_variant, s.wsm_draft_bill_accrual_jv_no, s.wsm_draft_bill_reversal_jv_no, s.wsm_draft_bill_accrual_jv_date, s.wsm_draft_bill_accrual_jv_amount, s.wsm_draft_bill_reversal_jv_date, s.wsm_draft_bill_reversal_jv_amount, s.wms_draft_bill_accural_flag, s.wms_draft_bill_br_remittance_YN, s.wms_draft_bill_accrual_amend_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_wms_draft_bill_dtl s

          LEFT JOIN dwh.f_draftbillheader oh
        ON    s.wms_draft_bill_no   = oh.draft_bill_no
        AND   s.wms_draft_bill_ou = oh.draft_bill_ou

        LEFT JOIN dwh.F_DraftBillDetail t
        ON s.wms_draft_bill_no = t.draft_bill_no
		AND s.wms_draft_bill_ou = t.draft_bill_ou
		AND s.wms_draft_bill_lineno = t.draft_bill_lineno

        WHERE t.draft_bill_no IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_wms_draft_bill_dtl
        (
            wms_draft_bill_no, wms_draft_bill_ou, wms_draft_bill_lineno, wms_draft_bill_ref_doc_no, wms_draft_bill_ref_doc_typ, wms_draft_bill_triggerring_no, wms_draft_bill_triggerring_type, wms_draft_bill_triggerring_date, wms_draft_bill_tariff_id, wms_draft_bill_uom, wms_draft_bill_qty, wms_draft_bill_rate, wms_draft_bill_value, wms_draft_bill_discount, wms_draft_bill_total_value, wms_draft_bill_br_wt, wms_draft_bill_cn_weight, wms_draft_bill_rev_prot_wt, wms_draft_bill_billable_wt, wms_draft_bill_volume, wms_draft_bill_hours, wms_draft_bill_no_of_pallet, wms_draft_bill_br_vol, wms_draft_bill_cn_vol, wms_draft_bill_rev_prot_vol, wms_draft_bill_no_of_su, wms_draft_bill_count_of_consumables, wms_draft_bill_thu_id, wms_draft_bill_ref_doc_date, wms_draft_bill_equipment, wms_draft_bill_vehicle, wms_draft_bill_employee, wms_draft_bill_equipment_type, wms_draft_bill_vehicle_type, wms_invoice_flag, wms_draft_bill_exec_dt_from, wms_draft_bill_exec_dt_to, wms_draft_bill_calc_value, wms_draft_bill_margin, wms_draft_bill_invoice_no, wms_draft_bill_invoice_ou, wms_draft_bill_invoice_trantype, wms_draft_bill_note_no, wms_draft_bill_note_ou, wms_draft_bill_note_trantype, wms_draft_bill_su, wms_draft_bill_item_code, wms_draft_bill_item_qty, wms_draft_bill_master_uom, wms_draft_bill_item_wt, wms_draft_bill_item_wt_uom, wms_draft_bill_no_of_weeks, wms_draft_bill_distance, wms_draft_bill_transit_time, wms_draft_bill_pickup_wt, wms_draft_bill_delivery_wt, wms_draft_bill_loading_time, wms_draft_bill_unloading_time, wms_draft_bill_est_return_time, wms_draft_bill_no_of_empl, wms_draft_bill_service_type, wms_draft_bill_subserv_type, wms_draft_bill_no_of_containers, wms_draft_bill_supp_bat_no, wms_force_match_flag, wms_draft_bill_reimbursable, wms_draft_bill_remarks, wms_draft_bill_line_status, wms_draft_bill_Contract, wms_draft_bill_periodfrom, wms_draft_bill_periodto, wms_draft_bill_veh_id, wms_draft_bill_veh_type, wms_draft_bill_driver_id, wms_draft_bill_equip_id, wms_draft_bill_equip_type, wms_draft_consignee_name, wms_draft_pri_ref_doc, wms_draft_Pri_gateway_auth_no, wms_draft_authorization_date, wms_draft_cust_item_id, wms_draft_item_id, wms_draft_item_desc, wms_draft_item_qty, wms_draft_bill_exchange_rate, wms_draft_bill_base_amount, wms_draft_bill_inv_gen_flag, wms_draft_bill_DD1, wms_draft_bill_DD2, wms_draft_leg_behavior, wms_draft_bill_primary_ref_docno, tmp_df_bill_primary_ref_doc_no, wms_draft_bill_calc_qty, wms_draft_bill_calc_rate, wms_draft_bill_resourcetype, wms_draft_bill_ord_src, wms_draft_bill_odo_ref15_hdr, wms_draft_bill_approved_by, wms_draft_bill_approved_date, wms_draft_bill_flex_field6, wms_draft_bill_grp, wms_draft_bill_invoice_type, wms_customer_id, wms_Supplier_id, wms_db_inco_terms, wms_draft_bill_created_by, wms_draft_bill_modified_by, wms_draft_bill_created_date, wms_draft_bill_modified_date, wms_draft_bill_service_currency, wms_draft_bill_int_ord_lineno, wms_draft_bill_int_ord_cust_id, wms_draft_bill_channel_type, wms_draft_bill_reason_code, wms_draft_bill_amend_user, wms_draft_bill_amend_date, wms_draft_bill_approve_user, wms_draft_bill_approve_date, wms_draft_bill_cancel_user, wms_draft_bill_cancel_date, wms_draft_bill_Expflg, wms_draft_bill_billing_id, wms_draft_bill_fuel_tcd_code, wms_draft_bill_fuel_tcd_variant, wsm_draft_bill_accrual_jv_no, wsm_draft_bill_reversal_jv_no, wsm_draft_bill_accrual_jv_date, wsm_draft_bill_accrual_jv_amount, wsm_draft_bill_reversal_jv_date, wsm_draft_bill_reversal_jv_amount, wms_draft_bill_accural_flag, wms_draft_bill_br_remittance_YN, wms_draft_bill_accrual_amend_flag, etlcreateddatetime
        )
        SELECT
            wms_draft_bill_no, wms_draft_bill_ou, wms_draft_bill_lineno, wms_draft_bill_ref_doc_no, wms_draft_bill_ref_doc_typ, wms_draft_bill_triggerring_no, wms_draft_bill_triggerring_type, wms_draft_bill_triggerring_date, wms_draft_bill_tariff_id, wms_draft_bill_uom, wms_draft_bill_qty, wms_draft_bill_rate, wms_draft_bill_value, wms_draft_bill_discount, wms_draft_bill_total_value, wms_draft_bill_br_wt, wms_draft_bill_cn_weight, wms_draft_bill_rev_prot_wt, wms_draft_bill_billable_wt, wms_draft_bill_volume, wms_draft_bill_hours, wms_draft_bill_no_of_pallet, wms_draft_bill_br_vol, wms_draft_bill_cn_vol, wms_draft_bill_rev_prot_vol, wms_draft_bill_no_of_su, wms_draft_bill_count_of_consumables, wms_draft_bill_thu_id, wms_draft_bill_ref_doc_date, wms_draft_bill_equipment, wms_draft_bill_vehicle, wms_draft_bill_employee, wms_draft_bill_equipment_type, wms_draft_bill_vehicle_type, wms_invoice_flag, wms_draft_bill_exec_dt_from, wms_draft_bill_exec_dt_to, wms_draft_bill_calc_value, wms_draft_bill_margin, wms_draft_bill_invoice_no, wms_draft_bill_invoice_ou, wms_draft_bill_invoice_trantype, wms_draft_bill_note_no, wms_draft_bill_note_ou, wms_draft_bill_note_trantype, wms_draft_bill_su, wms_draft_bill_item_code, wms_draft_bill_item_qty, wms_draft_bill_master_uom, wms_draft_bill_item_wt, wms_draft_bill_item_wt_uom, wms_draft_bill_no_of_weeks, wms_draft_bill_distance, wms_draft_bill_transit_time, wms_draft_bill_pickup_wt, wms_draft_bill_delivery_wt, wms_draft_bill_loading_time, wms_draft_bill_unloading_time, wms_draft_bill_est_return_time, wms_draft_bill_no_of_empl, wms_draft_bill_service_type, wms_draft_bill_subserv_type, wms_draft_bill_no_of_containers, wms_draft_bill_supp_bat_no, wms_force_match_flag, wms_draft_bill_reimbursable, wms_draft_bill_remarks, wms_draft_bill_line_status, wms_draft_bill_Contract, wms_draft_bill_periodfrom, wms_draft_bill_periodto, wms_draft_bill_veh_id, wms_draft_bill_veh_type, wms_draft_bill_driver_id, wms_draft_bill_equip_id, wms_draft_bill_equip_type, wms_draft_consignee_name, wms_draft_pri_ref_doc, wms_draft_Pri_gateway_auth_no, wms_draft_authorization_date, wms_draft_cust_item_id, wms_draft_item_id, wms_draft_item_desc, wms_draft_item_qty, wms_draft_bill_exchange_rate, wms_draft_bill_base_amount, wms_draft_bill_inv_gen_flag, wms_draft_bill_DD1, wms_draft_bill_DD2, wms_draft_leg_behavior, wms_draft_bill_primary_ref_docno, tmp_df_bill_primary_ref_doc_no, wms_draft_bill_calc_qty, wms_draft_bill_calc_rate, wms_draft_bill_resourcetype, wms_draft_bill_ord_src, wms_draft_bill_odo_ref15_hdr, wms_draft_bill_approved_by, wms_draft_bill_approved_date, wms_draft_bill_flex_field6, wms_draft_bill_grp, wms_draft_bill_invoice_type, wms_customer_id, wms_Supplier_id, wms_db_inco_terms, wms_draft_bill_created_by, wms_draft_bill_modified_by, wms_draft_bill_created_date, wms_draft_bill_modified_date, wms_draft_bill_service_currency, wms_draft_bill_int_ord_lineno, wms_draft_bill_int_ord_cust_id, wms_draft_bill_channel_type, wms_draft_bill_reason_code, wms_draft_bill_amend_user, wms_draft_bill_amend_date, wms_draft_bill_approve_user, wms_draft_bill_approve_date, wms_draft_bill_cancel_user, wms_draft_bill_cancel_date, wms_draft_bill_Expflg, wms_draft_bill_billing_id, wms_draft_bill_fuel_tcd_code, wms_draft_bill_fuel_tcd_variant, wsm_draft_bill_accrual_jv_no, wsm_draft_bill_reversal_jv_no, wsm_draft_bill_accrual_jv_date, wsm_draft_bill_accrual_jv_amount, wsm_draft_bill_reversal_jv_date, wsm_draft_bill_reversal_jv_amount, wms_draft_bill_accural_flag, wms_draft_bill_br_remittance_YN, wms_draft_bill_accrual_amend_flag, etlcreateddatetime
        FROM stg.stg_wms_draft_bill_dtl;
    END IF;

    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;  
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 
    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_draftbilldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_draftbillexecdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_draftbillexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_draft_bill_exec_dtl;

    UPDATE dwh.f_draftbillexecdetail t
    SET
        draft_bill_loc_key			= COALESCE(l.loc_key,-1),
		draft_bill_customer_key		= COALESCE(c.customer_key,-1),
		draft_bill_thu_key			= COALESCE(th.thu_key,-1),
		draft_bill_itm_hdr_key		= COALESCE(i.itm_hdr_key,-1),
		draft_bill_stg_mas_key		= COALESCE(st.stg_mas_key,-1),	
        exec_executed_on            = s.wms_exec_executed_on,
        exec_customer_id            = s.wms_exec_customer_id,
        exec_ref_doc_type           = s.wms_exec_ref_doc_type,
        exec_ref_doc_no             = s.wms_exec_ref_doc_no,
        exec_ref_doc_line_no        = s.wms_exec_ref_doc_line_no,
        exec_ref_doc_sch_no         = s.wms_exec_ref_doc_sch_no,
        exec_tran_qty               = s.wms_exec_tran_qty,
        exec_item_lot_no            = s.wms_exec_item_lot_no,
        exec_item_batch_no          = s.wms_exec_item_batch_no,
        exec_item_serial_no         = s.wms_exec_item_serial_no,
        exec_thu_id                 = s.wms_exec_thu_id,
        exec_thu_ser_no             = s.wms_exec_thu_ser_no,
        exec_uid_ser_no             = s.wms_exec_uid_ser_no,
        exec_item_code              = s.wms_exec_item_code,
        exec_su                     = s.wms_exec_su,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_wms_draft_bill_exec_dtl s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.wms_exec_item_code		= i.itm_code
		AND s.wms_exec_ou 				= i.itm_ou 
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_exec_loc_code 		= l.loc_code 
		AND s.wms_exec_ou 				= l.loc_ou 
	LEFT JOIN dwh.d_customer c 			
		ON  s.wms_exec_customer_id 		= c.customer_id
		AND s.wms_exec_ou 				= c.customer_ou 
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_exec_thu_id		  	= th.thu_id 
		AND s.wms_exec_ou 				= th.thu_ou  	
	LEFT JOIN dwh.d_stage st 		
		ON  s.wms_exec_stage  			= st.stg_mas_id 
		AND s.wms_exec_ou 				= st.stg_mas_ou 			
    WHERE 	t.exec_loc_code = s.wms_exec_loc_code
    AND 	t.exec_ou 		= s.wms_exec_ou
    AND 	t.exec_no 		= s.wms_exec_no
    AND 	t.exec_stage 	= s.wms_exec_stage
    AND 	t.exec_line_no 	= s.wms_exec_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_draftbillexecdetail
    (
        draft_bill_loc_key,		draft_bill_customer_key,	draft_bill_thu_key,			draft_bill_itm_hdr_key,  	draft_bill_stg_mas_key,
		exec_loc_code, 			exec_ou, 					exec_no, 					exec_stage, 				exec_line_no, 
		exec_executed_on, 		exec_customer_id, 			exec_ref_doc_type, 			exec_ref_doc_no, 			exec_ref_doc_line_no, 
		exec_ref_doc_sch_no, 	exec_tran_qty, 				exec_item_lot_no, 			exec_item_batch_no, 		exec_item_serial_no, 
		exec_thu_id, 			exec_thu_ser_no, 			exec_uid_ser_no, 			exec_item_code, 			exec_su, 
		etlactiveind, 			etljobname, 				envsourcecd, 				datasourcecd, 				etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1),		COALESCE(c.customer_key,-1),	COALESCE(th.thu_key,-1),	COALESCE(i.itm_hdr_key,-1),	COALESCE(st.stg_mas_key,-1),
		s.wms_exec_loc_code, 		s.wms_exec_ou, 					s.wms_exec_no, 				s.wms_exec_stage, 			s.wms_exec_line_no, 
		s.wms_exec_executed_on, 	s.wms_exec_customer_id, 		s.wms_exec_ref_doc_type, 	s.wms_exec_ref_doc_no, 		s.wms_exec_ref_doc_line_no, 
		s.wms_exec_ref_doc_sch_no, 	s.wms_exec_tran_qty, 			s.wms_exec_item_lot_no, 	s.wms_exec_item_batch_no, 	s.wms_exec_item_serial_no, 
		s.wms_exec_thu_id, 			s.wms_exec_thu_ser_no, 			s.wms_exec_uid_ser_no, 		s.wms_exec_item_code, 		s.wms_exec_su, 
		1, 							p_etljobname, 					p_envsourcecd, 				p_datasourcecd, 			NOW()
    FROM stg.stg_wms_draft_bill_exec_dtl s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.wms_exec_item_code		= i.itm_code
		AND s.wms_exec_ou 				= i.itm_ou 
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_exec_loc_code 		= l.loc_code 
		AND s.wms_exec_ou 				= l.loc_ou 
	LEFT JOIN dwh.d_customer c 			
		ON  s.wms_exec_customer_id 		= c.customer_id
		AND s.wms_exec_ou 				= c.customer_ou 
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_exec_thu_id		  	= th.thu_id 
		AND s.wms_exec_ou 				= th.thu_ou  	
	LEFT JOIN dwh.d_stage st 		
		ON  s.wms_exec_stage  			= st.stg_mas_id 
		AND s.wms_exec_ou 				= st.stg_mas_ou 	
    LEFT JOIN dwh.f_draftbillexecdetail t
    ON 	s.wms_exec_loc_code 			= t.exec_loc_code
    AND s.wms_exec_ou 					= t.exec_ou
    AND s.wms_exec_no 					= t.exec_no
    AND s.wms_exec_stage 				= t.exec_stage
    AND s.wms_exec_line_no 				= t.exec_line_no
    WHERE t.exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_draft_bill_exec_dtl
    (
        wms_exec_loc_code, 					wms_exec_ou, 						wms_exec_no, 						wms_exec_stage, 					wms_exec_line_no, 
		wms_exec_executed_on, 				wms_exec_customer_id, 				wms_exec_ref_doc_type, 				wms_exec_ref_doc_no, 				wms_exec_ref_doc_line_no, 
		wms_exec_ref_doc_sch_no, 			wms_exec_tran_qty, 					wms_exec_item_lot_no, 				wms_exec_item_batch_no, 			wms_exec_item_serial_no, 
		wms_exec_thu_id, 					wms_exec_thu_ser_no, 				wms_exec_uid, 						wms_exec_uid_ser_no, 				wms_exec_billing_status, 
		wms_exec_bill_value, 				wms_exec_item_code, 				wms_exec_su, 						wms_exec_lbchprhr_bil_status, 		wms_exec_pickchrg_bil_status, 
		wms_exec_pkpalthu_bil_status, 		wms_exec_tchpalpk_bil_status, 		wms_exec_thupkchr_bil_status, 		wms_exec_kmsslbpr_bil_status, 		wms_exec_pkmxitm_bil_status, 
		wms_exec_unitpunp_bil_status, 		wms_exec_palrestk_bil_status, 		wms_exec_conschrg_bil_status, 		wms_exec_cstchcon_bil_status, 		wms_exec_flherffn_bil_status, 
		wms_exec_hdlopick_bil_status, 		wms_exec_hdochwt_bil_status, 		wms_exec_lodtpalc_bil_status, 		wms_exec_hdochitm_bil_status, 		wms_exec_hdipitrb_bil_status, 
		wms_exec_hdipsurb_bil_status,		wms_exec_damagadj_bil_status, 		wms_exec_shpcbitq_bil_status, 		wms_exec_vaschrg_bil_status, 		wms_exec_hdlomuom_bil_status, 
		wms_exec_rfpcexwh_bil_status, 		wms_exec_rfwcexwh_bil_status, 		wms_exec_whtrchpk_bil_status, 		wms_exec_hdimugr_bil_status, 		wms_exec_hdomupk_bil_status, 
		wms_exec_cupakchr_bil_status, 		wms_exec_consbchg_bil_status, 		wms_exec_hdimetr_bil_status, 		wms_exec_hdomepk_bil_status, 		wms_exec_hdlioutc_bil_status, 
		wms_exec_damagadj_buy_bil_status, 	wms_exec_hdomuld_bil_status, 		wms_exec_hdomeld_sell_bil_status, 	wms_exec_hdiochvl_sell_bil_status, 	wms_exec_pkchrgui_bil_status, 
		wms_exec_hdchincbm_sell_bil_status, wms_exec_hcdeinqt_sell_bil_status, 	wms_exec_hdchinqt_sell_bil_status, 	wms_exec_hdchinpt_sell_bil_status, 	wms_exec_whobferb_sell_bil_status, 
		wms_exec_pthuc_status, 				wms_exec_PIKPAKQT_bil_status, 		wms_exec_himluogr_sell_bil_status, 	wms_exec_homstpld_sell_bil_status, 	wms_exec_hiochvol_sell_bil_status, 
		wms_exec_houpmton_sell_bil_status, 	wms_exec_pisamfee_bil_status, 		wms_exec_pklicnt_bil_status, 		wms_exec_hdichgei_sell_bil_status, 	wms_exec_HDOQCLD_status, 
		wms_exec_CUSBSDCG_bil_status, 		wms_exec_CUSPAKCG_sell_bil_status, 	wms_exec_HOTHUPKQ_bil_status, 		wms_exec_hdovcld_bill_status, 		wms_exec_HCOQUMOT_bil_status, 
		wms_exec_houtptld_sell_bil_status, 	wms_exec_hdlncopt_bil_status, 		etlcreateddatetime
    )
    SELECT
        wms_exec_loc_code, 					wms_exec_ou, 						wms_exec_no, 						wms_exec_stage, 					wms_exec_line_no, 
		wms_exec_executed_on, 				wms_exec_customer_id, 				wms_exec_ref_doc_type, 				wms_exec_ref_doc_no, 				wms_exec_ref_doc_line_no, 
		wms_exec_ref_doc_sch_no, 			wms_exec_tran_qty, 					wms_exec_item_lot_no, 				wms_exec_item_batch_no, 			wms_exec_item_serial_no, 
		wms_exec_thu_id, 					wms_exec_thu_ser_no, 				wms_exec_uid, 						wms_exec_uid_ser_no, 				wms_exec_billing_status, 
		wms_exec_bill_value, 				wms_exec_item_code, 				wms_exec_su, 						wms_exec_lbchprhr_bil_status, 		wms_exec_pickchrg_bil_status, 
		wms_exec_pkpalthu_bil_status, 		wms_exec_tchpalpk_bil_status, 		wms_exec_thupkchr_bil_status, 		wms_exec_kmsslbpr_bil_status, 		wms_exec_pkmxitm_bil_status, 
		wms_exec_unitpunp_bil_status, 		wms_exec_palrestk_bil_status, 		wms_exec_conschrg_bil_status, 		wms_exec_cstchcon_bil_status, 		wms_exec_flherffn_bil_status, 
		wms_exec_hdlopick_bil_status, 		wms_exec_hdochwt_bil_status, 		wms_exec_lodtpalc_bil_status, 		wms_exec_hdochitm_bil_status, 		wms_exec_hdipitrb_bil_status, 
		wms_exec_hdipsurb_bil_status,		wms_exec_damagadj_bil_status, 		wms_exec_shpcbitq_bil_status, 		wms_exec_vaschrg_bil_status, 		wms_exec_hdlomuom_bil_status, 
		wms_exec_rfpcexwh_bil_status, 		wms_exec_rfwcexwh_bil_status, 		wms_exec_whtrchpk_bil_status, 		wms_exec_hdimugr_bil_status, 		wms_exec_hdomupk_bil_status, 
		wms_exec_cupakchr_bil_status, 		wms_exec_consbchg_bil_status, 		wms_exec_hdimetr_bil_status, 		wms_exec_hdomepk_bil_status, 		wms_exec_hdlioutc_bil_status, 
		wms_exec_damagadj_buy_bil_status, 	wms_exec_hdomuld_bil_status, 		wms_exec_hdomeld_sell_bil_status, 	wms_exec_hdiochvl_sell_bil_status, 	wms_exec_pkchrgui_bil_status, 
		wms_exec_hdchincbm_sell_bil_status, wms_exec_hcdeinqt_sell_bil_status, 	wms_exec_hdchinqt_sell_bil_status, 	wms_exec_hdchinpt_sell_bil_status, 	wms_exec_whobferb_sell_bil_status, 
		wms_exec_pthuc_status, 				wms_exec_PIKPAKQT_bil_status, 		wms_exec_himluogr_sell_bil_status, 	wms_exec_homstpld_sell_bil_status, 	wms_exec_hiochvol_sell_bil_status, 
		wms_exec_houpmton_sell_bil_status, 	wms_exec_pisamfee_bil_status, 		wms_exec_pklicnt_bil_status, 		wms_exec_hdichgei_sell_bil_status, 	wms_exec_HDOQCLD_status, 
		wms_exec_CUSBSDCG_bil_status, 		wms_exec_CUSPAKCG_sell_bil_status, 	wms_exec_HOTHUPKQ_bil_status, 		wms_exec_hdovcld_bill_status, 		wms_exec_HCOQUMOT_bil_status, 
		wms_exec_houtptld_sell_bil_status, 	wms_exec_hdlncopt_bil_status, 		etlcreateddatetime
    FROM stg.stg_wms_draft_bill_exec_dtl;
    END IF;

    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_draftbillexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_draftbillheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_draftbillheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_wms_draft_bill_hdr;

        UPDATE dwh.F_DraftBillHeader t
        SET

        draft_loc_key                      = COALESCE(l.loc_key,-1),
        draft_cust_key                     = COALESCE(a.customer_key,-1),
        draft_curr_key                     = COALESCE(c.curr_key,-1),
        draft_bill_location                 = s.wms_draft_bill_location,
        draft_bill_division                 = s.wms_draft_bill_division,
        draft_bill_date                     = s.wms_draft_bill_date,
        draft_bill_status                   = s.wms_draft_bill_status,
        draft_bill_contract_id              = s.wms_draft_bill_contract_id,
        draft_bill_cust_cont_ref_no         = s.wms_draft_bill_cust_cont_ref_no,
        draft_bill_customer                 = s.wms_draft_bill_customer,
        draft_bill_supplier                 = s.wms_draft_bill_supplier,
        draft_bill_currency                 = s.wms_draft_bill_currency,
        draft_bill_cost_centre              = s.wms_draft_bill_cost_centre,
        draft_bill_value                    = s.wms_draft_bill_value,
        draft_bill_discount                 = s.wms_draft_bill_discount,
        draft_bill_total_value              = s.wms_draft_bill_total_value,
        draft_bill_inv_no                   = s.wms_draft_bill_inv_no,
        draft_bill_inv_date                 = s.wms_draft_bill_inv_date,
        draft_bill_inv_status               = s.wms_draft_bill_inv_status,
        draft_bill_timestamp                = s.wms_draft_bill_timestamp,
        draft_bill_created_by               = s.wms_draft_bill_created_by,
        draft_bill_created_date             = s.wms_draft_bill_created_date,
        draft_bill_modified_by              = s.wms_draft_bill_modified_by,
        draft_bill_modified_date            = s.wms_draft_bill_modified_date,
        draft_bill_contract_amend_no        = s.wms_draft_bill_contract_amend_no,
        draft_bill_tran_type                = s.wms_draft_bill_tran_type,
        draft_bill_margin                   = s.wms_draft_bill_margin,
        draft_bill_gen_from                 = s.wms_draft_bill_gen_from,
        draft_bill_booking_location         = s.wms_draft_bill_booking_location,
        draft_bill_period_from              = s.wms_draft_bill_period_from,
        draft_bill_period_to                = s.wms_draft_bill_period_to,
        draft_bill_remarks                  = s.wms_draft_bill_remarks,
        draft_bill_workflow_status          = s.wms_draft_bill_workflow_status,
        draft_bill_reason_for_return        = s.wms_draft_bill_reason_for_return,
        draft_bill_grp                      = s.wms_draft_bill_grp,
        draft_bill_type                     = s.wms_draft_bill_type,
        draft_bill_br_remittance_YN         = s.wms_draft_bill_br_remittance_YN,
        etlactiveind                        = 1,
        etljobname                          = p_etljobname,
        envsourcecd                         = p_envsourcecd,
        datasourcecd                        = p_datasourcecd,
        etlupdatedatetime                   = NOW()
        FROM stg.stg_wms_draft_bill_hdr s

        LEFT JOIN dwh.d_location L      
            ON s.wms_draft_bill_location           = L.loc_code 
            AND s.wms_draft_bill_ou                = L.loc_ou


        LEFT JOIN dwh.d_customer A      
        ON s.wms_draft_bill_customer  = A.customer_id 
        AND s.wms_draft_bill_ou        = A.customer_ou

        LEFT JOIN dwh.d_currency c      
        ON  s.wms_draft_bill_currency       = c.iso_curr_code 

        WHERE t.draft_bill_no = s.wms_draft_bill_no
    AND t.draft_bill_ou = s.wms_draft_bill_ou;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_DraftBillHeader
        (
           draft_loc_key , draft_cust_key, draft_curr_key , draft_bill_no, draft_bill_ou, draft_bill_location, draft_bill_division, draft_bill_date, draft_bill_status, draft_bill_contract_id, draft_bill_cust_cont_ref_no, draft_bill_customer, draft_bill_supplier, draft_bill_currency, draft_bill_cost_centre, draft_bill_value, draft_bill_discount, draft_bill_total_value, draft_bill_inv_no, draft_bill_inv_date, draft_bill_inv_status, draft_bill_timestamp, draft_bill_created_by, draft_bill_created_date, draft_bill_modified_by, draft_bill_modified_date, draft_bill_contract_amend_no, draft_bill_tran_type, draft_bill_margin, draft_bill_gen_from, draft_bill_booking_location, draft_bill_period_from, draft_bill_period_to, draft_bill_remarks, draft_bill_workflow_status, draft_bill_reason_for_return, draft_bill_grp, draft_bill_type, draft_bill_br_remittance_YN, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
           COALESCE(l.loc_key,-1),COALESCE(a.customer_key,-1),COALESCE(c.curr_key,-1),s.wms_draft_bill_no, s.wms_draft_bill_ou, s.wms_draft_bill_location, s.wms_draft_bill_division, s.wms_draft_bill_date, s.wms_draft_bill_status, s.wms_draft_bill_contract_id, s.wms_draft_bill_cust_cont_ref_no, s.wms_draft_bill_customer, s.wms_draft_bill_supplier, s.wms_draft_bill_currency, s.wms_draft_bill_cost_centre, s.wms_draft_bill_value, s.wms_draft_bill_discount, s.wms_draft_bill_total_value, s.wms_draft_bill_inv_no, s.wms_draft_bill_inv_date, s.wms_draft_bill_inv_status, s.wms_draft_bill_timestamp, s.wms_draft_bill_created_by, s.wms_draft_bill_created_date, s.wms_draft_bill_modified_by, s.wms_draft_bill_modified_date, s.wms_draft_bill_contract_amend_no, s.wms_draft_bill_tran_type, s.wms_draft_bill_margin, s.wms_draft_bill_gen_from, s.wms_draft_bill_booking_location, s.wms_draft_bill_period_from, s.wms_draft_bill_period_to, s.wms_draft_bill_remarks, s.wms_draft_bill_workflow_status, s.wms_draft_bill_reason_for_return, s.wms_draft_bill_grp, s.wms_draft_bill_type, s.wms_draft_bill_br_remittance_YN, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_wms_draft_bill_hdr s

         LEFT JOIN dwh.d_location L      
         ON s.wms_draft_bill_location           = L.loc_code 
         AND s.wms_draft_bill_ou                = L.loc_ou

      
        LEFT JOIN dwh.d_customer A      
        ON s.wms_draft_bill_customer  = A.customer_id 
        AND s.wms_draft_bill_ou        = A.customer_ou

        LEFT JOIN dwh.d_currency c      
        ON  s.wms_draft_bill_currency       = c.iso_curr_code 

        LEFT JOIN dwh.F_DraftBillHeader t
        ON s.wms_draft_bill_no = t.draft_bill_no
        AND s.wms_draft_bill_ou = t.draft_bill_ou
        WHERE t.draft_bill_no IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_wms_draft_bill_hdr
        (
            wms_draft_bill_no, wms_draft_bill_ou, wms_draft_bill_location, wms_draft_bill_division, wms_draft_bill_date, wms_draft_bill_status, wms_draft_bill_contract_id, wms_draft_bill_cust_cont_ref_no, wms_draft_bill_customer, wms_draft_bill_supplier, wms_draft_bill_currency, wms_draft_bill_cost_centre, wms_draft_bill_value, wms_draft_bill_discount, wms_draft_bill_total_value, wms_draft_bill_inv_no, wms_draft_bill_inv_date, wms_draft_bill_inv_status, wms_draft_bill_timestamp, wms_draft_bill_created_by, wms_draft_bill_created_date, wms_draft_bill_modified_by, wms_draft_bill_modified_date, wms_draft_bill_contract_amend_no, wms_draft_bill_tran_type, wms_draft_bill_margin, wms_draft_bill_gen_from, wms_draft_bill_booking_location, wms_draft_bill_period_from, wms_draft_bill_period_to, wms_draft_bill_remarks, wms_draft_bill_workflow_status, wms_draft_bill_reason_for_return, wms_draft_bill_grp, wms_draft_bill_type, wms_draft_bill_br_remittance_YN, etlcreateddatetime
        )
        SELECT
            wms_draft_bill_no, wms_draft_bill_ou, wms_draft_bill_location, wms_draft_bill_division, wms_draft_bill_date, wms_draft_bill_status, wms_draft_bill_contract_id, wms_draft_bill_cust_cont_ref_no, wms_draft_bill_customer, wms_draft_bill_supplier, wms_draft_bill_currency, wms_draft_bill_cost_centre, wms_draft_bill_value, wms_draft_bill_discount, wms_draft_bill_total_value, wms_draft_bill_inv_no, wms_draft_bill_inv_date, wms_draft_bill_inv_status, wms_draft_bill_timestamp, wms_draft_bill_created_by, wms_draft_bill_created_date, wms_draft_bill_modified_by, wms_draft_bill_modified_date, wms_draft_bill_contract_amend_no, wms_draft_bill_tran_type, wms_draft_bill_margin, wms_draft_bill_gen_from, wms_draft_bill_booking_location, wms_draft_bill_period_from, wms_draft_bill_period_to, wms_draft_bill_remarks, wms_draft_bill_workflow_status, wms_draft_bill_reason_for_return, wms_draft_bill_grp, wms_draft_bill_type, wms_draft_bill_br_remittance_YN, etlcreateddatetime
        FROM stg.stg_wms_draft_bill_hdr;
    END IF;

    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_draftbillheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_draftbillsuppliercontractdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_draftbillsuppliercontractdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_draft_bill_supplier_contract_dtl;

    UPDATE dwh.F_DraftBillSupplierContractDetail t
    SET
		draft_bill_location_key				= COALESCE(loc.loc_key,-1),
        draft_bill_contract_id              = s.wms_draft_bill_contract_id,
        draft_bill_contract_amend_no        = s.wms_draft_bill_contract_amend_no,
        draft_bill_created_by               = s.wms_draft_bill_created_by,
        draft_bill_created_date             = s.wms_draft_bill_created_date,
        draft_bill_billing_status           = s.wms_draft_bill_billing_status,
        draft_bill_value                    = s.wms_draft_bill_value,
        draft_bill_booking_location         = s.wms_draft_bill_booking_location,
        draft_bill_modified_by              = s.wms_draft_bill_modified_by,
        draft_bill_modified_date            = s.wms_draft_bill_modified_date,
        draft_bill_last_depart_date         = s.wms_draft_bill_last_depart_date,
        etlactiveind                        = 1,
        etljobname                          = p_etljobname,
        envsourcecd                         = p_envsourcecd,
        datasourcecd                        = p_datasourcecd,
        etlupdatedatetime                   = NOW()
    FROM stg.stg_wms_draft_bill_supplier_contract_dtl s
	LEFT join dwh.d_location loc
	ON		loc.loc_code			= s.wms_draft_bill_location
	AND		loc.loc_ou				= s.wms_draft_bill_ou
    WHERE	t.draft_bill_ou				= s.wms_draft_bill_ou
    AND		t.draft_bill_location		= s.wms_draft_bill_location
    AND		t.draft_bill_division		= s.wms_draft_bill_division
    AND		t.draft_bill_tran_type		= s.wms_draft_bill_tran_type
    AND		t.draft_bill_ref_doc_no		= s.wms_draft_bill_ref_doc_no
    AND		t.draft_bill_ref_doc_type	= s.wms_draft_bill_ref_doc_type
    AND		t.draft_bill_vendor_id		= s.wms_draft_bill_vendor_id
    AND		t.draft_bill_resource_type	= s.wms_draft_bill_resource_type;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_DraftBillSupplierContractDetail
    (
        draft_bill_location_key		, draft_bill_ou					, draft_bill_location, 
		draft_bill_division		, draft_bill_tran_type			, draft_bill_ref_doc_no			, draft_bill_ref_doc_type, 
		draft_bill_contract_id	, draft_bill_contract_amend_no	, draft_bill_vendor_id			, draft_bill_created_by, 
		draft_bill_created_date	, draft_bill_billing_status		, draft_bill_value				, draft_bill_booking_location, 
		draft_bill_modified_by	, draft_bill_modified_date		, draft_bill_last_depart_date	, draft_bill_resource_type, 
		etlactiveind			, etljobname					, envsourcecd					, datasourcecd, 
		etlcreatedatetime
    )

    SELECT
        COALESCE(loc.loc_key,-1),		s.wms_draft_bill_ou				, s.wms_draft_bill_location, 
		s.wms_draft_bill_division		, s.wms_draft_bill_tran_type		, s.wms_draft_bill_ref_doc_no		, s.wms_draft_bill_ref_doc_type, 
		s.wms_draft_bill_contract_id	, s.wms_draft_bill_contract_amend_no, s.wms_draft_bill_vendor_id		, s.wms_draft_bill_created_by, 
		s.wms_draft_bill_created_date	, s.wms_draft_bill_billing_status	, s.wms_draft_bill_value			, s.wms_draft_bill_booking_location, 
		s.wms_draft_bill_modified_by	, s.wms_draft_bill_modified_date	, s.wms_draft_bill_last_depart_date	, s.wms_draft_bill_resource_type, 
					1					, p_etljobname						, p_envsourcecd						, p_datasourcecd, 
		NOW()
    FROM stg.stg_wms_draft_bill_supplier_contract_dtl s
	LEFT join dwh.d_location loc
	ON		loc.loc_code			= s.wms_draft_bill_location
	AND		loc.loc_ou				= s.wms_draft_bill_ou
    LEFT JOIN dwh.F_DraftBillSupplierContractDetail t
    ON s.wms_draft_bill_ou = t.draft_bill_ou
    AND s.wms_draft_bill_location = t.draft_bill_location
    AND s.wms_draft_bill_division = t.draft_bill_division
    AND s.wms_draft_bill_tran_type = t.draft_bill_tran_type
    AND s.wms_draft_bill_ref_doc_no = t.draft_bill_ref_doc_no
    AND s.wms_draft_bill_ref_doc_type = t.draft_bill_ref_doc_type
    AND s.wms_draft_bill_vendor_id = t.draft_bill_vendor_id
    AND s.wms_draft_bill_resource_type = t.draft_bill_resource_type
    WHERE t.draft_bill_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_draft_bill_supplier_contract_dtl
    (
        wms_draft_bill_ou, wms_draft_bill_location, wms_draft_bill_division, 
		wms_draft_bill_tran_type, wms_draft_bill_ref_doc_no, wms_draft_bill_ref_doc_type, 
		wms_draft_bill_contract_id, wms_draft_bill_contract_amend_no, wms_draft_bill_vendor_id, 
		wms_draft_bill_created_by, wms_draft_bill_created_date, wms_draft_bill_billing_status, 
		wms_draft_bill_value, wms_draft_bill_booking_location, wms_draft_bill_modified_by, 
		wms_draft_bill_modified_date, wms_draft_bill_last_depart_date, wms_draft_bill_resource_type, 
		etlcreateddatetime
    )
    SELECT
        wms_draft_bill_ou, wms_draft_bill_location, wms_draft_bill_division, 
		wms_draft_bill_tran_type, wms_draft_bill_ref_doc_no, wms_draft_bill_ref_doc_type, 
		wms_draft_bill_contract_id, wms_draft_bill_contract_amend_no, wms_draft_bill_vendor_id, 
		wms_draft_bill_created_by, wms_draft_bill_created_date, wms_draft_bill_billing_status, 
		wms_draft_bill_value, wms_draft_bill_booking_location, wms_draft_bill_modified_by, 
		wms_draft_bill_modified_date, wms_draft_bill_last_depart_date, wms_draft_bill_resource_type, 
		etlcreateddatetime
	FROM stg.stg_wms_draft_bill_supplier_contract_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;		
END;
$$;


ALTER PROCEDURE dwh.usp_f_draftbillsuppliercontractdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_draftbilltariffdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_draftbilltariffdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_draft_bill_acc_tariff_dtl;

    UPDATE dwh.f_draftBillTariffDetail t
    SET
        draft_bill_location                   = s.wms_draft_bill_location,
        draft_bill_division                   = s.wms_draft_bill_division,
        draft_bill_ref_doc_no                 = s.wms_draft_bill_ref_doc_no,
        draft_bill_ref_doc_type               = s.wms_draft_bill_ref_doc_type,
        draft_bill_trigger_doc_no             = s.wms_draft_bill_trigger_doc_no,
        draft_bill_trigger_doc_line_no        = s.wms_draft_bill_trigger_doc_line_no,
        draft_bill_trigger_doc_type           = s.wms_draft_bill_trigger_doc_type,
        draft_bill_trip_leg                   = s.wms_draft_bill_trip_leg,
        draft_bill_contract_id                = s.wms_draft_bill_contract_id,
        draft_bill_tariff_id                  = s.wms_draft_bill_tariff_id,
        draft_bill_acc_tariff_type            = s.wms_draft_bill_acc_tariff_type,
        draft_bill_billable_hours             = s.wms_draft_bill_billable_hours,
        draft_bill_value                      = s.wms_draft_bill_value,
        draft_bill_su_count                   = s.wms_draft_bill_su_count,
        draft_bill_consumables_count          = s.wms_draft_bill_consumables_count,
        draft_bill_created_by                 = s.wms_draft_bill_created_by,
        draft_bill_created_date               = s.wms_draft_bill_created_date,
        draft_bill_trip_thu_line_no           = s.wms_draft_bill_trip_thu_line_no,
        draft_bill_contract_amend_no          = s.wms_draft_bill_contract_amend_no,
        draft_bill_thu_id                     = s.wms_draft_bill_thu_id,
        draft_bill_equipment                  = s.wms_draft_bill_equipment,
        draft_bill_vehicle                    = s.wms_draft_bill_vehicle,
        draft_bill_employee                   = s.wms_draft_bill_employee,
        draft_bill_equipment_type             = s.wms_draft_bill_equipment_type,
        draft_bill_vehicle_type               = s.wms_draft_bill_vehicle_type,
        draft_bill_su                         = s.wms_draft_bill_su,
        draft_bill_item_code                  = s.wms_draft_bill_item_code,
        draft_bill_item_qty                   = s.wms_draft_bill_item_qty,
        draft_bill_master_uom                 = s.wms_draft_bill_master_uom,
        draft_bill_item_wt                    = s.wms_draft_bill_item_wt,
        draft_bill_item_wt_uom                = s.wms_draft_bill_item_wt_uom,
        draft_bill_no_of_weeks                = s.wms_draft_bill_no_of_weeks,
        draft_bill_weight                     = s.wms_draft_bill_weight,
        draft_bill_vendorid                   = s.wms_draft_bill_vendorid,
        draft_bill_thu_space                  = s.wms_draft_bill_thu_space,
        draft_bill_pickup_wt                  = s.wms_draft_bill_pickup_wt,
        draft_bill_delivery_wt                = s.wms_draft_bill_delivery_wt,
        draft_bill_transit_time               = s.wms_draft_bill_transit_time,
        draft_bill_loading_time               = s.wms_draft_bill_loading_time,
        draft_bill_unloading_time             = s.wms_draft_bill_unloading_time,
        draft_bill_est_return_time            = s.wms_draft_bill_est_return_time,
        draft_bill_no_of_empl                 = s.wms_draft_bill_no_of_empl,
        draft_bill_billable_intervals         = s.wms_draft_bill_billable_intervals,
        draft_bill_billing_status             = s.wms_draft_bill_billing_status,
        draft_bill_customer_id                = s.wms_draft_bill_customer_id,
        draft_bill_booking_location           = s.wms_draft_bill_booking_location,
        draft_bill_db_no                      = s.wms_draft_bill_db_no,
        draft_bill_db_ln_no                   = s.wms_draft_bill_db_ln_no,
        draft_bill_no_of_containers           = s.wms_draft_bill_no_of_containers,
        draft_bill_supp_bat_no                = s.wms_draft_bill_supp_bat_no,
        draft_bill_item_class                 = s.wms_draft_bill_item_class,
        draft_bill_periodfrom                 = s.wms_draft_bill_periodfrom,
        draft_bill_periodto                   = s.wms_draft_bill_periodto,
        draft_bill_item_group                 = s.wms_draft_bill_item_group,
        draft_bill_ref_doc_line_no            = s.wms_draft_bill_ref_doc_line_no,
        draft_bill_thu_qty                    = s.wms_draft_bill_thu_qty,
        draft_bill_volume                     = s.wms_draft_bill_volume,
        draft_bill_distance                   = s.wms_draft_bill_distance,
        draft_bill_resourcetype               = s.wms_draft_bill_resourcetype,
        draft_bill_total_storage_cost         = s.wms_draft_bill_total_storage_cost,
        draft_bill_gross_vol_sales            = s.wms_draft_bill_gross_vol_sales,
        draft_bill_calc_basis                 = s.wms_draft_bill_calc_basis,
        draft_bill_channel_type               = s.wms_draft_bill_channel_type,
        draft_bill_in_ord_lineno              = s.wms_draft_bill_in_ord_lineno,
        draft_bill_in_ord_cust_id             = s.wms_draft_bill_in_ord_cust_id,
        draft_bill_int_ord_cust_id            = s.wms_draft_bill_int_ord_cust_id,
        draft_bill_exch_rate                  = s.wms_draft_bill_exch_rate,
        draft_bill_margin                     = s.wms_draft_bill_margin,
        draft_bill_min_charge                 = s.wms_draft_bill_min_charge,
        draft_bill_max_charge                 = s.wms_draft_bill_max_charge,
        draft_bill_min_charge_added           = s.wms_draft_bill_min_charge_added,
        draft_bill_discount                   = s.wms_draft_bill_discount,
        draft_bill_cont_rate                  = s.wms_draft_bill_cont_rate,
        draft_bill_value_currency             = s.wms_draft_bill_value_currency,
        draft_bill_alt_bill_currency          = s.wms_draft_bill_alt_bill_currency,
        draft_bill_seq_no                     = s.wms_draft_bill_seq_no,
        etlactiveind                          = 1,
        etljobname                            = p_etljobname,
        envsourcecd                           = p_envsourcecd,
        datasourcecd                          = p_datasourcecd,
        etlupdatedatetime                     = NOW()
    FROM stg.stg_wms_draft_bill_acc_tariff_dtl s
    WHERE t.draft_bill_ou = s.wms_draft_bill_ou
    AND t.draft_bill_line_no = s.wms_draft_bill_line_no
    AND t.draft_bill_tran_type = s.wms_draft_bill_tran_type;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_draftBillTariffDetail
    (
        draft_bill_ou, draft_bill_line_no, draft_bill_location, draft_bill_division, draft_bill_tran_type, draft_bill_ref_doc_no, 
		draft_bill_ref_doc_type, draft_bill_trigger_doc_no, draft_bill_trigger_doc_line_no, draft_bill_trigger_doc_type, draft_bill_trip_leg, 
		draft_bill_contract_id, draft_bill_tariff_id, draft_bill_acc_tariff_type, draft_bill_billable_hours, draft_bill_value, 
		draft_bill_su_count, draft_bill_consumables_count, draft_bill_created_by, draft_bill_created_date, draft_bill_trip_thu_line_no, 
		draft_bill_contract_amend_no, draft_bill_thu_id, draft_bill_equipment, draft_bill_vehicle, draft_bill_employee, 
		draft_bill_equipment_type, draft_bill_vehicle_type, draft_bill_su, draft_bill_item_code, draft_bill_item_qty, 
		draft_bill_master_uom, draft_bill_item_wt, draft_bill_item_wt_uom, draft_bill_no_of_weeks, draft_bill_weight, 
		draft_bill_vendorid, draft_bill_thu_space, draft_bill_pickup_wt, draft_bill_delivery_wt, draft_bill_transit_time, 
		draft_bill_loading_time, draft_bill_unloading_time, draft_bill_est_return_time, draft_bill_no_of_empl, draft_bill_billable_intervals, 
		draft_bill_billing_status, draft_bill_customer_id, draft_bill_booking_location, draft_bill_db_no, draft_bill_db_ln_no, 
		draft_bill_no_of_containers, draft_bill_supp_bat_no, draft_bill_item_class, draft_bill_periodfrom, draft_bill_periodto, 
		draft_bill_item_group, draft_bill_ref_doc_line_no, draft_bill_thu_qty, draft_bill_volume, draft_bill_distance, 
		draft_bill_resourcetype, draft_bill_total_storage_cost, draft_bill_gross_vol_sales, draft_bill_calc_basis, draft_bill_channel_type, 
		draft_bill_in_ord_lineno, draft_bill_in_ord_cust_id, draft_bill_int_ord_cust_id, draft_bill_exch_rate, draft_bill_margin, 
		draft_bill_min_charge, draft_bill_max_charge, draft_bill_min_charge_added, draft_bill_discount, draft_bill_cont_rate, 
		draft_bill_value_currency, draft_bill_alt_bill_currency, draft_bill_seq_no, etlactiveind, etljobname, envsourcecd, 
		datasourcecd, etlcreatedatetime
    )

    SELECT
        s.wms_draft_bill_ou, s.wms_draft_bill_line_no, s.wms_draft_bill_location, s.wms_draft_bill_division, s.wms_draft_bill_tran_type, s.wms_draft_bill_ref_doc_no, s.wms_draft_bill_ref_doc_type, s.wms_draft_bill_trigger_doc_no, s.wms_draft_bill_trigger_doc_line_no, s.wms_draft_bill_trigger_doc_type, s.wms_draft_bill_trip_leg, s.wms_draft_bill_contract_id, s.wms_draft_bill_tariff_id, s.wms_draft_bill_acc_tariff_type, s.wms_draft_bill_billable_hours, s.wms_draft_bill_value, s.wms_draft_bill_su_count, s.wms_draft_bill_consumables_count, s.wms_draft_bill_created_by, s.wms_draft_bill_created_date, s.wms_draft_bill_trip_thu_line_no, s.wms_draft_bill_contract_amend_no, s.wms_draft_bill_thu_id, s.wms_draft_bill_equipment, s.wms_draft_bill_vehicle, s.wms_draft_bill_employee, s.wms_draft_bill_equipment_type, s.wms_draft_bill_vehicle_type, s.wms_draft_bill_su, s.wms_draft_bill_item_code, s.wms_draft_bill_item_qty, s.wms_draft_bill_master_uom, s.wms_draft_bill_item_wt, s.wms_draft_bill_item_wt_uom, s.wms_draft_bill_no_of_weeks, s.wms_draft_bill_weight, s.wms_draft_bill_vendorid, s.wms_draft_bill_thu_space, s.wms_draft_bill_pickup_wt, s.wms_draft_bill_delivery_wt, s.wms_draft_bill_transit_time, s.wms_draft_bill_loading_time, s.wms_draft_bill_unloading_time, s.wms_draft_bill_est_return_time, s.wms_draft_bill_no_of_empl, s.wms_draft_bill_billable_intervals, s.wms_draft_bill_billing_status, s.wms_draft_bill_customer_id, s.wms_draft_bill_booking_location, s.wms_draft_bill_db_no, s.wms_draft_bill_db_ln_no, s.wms_draft_bill_no_of_containers, s.wms_draft_bill_supp_bat_no, s.wms_draft_bill_item_class, s.wms_draft_bill_periodfrom, s.wms_draft_bill_periodto, s.wms_draft_bill_item_group, s.wms_draft_bill_ref_doc_line_no, s.wms_draft_bill_thu_qty, s.wms_draft_bill_volume, s.wms_draft_bill_distance, s.wms_draft_bill_resourcetype, s.wms_draft_bill_total_storage_cost, s.wms_draft_bill_gross_vol_sales, s.wms_draft_bill_calc_basis, s.wms_draft_bill_channel_type, s.wms_draft_bill_in_ord_lineno, s.wms_draft_bill_in_ord_cust_id, s.wms_draft_bill_int_ord_cust_id, s.wms_draft_bill_exch_rate, s.wms_draft_bill_margin, s.wms_draft_bill_min_charge, s.wms_draft_bill_max_charge, s.wms_draft_bill_min_charge_added, s.wms_draft_bill_discount, s.wms_draft_bill_cont_rate, s.wms_draft_bill_value_currency, s.wms_draft_bill_alt_bill_currency, s.wms_draft_bill_seq_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_draft_bill_acc_tariff_dtl s
    LEFT JOIN dwh.f_draftBillTariffDetail t
    ON s.wms_draft_bill_ou = t.draft_bill_ou
    AND s.wms_draft_bill_line_no = t.draft_bill_line_no
    AND s.wms_draft_bill_tran_type = t.draft_bill_tran_type
    WHERE t.draft_bill_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_draft_bill_acc_tariff_dtl
    (
        wms_draft_bill_ou, wms_draft_bill_line_no, wms_draft_bill_location, wms_draft_bill_division, wms_draft_bill_tran_type, wms_draft_bill_ref_doc_no, wms_draft_bill_ref_doc_type, wms_draft_bill_trigger_doc_no, wms_draft_bill_trigger_doc_line_no, wms_draft_bill_trigger_doc_type, wms_draft_bill_trip_leg, wms_draft_bill_contract_id, wms_draft_bill_tariff_id, wms_draft_bill_acc_tariff_type, wms_draft_bill_billable_hours, wms_draft_bill_value, wms_draft_bill_su_count, wms_draft_bill_consumables_count, wms_draft_bill_created_by, wms_draft_bill_created_date, wms_draft_bill_trip_thu_line_no, wms_draft_bill_contract_amend_no, wms_draft_bill_thu_id, wms_draft_bill_equipment, wms_draft_bill_vehicle, wms_draft_bill_employee, wms_draft_bill_equipment_type, wms_draft_bill_vehicle_type, wms_draft_bill_su, wms_draft_bill_item_code, wms_draft_bill_item_qty, wms_draft_bill_master_uom, wms_draft_bill_item_wt, wms_draft_bill_item_wt_uom, wms_draft_bill_no_of_weeks, wms_draft_bill_weight, wms_draft_bill_vendorid, wms_draft_bill_thu_space, wms_draft_bill_pickup_wt, wms_draft_bill_delivery_wt, wms_draft_bill_transit_time, wms_draft_bill_loading_time, wms_draft_bill_unloading_time, wms_draft_bill_est_return_time, wms_draft_bill_no_of_empl, wms_draft_bill_billable_intervals, wms_draft_bill_billing_status, wms_draft_bill_customer_id, wms_draft_bill_booking_location, wms_draft_bill_db_no, wms_draft_bill_db_ln_no, wms_draft_bill_no_of_containers, wms_draft_bill_supp_bat_no, wms_draft_bill_item_class, wms_draft_bill_periodfrom, wms_draft_bill_periodto, wms_draft_bill_item_group, wms_draft_bill_ref_doc_line_no, wms_draft_bill_thu_qty, wms_draft_bill_volume, wms_draft_bill_distance, wms_draft_bill_resourcetype, wms_draft_bill_total_storage_cost, wms_draft_bill_gross_vol_sales, wms_draft_bill_calc_basis, wms_draft_bill_channel_type, wms_draft_bill_in_ord_lineno, wms_draft_bill_in_ord_cust_id, wms_draft_bill_int_ord_cust_id, wms_draft_bill_exch_rate, wms_draft_bill_margin, wms_draft_bill_min_charge, wms_draft_bill_max_charge, wms_draft_bill_min_charge_added, wms_draft_bill_discount, wms_draft_bill_cont_rate, wms_draft_bill_value_currency, wms_draft_bill_alt_bill_currency, wms_draft_bill_seq_no, etlcreateddatetime
    )
    SELECT
        wms_draft_bill_ou, wms_draft_bill_line_no, wms_draft_bill_location, wms_draft_bill_division, wms_draft_bill_tran_type, wms_draft_bill_ref_doc_no, wms_draft_bill_ref_doc_type, wms_draft_bill_trigger_doc_no, wms_draft_bill_trigger_doc_line_no, wms_draft_bill_trigger_doc_type, wms_draft_bill_trip_leg, wms_draft_bill_contract_id, wms_draft_bill_tariff_id, wms_draft_bill_acc_tariff_type, wms_draft_bill_billable_hours, wms_draft_bill_value, wms_draft_bill_su_count, wms_draft_bill_consumables_count, wms_draft_bill_created_by, wms_draft_bill_created_date, wms_draft_bill_trip_thu_line_no, wms_draft_bill_contract_amend_no, wms_draft_bill_thu_id, wms_draft_bill_equipment, wms_draft_bill_vehicle, wms_draft_bill_employee, wms_draft_bill_equipment_type, wms_draft_bill_vehicle_type, wms_draft_bill_su, wms_draft_bill_item_code, wms_draft_bill_item_qty, wms_draft_bill_master_uom, wms_draft_bill_item_wt, wms_draft_bill_item_wt_uom, wms_draft_bill_no_of_weeks, wms_draft_bill_weight, wms_draft_bill_vendorid, wms_draft_bill_thu_space, wms_draft_bill_pickup_wt, wms_draft_bill_delivery_wt, wms_draft_bill_transit_time, wms_draft_bill_loading_time, wms_draft_bill_unloading_time, wms_draft_bill_est_return_time, wms_draft_bill_no_of_empl, wms_draft_bill_billable_intervals, wms_draft_bill_billing_status, wms_draft_bill_customer_id, wms_draft_bill_booking_location, wms_draft_bill_db_no, wms_draft_bill_db_ln_no, wms_draft_bill_no_of_containers, wms_draft_bill_supp_bat_no, wms_draft_bill_item_class, wms_draft_bill_periodfrom, wms_draft_bill_periodto, wms_draft_bill_item_group, wms_draft_bill_ref_doc_line_no, wms_draft_bill_thu_qty, wms_draft_bill_volume, wms_draft_bill_distance, wms_draft_bill_resourcetype, wms_draft_bill_total_storage_cost, wms_draft_bill_gross_vol_sales, wms_draft_bill_calc_basis, wms_draft_bill_channel_type, wms_draft_bill_in_ord_lineno, wms_draft_bill_in_ord_cust_id, wms_draft_bill_int_ord_cust_id, wms_draft_bill_exch_rate, wms_draft_bill_margin, wms_draft_bill_min_charge, wms_draft_bill_max_charge, wms_draft_bill_min_charge_added, wms_draft_bill_discount, wms_draft_bill_cont_rate, wms_draft_bill_value_currency, wms_draft_bill_alt_bill_currency, wms_draft_bill_seq_no, etlcreateddatetime
    FROM stg.stg_wms_draft_bill_acc_tariff_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_draftbilltariffdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_eamamchdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_eamamchdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_eam_amc_hdr;

    UPDATE dwh.F_eamamchdr t
    SET
		amc_vendor_key				= COALESCE(v.vendor_key,-1),
		amc_curr_key				= COALESCE(cr.curr_key,-1),
        amc_timestamp               = s.amc_timestamp,
        amc_Type                    = s.amc_Type,
        amc_Pay_Mode                = s.amc_Pay_Mode,
        amc_Freq                    = s.amc_Freq,
        amc_amcamount               = s.amc_amcamount,
        amc_PONo                    = s.amc_PONo,
        amc_Supp_AMCRefNo           = s.amc_Supp_AMCRefNo,
        amc_Curr                    = s.amc_Curr,
        amc_Cont_Person             = s.amc_Cont_Person,
        amc_MailID                  = s.amc_MailID,
        amc_createdby               = s.amc_createdby,
        amc_modifiedby              = s.amc_modifiedby,
        amc_modifieddate            = s.amc_modifieddate,
        amc_status                  = s.amc_status,
        amc_bill_basedon            = s.amc_bill_basedon,
        amc_Exp_Opt                 = s.amc_Exp_Opt,
        amc_inv_type                = s.amc_inv_type,
        amc_fixed_rate              = s.amc_fixed_rate,
        amc_rate_exc_param          = s.amc_rate_exc_param,
        amc_remarks                 = s.amc_remarks,
        amc_doctyp                  = s.amc_doctyp,
        amc_doclineno               = s.amc_doclineno,
        amc_agr_pre_visit           = s.amc_agr_pre_visit,
        amc_agr_brkdwn_visit        = s.amc_agr_brkdwn_visit,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_eam_amc_hdr s
	LEFT JOIN dwh.d_vendor v
		ON  s.amc_SuppCode			= v.vendor_id
		AND s.amc_amcou				= v.vendor_ou
	LEFT JOIN dwh.d_currency cr
		ON  s.amc_Curr				= cr.iso_curr_code	
    WHERE t.amc_amcno 				= s.amc_amcno
    AND t.amc_amcou 				= s.amc_amcou
    AND t.amc_date 					= s.amc_date
    AND t.amc_fromdate 				= s.amc_fromdate
    AND t.amc_todate 				= s.amc_todate
    AND t.amc_RevNo 				= s.amc_RevNo
    AND t.amc_SuppCode 				= s.amc_SuppCode
    AND t.amc_createdate 			= s.amc_createdate;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_eamamchdr
    (
        amc_vendor_key, amc_curr_key, amc_amcno, amc_amcou, amc_date, amc_fromdate, amc_todate, amc_RevNo, amc_timestamp, amc_Type, amc_Pay_Mode, amc_Freq, amc_SuppCode, amc_amcamount, amc_PONo, amc_Supp_AMCRefNo, amc_Curr, amc_Cont_Person, amc_MailID, amc_createdby, amc_createdate, amc_modifiedby, amc_modifieddate, amc_status, amc_bill_basedon, amc_Exp_Opt, amc_inv_type, amc_fixed_rate, amc_rate_exc_param, amc_remarks, amc_doctyp, amc_doclineno, amc_agr_pre_visit, amc_agr_brkdwn_visit, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(v.vendor_key,-1), COALESCE(cr.curr_key,-1), s.amc_amcno, s.amc_amcou, s.amc_date, s.amc_fromdate, s.amc_todate, s.amc_RevNo, s.amc_timestamp, s.amc_Type, s.amc_Pay_Mode, s.amc_Freq, s.amc_SuppCode, s.amc_amcamount, s.amc_PONo, s.amc_Supp_AMCRefNo, s.amc_Curr, s.amc_Cont_Person, s.amc_MailID, s.amc_createdby, s.amc_createdate, s.amc_modifiedby, s.amc_modifieddate, s.amc_status, s.amc_bill_basedon, s.amc_Exp_Opt, s.amc_inv_type, s.amc_fixed_rate, s.amc_rate_exc_param, s.amc_remarks, s.amc_doctyp, s.amc_doclineno, s.amc_agr_pre_visit, s.amc_agr_brkdwn_visit, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_eam_amc_hdr s
	LEFT JOIN dwh.d_vendor v
		ON  s.amc_SuppCode			= v.vendor_id
		AND s.amc_amcou				= v.vendor_ou
	LEFT JOIN dwh.d_currency cr
		ON  s.amc_Curr				= cr.iso_curr_code	
    LEFT JOIN dwh.F_eamamchdr t
    ON s.amc_amcno 					= t.amc_amcno
    AND s.amc_amcou 				= t.amc_amcou
    AND s.amc_date 					= t.amc_date
    AND s.amc_fromdate 				= t.amc_fromdate
    AND s.amc_todate 				= t.amc_todate
    AND s.amc_RevNo 				= t.amc_RevNo
    AND s.amc_SuppCode 				= t.amc_SuppCode
    AND s.amc_createdate 			= t.amc_createdate
    WHERE t.amc_amcno IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_eam_amc_hdr
    (
        amc_amcno, amc_amcou, amc_date, amc_fromdate, amc_todate, amc_RevNo, amc_timestamp, amc_lastrev_date, amc_Type, amc_Pay_Mode, amc_Freq, amc_SuppCode, amc_amcamount, amc_PONo, amc_Supp_AMCRefNo, amc_Curr, amc_Cont_Person, amc_Cont_No, amc_MailID, amc_createdby, amc_createdate, amc_modifiedby, amc_modifieddate, amc_status, amc_bill_basedon, amc_Exp_Opt, amc_inv_type, amc_exp_param_val, amc_fixed_rate, amc_max_param_val, amc_rate_exc_param, amc_reas_for_rev, amc_expiry_param, amc_remarks, amc_param_uom, amc_doctyp, amc_doclineno, amc_showstopper, amc_medium, amc_low, amc_critical, amc_agr_pre_visit, amc_agr_brkdwn_visit, etlcreateddatetime
    )
    SELECT
        amc_amcno, amc_amcou, amc_date, amc_fromdate, amc_todate, amc_RevNo, amc_timestamp, amc_lastrev_date, amc_Type, amc_Pay_Mode, amc_Freq, amc_SuppCode, amc_amcamount, amc_PONo, amc_Supp_AMCRefNo, amc_Curr, amc_Cont_Person, amc_Cont_No, amc_MailID, amc_createdby, amc_createdate, amc_modifiedby, amc_modifieddate, amc_status, amc_bill_basedon, amc_Exp_Opt, amc_inv_type, amc_exp_param_val, amc_fixed_rate, amc_max_param_val, amc_rate_exc_param, amc_reas_for_rev, amc_expiry_param, amc_remarks, amc_param_uom, amc_doctyp, amc_doclineno, amc_showstopper, amc_medium, amc_low, amc_critical, amc_agr_pre_visit, amc_agr_brkdwn_visit, etlcreateddatetime
    FROM stg.stg_eam_amc_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_eamamchdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_execthudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_execthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_pletd_exec_thu_details;

        UPDATE dwh.F_ExecThuDetail t
        SET
        plepd_trip_exe_pln_dtl_key       	=  oh.plepd_trip_exe_pln_dtl_key,
        pletd_thu_available_qty             = s.pletd_thu_available_qty,
        pletd_thu_draft_qty                 = s.pletd_thu_draft_qty,
        pletd_thu_confirmed_qty             = s.pletd_thu_confirmed_qty,
        pletd_thu_available_weight          = s.pletd_thu_available_weight,
        pletd_thu_draft_weight              = s.pletd_thu_draft_weight,
        pletd_thu_confirmed_weight          = s.pletd_thu_confirmed_weight,
        pletd_thu_available_volume          = s.pletd_thu_available_volume,
        pletd_thu_draft_volume              = s.pletd_thu_draft_volume,
        pletd_thu_confirmed_volume          = s.pletd_thu_confirmed_volume,
        pletd_created_by                    = s.pletd_created_by,
        pletd_created_date                  = s.pletd_created_date,
        pletd_modified_by                   = s.pletd_modified_by,
        pletd_modified_date                 = s.pletd_modified_date,
        pletd_updated_by                    = s.pletd_updated_by,
        pletd_timestamp                     = s.pletd_timestamp,
        pletd_initiated_qty                 = s.pletd_initiated_qty,
        pletd_executed_qty                  = s.pletd_executed_qty,
        pletd_dispatch_docno                = s.pletd_dispatch_docno,
        pletd_thu_id                        = s.pletd_thu_id,
        pletd_weight                        = s.pletd_weight,
        pletd_weight_uom                    = s.pletd_weight_uom,
        pletd_volume                        = s.pletd_volume,
        pletd_volume_uom                    = s.pletd_volume_uom,
        pletd_pallet                        = s.pletd_pallet,
        pletd_thu_qty                       = s.pletd_thu_qty,
        pletd_pickup_shotclosure_qty        = s.pletd_pickup_shotclosure_qty,
        etlactiveind                        = 1,
        etljobname                          = p_etljobname,
        envsourcecd                         = p_envsourcecd,
        datasourcecd                        = p_datasourcecd,
        etlupdatedatetime                   = NOW()
        FROM stg.stg_tms_pletd_exec_thu_details s

        INNER JOIN dwh.f_tripexecutionplandetail oh
        ON    s.pletd_ouinstance  			= oh.plepd_ouinstance
        AND   s.pletd_execution_plan_id  	= oh.plepd_execution_plan_id
        AND   s.pletd_line_no  				= oh.plepd_line_no
        WHERE t.pletd_ouinstance = s.pletd_ouinstance
    	AND t.pletd_execution_plan_id = s.pletd_execution_plan_id
    	AND t.pletd_line_no = s.pletd_line_no
		AND t.pletd_dispatch_docno =  s.pletd_dispatch_docno
    	AND t.pletd_thu_line_no = s.pletd_thu_line_no;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_ExecThuDetail
        (
           plepd_trip_exe_pln_dtl_key, pletd_ouinstance, pletd_execution_plan_id, pletd_line_no, pletd_thu_line_no, pletd_thu_available_qty, pletd_thu_draft_qty, pletd_thu_confirmed_qty, pletd_thu_available_weight, pletd_thu_draft_weight, pletd_thu_confirmed_weight, pletd_thu_available_volume, pletd_thu_draft_volume, pletd_thu_confirmed_volume, pletd_created_by, pletd_created_date, pletd_modified_by, pletd_modified_date, pletd_updated_by, pletd_timestamp, pletd_initiated_qty, pletd_executed_qty, pletd_dispatch_docno, pletd_thu_id, pletd_weight, pletd_weight_uom, pletd_volume, pletd_volume_uom, pletd_pallet, pletd_thu_qty, pletd_pickup_shotclosure_qty, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            oh.plepd_trip_exe_pln_dtl_key,s.pletd_ouinstance, s.pletd_execution_plan_id, s.pletd_line_no, s.pletd_thu_line_no, s.pletd_thu_available_qty, s.pletd_thu_draft_qty, s.pletd_thu_confirmed_qty, s.pletd_thu_available_weight, s.pletd_thu_draft_weight, s.pletd_thu_confirmed_weight, s.pletd_thu_available_volume, s.pletd_thu_draft_volume, s.pletd_thu_confirmed_volume, s.pletd_created_by, s.pletd_created_date, s.pletd_modified_by, s.pletd_modified_date, s.pletd_updated_by, s.pletd_timestamp, s.pletd_initiated_qty, s.pletd_executed_qty, s.pletd_dispatch_docno, s.pletd_thu_id, s.pletd_weight, s.pletd_weight_uom, s.pletd_volume, s.pletd_volume_uom, s.pletd_pallet, s.pletd_thu_qty, s.pletd_pickup_shotclosure_qty, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_pletd_exec_thu_details s

    INNER JOIN dwh.f_tripexecutionplandetail oh
        ON  s.pletd_ouinstance  			= oh.plepd_ouinstance
        AND   s.pletd_execution_plan_id  	= oh.plepd_execution_plan_id
        AND   s.pletd_line_no  				= oh.plepd_line_no

    LEFT JOIN dwh.F_ExecThuDetail t
        ON s.pletd_ouinstance = t.pletd_ouinstance
        AND s.pletd_execution_plan_id = t.pletd_execution_plan_id
        AND s.pletd_line_no = t.pletd_line_no
		AND s.pletd_dispatch_docno =  t.pletd_dispatch_docno
        AND s.pletd_thu_line_no = t.pletd_thu_line_no
        WHERE t.pletd_ouinstance IS NULL;
		
		

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_pletd_exec_thu_details
        (
            pletd_ouinstance, pletd_execution_plan_id, pletd_line_no, pletd_thu_line_no, pletd_thu_available_qty, pletd_thu_draft_qty, pletd_thu_confirmed_qty, pletd_thu_available_weight, pletd_thu_draft_weight, pletd_thu_confirmed_weight, pletd_thu_available_volume, pletd_thu_draft_volume, pletd_thu_confirmed_volume, pletd_created_by, pletd_created_date, pletd_modified_by, pletd_modified_date, pletd_updated_by, pletd_timestamp, pletd_initiated_qty, pletd_executed_qty, pletd_dispatch_docno, pletd_thu_id, pletd_weight, pletd_weight_uom, pletd_volume, pletd_volume_uom, pletd_pallet, pletd_thu_qty, pletd_pickup_shotclosure_qty, etlcreateddatetime
        )
        SELECT
            pletd_ouinstance, pletd_execution_plan_id, pletd_line_no, pletd_thu_line_no, pletd_thu_available_qty, pletd_thu_draft_qty, pletd_thu_confirmed_qty, pletd_thu_available_weight, pletd_thu_draft_weight, pletd_thu_confirmed_weight, pletd_thu_available_volume, pletd_thu_draft_volume, pletd_thu_confirmed_volume, pletd_created_by, pletd_created_date, pletd_modified_by, pletd_modified_date, pletd_updated_by, pletd_timestamp, pletd_initiated_qty, pletd_executed_qty, pletd_dispatch_docno, pletd_thu_id, pletd_weight, pletd_weight_uom, pletd_volume, pletd_volume_uom, pletd_pallet, pletd_thu_qty, pletd_pickup_shotclosure_qty, etlcreateddatetime
        FROM stg.stg_tms_pletd_exec_thu_details;
    END IF;

    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;  
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 
    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_execthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_execthuserialdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_execthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_pletsd_exec_thu_serial_details;

        UPDATE dwh.F_ExecThuSerialDetail t
        SET

        plepd_trip_exe_pln_dtl_key            = oh.plepd_trip_exe_pln_dtl_key,
        pletsd_serial                         = s.pletsd_serial,
        pletsd_serial_available_qty           = s.pletsd_serial_available_qty,
        pletsd_serial_draft_qty               = s.pletsd_serial_draft_qty,
        pletsd_serial_confirmed_qty           = s.pletsd_serial_confirmed_qty,
        pletsd_serail_available_weight        = s.pletsd_serail_available_weight,
        pletsd_serial_draft_weight            = s.pletsd_serial_draft_weight,
        pletsd_serial_confirmed_weight        = s.pletsd_serial_confirmed_weight,
        pletsd_serial_available_volume        = s.pletsd_serial_available_volume,
        pletsd_serial_draft_volume            = s.pletsd_serial_draft_volume,
        pletsd_serial_confirmed_volume        = s.pletsd_serial_confirmed_volume,
        pletsd_created_by                     = s.pletsd_created_by,
        pletsd_created_date                   = s.pletsd_created_date,
        pletsd_modified_by                    = s.pletsd_modified_by,
        pletsd_modified_date                  = s.pletsd_modified_date,
        pletsd_timestamp                      = s.pletsd_timestamp,
        pletsd_serial_initiated_qty           = s.pletsd_serial_initiated_qty,
        pletsd_serial_executed_qty            = s.pletsd_serial_executed_qty,
        pletsd_serial_initiated_weight        = s.pletsd_serial_initiated_weight,
        pletsd_serial_executed_weight         = s.pletsd_serial_executed_weight,
        pletsd_serial_initiated_volume        = s.pletsd_serial_initiated_volume,
        pletsd_serial_executed_volume         = s.pletsd_serial_executed_volume,
        pletsd_serial_dropped_off             = s.pletsd_serial_dropped_off,
        pletsd_serial_dispatch                = s.pletsd_serial_dispatch,
        pletsd_updated_by                     = s.pletsd_updated_by,
        pletsd_picked_shortclosure            = s.pletsd_picked_shortclosure,
            etlactiveind                          = 1,
        etljobname                            = p_etljobname,
        envsourcecd                           = p_envsourcecd,
        datasourcecd                          = p_datasourcecd,
        etlupdatedatetime                     = NOW()
        FROM stg.stg_tms_pletsd_exec_thu_serial_details s

INNER JOIN dwh.f_tripexecutionplandetail oh
ON    s.pletsd_execution_plan_id =    oh.plepd_execution_plan_id
 AND  s.pletsd_line_no =   oh.plepd_line_no
 AND  s.pletsd_ouinstance =   oh.plepd_ouinstance

        WHERE t.pletsd_ouinstance = s.pletsd_ouinstance
    AND t.pletsd_execution_plan_id = s.pletsd_execution_plan_id
    AND t.pletsd_line_no = s.pletsd_line_no
    AND t.pletsd_thu_line_no = s.pletsd_thu_line_no
    AND t.pletsd_serial_line_no  = s.pletsd_serial_line_no;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_ExecThuSerialDetail
        (
          plepd_trip_exe_pln_dtl_key,  pletsd_ouinstance, pletsd_execution_plan_id, pletsd_line_no, pletsd_thu_line_no, pletsd_serial_line_no, pletsd_serial, pletsd_serial_available_qty, pletsd_serial_draft_qty, pletsd_serial_confirmed_qty, pletsd_serail_available_weight, pletsd_serial_draft_weight, pletsd_serial_confirmed_weight, pletsd_serial_available_volume, pletsd_serial_draft_volume, pletsd_serial_confirmed_volume, pletsd_created_by, pletsd_created_date, pletsd_modified_by, pletsd_modified_date, pletsd_timestamp, pletsd_serial_initiated_qty, pletsd_serial_executed_qty, pletsd_serial_initiated_weight, pletsd_serial_executed_weight, pletsd_serial_initiated_volume, pletsd_serial_executed_volume, pletsd_serial_dropped_off, pletsd_serial_dispatch, pletsd_updated_by, pletsd_picked_shortclosure, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
           oh.plepd_trip_exe_pln_dtl_key, s.pletsd_ouinstance, s.pletsd_execution_plan_id, s.pletsd_line_no, s.pletsd_thu_line_no, s.pletsd_serial_line_no, s.pletsd_serial, s.pletsd_serial_available_qty, s.pletsd_serial_draft_qty, s.pletsd_serial_confirmed_qty, s.pletsd_serail_available_weight, s.pletsd_serial_draft_weight, s.pletsd_serial_confirmed_weight, s.pletsd_serial_available_volume, s.pletsd_serial_draft_volume, s.pletsd_serial_confirmed_volume, s.pletsd_created_by, s.pletsd_created_date, s.pletsd_modified_by, s.pletsd_modified_date, s.pletsd_timestamp, s.pletsd_serial_initiated_qty, s.pletsd_serial_executed_qty, s.pletsd_serial_initiated_weight, s.pletsd_serial_executed_weight, s.pletsd_serial_initiated_volume, s.pletsd_serial_executed_volume, s.pletsd_serial_dropped_off, s.pletsd_serial_dispatch, s.pletsd_updated_by, s.pletsd_picked_shortclosure, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_pletsd_exec_thu_serial_details s

        INNER JOIN dwh.f_tripexecutionplandetail oh
       ON    s.pletsd_execution_plan_id =    oh.plepd_execution_plan_id
       AND  s.pletsd_line_no =   oh.plepd_line_no
       AND  s.pletsd_ouinstance =   oh.plepd_ouinstance

        LEFT JOIN dwh.F_ExecThuSerialDetail t
        ON s.pletsd_ouinstance = t.pletsd_ouinstance
    AND t.pletsd_execution_plan_id = s.pletsd_execution_plan_id
    AND t.pletsd_line_no = s.pletsd_line_no
    AND t.pletsd_thu_line_no = s.pletsd_thu_line_no
    AND t.pletsd_serial_line_no  = s.pletsd_serial_line_no

        WHERE t.pletsd_ouinstance IS NULL;
		

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_pletsd_exec_thu_serial_details
        (
            pletsd_ouinstance, pletsd_execution_plan_id, pletsd_line_no, pletsd_thu_line_no, pletsd_serial_line_no, pletsd_serial, pletsd_serial_available_qty, pletsd_serial_draft_qty, pletsd_serial_confirmed_qty, pletsd_serail_available_weight, pletsd_serial_draft_weight, pletsd_serial_confirmed_weight, pletsd_serial_available_volume, pletsd_serial_draft_volume, pletsd_serial_confirmed_volume, pletsd_created_by, pletsd_created_date, pletsd_modified_by, pletsd_modified_date, pletsd_timestamp, pletsd_serial_initiated_qty, pletsd_serial_executed_qty, pletsd_serial_initiated_weight, pletsd_serial_executed_weight, pletsd_serial_initiated_volume, pletsd_serial_executed_volume, pletsd_serial_dropped_off, pletsd_serial_dispatch, pletsd_updated_by, pletsd_picked_shortclosure, etlcreateddatetime
        )
        SELECT
            pletsd_ouinstance, pletsd_execution_plan_id, pletsd_line_no, pletsd_thu_line_no, pletsd_serial_line_no, pletsd_serial, pletsd_serial_available_qty, pletsd_serial_draft_qty, pletsd_serial_confirmed_qty, pletsd_serail_available_weight, pletsd_serial_draft_weight, pletsd_serial_confirmed_weight, pletsd_serial_available_volume, pletsd_serial_draft_volume, pletsd_serial_confirmed_volume, pletsd_created_by, pletsd_created_date, pletsd_modified_by, pletsd_modified_date, pletsd_timestamp, pletsd_serial_initiated_qty, pletsd_serial_executed_qty, pletsd_serial_initiated_weight, pletsd_serial_executed_weight, pletsd_serial_initiated_volume, pletsd_serial_executed_volume, pletsd_serial_dropped_off, pletsd_serial_dispatch, pletsd_updated_by, pletsd_picked_shortclosure, etlcreateddatetime
        FROM stg.stg_tms_pletsd_exec_thu_serial_details;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
   EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_execthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_fbpaccountbalance(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_fbpaccountbalance(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_fbp_account_balance;

    UPDATE dwh.F_fbpaccountbalance t
    SET
        fbp_act_curr_key     = COALESCE(c.curr_key,-1),
   
        timestamp            = s.timestamp,
        ob_credit            = s.ob_credit,
        ob_debit             = s.ob_debit,
        period_credit        = s.period_credit,
        period_debit         = s.period_debit,
        cb_credit            = s.cb_credit,
        cb_debit             = s.cb_debit,
        recon_status         = s.recon_status,
        createdby            = s.createdby,
        createddate          = s.createddate,
        modifiedby           = s.modifiedby,
        modifieddate         = s.modifieddate,
        ari_upd_flag         = s.ari_upd_flag,
        etlactiveind         = 1,
        etljobname           = p_etljobname,
        envsourcecd          = p_envsourcecd,
        datasourcecd         = p_datasourcecd,
        etlupdatedatetime    = NOW()
    FROM stg.stg_fbp_account_balance s
       LEFT JOIN dwh.d_currency c      
    ON  s.currency_code          = c.iso_curr_code  
    WHERE t.ou_id = s.ou_id
    AND t.company_code = s.company_code
    AND t.fb_id = s.fb_id
    AND t.fin_year = s.fin_year
    AND t.fin_period = s.fin_period
    AND t.account_code = s.account_code
    AND t.currency_code = s.currency_code;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_fbpaccountbalance
    (
        fbp_act_curr_key,ou_id, company_code, fb_id, fin_year, fin_period, account_code, currency_code, timestamp, ob_credit, ob_debit, period_credit, period_debit, cb_credit, cb_debit, recon_status, createdby, createddate, modifiedby, modifieddate, ari_upd_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(c.curr_key,-1), s.ou_id, s.company_code, s.fb_id, s.fin_year, s.fin_period, s.account_code, s.currency_code, s.timestamp, s.ob_credit, s.ob_debit, s.period_credit, s.period_debit, s.cb_credit, s.cb_debit, s.recon_status, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.ari_upd_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_fbp_account_balance s
       LEFT JOIN dwh.d_currency c      
    ON  s.currency_code          = c.iso_curr_code  
    LEFT JOIN dwh.F_fbpaccountbalance t
    ON s.ou_id = t.ou_id
    AND s.company_code = t.company_code
    AND s.fb_id = t.fb_id
    AND s.fin_year = t.fin_year
    AND s.fin_period = t.fin_period
    AND s.account_code = t.account_code
    AND s.currency_code = t.currency_code
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_fbp_account_balance
    (
        ou_id, company_code, fb_id, fin_year, fin_period, account_code, currency_code, timestamp, ob_credit, ob_debit, period_credit, period_debit, cb_credit, cb_debit, recon_status, createdby, createddate, modifiedby, modifieddate, ari_upd_flag, etlcreateddatetime
    )
    SELECT
        ou_id, company_code, fb_id, fin_year, fin_period, account_code, currency_code, timestamp, ob_credit, ob_debit, period_credit, period_debit, cb_credit, cb_debit, recon_status, createdby, createddate, modifiedby, modifieddate, ari_upd_flag, etlcreateddatetime
    FROM stg.stg_fbp_account_balance;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_fbpaccountbalance(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_fbppostedtrndtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_fbppostedtrndtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_fbp_posted_trn_dtl;

    
    INSERT INTO dwh.F_fbppostedtrndtl
    (
       fbp_trn_curr_key,fbp_trn_company_key ,timestamp, batch_id, company_code, component_name, bu_id, fb_id, tran_ou, fb_voucher_no, fb_voucher_date, recon_flag, document_no, tran_type, tran_date, entry_date, auth_date, posting_date, ou_id, account_code, drcr_flag, currency_code, tran_amount, base_amount, par_base_amount, exchange_rate, par_exchange_rate, narration, bank_code, analysis_code, subanalysis_code, cost_center, item_code, item_variant, quantity, tax_post_flag, mac_post_flag, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, supcust_code, uom, mac_inc_flag, createdby, createddate, modifiedby, modifieddate, fin_year_code, fin_period_code, updated_flag, recon_date, hdrremarks, mlremarks, isRepupdated, afe_number, line_no, item_tcd_type, source_comp, defermentamount, ari_upd_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(c.curr_key,-1),COALESCE(g.company_key,-1),s.timestamp, s.batch_id, s.company_code, s.component_name, s.bu_id, s.fb_id, s.tran_ou, s.fb_voucher_no, s.fb_voucher_date, s.recon_flag, s.document_no, s.tran_type, s.tran_date, s.entry_date, s.auth_date, s.posting_date, s.ou_id, s.account_code, s.drcr_flag, s.currency_code, s.tran_amount, s.base_amount, s.par_base_amount, s.exchange_rate, s.par_exchange_rate, s.narration, s.bank_code, s.analysis_code, s.subanalysis_code, s.cost_center, s.item_code, s.item_variant, s.quantity, s.tax_post_flag, s.mac_post_flag, s.reftran_fbid, s.reftran_no, s.reftran_ou, s.ref_tran_type, s.supcust_code, s.uom, s.mac_inc_flag, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.fin_year_code, s.fin_period_code, s.updated_flag, s.recon_date, s.hdrremarks, s.mlremarks, s.isRepupdated, s.afe_number, s.line_no, s.item_tcd_type, s.source_comp, s.defermentamount, s.ari_upd_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_fbp_posted_trn_dtl s

      LEFT JOIN dwh.d_currency c      
    ON  s.currency_code          = c.iso_curr_code  
	
	 LEFT JOIN dwh.d_company g      
    ON  s.company_code          = g.company_code;  

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	select 0 into updcnt;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_fbp_posted_trn_dtl
    (
        timestamp, batch_id, company_code, component_name, bu_id, fb_id, tran_ou, fb_voucher_no, fb_voucher_date, recon_flag, con_ref_voucherno, document_no, tran_type, tran_date, entry_date, auth_date, posting_date, ou_id, account_code, drcr_flag, currency_code, tran_amount, base_amount, par_base_amount, exchange_rate, par_exchange_rate, narration, bank_code, analysis_code, subanalysis_code, cost_center, item_code, item_variant, quantity, tax_post_flag, mac_post_flag, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, supcust_code, uom, mac_inc_flag, createdby, createddate, modifiedby, modifieddate, fin_year_code, fin_period_code, updated_flag, recon_date, hdrremarks, mlremarks, isRepupdated, project_ou, Project_code, afe_number, job_number, Old_batch_id, line_no, item_tcd_type, consolidated, source_comp, defermentamount, ari_upd_flag, rowtype, etlcreateddatetime
    )
    SELECT
        timestamp, batch_id, company_code, component_name, bu_id, fb_id, tran_ou, fb_voucher_no, fb_voucher_date, recon_flag, con_ref_voucherno, document_no, tran_type, tran_date, entry_date, auth_date, posting_date, ou_id, account_code, drcr_flag, currency_code, tran_amount, base_amount, par_base_amount, exchange_rate, par_exchange_rate, narration, bank_code, analysis_code, subanalysis_code, cost_center, item_code, item_variant, quantity, tax_post_flag, mac_post_flag, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, supcust_code, uom, mac_inc_flag, createdby, createddate, modifiedby, modifieddate, fin_year_code, fin_period_code, updated_flag, recon_date, hdrremarks, mlremarks, isRepupdated, project_ou, Project_code, afe_number, job_number, Old_batch_id, line_no, item_tcd_type, consolidated, source_comp, defermentamount, ari_upd_flag, rowtype, etlcreateddatetime
    FROM stg.stg_fbp_posted_trn_dtl;
    
    END IF;
   EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_fbppostedtrndtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_fbpvoucherdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_fbpvoucherdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_fbp_voucher_dtl;

  
    

    UPDATE dwh.F_fbpvoucherdtl t
    SET
        fbp_company_key        = COALESCE(c.company_key,-1),
        parent_key              = s.parent_key,
        current_key             = s.current_key,
        company_code            = s.company_code,
        ou_id                   = s.ou_id,
        fb_id                   = s.fb_id,
        fb_voucher_no           = s.fb_voucher_no,
        serial_no               = s.serial_no,
        timestamp               = s.timestamp,
        account_code            = s.account_code,
        drcr_flag               = s.drcr_flag,
        cost_center             = s.cost_center,
        analysis_code           = s.analysis_code,
        subanalysis_code        = s.subanalysis_code,
        base_amount             = s.base_amount,
        par_base_amount         = s.par_base_amount,
        createdby               = s.createdby,
        createddate             = s.createddate,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_fbp_voucher_dtl s
       LEFT JOIN dwh.d_company C      
        ON s.company_code  = C.company_code 
    
    WHERE t.parent_key = s.parent_key
    AND t.current_key = s.current_key
    AND t.company_code = s.company_code
    AND t.ou_id = s.ou_id
    AND t.fb_id = s.fb_id
    AND t.fb_voucher_no = s.fb_voucher_no
    AND t.serial_no = s.serial_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_fbpvoucherdtl
    (
        fbp_company_key , parent_key, current_key, company_code, ou_id, fb_id, fb_voucher_no, serial_no, timestamp, account_code, drcr_flag, cost_center, analysis_code, subanalysis_code, base_amount, par_base_amount, createdby, createddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
   COALESCE(c.company_key,-1), s.parent_key, s.current_key, s.company_code, s.ou_id, s.fb_id, s.fb_voucher_no, s.serial_no, s.timestamp, s.account_code, s.drcr_flag, s.cost_center, s.analysis_code, s.subanalysis_code, s.base_amount, s.par_base_amount, s.createdby, s.createddate, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_fbp_voucher_dtl s

       LEFT JOIN dwh.d_company C      
        ON s.company_code  = C.company_code 
    LEFT JOIN dwh.F_fbpvoucherdtl t
    ON s.parent_key = t.parent_key
    AND s.current_key = t.current_key
    AND s.company_code = t.company_code
    AND s.ou_id = t.ou_id
    AND s.fb_id = t.fb_id
    AND s.fb_voucher_no = t.fb_voucher_no
    AND s.serial_no = t.serial_no
    WHERE t.parent_key IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_fbp_voucher_dtl
    (
        parent_key, current_key, company_code, ou_id, fb_id, fb_voucher_no, serial_no, timestamp, account_code, drcr_flag, cost_center, analysis_code, subanalysis_code, base_amount, par_base_amount, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    )
    SELECT
        parent_key, current_key, company_code, ou_id, fb_id, fb_voucher_no, serial_no, timestamp, account_code, drcr_flag, cost_center, analysis_code, subanalysis_code, base_amount, par_base_amount, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    FROM stg.stg_fbp_voucher_dtl;
    
    END IF;
   /* EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;*/
END;
$$;


ALTER PROCEDURE dwh.usp_f_fbpvoucherdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_fbpvoucherhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_fbpvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_fbp_voucher_hdr;

    UPDATE dwh.F_fbpvoucherhdr t
    SET
        fbp_company_key        = COALESCE(c.company_key,-1),
        timestamp              = s.timestamp,
        tran_type              = s.tran_type,
        tran_date              = s.tran_date,
        fb_voucher_date        = s.fb_voucher_date,
        createdby              = s.createdby,
        createddate            = s.createddate,
        etlactiveind           = 1,
        etljobname             = p_etljobname,
        envsourcecd            = p_envsourcecd,
        datasourcecd           = p_datasourcecd,
        etlupdatedatetime      = NOW()
    FROM stg.stg_fbp_voucher_hdr s
    LEFT JOIN dwh.d_company C      
        ON s.company_code  = C.company_code 
    

    WHERE t.current_key = s.current_key
    AND t.company_code = s.company_code
    AND t.component_name = s.component_name
    AND t.bu_id = s.bu_id
    AND t.fb_id = s.fb_id
    AND t.fb_voucher_no = s.fb_voucher_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_fbpvoucherhdr
    (
       fbp_company_key, current_key, company_code, component_name, bu_id, fb_id, fb_voucher_no, timestamp, tran_type, tran_date, fb_voucher_date, createdby, createddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(c.company_key,-1), s.current_key, s.company_code, s.component_name, s.bu_id, s.fb_id, s.fb_voucher_no, s.timestamp, s.tran_type, s.tran_date, s.fb_voucher_date, s.createdby, s.createddate, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_fbp_voucher_hdr s
     LEFT JOIN dwh.d_company C      
        ON s.company_code  = C.company_code 
    
    LEFT JOIN dwh.F_fbpvoucherhdr t
    ON s.current_key = t.current_key
    AND s.company_code = t.company_code
    AND s.component_name = t.component_name
    AND s.bu_id = t.bu_id
    AND s.fb_id = t.fb_id
    AND s.fb_voucher_no = t.fb_voucher_no
    WHERE t.current_key IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_fbp_voucher_hdr
    (
        current_key, company_code, component_name, bu_id, fb_id, fb_voucher_no, timestamp, tran_type, tran_date, fb_voucher_date, con_ref_voucher_no, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    )
    SELECT
        current_key, company_code, component_name, bu_id, fb_id, fb_voucher_no, timestamp, tran_type, tran_date, fb_voucher_date, con_ref_voucher_no, createdby, createddate, modifiedby, modifieddate, etlcreateddatetime
    FROM stg.stg_fbp_voucher_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_fbpvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_gateexecdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_gateexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_gate_exec_dtl;

    UPDATE dwh.f_gateexecdetail t
    SET
		gate_exec_dtl_loc_key	  = COALESCE(l.loc_key,-1),
		gate_exec_dtl_veh_key	  = COALESCE(v.veh_key,-1),
		gate_exec_dtl_eqp_key	  = COALESCE(eq.eqp_key,-1),
		gate_exec_dtl_emp_hdr_key = COALESCE(e.emp_hdr_key,-1),
        gate_pln_no               = s.wms_gate_pln_no,
        gate_pln_ou               = s.wms_gate_pln_ou,
        gate_exec_date            = s.wms_gate_exec_date,
        gate_exec_status          = s.wms_gate_exec_status,
        gate_exec_gateno          = s.wms_gate_exec_gateno,
        gate_purpose              = s.wms_gate_purpose,
        gate_flag                 = s.wms_gate_flag,
        gate_actual_date          = s.wms_gate_actual_date,
        gate_ser_provider         = s.wms_gate_ser_provider,
        gate_person               = s.wms_gate_person,
        gate_veh_type             = s.wms_gate_veh_type,
        gate_vehicle_no           = s.wms_gate_vehicle_no,
        gate_equip_type           = s.wms_gate_equip_type,
        gate_equip_no             = s.wms_gate_equip_no,
        gate_ref_doc_typ1         = s.wms_gate_ref_doc_typ1,
        gate_ref_doc_no1          = s.wms_gate_ref_doc_no1,
        gate_ref_doc_typ2         = s.wms_gate_ref_doc_typ2,
        gate_ref_doc_no2          = s.wms_gate_ref_doc_no2,
        gate_ref_doc_typ3         = s.wms_gate_ref_doc_typ3,
        gate_ref_doc_no3          = s.wms_gate_ref_doc_no3,
        gate_instructions         = s.wms_gate_instructions,
        gate_employee             = s.wms_gate_employee,
        gate_created_by           = s.wms_gate_created_by,
        gate_created_date         = s.wms_gate_created_date,
        gate_timestamp            = s.wms_gate_timestamp,
        gate_userdefined1         = s.wms_gate_userdefined1,
        gate_gatein_no            = s.wms_gate_gatein_no,
        gate_customer_name        = s.wms_gate_customer_name,
        gate_vendor_name          = s.wms_gate_vendor_name,
        gate_from                 = s.wms_gate_from,
        gate_to                   = s.wms_gate_to,
        gate_noofunits            = s.wms_gate_noofunits,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_wms_gate_exec_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_gate_loc_code 	= l.loc_code 
		AND s.wms_gate_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_vehicle v 			
		ON  s.wms_gate_vehicle_no 	= v.veh_id
		AND s.wms_gate_exec_ou 		= v.veh_ou 
	LEFT JOIN dwh.d_equipment eq 		
		ON  s.wms_gate_equip_no		= eq.eqp_equipment_id 
		AND s.wms_gate_exec_ou 		= eq.eqp_ou  	
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_gate_employee		= e.emp_employee_code 
		AND s.wms_gate_exec_ou 		= e.emp_ou 
    WHERE 	t.gate_loc_code 	 = s.wms_gate_loc_code
    AND 	t.gate_exec_no 		 = s.wms_gate_exec_no
    AND 	t.gate_exec_ou 		 = s.wms_gate_exec_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_gateexecdetail
    (
        gate_exec_dtl_loc_key,	gate_exec_dtl_veh_key,	gate_exec_dtl_eqp_key,	gate_exec_dtl_emp_hdr_key,
		gate_loc_code, 			gate_pln_no, 			gate_pln_ou, 			gate_exec_no, 				gate_exec_ou, 
		gate_exec_date, 		gate_exec_status, 		gate_exec_gateno, 		gate_purpose, 				gate_flag, 
		gate_actual_date, 		gate_ser_provider, 		gate_person, 			gate_veh_type, 				gate_vehicle_no, 
		gate_equip_type, 		gate_equip_no, 			gate_ref_doc_typ1, 		gate_ref_doc_no1, 			gate_ref_doc_typ2, 
		gate_ref_doc_no2, 		gate_ref_doc_typ3, 		gate_ref_doc_no3, 		gate_instructions, 			gate_employee, 
		gate_created_by, 		gate_created_date, 		gate_timestamp, 		gate_userdefined1, 			gate_gatein_no, 
		gate_customer_name, 	gate_vendor_name, 		gate_from, 				gate_to, 					gate_noofunits, 
		etlactiveind, 			etljobname, 			envsourcecd, 			datasourcecd, 				etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1),		COALESCE(v.veh_key,-1),		COALESCE(eq.eqp_key,-1),	COALESCE(e.emp_hdr_key,-1),
		s.wms_gate_loc_code, 		s.wms_gate_pln_no, 			s.wms_gate_pln_ou, 			s.wms_gate_exec_no, 		s.wms_gate_exec_ou, 
		s.wms_gate_exec_date, 		s.wms_gate_exec_status, 	s.wms_gate_exec_gateno, 	s.wms_gate_purpose, 		s.wms_gate_flag, 
		s.wms_gate_actual_date, 	s.wms_gate_ser_provider, 	s.wms_gate_person, 			s.wms_gate_veh_type, 		s.wms_gate_vehicle_no, 
		s.wms_gate_equip_type, 		s.wms_gate_equip_no, 		s.wms_gate_ref_doc_typ1, 	s.wms_gate_ref_doc_no1, 	s.wms_gate_ref_doc_typ2, 
		s.wms_gate_ref_doc_no2, 	s.wms_gate_ref_doc_typ3, 	s.wms_gate_ref_doc_no3, 	s.wms_gate_instructions, 	s.wms_gate_employee, 
		s.wms_gate_created_by, 		s.wms_gate_created_date, 	s.wms_gate_timestamp, 		s.wms_gate_userdefined1, 	s.wms_gate_gatein_no, 
		s.wms_gate_customer_name, 	s.wms_gate_vendor_name, 	s.wms_gate_from, 			s.wms_gate_to, 				s.wms_gate_noofunits, 
		1,	 						p_etljobname, 				p_envsourcecd, 				p_datasourcecd, 			NOW()
    FROM stg.stg_wms_gate_exec_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_gate_loc_code 	= l.loc_code 
		AND s.wms_gate_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_vehicle v 			
		ON  s.wms_gate_vehicle_no 	= v.veh_id
		AND s.wms_gate_exec_ou 		= v.veh_ou 
	LEFT JOIN dwh.d_equipment eq 		
		ON  s.wms_gate_equip_no		= eq.eqp_equipment_id 
		AND s.wms_gate_exec_ou 		= eq.eqp_ou  	
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_gate_employee		= e.emp_employee_code 
		AND s.wms_gate_exec_ou 		= e.emp_ou 
    LEFT JOIN dwh.f_gateexecdetail t
		ON 	s.wms_gate_loc_code 	= t.gate_loc_code
		AND s.wms_gate_exec_no 		= t.gate_exec_no
		AND s.wms_gate_exec_ou 		= t.gate_exec_ou
    WHERE t.gate_exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_gate_exec_dtl
    (
        wms_gate_loc_code, 		wms_gate_pln_no, 		wms_gate_pln_ou, 		wms_gate_exec_no, 				wms_gate_exec_ou, 
		wms_gate_exec_date, 	wms_gate_exec_status, 	wms_gate_exec_gateno, 	wms_gate_purpose, 				wms_gate_flag, 
		wms_gate_actual_date, 	wms_gate_ser_provider, 	wms_gate_person, 		wms_gate_veh_type, 				wms_gate_vehicle_no, 
		wms_gate_equip_type, 	wms_gate_equip_no, 		wms_gate_ref_doc_typ1, 	wms_gate_ref_doc_no1, 			wms_gate_ref_doc_typ2, 
		wms_gate_ref_doc_no2, 	wms_gate_ref_doc_typ3, 	wms_gate_ref_doc_no3, 	wms_gate_instructions, 			wms_gate_employee, 
		wms_gate_created_by, 	wms_gate_created_date, 	wms_gate_modified_by, 	wms_gate_modified_date, 		wms_gate_timestamp, 
		wms_gate_userdefined1, 	wms_gate_userdefined2, 	wms_gate_userdefined3, 	wms_gate_contwait_bil_status, 	wms_gate_bil_value, 
		wms_gate_gatein_no, 	wms_gate_customer_name, wms_gate_vendor_name, 	wms_gate_from, 					wms_gate_to, 
		wms_gate_noofunits, 	etlcreateddatetime
    )
    SELECT
        wms_gate_loc_code, 		wms_gate_pln_no, 		wms_gate_pln_ou, 		wms_gate_exec_no, 				wms_gate_exec_ou, 
		wms_gate_exec_date, 	wms_gate_exec_status, 	wms_gate_exec_gateno, 	wms_gate_purpose, 				wms_gate_flag, 
		wms_gate_actual_date, 	wms_gate_ser_provider, 	wms_gate_person, 		wms_gate_veh_type, 				wms_gate_vehicle_no, 
		wms_gate_equip_type, 	wms_gate_equip_no, 		wms_gate_ref_doc_typ1, 	wms_gate_ref_doc_no1, 			wms_gate_ref_doc_typ2, 
		wms_gate_ref_doc_no2, 	wms_gate_ref_doc_typ3, 	wms_gate_ref_doc_no3, 	wms_gate_instructions, 			wms_gate_employee, 
		wms_gate_created_by, 	wms_gate_created_date, 	wms_gate_modified_by, 	wms_gate_modified_date, 		wms_gate_timestamp, 
		wms_gate_userdefined1, 	wms_gate_userdefined2, 	wms_gate_userdefined3, 	wms_gate_contwait_bil_status, 	wms_gate_bil_value, 
		wms_gate_gatein_no, 	wms_gate_customer_name, wms_gate_vendor_name, 	wms_gate_from, 					wms_gate_to, 
		wms_gate_noofunits, 	etlcreateddatetime
    FROM stg.stg_wms_gate_exec_dtl;
    END IF;

    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_gateexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_gateplandetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_gateplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_gate_plan_dtl;

    UPDATE dwh.f_gateplandetail t
    SET
        gate_pln_dtl_loc_key		 = COALESCE(l.loc_key,-1),
		gate_pln_dtl_veh_key		 = COALESCE(v.veh_key,-1),
		gate_pln_dtl_eqp_key		 = COALESCE(e.eqp_key,-1),
        gate_pln_date                = s.wms_gate_pln_date,
        gate_pln_status              = s.wms_gate_pln_status,
        gate_purpose                 = s.wms_gate_purpose,
        gate_flag                    = s.wms_gate_flag,
        gate_gate_no                 = s.wms_gate_gate_no,
        gate_expected_date           = s.wms_gate_expected_date,
        gate_service_provider        = s.wms_gate_service_provider,
        gate_person                  = s.wms_gate_person,
        gate_veh_type                = s.wms_gate_veh_type,
        gate_vehicle_no              = s.wms_gate_vehicle_no,
        gate_equip_type              = s.wms_gate_equip_type,
        gate_equip_no                = s.wms_gate_equip_no,
        gate_ref_doc_typ1            = s.wms_gate_ref_doc_typ1,
        gate_ref_doc_no1             = s.wms_gate_ref_doc_no1,
        gate_ref_doc_typ2            = s.wms_gate_ref_doc_typ2,
        gate_ref_doc_no2             = s.wms_gate_ref_doc_no2,
        gate_ref_doc_typ3            = s.wms_gate_ref_doc_typ3,
        gate_ref_doc_no3             = s.wms_gate_ref_doc_no3,
        gate_instructions            = s.wms_gate_instructions,
        gate_source_stage            = s.wms_gate_source_stage,
        gate_source_docno            = s.wms_gate_source_docno,
        gate_exec_no                 = s.wms_gate_exec_no,
        gate_exec_ou                 = s.wms_gate_exec_ou,
        gate_created_by              = s.wms_gate_created_by,
        gate_created_date            = s.wms_gate_created_date,
        gate_modified_by             = s.wms_gate_modified_by,
        gate_modified_date           = s.wms_gate_modified_date,
        gate_timestamp               = s.wms_gate_timestamp,
        gate_gatein_no               = s.wms_gate_gatein_no,
        gate_customer_name           = s.wms_gate_customer_name,
        gate_vendor_name             = s.wms_gate_vendor_name,
        gate_from                    = s.wms_gate_from,
        gate_to                      = s.wms_gate_to,
        gate_noofunits               = s.wms_gate_noofunits,
        gate_workflow_status         = s.wms_gate_workflow_status,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_wms_gate_plan_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_gate_loc_code 	= l.loc_code 
		AND s.wms_gate_pln_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_vehicle v 			
		ON  s.wms_gate_vehicle_no 	= v.veh_id
		AND s.wms_gate_pln_ou 		= v.veh_ou 
	LEFT JOIN dwh.d_equipment e 		
		ON  s.wms_gate_equip_no		= e.eqp_equipment_id 
		AND s.wms_gate_pln_ou 		= e.eqp_ou  	
    WHERE 	t.gate_loc_code 		= s.wms_gate_loc_code
    AND 	t.gate_pln_no 			= s.wms_gate_pln_no
    AND 	t.gate_pln_ou 			= s.wms_gate_pln_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_gateplandetail
    (
        gate_pln_dtl_loc_key,	gate_pln_dtl_veh_key,	gate_pln_dtl_eqp_key,
		gate_loc_code, 			gate_pln_no, 			gate_pln_ou, 			gate_pln_date, 			gate_pln_status, 
		gate_purpose, 			gate_flag, 				gate_gate_no, 			gate_expected_date, 	gate_service_provider, 
		gate_person, 			gate_veh_type, 			gate_vehicle_no, 		gate_equip_type, 		gate_equip_no, 
		gate_ref_doc_typ1, 		gate_ref_doc_no1, 		gate_ref_doc_typ2, 		gate_ref_doc_no2, 		gate_ref_doc_typ3, 
		gate_ref_doc_no3, 		gate_instructions, 		gate_source_stage, 		gate_source_docno, 		gate_exec_no, 
		gate_exec_ou, 			gate_created_by, 		gate_created_date, 		gate_modified_by, 		gate_modified_date, 
		gate_timestamp, 		gate_gatein_no, 		gate_customer_name, 	gate_vendor_name, 		gate_from, 
		gate_to, 				gate_noofunits, 		gate_workflow_status, 	etlactiveind, 			etljobname, 
		envsourcecd, 			datasourcecd, 			etlcreatedatetime	
    )

    SELECT
        COALESCE(l.loc_key,-1),		COALESCE(v.veh_key,-1),			COALESCE(e.eqp_key,-1),
		s.wms_gate_loc_code, 		s.wms_gate_pln_no, 				s.wms_gate_pln_ou, 			s.wms_gate_pln_date, 			s.wms_gate_pln_status, 
		s.wms_gate_purpose, 		s.wms_gate_flag, 				s.wms_gate_gate_no, 		s.wms_gate_expected_date, 		s.wms_gate_service_provider, 
		s.wms_gate_person, 			s.wms_gate_veh_type, 			s.wms_gate_vehicle_no, 		s.wms_gate_equip_type, 			s.wms_gate_equip_no, 
		s.wms_gate_ref_doc_typ1, 	s.wms_gate_ref_doc_no1, 		s.wms_gate_ref_doc_typ2, 	s.wms_gate_ref_doc_no2, 		s.wms_gate_ref_doc_typ3, 
		s.wms_gate_ref_doc_no3, 	s.wms_gate_instructions, 		s.wms_gate_source_stage, 	s.wms_gate_source_docno, 		s.wms_gate_exec_no, 
		s.wms_gate_exec_ou, 		s.wms_gate_created_by, 			s.wms_gate_created_date, 	s.wms_gate_modified_by, 		s.wms_gate_modified_date, 
		s.wms_gate_timestamp, 		s.wms_gate_gatein_no, 			s.wms_gate_customer_name, 	s.wms_gate_vendor_name, 		s.wms_gate_from, 
		s.wms_gate_to, 				s.wms_gate_noofunits, 			s.wms_gate_workflow_status, 1, 								p_etljobname, 
		p_envsourcecd, 				p_datasourcecd, 				NOW()
    FROM stg.stg_wms_gate_plan_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_gate_loc_code 	= l.loc_code 
		AND s.wms_gate_pln_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_vehicle v 			
		ON  s.wms_gate_vehicle_no 	= v.veh_id
		AND s.wms_gate_pln_ou 		= v.veh_ou 
	LEFT JOIN dwh.d_equipment e 		
		ON  s.wms_gate_equip_no		= e.eqp_equipment_id 
		AND s.wms_gate_pln_ou 		= e.eqp_ou
    LEFT JOIN dwh.f_gateplandetail t
		ON 	s.wms_gate_loc_code 	= t.gate_loc_code
		AND s.wms_gate_pln_no 		= t.gate_pln_no
		AND s.wms_gate_pln_ou 		= t.gate_pln_ou
    WHERE t.gate_pln_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_gate_plan_dtl
    (
        wms_gate_loc_code, 			wms_gate_pln_no, 		wms_gate_pln_ou, 			wms_gate_pln_date, 			wms_gate_pln_status, 
		wms_gate_purpose, 			wms_gate_flag, 			wms_gate_gate_no, 			wms_gate_expected_date, 	wms_gate_service_provider, 
		wms_gate_person, 			wms_gate_veh_type, 		wms_gate_vehicle_no, 		wms_gate_equip_type, 		wms_gate_equip_no, 
		wms_gate_ref_doc_typ1, 		wms_gate_ref_doc_no1, 	wms_gate_ref_doc_typ2, 		wms_gate_ref_doc_no2,		wms_gate_ref_doc_typ3, 
		wms_gate_ref_doc_no3, 		wms_gate_instructions, 	wms_gate_source_stage, 		wms_gate_source_docno, 		wms_gate_exec_no, 
		wms_gate_exec_ou, 			wms_gate_created_by, 	wms_gate_created_date, 		wms_gate_modified_by, 		wms_gate_modified_date, 
		wms_gate_timestamp, 		wms_gate_userdefined1, 	wms_gate_userdefined2, 		wms_gate_userdefined3, 		wms_gate_gatein_no, 
		wms_gate_customer_name, 	wms_gate_vendor_name, 	wms_gate_from, 				wms_gate_to, 				wms_gate_noofunits, 
		wms_gate_workflow_status, 	wms_gate_rsnforreturn, 	etlcreateddatetime
    )
    SELECT
        wms_gate_loc_code, 			wms_gate_pln_no, 		wms_gate_pln_ou, 			wms_gate_pln_date, 			wms_gate_pln_status, 
		wms_gate_purpose, 			wms_gate_flag, 			wms_gate_gate_no, 			wms_gate_expected_date, 	wms_gate_service_provider, 
		wms_gate_person, 			wms_gate_veh_type, 		wms_gate_vehicle_no, 		wms_gate_equip_type, 		wms_gate_equip_no, 
		wms_gate_ref_doc_typ1, 		wms_gate_ref_doc_no1, 	wms_gate_ref_doc_typ2, 		wms_gate_ref_doc_no2,		wms_gate_ref_doc_typ3, 
		wms_gate_ref_doc_no3, 		wms_gate_instructions, 	wms_gate_source_stage, 		wms_gate_source_docno, 		wms_gate_exec_no, 
		wms_gate_exec_ou, 			wms_gate_created_by, 	wms_gate_created_date, 		wms_gate_modified_by, 		wms_gate_modified_date, 
		wms_gate_timestamp, 		wms_gate_userdefined1, 	wms_gate_userdefined2, 		wms_gate_userdefined3, 		wms_gate_gatein_no, 
		wms_gate_customer_name, 	wms_gate_vendor_name, 	wms_gate_from, 				wms_gate_to, 				wms_gate_noofunits, 
		wms_gate_workflow_status, 	wms_gate_rsnforreturn, 	etlcreateddatetime
    FROM stg.stg_wms_gate_plan_dtl;
    END IF;

    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_gateplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_goodsempequipmap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_goodsempequipmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_gr_emp_equip_map_dtl;
	

	UPDATE dwh.f_goodsEmpEquipMap t
    SET 
		gr_loc_key				=	COALESCE(l.loc_key,-1)
		, gr_shift_code			=	s.wms_gr_shift_code
		, gr_emp_code			=	s.wms_gr_emp_code
		, gr_area				=	s.wms_gr_area
		, etlactiveind 			=	1
		, etljobname 			=	p_etljobname
		, envsourcecd 			=	p_envsourcecd
		, datasourcecd 			=	p_datasourcecd
		, etlupdatedatetime 	=	NOW()	
    FROM stg.stg_wms_gr_emp_equip_map_dtl s
	LEFT JOIN dwh.d_location L 		
		ON s.wms_gr_loc_code 	= L.loc_code
		AND s.wms_gr_ou			= L.loc_ou
	WHERE s.wms_gr_loc_code		= t.gr_loc_cod
        AND s.wms_gr_ou			= t.gr_ou
		AND s.wms_gr_lineno		= t.gr_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_goodsEmpEquipMap
	(	gr_loc_key,
	gr_loc_cod			,		gr_ou			,		gr_lineno			,
	gr_shift_code		,		gr_emp_code		,		gr_area				,
	etlactiveind		,		etljobname		,		envsourcecd			,
	datasourcecd		,		etlcreatedatetime
	)
	
	SELECT 
		COALESCE(l.loc_key,-1),
	s.wms_gr_loc_code	,		s.wms_gr_ou			,		s.wms_gr_lineno		,
	s.wms_gr_shift_code	,		s.wms_gr_emp_code	,		s.wms_gr_area		,
	1 AS etlactiveind	,		p_etljobname		,		p_envsourcecd		,
	p_datasourcecd		,		NOW()
      
    FROM stg.stg_wms_gr_emp_equip_map_dtl s
	LEFT JOIN dwh.d_location L 		
		ON s.wms_gr_loc_code 	= L.loc_code
		AND s.wms_gr_ou			= L.loc_ou
	LEFT JOIN dwh.f_goodsEmpEquipMap t
		ON s.wms_gr_loc_code	= t.gr_loc_cod
        AND s.wms_gr_ou			= t.gr_ou
		AND s.wms_gr_lineno		= t.gr_lineno
		WHERE t.gr_loc_cod IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_gr_emp_equip_map_dtl
	( 
			wms_gr_loc_code		,	wms_gr_ou		,		wms_gr_lineno		,
			wms_gr_shift_code	,	wms_gr_emp_code	,		wms_gr_area		,
			etlcreateddatetime
	)
	SELECT 
			wms_gr_loc_code		,	wms_gr_ou		,		wms_gr_lineno		,
			wms_gr_shift_code	,	wms_gr_emp_code	,		wms_gr_area		,
			etlcreateddatetime
	FROM	stg.stg_wms_gr_emp_equip_map_dtl;
    END IF;
    
    
     EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
    
 
   
END;
$$;


ALTER PROCEDURE dwh.usp_f_goodsempequipmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_goodsissuedetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_goodsissuedetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(*) INTO srccnt
    FROM stg.stg_wms_goods_issue_dtl;

    UPDATE dwh.F_GoodsIssueDetails t
    SET

        gi_loc_key     = COALESCE(l.loc_key,-1),    
        gi_status = s.wms_gi_status,
        gi_date = s.wms_gi_date,
        gi_execution_no = s.wms_gi_execution_no,
        gi_execution_stage = s.wms_gi_execution_stage,
        gi_outbound_date = s.wms_gi_outbound_date,
        gi_customer_id = s.wms_gi_customer_id,
        gi_prim_ref_doc_no = s.wms_gi_prim_ref_doc_no,
        gi_prim_ref_doc_date = s.wms_gi_prim_ref_doc_date,
        gi_outbound_ord_line_no = s.wms_gi_outbound_ord_line_no,
        gi_outbound_ord_sch_no = s.wms_gi_outbound_ord_sch_no,
        gi_outbound_ord_item = s.wms_gi_outbound_ord_item,
        gi_issue_qty = s.wms_gi_issue_qty,
        gi_lot_no = s.wms_gi_lot_no,
        gi_item_serial_no = s.wms_gi_item_serial_no,
        gi_sup_batch_no = s.wms_gi_sup_batch_no,
        gi_mfg_date = s.wms_gi_mfg_date,
        gi_exp_date = s.wms_gi_exp_date,
        gi_item_status = s.wms_gi_item_status,
        gi_su = s.wms_gi_su,
        gi_su_type = s.wms_gi_su_type,
        gi_su_serial_no = s.wms_gi_su_serial_no,
        gi_created_date = s.wms_gi_created_date,
        gi_created_by = s.wms_gi_created_by,
        gi_tolerance_qty = s.wms_gi_tolerance_qty,
        gi_stock_status = s.wms_gi_stock_status,
        etlactiveind = 1,
        etljobname = p_etljobname,
        envsourcecd = p_envsourcecd ,
        datasourcecd = p_datasourcecd ,
        etlupdatedatetime = NOW()    
    FROM stg.stg_wms_goods_issue_dtl s
     LEFT JOIN dwh.d_location L         
        ON s.wms_gi_loc_code   = L.loc_code 
        AND s.wms_gi_ou          = L.loc_ou


    WHERE t.gi_no = s.wms_gi_no
    AND   t.gi_ou = s.wms_gi_ou
    AND   t.gi_loc_code = s.wms_gi_loc_code
    AND   t.gi_outbound_ord_no = s.wms_gi_outbound_ord_no
    AND   t.gi_line_no = s.wms_gi_line_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_GoodsIssueDetails 
    (
          gi_loc_key,gi_no, gi_ou, gi_status, gi_loc_code, gi_outbound_ord_no, gi_line_no, gi_date, gi_execution_no, gi_execution_stage, gi_outbound_date, gi_customer_id, gi_prim_ref_doc_no, gi_prim_ref_doc_date, gi_outbound_ord_line_no, gi_outbound_ord_sch_no, gi_outbound_ord_item, gi_issue_qty, gi_lot_no, gi_item_serial_no, gi_sup_batch_no, gi_mfg_date, gi_exp_date, gi_item_status, gi_su, gi_su_type, gi_su_serial_no, gi_created_date, gi_created_by, gi_tolerance_qty, gi_stock_status, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )
    
    SELECT
          COALESCE(l.loc_key,-1),s.wms_gi_no, s.wms_gi_ou, s.wms_gi_status, s.wms_gi_loc_code, s.wms_gi_outbound_ord_no, s.wms_gi_line_no, s.wms_gi_date, s.wms_gi_execution_no, s.wms_gi_execution_stage, s.wms_gi_outbound_date, s.wms_gi_customer_id, s.wms_gi_prim_ref_doc_no, s.wms_gi_prim_ref_doc_date, s.wms_gi_outbound_ord_line_no, s.wms_gi_outbound_ord_sch_no, s.wms_gi_outbound_ord_item, s.wms_gi_issue_qty, s.wms_gi_lot_no, s.wms_gi_item_serial_no, s.wms_gi_sup_batch_no, s.wms_gi_mfg_date, s.wms_gi_exp_date, s.wms_gi_item_status, s.wms_gi_su, s.wms_gi_su_type, s.wms_gi_su_serial_no, s.wms_gi_created_date, s.wms_gi_created_by, s.wms_gi_tolerance_qty, s.wms_gi_stock_status, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_goods_issue_dtl s

        LEFT JOIN dwh.d_location L         
        ON s.wms_gi_loc_code   = L.loc_code 
        AND s.wms_gi_ou          = L.loc_ou


    LEFT JOIN dwh.F_GoodsIssueDetails t
    ON s.wms_gi_no = t.gi_no
    AND s.wms_gi_ou = t.gi_ou
    AND s.wms_gi_loc_code = t.gi_loc_code
    AND s.wms_gi_outbound_ord_no = t.gi_outbound_ord_no
    AND s.wms_gi_line_no = t.gi_line_no
    WHERE t.gi_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_goods_issue_dtl
    (   
        wms_gi_no, wms_gi_ou, wms_gi_status, wms_gi_loc_code, wms_gi_outbound_ord_no, wms_gi_line_no, wms_gi_date, wms_gi_execution_no, wms_gi_execution_stage, wms_gi_outbound_date, wms_gi_customer_id, wms_gi_prim_ref_doc_no, wms_gi_prim_ref_doc_date, wms_gi_outbound_ord_line_no, wms_gi_outbound_ord_sch_no, wms_gi_outbound_ord_item, wms_gi_issue_qty, wms_gi_lot_no, wms_gi_item_serial_no, wms_gi_sup_batch_no, wms_gi_wh_batch_no, wms_gi_mfg_date, wms_gi_exp_date, wms_gi_item_status, wms_gi_su, wms_gi_su_type, wms_gi_su_serial_no, wms_gi_created_date, wms_gi_created_by, wms_gi_modified_date, wms_gi_modified_by, wms_gi_billing_status, wms_gi_bill_value, wms_gi_tolerance_qty, wms_gi_hdochpvl_bil_status, wms_gi_lblcthut_bil_status, wms_gi_hdofsupk_bil_status, wms_gi_stock_status
    )
    SELECT 
        wms_gi_no, wms_gi_ou, wms_gi_status, wms_gi_loc_code, wms_gi_outbound_ord_no, wms_gi_line_no, wms_gi_date, wms_gi_execution_no, wms_gi_execution_stage, wms_gi_outbound_date, wms_gi_customer_id, wms_gi_prim_ref_doc_no, wms_gi_prim_ref_doc_date, wms_gi_outbound_ord_line_no, wms_gi_outbound_ord_sch_no, wms_gi_outbound_ord_item, wms_gi_issue_qty, wms_gi_lot_no, wms_gi_item_serial_no, wms_gi_sup_batch_no, wms_gi_wh_batch_no, wms_gi_mfg_date, wms_gi_exp_date, wms_gi_item_status, wms_gi_su, wms_gi_su_type, wms_gi_su_serial_no, wms_gi_created_date, wms_gi_created_by, wms_gi_modified_date, wms_gi_modified_by, wms_gi_billing_status, wms_gi_bill_value, wms_gi_tolerance_qty, wms_gi_hdochpvl_bil_status, wms_gi_lblcthut_bil_status, wms_gi_hdofsupk_bil_status, wms_gi_stock_status
    FROM stg.stg_wms_goods_issue_dtl;
    END IF;  
    
    EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
    
    
END;
$$;


ALTER PROCEDURE dwh.usp_f_goodsissuedetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_goodsreceiptdetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_goodsreceiptdetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_gr_exec_dtl;

	UPDATE dwh.f_goodsreceiptdetails t
    SET 
		  gr_loc_key					= COALESCE(l.loc_key,-1)
        , gr_emp_hdr_key                = COALESCE(e.emp_hdr_key,-1)
		, gr_date_key                   = COALESCE(d.datekey,-1)	
        , gr_stg_mas_key                = COALESCE(ds.stg_mas_key,-1)
		, gr_pln_no 					= s.wms_gr_pln_no
		, gr_pln_ou 					= s.wms_gr_pln_ou
		, gr_pln_date 					= s.wms_gr_pln_date
		, gr_po_no 						= s.wms_gr_po_no
		, gr_no 						= s.wms_gr_no
		, gr_emp 						= s.wms_gr_emp
		, gr_start_date 				= s.wms_gr_start_date
		, gr_end_date 					= s.wms_gr_end_date
		, gr_exec_status 				= s.wms_gr_exec_status
		, gr_created_by 				= s.wms_gr_created_by
		, gr_created_date 				= s.wms_gr_created_date
		, gr_modified_by 				= s.wms_gr_modified_by
		, gr_modified_date 				= s.wms_gr_modified_date
		, gr_timestamp 					= s.wms_gr_timestamp
		, gr_asn_no 					= s.wms_gr_asn_no
		, gr_staging_id 				= s.wms_gr_staging_id
		, gr_exec_date 					= s.wms_gr_exec_date
		, gr_build_complete 			= s.wms_gr_build_complete
		, gr_notype 					= s.wms_gr_notype
		, gr_ref_type 					= s.wms_gr_ref_type
		, gr_gen_from 					= s.wms_gr_gen_from
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_gr_exec_dtl s
	LEFT JOIN dwh.d_location l		
		ON 	s.wms_gr_loc_code 			= l.loc_code 
        AND s.wms_gr_pln_ou        		= l.loc_ou	
	LEFT JOIN dwh.d_employeeheader e 		
		ON 	s.wms_gr_emp 				= e.emp_employee_code 
        AND s.wms_gr_pln_ou        		= e.emp_ou	
	LEFT JOIN dwh.d_date d 			
		ON 	s.wms_gr_pln_date::date 	= d.dateactual	
	LEFT JOIN dwh.d_stage ds 		
		ON 	s.wms_gr_staging_id			= ds.stg_mas_id
		AND s.wms_gr_loc_code 			= ds.stg_mas_loc
        AND s.wms_gr_pln_ou        		= ds.stg_mas_ou	
    WHERE 	t.gr_loc_code 				= s.wms_gr_loc_code
		AND	t.gr_exec_no 				= s.wms_gr_exec_no
		AND	t.gr_exec_ou 				= s.wms_gr_exec_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_goodsreceiptdetails
	(
		gr_loc_key					, gr_emp_hdr_key, 
		gr_date_key					, gr_stg_mas_key				, gr_loc_code				, gr_exec_no, 
		gr_exec_ou					, gr_pln_no						, gr_pln_ou					, gr_pln_date, 
		gr_po_no					, gr_no, gr_emp					, gr_start_date				, gr_end_date, 
		gr_exec_status				, gr_created_by					, gr_created_date			, gr_modified_by, 
		gr_modified_date			, gr_timestamp					, gr_asn_no					, gr_staging_id, 
		gr_exec_date				, gr_build_complete				, gr_notype					, gr_ref_type, 
		gr_gen_from					, etlactiveind					, etljobname				, envsourcecd, 
		datasourcecd				, etlcreatedatetime
	)
	
	SELECT 
	   	COALESCE(l.loc_key,-1)		, COALESCE(e.emp_hdr_key,-1),
		COALESCE(d.datekey,-1)		, COALESCE(ds.stg_mas_key,-1)	, s.wms_gr_loc_code			, s.wms_gr_exec_no, 
		s.wms_gr_exec_ou			, s.wms_gr_pln_no				, s.wms_gr_pln_ou			, s.wms_gr_pln_date, 
		s.wms_gr_po_no				, s.wms_gr_no, gr_emp			, s.wms_gr_start_date		, s.wms_gr_end_date, 
		s.wms_gr_exec_status		, s.wms_gr_created_by			, s.wms_gr_created_date		, s.wms_gr_modified_by, 
		s.wms_gr_modified_date		, s.wms_gr_timestamp			, s.wms_gr_asn_no			, s.wms_gr_staging_id, 
		s.wms_gr_exec_date			, s.wms_gr_build_complete		, s.wms_gr_notype			, s.wms_gr_ref_type, 
		s.wms_gr_gen_from			, 1 AS etlactiveind				, p_etljobname				, p_envsourcecd, 
		p_datasourcecd				, NOW()
	FROM stg.stg_wms_gr_exec_dtl s
	LEFT JOIN dwh.d_location l		
		ON 	s.wms_gr_loc_code 			= l.loc_code 
        AND s.wms_gr_pln_ou        		= l.loc_ou	
	LEFT JOIN dwh.d_employeeheader e 		
		ON 	s.wms_gr_emp 				= e.emp_employee_code 
        AND s.wms_gr_pln_ou        		= e.emp_ou	
	LEFT JOIN dwh.d_date d 			
		ON 	s.wms_gr_pln_date::date 	= d.dateactual	
	LEFT JOIN dwh.d_stage ds 		
		ON 	s.wms_gr_staging_id			= ds.stg_mas_id
		AND s.wms_gr_loc_code 			= ds.stg_mas_loc
        AND s.wms_gr_pln_ou        		= ds.stg_mas_ou	 
	LEFT JOIN dwh.f_goodsreceiptdetails t 	
		ON  t.gr_loc_code 				= s.wms_gr_loc_code
		AND	t.gr_exec_no 				= s.wms_gr_exec_no
		AND	t.gr_exec_ou 				= s.wms_gr_exec_ou
    WHERE t.gr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_gr_exec_dtl
	(
		wms_gr_loc_code				, wms_gr_exec_no				, wms_gr_exec_ou					, wms_gr_pln_no, 
		wms_gr_pln_ou				, wms_gr_pln_date				, wms_gr_po_no						, wms_gr_no, 
		wms_gr_emp					, wms_gr_start_date				, wms_gr_end_date					, wms_gr_exec_status, 
		wms_gr_created_by			, wms_gr_created_date			, wms_gr_modified_by				, wms_gr_modified_date, 
		wms_gr_timestamp			, wms_gr_userdefined1			, wms_gr_userdefined2				, wms_gr_userdefined3, 
		wms_gr_asn_no				, wms_gr_staging_id				, wms_gr_billing_status				, wms_gr_bill_value, 
		wms_gr_exec_date			, wms_gr_build_complete			, wms_gr_notype						, wms_gr_notype_prefix, 
		wms_gr_ref_type				, wms_gr_employeename			, wms_gr_refdocno					, wms_gr_remark, 
		wms_gr_customerserialno		, wms_gr_conschrg_bil_status	, wms_gr_csurcdgr_bil_status		, wms_gr_hdichpvl_bil_status, 
		wms_gr_lbchprhr_bil_status	, wms_gr_lblprcgr_bil_status	, wms_gr_palrestk_bil_status		, wms_gr_hdichwt_bil_status, 
		wms_gr_hdichitm_bil_status	, wms_gr_hdichsu_bil_status		, wms_gr_hdlimuom_bil_status		, wms_gr_gen_from, 
		wms_gr_consbchg_bil_status	, wms_gr_hdlioutc_bil_status	, wms_gr_whibferb_sell_bil_status	, wms_asn_hciqumos_bil_status, 
		wms_gr_cusbsdcg_bil_status	, etlcreateddatetime
	)
	SELECT 
		wms_gr_loc_code				, wms_gr_exec_no				, wms_gr_exec_ou					, wms_gr_pln_no, 
		wms_gr_pln_ou				, wms_gr_pln_date				, wms_gr_po_no						, wms_gr_no, 
		wms_gr_emp					, wms_gr_start_date				, wms_gr_end_date					, wms_gr_exec_status, 
		wms_gr_created_by			, wms_gr_created_date			, wms_gr_modified_by				, wms_gr_modified_date, 
		wms_gr_timestamp			, wms_gr_userdefined1			, wms_gr_userdefined2				, wms_gr_userdefined3, 
		wms_gr_asn_no				, wms_gr_staging_id				, wms_gr_billing_status				, wms_gr_bill_value, 
		wms_gr_exec_date			, wms_gr_build_complete			, wms_gr_notype						, wms_gr_notype_prefix, 
		wms_gr_ref_type				, wms_gr_employeename			, wms_gr_refdocno					, wms_gr_remark, 
		wms_gr_customerserialno		, wms_gr_conschrg_bil_status	, wms_gr_csurcdgr_bil_status		, wms_gr_hdichpvl_bil_status, 
		wms_gr_lbchprhr_bil_status	, wms_gr_lblprcgr_bil_status	, wms_gr_palrestk_bil_status		, wms_gr_hdichwt_bil_status, 
		wms_gr_hdichitm_bil_status	, wms_gr_hdichsu_bil_status		, wms_gr_hdlimuom_bil_status		, wms_gr_gen_from, 
		wms_gr_consbchg_bil_status	, wms_gr_hdlioutc_bil_status	, wms_gr_whibferb_sell_bil_status	, wms_asn_hciqumos_bil_status, 
		wms_gr_cusbsdcg_bil_status	, etlcreateddatetime
	FROM stg.stg_wms_gr_exec_dtl;
    END IF;
    EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_goodsreceiptdetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_goodsreceiptitemdetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_goodsreceiptitemdetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    p_rawstorageflag integer;
	p_depsource VARCHAR(100);

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) = NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_gr_exec_item_dtl;

	UPDATE dwh.f_goodsreceiptitemdetails t
    SET 
		  gr_dtl_key					= COALESCE(fgrd.gr_dtl_key,-1)
        , gr_itm_dtl_loc_key            = COALESCE(l.loc_key,-1)
		, gr_itm_dtl_itm_hdr_key        = COALESCE(i.itm_hdr_key,-1)	
        , gr_itm_dtl_uom_key            = COALESCE(u.uom_key,-1)
        , gr_itm_dtl_thu_key            = COALESCE(th.thu_key,-1)
        , gr_itm_dtl_stg_mas_key        = COALESCE(ds.stg_mas_key,-1)
		, gr_po_no 						= s.wms_gr_po_no
		, gr_po_sno 					= s.wms_gr_po_sno
		, gr_item 						= s.wms_gr_item
		, gr_item_qty 					= s.wms_gr_item_qty
		, gr_lot_no 					= s.wms_gr_lot_no
		, gr_acpt_qty 					= s.wms_gr_acpt_qty
		, gr_rej_qty 					= s.wms_gr_rej_qty
		, gr_storage_unit 				= s.wms_gr_storage_unit
		, gr_mas_uom 					= s.wms_gr_mas_uom
		, gr_su_qty 					= s.wms_gr_su_qty
		, gr_uid_sno 					= s.wms_gr_uid_sno
		, gr_manu_date 					= s.wms_gr_manu_date
		, gr_exp_date 					= s.wms_gr_exp_date
		, gr_exe_asn_line_no 			= s.wms_gr_exe_asn_line_no
		, gr_exe_wh_bat_no 				= s.wms_gr_exe_wh_bat_no
		, gr_exe_supp_bat_no 			= s.wms_gr_exe_supp_bat_no
		, gr_asn_srl_no 				= s.wms_gr_asn_srl_no
		, gr_asn_uid 					= s.wms_gr_asn_uid
		, gr_asn_cust_sl_no 			= s.wms_gr_asn_cust_sl_no
		, gr_asn_ref_doc_no1 			= s.wms_gr_asn_ref_doc_no1
		, gr_asn_consignee 				= s.wms_gr_asn_consignee
		, gr_asn_outboundorder_qty 		= s.wms_gr_asn_outboundorder_qty
		, gr_asn_bestbeforedate 		= s.wms_gr_asn_bestbeforedate
		, gr_asn_remarks 				= s.wms_gr_asn_remarks
		, gr_plan_no 					= s.wms_gr_plan_no
		, gr_execution_date 			= s.wms_gr_execution_date
		, gr_reasoncode 				= s.wms_gr_reasoncode
		, gr_cross_dock 				= s.wms_gr_cross_dock
		, gr_thu_id 					= s.wms_gr_thu_id
		, gr_thu_sno 					= s.wms_gr_thu_sno
		, gr_stag_id 					= s.wms_gr_stag_id
		, gr_stock_status 				= s.wms_gr_stock_status
		, gr_inv_type 					= s.wms_gr_inv_type
		, gr_product_status 			= s.wms_gr_product_status
		, gr_coo 						= s.wms_gr_coo
		, gr_item_attribute1 			= s.wms_gr_item_attribute1
		, gr_item_attribute2 			= s.wms_gr_item_attribute2
		, gr_item_attribute3 			= s.wms_gr_item_attribute3
		, gr_item_in_stage 				= s.wms_gr_item_in_stage
		, gr_item_to_stage 				= s.wms_gr_item_to_stage
		, gr_pal_status 				= s.wms_gr_pal_status
		, gr_item_hht_save_flag 		= s.wms_gr_item_hht_save_flag
		, gr_updated_from 				= s.wms_gr_updated_from
		, gr_last_updated_by 			= s.wms_gr_last_updated_by
		, gr_item_attribute7 			= s.wms_gr_item_attribute7
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_gr_exec_item_dtl s
	INNER JOIN dwh.f_goodsreceiptdetails fgrd		
		ON 	s.wms_gr_loc_code 			= fgrd.gr_loc_code 
		AND s.wms_gr_exec_no			= fgrd.gr_exec_no
        AND s.wms_gr_exec_ou        	= fgrd.gr_exec_ou		
	LEFT JOIN dwh.d_location l		
		ON 	s.wms_gr_loc_code 			= l.loc_code 
        AND s.wms_gr_exec_ou        	= l.loc_ou		
	LEFT JOIN dwh.d_itemheader i		
		ON 	s.wms_gr_item 				= i.itm_code 
        AND s.wms_gr_exec_ou        	= i.itm_ou	
	LEFT JOIN dwh.d_uom u 		
		ON 	s.wms_gr_mas_uom			= u.mas_uomcode 
        AND s.wms_gr_exec_ou        	= u.mas_ouinstance	
	LEFT JOIN dwh.d_thu th 			
		ON 	s.wms_gr_thu_id				= th.thu_id 
        AND s.wms_gr_exec_ou        	= th.thu_ou
	LEFT JOIN dwh.d_stage ds 		
		ON 	s.wms_gr_stag_id			= ds.stg_mas_id
		AND s.wms_gr_loc_code			= ds.stg_mas_loc		
        AND s.wms_gr_exec_ou        	= ds.stg_mas_ou	
    WHERE   t.gr_loc_code 				= s.wms_gr_loc_code
		AND t.gr_exec_no 				= s.wms_gr_exec_no
		AND t.gr_exec_ou 				= s.wms_gr_exec_ou
		AND t.gr_lineno 				= s.wms_gr_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_goodsreceiptitemdetails
	(
		  gr_dtl_key					, gr_itm_dtl_loc_key			, gr_itm_dtl_itm_hdr_key		, gr_itm_dtl_uom_key
		, gr_itm_dtl_thu_key			, gr_itm_dtl_stg_mas_key		, gr_loc_code					, gr_exec_no
		, gr_exec_ou					, gr_lineno						, gr_po_no						, gr_po_sno
		, gr_item						, gr_item_qty					, gr_lot_no						, gr_acpt_qty
		, gr_rej_qty					, gr_storage_unit				, gr_mas_uom					, gr_su_qty
		, gr_uid_sno					, gr_manu_date					, gr_exp_date					, gr_exe_asn_line_no
		, gr_exe_wh_bat_no				, gr_exe_supp_bat_no			, gr_asn_srl_no					, gr_asn_uid
		, gr_asn_cust_sl_no				, gr_asn_ref_doc_no1			, gr_asn_consignee				, gr_asn_outboundorder_qty
		, gr_asn_bestbeforedate			, gr_asn_remarks				, gr_plan_no					, gr_execution_date
		, gr_reasoncode					, gr_cross_dock					, gr_thu_id						, gr_thu_sno
		, gr_stag_id					, gr_stock_status				, gr_inv_type					, gr_product_status
		, gr_coo						, gr_item_attribute1			, gr_item_attribute2			, gr_item_attribute3
		, gr_item_in_stage				, gr_item_to_stage				, gr_pal_status					, gr_item_hht_save_flag
		, gr_updated_from				, gr_last_updated_by			, gr_item_attribute7			, etlactiveind
		, etljobname					, envsourcecd					, datasourcecd					, etlcreatedatetime
	)
	
	SELECT 
		  COALESCE(fgrd.gr_dtl_key,-1)	, COALESCE(l.loc_key,-1)		, COALESCE(i.itm_hdr_key,-1)	, COALESCE(u.uom_key,-1)
		, COALESCE(th.thu_key,-1)		, COALESCE(ds.stg_mas_key,-1)	, s.wms_gr_loc_code				, s.wms_gr_exec_no
		, s.wms_gr_exec_ou				, s.wms_gr_lineno				, s.wms_gr_po_no				, s.wms_gr_po_sno
		, s.wms_gr_item					, s.wms_gr_item_qty				, s.wms_gr_lot_no				, s.wms_gr_acpt_qty
		, s.wms_gr_rej_qty				, s.wms_gr_storage_unit			, s.wms_gr_mas_uom				, s.wms_gr_su_qty
		, s.wms_gr_uid_sno				, s.wms_gr_manu_date			, s.wms_gr_exp_date				, s.wms_gr_exe_asn_line_no
		, s.wms_gr_exe_wh_bat_no		, s.wms_gr_exe_supp_bat_no		, s.wms_gr_asn_srl_no			, s.wms_gr_asn_uid
		, s.wms_gr_asn_cust_sl_no		, s.wms_gr_asn_ref_doc_no1		, s.wms_gr_asn_consignee		, s.wms_gr_asn_outboundorder_qty
		, s.wms_gr_asn_bestbeforedate	, s.wms_gr_asn_remarks			, s.wms_gr_plan_no				, s.wms_gr_execution_date
		, s.wms_gr_reasoncode			, s.wms_gr_cross_dock			, s.wms_gr_thu_id				, s.wms_gr_thu_sno
		, s.wms_gr_stag_id				, s.wms_gr_stock_status			, s.wms_gr_inv_type				, s.wms_gr_product_status
		, s.wms_gr_coo					, s.wms_gr_item_attribute1		, s.wms_gr_item_attribute2		, s.wms_gr_item_attribute3
		, s.wms_gr_item_in_stage		, s.wms_gr_item_to_stage		, s.wms_gr_pal_status			, s.wms_gr_item_hht_save_flag
		, s.wms_gr_updated_from			, s.wms_gr_last_updated_by		, s.wms_gr_item_attribute7		, 1 AS etlactiveind			
		, p_etljobname					, p_envsourcecd					, p_datasourcecd				, NOW()
	FROM stg.stg_wms_gr_exec_item_dtl s
	INNER JOIN dwh.f_goodsreceiptdetails fgrd		
		ON 	s.wms_gr_loc_code 			= fgrd.gr_loc_code 
		AND s.wms_gr_exec_no			= fgrd.gr_exec_no
        AND s.wms_gr_exec_ou        	= fgrd.gr_exec_ou		
	LEFT JOIN dwh.d_location l		
		ON 	s.wms_gr_loc_code 			= l.loc_code 
        AND s.wms_gr_exec_ou        	= l.loc_ou		
	LEFT JOIN dwh.d_itemheader i		
		ON 	s.wms_gr_item 				= i.itm_code 
        AND s.wms_gr_exec_ou        	= i.itm_ou	
	LEFT JOIN dwh.d_uom u 		
		ON 	s.wms_gr_mas_uom			= u.mas_uomcode 
        AND s.wms_gr_exec_ou        	= u.mas_ouinstance	
	LEFT JOIN dwh.d_thu th 			
		ON 	s.wms_gr_thu_id				= th.thu_id 
        AND s.wms_gr_exec_ou        	= th.thu_ou
	LEFT JOIN dwh.d_stage ds 		
		ON 	s.wms_gr_stag_id			= ds.stg_mas_id
		AND s.wms_gr_loc_code			= ds.stg_mas_loc
        AND s.wms_gr_exec_ou        	= ds.stg_mas_ou 
	LEFT JOIN dwh.f_goodsreceiptitemdetails t 	
		ON  t.gr_loc_code 				= s.wms_gr_loc_code
		AND t.gr_exec_no 				= s.wms_gr_exec_no
		AND t.gr_exec_ou 				= s.wms_gr_exec_ou
		AND t.gr_lineno 				= s.wms_gr_lineno
    WHERE   t.gr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_gr_exec_item_dtl
	(
		  wms_gr_loc_code				, wms_gr_exec_no				, wms_gr_exec_ou					, wms_gr_lineno
		, wms_gr_po_no					, wms_gr_po_sno					, wms_gr_item						, wms_gr_item_qty
		, wms_gr_lot_no					, wms_gr_acpt_qty				, wms_gr_rej_qty					, wms_gr_storage_unit
		, wms_gr_consuambles			, wms_gr_consum_qty				, wms_gr_mas_uom					, wms_gr_su_qty
		, wms_gr_asn_line_no			, wms_gr_uid_sno				, wms_gr_manu_date					, wms_gr_exp_date
		, wms_gr_exe_asn_line_no		, wms_gr_exe_wh_bat_no			, wms_gr_exe_supp_bat_no			, wms_gr_asn_srl_no
		, wms_gr_asn_uid				, wms_gr_asn_cust_sl_no			, wms_gr_asn_ref_doc_no1			, wms_gr_asn_consignee
		, wms_gr_asn_outboundorder_no	, wms_gr_asn_outboundorder_qty	, wms_gr_asn_outboundorder_lineno	, wms_gr_asn_bestbeforedate
		, wms_gr_asn_remarks			, wms_gr_plan_no				, wms_gr_execution_date				, wms_gr_reasoncode
		, wms_gr_cross_dock				, wms_gr_thu_id					, wms_gr_thu_sno					, wms_gr_stag_id
		, wms_gr_stock_status			, wms_gr_inv_type				, wms_gr_product_status				, wms_gr_coo
		, wms_gr_item_attribute1		, wms_gr_item_attribute2		, wms_gr_item_attribute3			, wms_gr_item_attribute4
		, wms_gr_item_attribute5		, wms_gr_item_thu_type			, wms_gr_item_in_stage				, wms_gr_item_to_stage
		, wms_gr_pal_status				, wms_gr_su2_qty				, wms_gr_uid2_sno					, wms_gr_storage_unit2
		, wms_gr_item_hht_save_flag		, wms_gr_ins_exp_date			, wms_gr_ins_manu_date				, wms_gr_ins_bstbfr_date
		, wms_gr_ins_more_coo			, wms_gr_ins_more_inv_type		, wms_gr_ins_more_itm_attb1			, wms_gr_ins_more_itm_attb2
		, wms_gr_ins_more_itm_attb3		, wms_gr_ins_more_itm_attb4		, wms_gr_ins_more_itm_attb5			, wms_gr_ins_more_prod_stus
		, wms_gr_ins_more_su_img		, wms_gr_uid_serialno2			, wms_gr_uid_su2					, wms_gr_su1_conv_flg
		, wms_gr_su2_conv_flg			, wms_gr_su1_tog				, wms_gr_su2_tog					, wms_gr_updated_from
		, wms_gr_last_updated_by		, wms_gr_last_updated_datetime	, wms_gr_item_attribute6			, wms_gr_item_attribute7
		, wms_gr_item_attribute8		, wms_gr_item_attribute9		, wms_gr_item_attribute10			, wms_gr_qulinfee_bil_status	, etlcreateddatetime
	)
	SELECT 
		  wms_gr_loc_code				, wms_gr_exec_no				, wms_gr_exec_ou					, wms_gr_lineno
		, wms_gr_po_no					, wms_gr_po_sno					, wms_gr_item						, wms_gr_item_qty
		, wms_gr_lot_no					, wms_gr_acpt_qty				, wms_gr_rej_qty					, wms_gr_storage_unit
		, wms_gr_consuambles			, wms_gr_consum_qty				, wms_gr_mas_uom					, wms_gr_su_qty
		, wms_gr_asn_line_no			, wms_gr_uid_sno				, wms_gr_manu_date					, wms_gr_exp_date
		, wms_gr_exe_asn_line_no		, wms_gr_exe_wh_bat_no			, wms_gr_exe_supp_bat_no			, wms_gr_asn_srl_no
		, wms_gr_asn_uid				, wms_gr_asn_cust_sl_no			, wms_gr_asn_ref_doc_no1			, wms_gr_asn_consignee
		, wms_gr_asn_outboundorder_no	, wms_gr_asn_outboundorder_qty	, wms_gr_asn_outboundorder_lineno	, wms_gr_asn_bestbeforedate
		, wms_gr_asn_remarks			, wms_gr_plan_no				, wms_gr_execution_date				, wms_gr_reasoncode
		, wms_gr_cross_dock				, wms_gr_thu_id					, wms_gr_thu_sno					, wms_gr_stag_id
		, wms_gr_stock_status			, wms_gr_inv_type				, wms_gr_product_status				, wms_gr_coo
		, wms_gr_item_attribute1		, wms_gr_item_attribute2		, wms_gr_item_attribute3			, wms_gr_item_attribute4
		, wms_gr_item_attribute5		, wms_gr_item_thu_type			, wms_gr_item_in_stage				, wms_gr_item_to_stage
		, wms_gr_pal_status				, wms_gr_su2_qty				, wms_gr_uid2_sno					, wms_gr_storage_unit2
		, wms_gr_item_hht_save_flag		, wms_gr_ins_exp_date			, wms_gr_ins_manu_date				, wms_gr_ins_bstbfr_date
		, wms_gr_ins_more_coo			, wms_gr_ins_more_inv_type		, wms_gr_ins_more_itm_attb1			, wms_gr_ins_more_itm_attb2
		, wms_gr_ins_more_itm_attb3		, wms_gr_ins_more_itm_attb4		, wms_gr_ins_more_itm_attb5			, wms_gr_ins_more_prod_stus
		, wms_gr_ins_more_su_img		, wms_gr_uid_serialno2			, wms_gr_uid_su2					, wms_gr_su1_conv_flg
		, wms_gr_su2_conv_flg			, wms_gr_su1_tog				, wms_gr_su2_tog					, wms_gr_updated_from
		, wms_gr_last_updated_by		, wms_gr_last_updated_datetime	, wms_gr_item_attribute6			, wms_gr_item_attribute7
		, wms_gr_item_attribute8		, wms_gr_item_attribute9		, wms_gr_item_attribute10			, wms_gr_qulinfee_bil_status	, etlcreateddatetime
	FROM stg.stg_wms_gr_exec_item_dtl;
    END IF;
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_goodsreceiptitemdetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_grheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_grheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_gr_hdr_grmain;

	UPDATE dwh.f_grheader t
    SET 
          gr_date_key                   = COALESCE(d.datekey,-1)
        , gr_emp_hdr_key                = COALESCE(e.emp_hdr_key,-1)
        , gr_vendor_key                 = COALESCE(v.vendor_key,-1)
        , gr_curr_key                  	= COALESCE(c.curr_key,-1)
		, grdate 						= s.gr_hdr_grdate
		, grstatus 						= s.gr_hdr_grstatus
		, numseries 					= s.gr_hdr_numseries
		, grfolder 						= s.gr_hdr_grfolder
		, grtype 						= s.gr_hdr_grtype
		, gatepassno 					= s.gr_hdr_gatepassno
		, gatepassdate 					= s.gr_hdr_gatepassdate
		, noofitems 					= s.gr_hdr_noofitems
		, delynoteno 					= s.gr_hdr_delynoteno
		, delynotedate 					= s.gr_hdr_delynotedate
		, empcode 						= s.gr_hdr_empcode
		, orderdoc 						= s.gr_hdr_orderdoc
		, orderou 						= s.gr_hdr_orderou
		, orderno 						= s.gr_hdr_orderno
		, orderamendno 					= s.gr_hdr_orderamendno
		, orderdate 					= s.gr_hdr_orderdate
		, orderapprdate 				= s.gr_hdr_orderapprdate
		, orderfolder 					= s.gr_hdr_orderfolder
		, contperson 					= s.gr_hdr_contperson
		, refdoclineno 					= s.gr_hdr_refdoclineno
		, suppcode 						= s.gr_hdr_suppcode
		, shipfromid 					= s.gr_hdr_shipfromid
		, autoinvoice 					= s.gr_hdr_autoinvoice
		, invoiceat	 					= s.gr_hdr_invoiceat
		, pay2sypplier 					= s.gr_hdr_pay2sypplier
		, invbeforegr 					= s.gr_hdr_invbeforegr
		, docvalue 						= s.gr_hdr_docvalue
		, addlcharges 					= s.gr_hdr_addlcharges
		, tcdtotalvalue 				= s.gr_hdr_tcdtotalvalue
		, totalvalue 					= s.gr_hdr_totalvalue
		, exchrate 						= s.gr_hdr_exchrate
		, currency 						= s.gr_hdr_currency
		, frdate 						= s.gr_hdr_frdate
		, fadate 						= s.gr_hdr_fadate
		, fmdate 						= s.gr_hdr_fmdate
		, vatincl 						= s.gr_hdr_vatincl
		, createdby 					= s.gr_hdr_createdby
		, createdate 					= s.gr_hdr_createdate
		, modifiedby 					= s.gr_hdr_modifiedby
		, modifieddate 					= s.gr_hdr_modifieddate
		, grtimestamp 					= s.gr_hdr_timestamp
		, remarks 						= s.gr_hdr_remarks
		, tcal_status 					= s.gr_hdr_tcal_status
		, total_tcal_amount 			= s.gr_hdr_total_tcal_amount
		, tot_excludingtcal_amount 		= s.gr_hdr_tot_excludingtcal_amount
		, lr_no 						= s.gr_hdr_lr_no
		, lr_date 						= s.gr_hdr_lr_date
		, revdate 						= s.gr_hdr_revdate
		, revremrks 					= s.gr_hdr_revremrks
		, revres_cd 					= s.gr_hdr_revres_cd
		, revres_dsc 					= s.gr_hdr_revres_dsc
		, suppinvno 					= s.gr_hdr_suppinvno
		, suppinvdate 					= s.gr_hdr_suppinvdate
		, party_tax_region 				= s.gr_hdr_party_tax_region
		, party_regd_no 				= s.gr_hdr_party_regd_no
		, own_tax_region 				= s.gr_hdr_own_tax_region
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_gr_hdr_grmain s
	LEFT JOIN dwh.d_date d 			
		ON 	s.gr_hdr_grdate::date 		= d.dateactual
	LEFT JOIN dwh.d_employeeheader e 		
		ON 	s.gr_hdr_empcode 			= e.emp_employee_code 
        AND s.gr_hdr_ouinstid        	= e.emp_ou		
	LEFT JOIN dwh.d_vendor v 		
		ON 	s.gr_hdr_suppcode  			= v.vendor_id 
        AND s.gr_hdr_ouinstid        	= v.vendor_ou
	LEFT JOIN dwh.d_currency c 		
		ON 	s.gr_hdr_currency  			= c.iso_curr_code 	
    WHERE 	t.ouinstid 					= s.gr_hdr_ouinstid
		AND t.grno 						= s.gr_hdr_grno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_grheader
	(
		gr_date_key					, gr_emp_hdr_key				, gr_vendor_key						, gr_curr_key, 
		ouinstid					, grno							, grdate							, grstatus, 
		numseries					, grfolder						, grtype							, gatepassno, 
		gatepassdate				, noofitems						, delynoteno						, delynotedate, 
		empcode						, orderdoc						, orderou							, orderno, 
		orderamendno				, orderdate						, orderapprdate						, orderfolder, 
		contperson					, refdoclineno					, suppcode							, shipfromid, 
		autoinvoice					, invoiceat						, pay2sypplier						, invbeforegr, 
		docvalue					, addlcharges					, tcdtotalvalue						, totalvalue, 
		exchrate					, currency						, frdate							, fadate, 
		fmdate						, vatincl						, createdby							, createdate, 
		modifiedby					, modifieddate					, grtimestamp						, remarks, 
		tcal_status					, total_tcal_amount				, tot_excludingtcal_amount			, lr_no, 
		lr_date						, revdate						, revremrks							, revres_cd, 
		revres_dsc					, suppinvno						, suppinvdate						, party_tax_region, 
		party_regd_no				, own_tax_region				, etlactiveind						, etljobname, 
		envsourcecd					, datasourcecd					, etlcreatedatetime

	)
	
	SELECT 
	   	COALESCE(d.datekey,-1)		, COALESCE(e.emp_hdr_key,-1)	, COALESCE(v.vendor_key,-1)			,COALESCE(c.curr_key,-1),
		s.gr_hdr_ouinstid			, s.gr_hdr_grno					, s.gr_hdr_grdate					, s.gr_hdr_grstatus, 
		s.gr_hdr_numseries			, s.gr_hdr_grfolder				, s.gr_hdr_grtype					, s.gr_hdr_gatepassno, 
		s.gr_hdr_gatepassdate		, s.gr_hdr_noofitems			, s.gr_hdr_delynoteno				, s.gr_hdr_delynotedate, 
		s.gr_hdr_empcode			, s.gr_hdr_orderdoc				, s.gr_hdr_orderou					, s.gr_hdr_orderno, 
		s.gr_hdr_orderamendno		, s.gr_hdr_orderdate			, s.gr_hdr_orderapprdate			, s.gr_hdr_orderfolder, 
		s.gr_hdr_contperson			, s.gr_hdr_refdoclineno			, s.gr_hdr_suppcode					, s.gr_hdr_shipfromid, 
		s.gr_hdr_autoinvoice		, s.gr_hdr_invoiceat			, s.gr_hdr_pay2sypplier				, s.gr_hdr_invbeforegr, 
		s.gr_hdr_docvalue			, s.gr_hdr_addlcharges			, s.gr_hdr_tcdtotalvalue			, s.gr_hdr_totalvalue, 
		s.gr_hdr_exchrate			, s.gr_hdr_currency				, s.gr_hdr_frdate					, s.gr_hdr_fadate, 
		s.gr_hdr_fmdate				, s.gr_hdr_vatincl				, s.gr_hdr_createdby				, s.gr_hdr_createdate, 
		s.gr_hdr_modifiedby			, s.gr_hdr_modifieddate			, s.gr_hdr_timestamp				, s.gr_hdr_remarks, 
		s.gr_hdr_tcal_status		, s.gr_hdr_total_tcal_amount	, s.gr_hdr_tot_excludingtcal_amount	, s.gr_hdr_lr_no, 
		s.gr_hdr_lr_date			, s.gr_hdr_revdate				, s.gr_hdr_revremrks				, s.gr_hdr_revres_cd, 
		s.gr_hdr_revres_dsc			, s.gr_hdr_suppinvno			, s.gr_hdr_suppinvdate				, s.gr_hdr_party_tax_region, 
		s.gr_hdr_party_regd_no		, s.gr_hdr_own_tax_region		, 1 AS etlactiveind					, p_etljobname,
		p_envsourcecd				, p_datasourcecd				, NOW()
	FROM stg.stg_gr_hdr_grmain s
	LEFT JOIN dwh.d_date d 			
		ON 	s.gr_hdr_grdate::date 		= d.dateactual
	LEFT JOIN dwh.d_employeeheader e 		
		ON 	s.gr_hdr_empcode 			= e.emp_employee_code 
        AND s.gr_hdr_ouinstid        	= e.emp_ou		
	LEFT JOIN dwh.d_vendor v 		
		ON 	s.gr_hdr_suppcode  			= v.vendor_id 
        AND s.gr_hdr_ouinstid        	= v.vendor_ou
	LEFT JOIN dwh.d_currency c 		
		ON 	s.gr_hdr_currency  			= c.iso_curr_code 
	LEFT JOIN dwh.f_grheader t 	
		ON  t.ouinstid 					= s.gr_hdr_ouinstid
		AND t.grno 						= s.gr_hdr_grno
    WHERE t.grno IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_gr_hdr_grmain
	(
		gr_hdr_ouinstid					, gr_hdr_grno			, gr_hdr_grdate				, gr_hdr_grstatus, 
		gr_hdr_numseries				, gr_hdr_grfolder		, gr_hdr_grtype				, gr_hdr_gatepassno, 
		gr_hdr_gatepassdate				, gr_hdr_transmode		, gr_hdr_carriername		, gr_hdr_vehicleno, 
		gr_hdr_noofitems				, gr_hdr_consweight		, gr_hdr_consuom			, gr_hdr_delynoteno, 
		gr_hdr_delynotedate				, gr_hdr_empcode		, gr_hdr_orderdoc			, gr_hdr_orderou, 
		gr_hdr_orderno					, gr_hdr_orderamendno	, gr_hdr_orderdate			, gr_hdr_orderapprdate, 
		gr_hdr_orderfolder				, gr_hdr_contperson		, gr_hdr_refdoc				, gr_hdr_refdocno, 
		gr_hdr_refdoclineno				, gr_hdr_suppcode		, gr_hdr_shipfromid			, gr_hdr_autoinvoice, 
		gr_hdr_invoiceat				, gr_hdr_pay2sypplier	, gr_hdr_invbeforegr		, gr_hdr_docvalue, 
		gr_hdr_addlcharges				, gr_hdr_tcdtotalvalue	, gr_hdr_totalvalue			, gr_hdr_exchrate, 
		gr_hdr_currency					, gr_hdr_frdate			, gr_hdr_fadate				, gr_hdr_fmdate, 
		gr_hdr_tcddocvalue				, gr_hdr_otcddocvalue	, gr_hdr_vatincl			, gr_hdr_retainchrg, 
		gr_hdr_createdby				, gr_hdr_createdate		, gr_hdr_modifiedby			, gr_hdr_modifieddate, 
		gr_hdr_timestamp				, gr_hdr_invoicevalue	, gr_hdr_remarks			, gr_hdr_refou, 
		gr_hdr_vatcharges				, gr_hdr_nonvatcharges	, gr_hdr_doclvldisc			, gr_hdr_totexclamt, 
		gr_hdr_totinclamt				, gr_hdr_totvatamt		, gr_hdr_tcal_status		, gr_hdr_total_tcal_amount, 
		gr_hdr_tot_excludingtcal_amount	, gr_hdr_tareweight		, gr_hdr_grossweight		, gr_hdr_weight, 
		gr_hdr_entryno					, gr_hdr_lc_no			, gr_hdr_ref_id				, gr_hdr_lr_no, 
		gr_hdr_lr_date					, gr_hdr_revdate		, gr_hdr_revremrks			, gr_hdr_revres_cd, 
		gr_hdr_revres_dsc				, gr_hdr_form57f		, gr_hdr_staxformno			, gr_hdr_roadpermitno, 
		gr_hdr_tripsheetno				, gr_hdr_suppinvno		, gr_hdr_suppinvdate		, gr_hdr_genfrom, 
		gr_hdr_party_tax_region			, gr_hdr_party_regd_no	, gr_hdr_own_tax_region		, gr_hdr_vessel_code, 
		gr_hdr_vessel_name				, gr_hdr_voyage_id		, gr_hdr_additional_info	, etlcreateddatetime
	)
	SELECT 
		gr_hdr_ouinstid					, gr_hdr_grno			, gr_hdr_grdate				, gr_hdr_grstatus, 
		gr_hdr_numseries				, gr_hdr_grfolder		, gr_hdr_grtype				, gr_hdr_gatepassno, 
		gr_hdr_gatepassdate				, gr_hdr_transmode		, gr_hdr_carriername		, gr_hdr_vehicleno, 
		gr_hdr_noofitems				, gr_hdr_consweight		, gr_hdr_consuom			, gr_hdr_delynoteno, 
		gr_hdr_delynotedate				, gr_hdr_empcode		, gr_hdr_orderdoc			, gr_hdr_orderou, 
		gr_hdr_orderno					, gr_hdr_orderamendno	, gr_hdr_orderdate			, gr_hdr_orderapprdate, 
		gr_hdr_orderfolder				, gr_hdr_contperson		, gr_hdr_refdoc				, gr_hdr_refdocno, 
		gr_hdr_refdoclineno				, gr_hdr_suppcode		, gr_hdr_shipfromid			, gr_hdr_autoinvoice, 
		gr_hdr_invoiceat				, gr_hdr_pay2sypplier	, gr_hdr_invbeforegr		, gr_hdr_docvalue, 
		gr_hdr_addlcharges				, gr_hdr_tcdtotalvalue	, gr_hdr_totalvalue			, gr_hdr_exchrate, 
		gr_hdr_currency					, gr_hdr_frdate			, gr_hdr_fadate				, gr_hdr_fmdate, 
		gr_hdr_tcddocvalue				, gr_hdr_otcddocvalue	, gr_hdr_vatincl			, gr_hdr_retainchrg, 
		gr_hdr_createdby				, gr_hdr_createdate		, gr_hdr_modifiedby			, gr_hdr_modifieddate, 
		gr_hdr_timestamp				, gr_hdr_invoicevalue	, gr_hdr_remarks			, gr_hdr_refou, 
		gr_hdr_vatcharges				, gr_hdr_nonvatcharges	, gr_hdr_doclvldisc			, gr_hdr_totexclamt, 
		gr_hdr_totinclamt				, gr_hdr_totvatamt		, gr_hdr_tcal_status		, gr_hdr_total_tcal_amount, 
		gr_hdr_tot_excludingtcal_amount	, gr_hdr_tareweight		, gr_hdr_grossweight		, gr_hdr_weight, 
		gr_hdr_entryno					, gr_hdr_lc_no			, gr_hdr_ref_id				, gr_hdr_lr_no, 
		gr_hdr_lr_date					, gr_hdr_revdate		, gr_hdr_revremrks			, gr_hdr_revres_cd, 
		gr_hdr_revres_dsc				, gr_hdr_form57f		, gr_hdr_staxformno			, gr_hdr_roadpermitno, 
		gr_hdr_tripsheetno				, gr_hdr_suppinvno		, gr_hdr_suppinvdate		, gr_hdr_genfrom, 
		gr_hdr_party_tax_region			, gr_hdr_party_regd_no	, gr_hdr_own_tax_region		, gr_hdr_vessel_code, 
		gr_hdr_vessel_name				, gr_hdr_voyage_id		, gr_hdr_additional_info	, etlcreateddatetime
	FROM stg.stg_gr_hdr_grmain;
    END IF;
    
    EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_grheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_gritemtrackingdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_gritemtrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stock_item_tracking_gr_load_dtl;

    UPDATE dwh.F_GRItemTrackingDetail t
    SET
        gr_itm_tk_dtl_loc_key		  = COALESCE(l.loc_key,-1),
		gr_itm_tk_dtl_itm_hdr_key	  = COALESCE(i.itm_hdr_key,-1),
		gr_itm_tk_dtl_customer_key    = COALESCE(c.customer_key,-1),
        stk_item                      = s.wms_stk_item,
        stk_su                        = s.wms_stk_su,
        stk_gr_thu_id                 = s.wms_stk_gr_thu_id,
        stk_gr_thu_serial_no          = s.wms_stk_gr_thu_serial_no,
        stk_pack_thu_id               = s.wms_stk_pack_thu_id,
        stk_opn_bal                   = s.wms_stk_opn_bal,
        stk_received                  = s.wms_stk_received,
        stk_issued                    = s.wms_stk_issued,
        stk_cls_bal                   = s.wms_stk_cls_bal,
        stk_write_off_qty             = s.wms_stk_write_off_qty,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_stock_item_tracking_gr_load_dtl s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.wms_stk_item			 = i.itm_code
		AND s.wms_stk_ou 		 	 = i.itm_ou 
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_stk_location 	 	 = l.loc_code 
		AND s.wms_stk_ou 		 	 = l.loc_ou 
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_stk_customer 	     = c.customer_id 
		AND s.wms_stk_ou 		     = c.customer_ou 
    WHERE 	t.stk_ou 				  = s.wms_stk_ou
    AND 	t.stk_location 			  = s.wms_stk_location
    AND 	t.stk_customer 			  = s.wms_stk_customer
    AND 	t.stk_date 				  = s.wms_stk_date
    AND 	t.stk_uid_serial_no 	  = s.wms_stk_uid_serial_no
    AND 	t.stk_lot_no 			  = s.wms_stk_lot_no
    AND 	t.stk_pack_thu_serial_no  = s.wms_stk_pack_thu_serial_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_GRItemTrackingDetail
    (
		gr_itm_tk_dtl_loc_key, gr_itm_tk_dtl_itm_hdr_key, gr_itm_tk_dtl_customer_key,
        stk_ou, stk_location, stk_item, stk_customer, stk_date, stk_uid_serial_no, stk_lot_no, stk_su, stk_gr_thu_id, stk_gr_thu_serial_no, stk_pack_thu_id, stk_pack_thu_serial_no, stk_opn_bal, stk_received, stk_issued, stk_cls_bal, stk_write_off_qty, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1), COALESCE(i.itm_hdr_key,-1), COALESCE(c.customer_key,-1),
        s.wms_stk_ou, s.wms_stk_location, s.wms_stk_item, s.wms_stk_customer, s.wms_stk_date, s.wms_stk_uid_serial_no, s.wms_stk_lot_no, s.wms_stk_su, s.wms_stk_gr_thu_id, s.wms_stk_gr_thu_serial_no, s.wms_stk_pack_thu_id, s.wms_stk_pack_thu_serial_no, s.wms_stk_opn_bal, s.wms_stk_received, s.wms_stk_issued, s.wms_stk_cls_bal, s.wms_stk_write_off_qty, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_stock_item_tracking_gr_load_dtl s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.wms_stk_item			 	 = i.itm_code
		AND s.wms_stk_ou 		 	 	 = i.itm_ou 
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_stk_location 	 	 	 = l.loc_code 
		AND s.wms_stk_ou 		 	 	 = l.loc_ou 
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_stk_customer 	     	 = c.customer_id 
		AND s.wms_stk_ou 		     	 = c.customer_ou 
    LEFT JOIN dwh.F_GRItemTrackingDetail t
    ON 		s.wms_stk_ou 			     = t.stk_ou
    AND 	s.wms_stk_location 		     = t.stk_location
    AND 	s.wms_stk_customer 		     = t.stk_customer
    AND 	s.wms_stk_date 			     = t.stk_date
    AND 	s.wms_stk_uid_serial_no      = t.stk_uid_serial_no
    AND 	s.wms_stk_lot_no             = t.stk_lot_no
    AND 	s.wms_stk_pack_thu_serial_no = t.stk_pack_thu_serial_no
    WHERE t.stk_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_item_tracking_gr_load_dtl
    (
        wms_stk_ou, wms_stk_location, wms_stk_item, wms_stk_customer, wms_stk_date, wms_stk_uid_serial_no, wms_stk_lot_no, wms_stk_su, wms_stk_gr_thu_id, wms_stk_gr_thu_serial_no, wms_stk_pack_thu_id, wms_stk_pack_thu_serial_no, wms_stk_opn_bal, wms_stk_received, wms_stk_issued, wms_stk_cls_bal, wms_stk_write_off_qty, etlcreateddatetime
    )
    SELECT
        wms_stk_ou, wms_stk_location, wms_stk_item, wms_stk_customer, wms_stk_date, wms_stk_uid_serial_no, wms_stk_lot_no, wms_stk_su, wms_stk_gr_thu_id, wms_stk_gr_thu_serial_no, wms_stk_pack_thu_id, wms_stk_pack_thu_serial_no, wms_stk_opn_bal, wms_stk_received, wms_stk_issued, wms_stk_cls_bal, wms_stk_write_off_qty, etlcreateddatetime
    FROM stg.stg_wms_stock_item_tracking_gr_load_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_gritemtrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_grplandetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_grplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;

    SELECT COUNT(*) INTO srccnt
    FROM stg.stg_wms_gr_plan_dtl;

    UPDATE dwh.F_GRPlanDetail t
    SET

        gr_loc_key        = COALESCE(l.loc_key,-1),
        gr_date_key       = COALESCE(d.datekey,-1),
		gr_emp_key		= COALESCE(e.emp_hdr_key,-1),
        gr_pln_date = s.wms_gr_pln_date,
        gr_pln_status = s.wms_gr_pln_status,
        gr_po_no = s.wms_gr_po_no,
        gr_po_date = s.wms_gr_po_date,
        gr_asn_no = s.wms_gr_asn_no,
        gr_asn_date = s.wms_gr_asn_date,
        gr_employee = s.wms_gr_employee,
        gr_remarks = s.wms_gr_remarks,
        gr_timestamp = s.wms_gr_timestamp,
        gr_source_stage = s.wms_gr_source_stage,
        gr_source_docno = s.wms_gr_source_docno,
        gr_created_by = s.wms_gr_created_by,
        gr_created_date = s.wms_gr_created_date,
        gr_modified_by = s.wms_gr_modified_by,
        gr_modified_date = s.wms_gr_modified_date,
        gr_staging_id = s.wms_gr_staging_id,
        gr_build_uid = s.wms_gr_build_uid,
        gr_notype = s.wms_gr_notype,
        gr_ref_type = s.wms_gr_ref_type,
        gr_pln_product_status = s.wms_gr_pln_product_status,
        gr_pln_coo = s.wms_gr_pln_coo,
        gr_pln_item_attribute1 = s.wms_gr_pln_item_attribute1,
        gr_pln_item_attribute2 = s.wms_gr_pln_item_attribute2,
        gr_pln_item_attribute3 = s.wms_gr_pln_item_attribute3,
        etlactiveind = 1,
        etljobname = p_etljobname,
        envsourcecd = p_envsourcecd ,
        datasourcecd = p_datasourcecd ,
        etlupdatedatetime = NOW()    
    FROM stg.stg_wms_gr_plan_dtl s

    LEFT JOIN dwh.d_location L      
        ON s.wms_gr_loc_code   = L.loc_code 
        AND s.wms_gr_pln_ou        = L.loc_ou
    LEFT JOIN dwh.d_date D          
        ON s.wms_gr_asn_date::date = D.dateactual
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_gr_employee  	= e.emp_employee_code 
        AND s.wms_gr_pln_ou        	= e.emp_ou	

    WHERE t.gr_loc_code = s.wms_gr_loc_code
    AND t.gr_pln_no = s.wms_gr_pln_no
    AND t.gr_pln_ou = s.wms_gr_pln_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_GRPlanDetail 
    (
        gr_loc_key,
        gr_date_key,gr_emp_key,gr_loc_code, gr_pln_no, gr_pln_ou, gr_pln_date, gr_pln_status, gr_po_no, gr_po_date, gr_asn_no, gr_asn_date, gr_employee, gr_remarks, gr_timestamp, gr_source_stage, gr_source_docno, gr_created_by, gr_created_date, gr_modified_by, gr_modified_date, gr_staging_id, gr_build_uid, gr_notype, gr_ref_type, gr_pln_product_status, gr_pln_coo, gr_pln_item_attribute1, gr_pln_item_attribute2, gr_pln_item_attribute3, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )
    
    SELECT
        COALESCE(l.loc_key,-1),
        COALESCE(d.datekey,-1), COALESCE(e.emp_hdr_key,-1),s.wms_gr_loc_code, s.wms_gr_pln_no, s.wms_gr_pln_ou, s.wms_gr_pln_date, s.wms_gr_pln_status, s.wms_gr_po_no, s.wms_gr_po_date, s.wms_gr_asn_no, s.wms_gr_asn_date, s.wms_gr_employee, s.wms_gr_remarks, s.wms_gr_timestamp, s.wms_gr_source_stage, s.wms_gr_source_docno, s.wms_gr_created_by, s.wms_gr_created_date, s.wms_gr_modified_by, s.wms_gr_modified_date, s.wms_gr_staging_id, s.wms_gr_build_uid, s.wms_gr_notype, s.wms_gr_ref_type, s.wms_gr_pln_product_status, s.wms_gr_pln_coo, s.wms_gr_pln_item_attribute1, s.wms_gr_pln_item_attribute2, s.wms_gr_pln_item_attribute3, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_gr_plan_dtl s

    LEFT JOIN dwh.d_location L      
        ON s.wms_gr_loc_code   = L.loc_code 
        AND s.wms_gr_pln_ou        = L.loc_ou
    LEFT JOIN dwh.d_date D          
        ON s.wms_gr_asn_date::date = D.dateactual
		
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_gr_employee  	= e.emp_employee_code 
        AND s.wms_gr_pln_ou        	= e.emp_ou

    LEFT JOIN dwh.F_GRPlanDetail t
    ON   t.gr_loc_code  = s.wms_gr_loc_code 
    AND  t.gr_pln_no = s.wms_gr_pln_no 
    AND  t.gr_pln_ou = s.wms_gr_pln_ou 
    WHERE t.gr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_gr_plan_dtl
    (   
        wms_gr_loc_code, wms_gr_pln_no, wms_gr_pln_ou, wms_gr_pln_date, wms_gr_pln_status, wms_gr_po_no, wms_gr_po_date, wms_gr_asn_no, wms_gr_asn_date, wms_gr_employee, wms_gr_remarks, wms_gr_timestamp, wms_gr_source_stage, wms_gr_source_docno, wms_gr_created_by, wms_gr_created_date, wms_gr_modified_by, wms_gr_modified_date, wms_gr_userdefined1, wms_gr_userdefined2, wms_gr_userdefined3, wms_gr_staging_id, wms_gr_build_uid, wms_gr_notype, wms_gr_notype_prefix, wms_gr_ref_type, wms_gr_employeename, wms_gr_refdocno, wms_gr_remark, wms_gr_customerserialno, wms_gr_pln_inv_type, wms_gr_pln_product_status, wms_gr_pln_coo, wms_gr_pln_item_attribute1, wms_gr_pln_item_attribute2, wms_gr_pln_item_attribute3, wms_gr_pln_item_attribute4, wms_gr_pln_item_attribute5, wms_gr_pln_item_attribute10, wms_gr_pln_item_attribute6, wms_gr_stag_id, wms_gr_pln_item_attribute7, wms_gr_pln_item_attribute8, wms_gr_pln_item_attribute9,etlcreateddatetime
    )
    SELECT 
        wms_gr_loc_code, wms_gr_pln_no, wms_gr_pln_ou, wms_gr_pln_date, wms_gr_pln_status, wms_gr_po_no, wms_gr_po_date, wms_gr_asn_no, wms_gr_asn_date, wms_gr_employee, wms_gr_remarks, wms_gr_timestamp, wms_gr_source_stage, wms_gr_source_docno, wms_gr_created_by, wms_gr_created_date, wms_gr_modified_by, wms_gr_modified_date, wms_gr_userdefined1, wms_gr_userdefined2, wms_gr_userdefined3, wms_gr_staging_id, wms_gr_build_uid, wms_gr_notype, wms_gr_notype_prefix, wms_gr_ref_type, wms_gr_employeename, wms_gr_refdocno, wms_gr_remark, wms_gr_customerserialno, wms_gr_pln_inv_type, wms_gr_pln_product_status, wms_gr_pln_coo, wms_gr_pln_item_attribute1, wms_gr_pln_item_attribute2, wms_gr_pln_item_attribute3, wms_gr_pln_item_attribute4, wms_gr_pln_item_attribute5, wms_gr_pln_item_attribute10, wms_gr_pln_item_attribute6, wms_gr_stag_id, wms_gr_pln_item_attribute7, wms_gr_pln_item_attribute8, wms_gr_pln_item_attribute9,etlcreateddatetime
    FROM stg.stg_wms_gr_plan_dtl;  
    END IF;


     EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
         
END;
$$;


ALTER PROCEDURE dwh.usp_f_grplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_grserialinfo(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_grserialinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_gr_exec_serial_dtl;

    UPDATE dwh.F_GRSerialinfo t
    SET
		gr_loc_key			= COALESCE(l.loc_key,-1),
        gr_po_no			= s.wms_gr_po_no,
        gr_po_sno			= s.wms_gr_po_sno,
        gr_item				= s.wms_gr_item,
        gr_status			= s.wms_gr_status,
        gr_cust_sno			= s.wms_gr_cust_sno,
        gr_3pl_sno			= s.wms_gr_3pl_sno,
        gr_lot_no			= s.wms_gr_lot_no,
        gr_item_lineno		= s.wms_gr_item_lineno,
        etlactiveind		= 1,
        etljobname			= p_etljobname,
        envsourcecd			= p_envsourcecd ,
        datasourcecd		= p_datasourcecd ,
        etlupdatedatetime	= NOW()    
    FROM stg.stg_wms_gr_exec_serial_dtl s
	LEFT JOIN dwh.d_location	l
	ON	s.wms_gr_loc_code	= l.loc_code
	AND	s.wms_gr_exec_ou	= l.loc_ou
	WHERE t.gr_loc_code		= s.wms_gr_loc_code
    AND t.gr_exec_no		= s.wms_gr_exec_no
    AND t.gr_exec_ou		= s.wms_gr_exec_ou
    AND t.gr_lineno			= s.wms_gr_lineno
    AND t.gr_serial_no		= s.wms_gr_serial_no;
	 
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_GRSerialinfo 
    (
        gr_loc_key			, gr_loc_code		, gr_exec_no			,
		gr_exec_ou			, gr_lineno			, gr_po_no				,
		gr_po_sno			, gr_item			, gr_serial_no			, 
		gr_status			, gr_cust_sno		, gr_3pl_sno			,
		gr_lot_no			, gr_item_lineno	,
		etlactiveind		, etljobname		, envsourcecd			,
		datasourcecd		, etlcreatedatetime
    )
     
    SELECT
        COALESCE(l.loc_key,-1), s.wms_gr_loc_code	, s.wms_gr_exec_no		,
		s.wms_gr_exec_ou	, s.wms_gr_lineno		, s.wms_gr_po_no		,
		s.wms_gr_po_sno		, s.wms_gr_item			, s.wms_gr_serial_no	,
		s.wms_gr_status		, s.wms_gr_cust_sno		, s.wms_gr_3pl_sno		,
		s.wms_gr_lot_no		, s.wms_gr_item_lineno	,
				1			, 	p_etljobname		, p_envsourcecd			,
		p_datasourcecd		, NOW()
    FROM stg.stg_wms_gr_exec_serial_dtl s
	LEFT JOIN dwh.d_location l
	ON 	s.wms_gr_loc_code	= l.loc_code
	AND	s.wms_gr_exec_ou	= l.loc_ou
    LEFT JOIN dwh.F_GRSerialinfo t
    ON	s.wms_gr_loc_code	= t.gr_loc_code
    AND s.wms_gr_exec_no	= t.gr_exec_no
    AND s.wms_gr_exec_ou	= t.gr_exec_ou
    AND s.wms_gr_lineno		= t.gr_lineno
    AND s.wms_gr_serial_no	= t.gr_serial_no
	WHERE t.gr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_gr_exec_serial_dtl
    (   
        wms_gr_loc_code			, wms_gr_exec_no			, wms_gr_exec_ou			,
		wms_gr_lineno			, wms_gr_po_no				, wms_gr_po_sno				,
		wms_gr_item				, wms_gr_serial_no			, wms_gr_status				,
		wms_gr_cust_sno			, wms_gr_3pl_sno			, wms_gr_lot_no				,
		wms_gr_item_lineno		, wms_gr_warranty_sno
    )
    SELECT 
		wms_gr_loc_code			, wms_gr_exec_no			, wms_gr_exec_ou			,
		wms_gr_lineno			, wms_gr_po_no				, wms_gr_po_sno				,
		wms_gr_item				, wms_gr_serial_no			, wms_gr_status				,
		wms_gr_cust_sno			, wms_gr_3pl_sno			, wms_gr_lot_no				,
		wms_gr_item_lineno		, wms_gr_warranty_sno
	FROM stg.stg_wms_gr_exec_serial_dtl;
    END IF;   

    EXCEPTION WHEN others THEN
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;	
	
END;
$$;


ALTER PROCEDURE dwh.usp_f_grserialinfo(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_grthudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_grthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	 p_depsource VARCHAR(100);

    
    p_rawstorageflag integer;

BEGIN

    SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
    
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE   d.sourceid      = p_sourceId 
        AND d.dataflowflag  = p_dataflowflag
        AND d.targetobject  = p_targetobject;
		
    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_gr_thu_dtl;

    UPDATE dwh.F_GRTHUDetail t
    SET
	    gr_pln_key   = oh.gr_pln_key,
        gr_loc_key    = COALESCE(l.loc_key,-1),
        gr_po_no = s.wms_gr_po_no,
        gr_thu_id = s.wms_gr_thu_id,
        gr_thu_desc = s.wms_gr_thu_desc,
        gr_thu_class = s.wms_gr_thu_class,
        gr_thu_qty = s.wms_gr_thu_qty,
        gr_pal_status = s.wms_gr_pal_status,
        etlactiveind = 1,
        etljobname = p_etljobname,
        envsourcecd = p_envsourcecd ,
        datasourcecd = p_datasourcecd ,
        etlupdatedatetime = NOW()    
    FROM stg.stg_wms_gr_thu_dtl s
	
	INNER JOIN dwh.f_grplandetail oh
     ON  s.wms_gr_loc_code = oh.gr_loc_code 
     and s.wms_gr_pln_no =oh.gr_pln_no
     and s.wms_gr_pln_ou = oh.gr_pln_ou
	 
   LEFT JOIN dwh.d_location L        
        ON s.wms_gr_loc_code     = L.loc_code 
        AND s.wms_gr_pln_ou        = L.loc_ou

    WHERE t.gr_loc_code = s.wms_gr_loc_code
    AND t.gr_pln_no = s.wms_gr_pln_no
    AND t.gr_pln_ou = s.wms_gr_pln_ou
    AND t.gr_lineno = s.wms_gr_lineno
		AND    t.gr_pln_key   = oh.gr_pln_key;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_GRTHUDetail 
    (
      gr_pln_key, gr_loc_key, gr_loc_code, gr_pln_no, gr_pln_ou, gr_lineno, gr_po_no, gr_thu_id, gr_thu_desc, gr_thu_class, gr_thu_qty, gr_pal_status, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )
    
    SELECT
       oh.gr_pln_key, COALESCE(l.loc_key,-1), s.wms_gr_loc_code, s.wms_gr_pln_no, s.wms_gr_pln_ou, s.wms_gr_lineno, s.wms_gr_po_no, s.wms_gr_thu_id, s.wms_gr_thu_desc, s.wms_gr_thu_class, s.wms_gr_thu_qty, s.wms_gr_pal_status, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_gr_thu_dtl s

		INNER JOIN dwh.f_grplandetail oh
     ON  s.wms_gr_loc_code = oh.gr_loc_code 
     and s.wms_gr_pln_no =oh.gr_pln_no
     and s.wms_gr_pln_ou = oh.gr_pln_ou
	 
  LEFT JOIN dwh.d_location L        
        ON s.wms_gr_loc_code     = L.loc_code 
        AND s.wms_gr_pln_ou        = L.loc_ou

    LEFT JOIN dwh.F_GRTHUDetail t
    ON s.wms_gr_loc_code = t.gr_loc_code
    AND s.wms_gr_pln_no = t.gr_pln_no
    AND s.wms_gr_pln_ou = t.gr_pln_ou
    AND s.wms_gr_lineno = t.gr_lineno
     AND t.gr_pln_key   = oh.gr_pln_key

    WHERE t.gr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_gr_thu_dtl
    (   
        wms_gr_loc_code, wms_gr_pln_no, wms_gr_pln_ou, wms_gr_lineno, wms_gr_po_no, wms_gr_thu_id, wms_gr_thu_desc, wms_gr_thu_class, wms_gr_thu_sno, wms_gr_thu_qty, wms_gr_thu_owner, wms_gr_thu_tod, wms_gr_pal_status,etlcreateddatetime
    )
    SELECT 
        wms_gr_loc_code, wms_gr_pln_no, wms_gr_pln_ou, wms_gr_lineno, wms_gr_po_no, wms_gr_thu_id, wms_gr_thu_desc, wms_gr_thu_class, wms_gr_thu_sno, wms_gr_thu_qty, wms_gr_thu_owner, wms_gr_thu_tod, wms_gr_pal_status,etlcreateddatetime
    FROM stg.stg_wms_gr_thu_dtl;  
    END IF;
	
 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
     EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt; 
  
END;
$$;


ALTER PROCEDURE dwh.usp_f_grthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_grthuheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_grthuheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag 
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId 
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(*) INTO srccnt
    FROM stg.stg_wms_gr_exec_thu_hdr;

    UPDATE dwh.f_gRTHUheader t
    SET	
	    gr_loc_key  = COALESCE(l.loc_key,-1),
		gr_thu_key  = COALESCE(h.thu_key,-1),
        gr_thu_desc = s.wms_gr_thu_desc,
        gr_thu_sr_status = s.wms_gr_thu_sr_status,
        gr_thu_su = s.wms_gr_thu_su,
        gr_pal_status = s.wms_gr_pal_status,
        etlactiveind = 1,
        etljobname = p_etljobname,
        envsourcecd = p_envsourcecd ,
        datasourcecd = p_datasourcecd ,
        etlupdatedatetime = NOW()    
    FROM stg.stg_wms_gr_exec_thu_hdr s
	LEFT JOIN dwh.d_location l
	ON 	s.wms_gr_loc_code =	l.loc_code
	AND	s.wms_gr_exec_ou  =	l.loc_ou
	LEFT JOIN dwh.d_thu H
	ON  s.wms_gr_thu_id   = h.thu_id
	AND s.wms_gr_exec_ou  = h.thu_ou
    WHERE t.gr_loc_code = s.wms_gr_loc_code
    AND t.gr_exec_no = s.wms_gr_exec_no
    AND t.gr_exec_ou = s.wms_gr_exec_ou
    AND t.gr_thu_id = s.wms_gr_thu_id
    AND t.gr_thu_sno = s.wms_gr_thu_sno
    AND t.gr_thu_su = s.wms_gr_thu_su
    AND t.gr_thu_uid_ser_no = s.wms_gr_thu_uid_ser_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_GRTHUheader 
    (
        gr_loc_key,gr_thu_key,gr_loc_code, gr_exec_no, gr_exec_ou, gr_thu_id, gr_thu_sno, gr_thu_desc, gr_thu_sr_status, gr_thu_su, gr_thu_uid_ser_no, gr_pal_status, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )
    
    SELECT
        COALESCE(l.loc_key,-1),COALESCE(h.thu_key,-1),s.wms_gr_loc_code, s.wms_gr_exec_no, s.wms_gr_exec_ou, s.wms_gr_thu_id, s.wms_gr_thu_sno, s.wms_gr_thu_desc, s.wms_gr_thu_sr_status, s.wms_gr_thu_su, s.wms_gr_thu_uid_ser_no, s.wms_gr_pal_status, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_gr_exec_thu_hdr s
	LEFT JOIN dwh.d_location l
	ON 	s.wms_gr_loc_code =	l.loc_code
	AND	s.wms_gr_exec_ou  =	l.loc_ou
	LEFT JOIN dwh.d_thu H
	ON  s.wms_gr_thu_id   = h.thu_id
	AND s.wms_gr_exec_ou  = h.thu_ou
    LEFT JOIN dwh.F_GRTHUheader t
    ON s.wms_gr_loc_code = t.gr_loc_code
    AND s.wms_gr_exec_no = t.gr_exec_no
    AND s.wms_gr_exec_ou = t.gr_exec_ou
    AND s.wms_gr_thu_id = t.gr_thu_id
    AND s.wms_gr_thu_sno = t.gr_thu_sno
    AND s.wms_gr_thu_su = t.gr_thu_su
    AND s.wms_gr_thu_uid_ser_no = t.gr_thu_uid_ser_no
    WHERE t.gr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_gr_exec_thu_hdr
    (   
        wms_gr_loc_code, wms_gr_exec_no, wms_gr_exec_ou, wms_gr_thu_id, wms_gr_thu_sno, wms_gr_thu_desc, wms_gr_thu_class, wms_gr_thu_qty, wms_gr_thu_owner, wms_gr_thu_consumables, wms_gr_thu_sr_status, wms_gr_thu_tod, wms_gr_thu_su, wms_gr_thu_uid_ser_no, wms_gr_pal_status, wms_gr_thu_consumables_qty, wms_gr_thu_su2, wms_gr_thu_uid2_ser_no
    )
    SELECT 
        wms_gr_loc_code, wms_gr_exec_no, wms_gr_exec_ou, wms_gr_thu_id, wms_gr_thu_sno, wms_gr_thu_desc, wms_gr_thu_class, wms_gr_thu_qty, wms_gr_thu_owner, wms_gr_thu_consumables, wms_gr_thu_sr_status, wms_gr_thu_tod, wms_gr_thu_su, wms_gr_thu_uid_ser_no, wms_gr_pal_status, wms_gr_thu_consumables_qty, wms_gr_thu_su2, wms_gr_thu_uid2_ser_no
    FROM stg.stg_wms_gr_exec_thu_hdr;
    END IF; 
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_grthuheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_grthulotdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_grthulotdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
	p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag 
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d 
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId 
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(*) INTO srccnt
    FROM stg.stg_wms_gr_exec_thu_lot_dtl;

    UPDATE dwh.F_gRTHULotDetail t
    SET
	    gr_lot_loc_key  = COALESCE(l.loc_key,-1),
		gr_lot_thu_key  = COALESCE(h.thu_key,-1),
		gr_lot_thu_item_key = COALESCE(i.itm_hdr_key,-1),
        gr_item_line_no = s.wms_gr_item_line_no,
        gr_item_code = s.wms_gr_item_code,
        gr_lot_no = s.wms_gr_lot_no,
        gr_qty = s.wms_gr_qty,
        etlactiveind = 1,
        etljobname = p_etljobname,
        envsourcecd = p_envsourcecd ,
        datasourcecd = p_datasourcecd ,
        etlupdatedatetime = NOW()    
    FROM stg.stg_wms_gr_exec_thu_lot_dtl s
	LEFT JOIN dwh.d_location l
	ON 	s.wms_gr_loc_code =	l.loc_code
	AND	s.wms_gr_exec_ou  =	l.loc_ou
	LEFT JOIN dwh.d_thu H
	ON  s.wms_gr_thu_id   = h.thu_id
	AND s.wms_gr_exec_ou  = h.thu_ou
	LEFT JOIN dwh.d_itemheader i
	ON  s.wms_gr_item_code  = i.itm_code
	AND s.wms_gr_exec_ou    = i.itm_ou
    WHERE t.gr_loc_code = s.wms_gr_loc_code
    AND t.gr_exec_no = s.wms_gr_exec_no
    AND t.gr_exec_ou = s.wms_gr_exec_ou
    AND t.gr_thu_id = s.wms_gr_thu_id
    AND t.gr_lot_thu_sno = s.wms_gr_lot_thu_sno
    AND t.gr_line_no = s.wms_gr_line_no
    AND t.gr_thu_uid_sr_no = s.wms_gr_thu_uid_sr_no
    AND t.gr_thu_lot_su = s.wms_gr_thu_lot_su;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_gRTHULotDetail 
    (
       gr_lot_loc_key, gr_lot_thu_key,gr_lot_thu_item_key,gr_loc_code, gr_exec_no, gr_exec_ou, gr_thu_id, gr_lot_thu_sno, gr_line_no, gr_item_line_no, gr_item_code, gr_lot_no, gr_qty, gr_thu_uid_sr_no, gr_thu_lot_su, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )
    
    SELECT
        COALESCE(l.loc_key,-1),COALESCE(h.thu_key,-1),COALESCE(i.itm_hdr_key,-1),s.wms_gr_loc_code, s.wms_gr_exec_no, s.wms_gr_exec_ou, s.wms_gr_thu_id, s.wms_gr_lot_thu_sno, s.wms_gr_line_no, s.wms_gr_item_line_no, s.wms_gr_item_code, s.wms_gr_lot_no, s.wms_gr_qty, s.wms_gr_thu_uid_sr_no, s.wms_gr_thu_lot_su, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_gr_exec_thu_lot_dtl s
	LEFT JOIN dwh.d_location l
	ON 	s.wms_gr_loc_code =	l.loc_code
	AND	s.wms_gr_exec_ou  =	l.loc_ou
	LEFT JOIN dwh.d_thu H
	ON  s.wms_gr_thu_id   = h.thu_id
	AND s.wms_gr_exec_ou  = h.thu_ou
	LEFT JOIN dwh.d_itemheader i
	ON  s.wms_gr_item_code  = i.itm_code
	AND s.wms_gr_exec_ou    = i.itm_ou
    LEFT JOIN dwh.f_gRTHULotDetail t
    ON s.wms_gr_loc_code = t.gr_loc_code
    AND s.wms_gr_exec_no = t.gr_exec_no
    AND s.wms_gr_exec_ou = t.gr_exec_ou
    AND s.wms_gr_thu_id = t.gr_thu_id
    AND s.wms_gr_lot_thu_sno = t.gr_lot_thu_sno
    AND s.wms_gr_line_no = t.gr_line_no
    AND s.wms_gr_thu_uid_sr_no = t.gr_thu_uid_sr_no
    AND s.wms_gr_thu_lot_su = t.gr_thu_lot_su
    WHERE t.gr_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
    
    INSERT INTO raw.raw_wms_gr_exec_thu_lot_dtl
    (   
        wms_gr_loc_code, wms_gr_exec_no, wms_gr_exec_ou, wms_gr_thu_id, wms_gr_lot_thu_sno, wms_gr_line_no, wms_gr_item_line_no, wms_gr_item_code, wms_gr_lot_no, wms_gr_supp_bat_no, wms_gr_qty, wms_gr_thu_uid_sr_no, wms_gr_thu_lot_su, wms_gr_thu_uid2_ser_no, wms_gr_thu_su2
    )
    SELECT 
        wms_gr_loc_code, wms_gr_exec_no, wms_gr_exec_ou, wms_gr_thu_id, wms_gr_lot_thu_sno, wms_gr_line_no, wms_gr_item_line_no, wms_gr_item_code, wms_gr_lot_no, wms_gr_supp_bat_no, wms_gr_qty, wms_gr_thu_uid_sr_no, wms_gr_thu_lot_su, wms_gr_thu_uid2_ser_no, wms_gr_thu_su2
    FROM stg.stg_wms_gr_exec_thu_lot_dtl;
    END IF;  
	
	EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_grthulotdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inboundamendheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inboundamendheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_inbound_header_h;

    UPDATE dwh.F_InboundAmendHeader t
    SET
        inb_loc_key               = COALESCE(l.loc_key,-1),
        inb_refdoctype            = s.wms_inb_refdoctype,
        inb_refdocno              = s.wms_inb_refdocno,
        inb_refdocdate            = s.wms_inb_refdocdate,
        inb_orderdate             = s.wms_inb_orderdate,
        inb_status                = s.wms_inb_status,
        inb_custcode              = s.wms_inb_custcode,
        inb_vendorcode            = s.wms_inb_vendorcode,
        inb_address1              = s.wms_inb_address1,
        inb_address2              = s.wms_inb_address2,
        inb_address3              = s.wms_inb_address3,
        inb_postcode              = s.wms_inb_postcode,
        inb_country               = s.wms_inb_country,
        inb_state                 = s.wms_inb_state,
        inb_city                  = s.wms_inb_city,
        inb_phoneno               = s.wms_inb_phoneno,
        inb_secrefdoctype1        = s.wms_inb_secrefdoctype1,
        inb_secrefdoctype2        = s.wms_inb_secrefdoctype2,
        inb_secrefdocno1          = s.wms_inb_secrefdocno1,
        inb_secrefdocno2          = s.wms_inb_secrefdocno2,
        inb_secrefdocdate1        = s.wms_inb_secrefdocdate1,
        inb_secrefdocdate2        = s.wms_inb_secrefdocdate2,
        inb_shipmode              = s.wms_inb_shipmode,
        inb_instructions          = s.wms_inb_instructions,
        inb_created_by            = s.wms_inb_created_by,
        inb_created_date          = s.wms_inb_created_date,
        inb_modified_by           = s.wms_inb_modified_by,
        inb_modified_date         = s.wms_inb_modified_date,
        inb_timestamp             = s.wms_inb_timestamp,
        inb_contract_id           = s.wms_inb_contract_id,
        inb_custcode_h            = s.wms_inb_custcode_h,
        inb_type                  = s.wms_inb_type,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_wms_inbound_header_h s
     
     LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

    WHERE t.inb_loc_code = s.wms_inb_loc_code
    AND t.inb_orderno = s.wms_inb_orderno
    AND t.inb_ou = s.wms_inb_ou
    AND t.inb_amendno = s.wms_inb_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundAmendHeader
    (
          inb_loc_key,inb_loc_code, inb_orderno, inb_ou, inb_amendno, inb_refdoctype, inb_refdocno, inb_refdocdate, inb_orderdate, inb_status, inb_custcode, inb_vendorcode, inb_address1, inb_address2, inb_address3, inb_postcode, inb_country, inb_state, inb_city, inb_phoneno, inb_secrefdoctype1, inb_secrefdoctype2, inb_secrefdocno1, inb_secrefdocno2, inb_secrefdocdate1, inb_secrefdocdate2, inb_shipmode, inb_instructions, inb_created_by, inb_created_date, inb_modified_by, inb_modified_date, inb_timestamp, inb_contract_id, inb_custcode_h, inb_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
    COALESCE(l.loc_key,-1)  ,s.wms_inb_loc_code, s.wms_inb_orderno, s.wms_inb_ou, s.wms_inb_amendno, s.wms_inb_refdoctype, s.wms_inb_refdocno, s.wms_inb_refdocdate, s.wms_inb_orderdate, s.wms_inb_status, s.wms_inb_custcode, s.wms_inb_vendorcode, s.wms_inb_address1, s.wms_inb_address2, s.wms_inb_address3, s.wms_inb_postcode, s.wms_inb_country, s.wms_inb_state, s.wms_inb_city, s.wms_inb_phoneno, s.wms_inb_secrefdoctype1, s.wms_inb_secrefdoctype2, s.wms_inb_secrefdocno1, s.wms_inb_secrefdocno2, s.wms_inb_secrefdocdate1, s.wms_inb_secrefdocdate2, s.wms_inb_shipmode, s.wms_inb_instructions, s.wms_inb_created_by, s.wms_inb_created_date, s.wms_inb_modified_by, s.wms_inb_modified_date, s.wms_inb_timestamp, s.wms_inb_contract_id, s.wms_inb_custcode_h, s.wms_inb_type, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_inbound_header_h s
    LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou



    LEFT JOIN dwh.F_InboundAmendHeader t
    ON s.wms_inb_loc_code = t.inb_loc_code
    AND s.wms_inb_orderno = t.inb_orderno
    AND s.wms_inb_ou = t.inb_ou
    AND s.wms_inb_amendno = t.inb_amendno
    WHERE t.inb_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_inbound_header_h
    (
        wms_inb_loc_code, wms_inb_orderno, wms_inb_ou, wms_inb_amendno, wms_inb_refdoctype, wms_inb_refdocno, wms_inb_refdocdate, wms_inb_orderdate, wms_inb_status, wms_inb_custcode, wms_inb_vendorcode, wms_inb_addressid, wms_inb_address1, wms_inb_address2, wms_inb_address3, wms_inb_unqaddress, wms_inb_postcode, wms_inb_country, wms_inb_state, wms_inb_city, wms_inb_phoneno, wms_inb_secrefdoctype1, wms_inb_secrefdoctype2, wms_inb_secrefdoctype3, wms_inb_secrefdocno1, wms_inb_secrefdocno2, wms_inb_secrefdocno3, wms_inb_secrefdocdate1, wms_inb_secrefdocdate2, wms_inb_secrefdocdate3, wms_inb_shipmode, wms_inb_shiptype, wms_inb_instructions, wms_inb_created_by, wms_inb_created_date, wms_inb_modified_by, wms_inb_modified_date, wms_inb_timestamp, wms_inb_userdefined1, wms_inb_userdefined2, wms_inb_userdefined3, wms_inb_operation_status, wms_inb_ord_type, wms_inb_contract_id, wms_inb_contract_amend_no, wms_inb_custcode_h, wms_inb_type, wms_inb_addr_loc_code, wms_inb_consignor_code, wms_inb_reason_code, etlcreateddatetime
    )
    SELECT
        wms_inb_loc_code, wms_inb_orderno, wms_inb_ou, wms_inb_amendno, wms_inb_refdoctype, wms_inb_refdocno, wms_inb_refdocdate, wms_inb_orderdate, wms_inb_status, wms_inb_custcode, wms_inb_vendorcode, wms_inb_addressid, wms_inb_address1, wms_inb_address2, wms_inb_address3, wms_inb_unqaddress, wms_inb_postcode, wms_inb_country, wms_inb_state, wms_inb_city, wms_inb_phoneno, wms_inb_secrefdoctype1, wms_inb_secrefdoctype2, wms_inb_secrefdoctype3, wms_inb_secrefdocno1, wms_inb_secrefdocno2, wms_inb_secrefdocno3, wms_inb_secrefdocdate1, wms_inb_secrefdocdate2, wms_inb_secrefdocdate3, wms_inb_shipmode, wms_inb_shiptype, wms_inb_instructions, wms_inb_created_by, wms_inb_created_date, wms_inb_modified_by, wms_inb_modified_date, wms_inb_timestamp, wms_inb_userdefined1, wms_inb_userdefined2, wms_inb_userdefined3, wms_inb_operation_status, wms_inb_ord_type, wms_inb_contract_id, wms_inb_contract_amend_no, wms_inb_custcode_h, wms_inb_type, wms_inb_addr_loc_code, wms_inb_consignor_code, wms_inb_reason_code, etlcreateddatetime
    FROM stg.stg_wms_inbound_header_h;
    END IF;

    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_f_inboundamendheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inbounddetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inbounddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
 IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN


    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_inbound_item_detail;

    UPDATE dwh.F_InboundDetail t
    SET
         inb_hdr_key                    = oh.inb_hdr_key,
         inb_itm_dtl_loc_key            = COALESCE(l.loc_key,-1),
        inb_itm_dtl_itm_hdr_key        = COALESCE(i.itm_hdr_key,-1),    
        inb_item_code              = s.wms_inb_item_code,
        inb_order_qty              = s.wms_inb_order_qty,
        inb_alt_uom                = s.wms_inb_alt_uom,
        inb_sch_type               = s.wms_inb_sch_type,
        inb_receipt_date           = s.wms_inb_receipt_date,
        inb_item_inst              = s.wms_inb_item_inst,
        inb_supp_code              = s.wms_inb_supp_code,
        inb_balqty                 = s.wms_inb_balqty,
        inb_linestatus             = s.wms_inb_linestatus,
        inb_recdqty                = s.wms_inb_recdqty,
        inb_accpdqty               = s.wms_inb_accpdqty,
        inb_itm_grrejdqty          = s.wms_inb_itm_grrejdqty,
        inb_master_uom_qty         = s.wms_inb_master_uom_qty,
        inb_Stock_status           = s.wms_inb_Stock_status,
        inb_itm_cust               = s.wms_inb_itm_cust,
        inb_cust_po_lineno         = s.wms_inb_cust_po_lineno,
        inb_batch_no               = s.wms_inb_batch_no,
        inb_oe_serial_no           = s.wms_inb_oe_serial_no,
        inb_expiry_date            = s.wms_inb_expiry_date,
        inb_manu_date              = s.wms_inb_manu_date,
        inb_thu_id                 = s.wms_inb_thu_id,
        inb_thu_qty                = s.wms_inb_thu_qty,
        inb_user_def_1             = s.wms_inb_user_def_1,
        inb_user_def_2             = s.wms_inb_user_def_2,
        inb_user_def_3             = s.wms_inb_user_def_3,
        inb_lottable1              = s.wms_inb_lottable1,
        inb_lottable2              = s.wms_inb_lottable2,
        inb_lottable3              = s.wms_inb_lottable3,
        inb_lottable6              = s.wms_inb_lottable6,
        inb_lottable7              = s.wms_inb_lottable7,
        inb_lottable9              = s.wms_inb_lottable9,
        inb_component              = s.wms_inb_component,
        asn_Kit_item_lineno        = s.wms_asn_Kit_item_lineno,
        asn_lineno                 = s.wms_asn_lineno,
        asn_item_po_lineno         = s.wms_asn_item_po_lineno,
        inb_uid1                   = s.wms_inb_uid1,
        inb_item_attribute7        = s.wms_inb_item_attribute7,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_inbound_item_detail s
	
	INNER JOIN dwh.f_inboundheader oh
     ON  s.wms_inb_loc_code = oh.inb_loc_code  
     and s.wms_inb_orderno =oh.inb_orderno 
     and s.wms_inb_ou = oh.inb_ou

    LEFT JOIN dwh.d_location l      
        ON  s.wms_inb_loc_code           = l.loc_code 
        AND s.wms_inb_ou            = l.loc_ou      
    LEFT JOIN dwh.d_itemheader i        
        ON  s.wms_inb_item_code               = i.itm_code 
        AND s.wms_inb_ou            = i.itm_ou  

    WHERE t.inb_loc_code = s.wms_inb_loc_code
    AND t.inb_orderno = s.wms_inb_orderno
    AND t.inb_lineno = s.wms_inb_lineno
    AND t.inb_ou = s.wms_inb_ou
    AND  t.inb_hdr_key  = oh.inb_hdr_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundDetail
    (
        inb_hdr_key, inb_itm_dtl_loc_key, inb_itm_dtl_itm_hdr_key, inb_loc_code, inb_orderno, inb_lineno, inb_ou, inb_item_code, inb_order_qty, inb_alt_uom, inb_sch_type, inb_receipt_date, inb_item_inst, inb_supp_code, inb_balqty, inb_linestatus, inb_recdqty, inb_accpdqty, inb_itm_grrejdqty, inb_master_uom_qty, inb_Stock_status, inb_itm_cust, inb_cust_po_lineno, inb_batch_no, inb_oe_serial_no, inb_expiry_date, inb_manu_date, inb_thu_id, inb_thu_qty, inb_user_def_1, inb_user_def_2, inb_user_def_3, inb_lottable1, inb_lottable2, inb_lottable3, inb_lottable6, inb_lottable7, inb_lottable9, inb_component, asn_Kit_item_lineno, asn_lineno, asn_item_po_lineno, inb_uid1, inb_item_attribute7, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        oh.inb_hdr_key , COALESCE(l.loc_key,-1),COALESCE(i.itm_hdr_key,-1),s.wms_inb_loc_code, s.wms_inb_orderno, s.wms_inb_lineno, s.wms_inb_ou, s.wms_inb_item_code, s.wms_inb_order_qty, s.wms_inb_alt_uom, s.wms_inb_sch_type, s.wms_inb_receipt_date, s.wms_inb_item_inst, s.wms_inb_supp_code, s.wms_inb_balqty, s.wms_inb_linestatus, s.wms_inb_recdqty, s.wms_inb_accpdqty, s.wms_inb_itm_grrejdqty, s.wms_inb_master_uom_qty, s.wms_inb_Stock_status, s.wms_inb_itm_cust, s.wms_inb_cust_po_lineno, s.wms_inb_batch_no, s.wms_inb_oe_serial_no, s.wms_inb_expiry_date, s.wms_inb_manu_date, s.wms_inb_thu_id, s.wms_inb_thu_qty, s.wms_inb_user_def_1, s.wms_inb_user_def_2, s.wms_inb_user_def_3, s.wms_inb_lottable1, s.wms_inb_lottable2, s.wms_inb_lottable3, s.wms_inb_lottable6, s.wms_inb_lottable7, s.wms_inb_lottable9, s.wms_inb_component, s.wms_asn_Kit_item_lineno, s.wms_asn_lineno, s.wms_asn_item_po_lineno, s.wms_inb_uid1, s.wms_inb_item_attribute7, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_inbound_item_detail s
	
	INNER JOIN dwh.f_inboundheader oh
     ON  s.wms_inb_loc_code = oh.inb_loc_code  
     and s.wms_inb_orderno =oh.inb_orderno 
     and s.wms_inb_ou = oh.inb_ou
	 
    LEFT JOIN dwh.d_location l      
        ON  s.wms_inb_loc_code           = l.loc_code 
        AND s.wms_inb_ou            = l.loc_ou      
    LEFT JOIN dwh.d_itemheader i        
        ON  s.wms_inb_item_code               = i.itm_code 
        AND s.wms_inb_ou            = i.itm_ou  

    LEFT JOIN dwh.F_InboundDetail t
    ON s.wms_inb_loc_code = t.inb_loc_code
    AND s.wms_inb_orderno = t.inb_orderno
    AND s.wms_inb_lineno = t.inb_lineno
    AND s.wms_inb_ou = t.inb_ou
	AND  t.inb_hdr_key  = oh.inb_hdr_key
    WHERE t.inb_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_inbound_item_detail
    (
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_item_code, wms_inb_order_qty, wms_inb_alt_uom, wms_inb_sch_type, wms_inb_receipt_date, wms_inb_item_inst, wms_inb_supp_code, wms_inb_addressid, wms_inb_balqty, wms_inb_linestatus, wms_inb_recdqty, wms_inb_accpdqty, wms_inb_returnedqty, wms_inb_itm_grrejdqty, wms_inb_itm_grmovdqty, wms_inb_operation_status, wms_inb_cust_item_code, wms_inb_master_uom_qty, wms_inb_Stock_status, wms_inb_itm_cust, wms_inb_cust_po_lineno, wms_inb_batch_no, wms_inb_oe_serial_no, wms_inb_wr_serial_no, wms_inb_expiry_date, wms_inb_manu_date, wms_inb_best_before_date, wms_inb_thu_id, wms_inb_thu_desc, wms_inb_thu_qty, wms_inb_user_def_1, wms_inb_user_def_2, wms_inb_user_def_3, wms_inb_lottable1, wms_inb_lottable2, wms_inb_lottable3, wms_inb_lottable4, wms_inb_lottable5, wms_inb_lottable6, wms_inb_lottable7, wms_inb_lottable8, wms_inb_lottable9, wms_inb_lottable10, wms_inb_component, wms_inb_retnlabl_bil_status, wms_inb_retnhand_bil_status, wms_asn_Kit_item_lineno, wms_asn_lineno, wms_asn_item_po_lineno, wms_inb_su1, wms_inb_uid1, wms_inb_su2, wms_inb_uid2, wms_inb_hilnitgr_bil_status, wms_inb_item_attribute1, wms_inb_item_attribute2, wms_inb_item_attribute3, wms_inb_item_attribute4, wms_inb_item_attribute5, wms_inb_item_attribute6, wms_inb_item_attribute7, wms_inb_item_attribute8, wms_inb_item_attribute9, wms_inb_item_attribute10, etlcreateddatetime
    )
    SELECT
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_item_code, wms_inb_order_qty, wms_inb_alt_uom, wms_inb_sch_type, wms_inb_receipt_date, wms_inb_item_inst, wms_inb_supp_code, wms_inb_addressid, wms_inb_balqty, wms_inb_linestatus, wms_inb_recdqty, wms_inb_accpdqty, wms_inb_returnedqty, wms_inb_itm_grrejdqty, wms_inb_itm_grmovdqty, wms_inb_operation_status, wms_inb_cust_item_code, wms_inb_master_uom_qty, wms_inb_Stock_status, wms_inb_itm_cust, wms_inb_cust_po_lineno, wms_inb_batch_no, wms_inb_oe_serial_no, wms_inb_wr_serial_no, wms_inb_expiry_date, wms_inb_manu_date, wms_inb_best_before_date, wms_inb_thu_id, wms_inb_thu_desc, wms_inb_thu_qty, wms_inb_user_def_1, wms_inb_user_def_2, wms_inb_user_def_3, wms_inb_lottable1, wms_inb_lottable2, wms_inb_lottable3, wms_inb_lottable4, wms_inb_lottable5, wms_inb_lottable6, wms_inb_lottable7, wms_inb_lottable8, wms_inb_lottable9, wms_inb_lottable10, wms_inb_component, wms_inb_retnlabl_bil_status, wms_inb_retnhand_bil_status, wms_asn_Kit_item_lineno, wms_asn_lineno, wms_asn_item_po_lineno, wms_inb_su1, wms_inb_uid1, wms_inb_su2, wms_inb_uid2, wms_inb_hilnitgr_bil_status, wms_inb_item_attribute1, wms_inb_item_attribute2, wms_inb_item_attribute3, wms_inb_item_attribute4, wms_inb_item_attribute5, wms_inb_item_attribute6, wms_inb_item_attribute7, wms_inb_item_attribute8, wms_inb_item_attribute9, wms_inb_item_attribute10, etlcreateddatetime
    FROM stg.stg_wms_inbound_item_detail;
    END IF;
	 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

   EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt; 
END;
$$;


ALTER PROCEDURE dwh.usp_f_inbounddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inboundheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inboundheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_inbound_header;

    UPDATE dwh.F_InboundHeader t
    SET
        inb_loc_key                   = COALESCE(l.loc_key,-1),
        
        inb_amendno                  = s.wms_inb_amendno,
        inb_refdoctype               = s.wms_inb_refdoctype,
        inb_refdocno                 = s.wms_inb_refdocno,
        inb_refdocdate               = s.wms_inb_refdocdate,
        inb_orderdate                = s.wms_inb_orderdate,
        inb_status                   = s.wms_inb_status,
        inb_custcode                 = s.wms_inb_custcode,
        inb_vendorcode               = s.wms_inb_vendorcode,
        inb_address1                 = s.wms_inb_address1,
        inb_address2                 = s.wms_inb_address2,
        inb_address3                 = s.wms_inb_address3,
        inb_postcode                 = s.wms_inb_postcode,
        inb_country                  = s.wms_inb_country,
        inb_state                    = s.wms_inb_state,
        inb_city                     = s.wms_inb_city,
        inb_phoneno                  = s.wms_inb_phoneno,
        inb_secrefdoctype1           = s.wms_inb_secrefdoctype1,
        inb_secrefdoctype2           = s.wms_inb_secrefdoctype2,
        inb_secrefdocno1             = s.wms_inb_secrefdocno1,
        inb_secrefdocno2             = s.wms_inb_secrefdocno2,
        inb_secrefdocdate1           = s.wms_inb_secrefdocdate1,
        inb_secrefdocdate2           = s.wms_inb_secrefdocdate2,
        inb_shipmode                 = s.wms_inb_shipmode,
        inb_shiptype                 = s.wms_inb_shiptype,
        inb_instructions             = s.wms_inb_instructions,
        inb_created_by               = s.wms_inb_created_by,
        inb_created_date             = s.wms_inb_created_date,
        inb_modified_by              = s.wms_inb_modified_by,
        inb_modified_date            = s.wms_inb_modified_date,
        inb_timestamp                = s.wms_inb_timestamp,
        inb_operation_status         = s.wms_inb_operation_status,
        inb_contract_id              = s.wms_inb_contract_id,
        inb_contract_amend_no        = s.wms_inb_contract_amend_no,
        inb_gen_from                 = s.wms_inb_gen_from,
        inb_custcode_h               = s.wms_inb_custcode_h,
        inb_type                     = s.wms_inb_type,
        inb_addr_loc_code            = s.wms_inb_addr_loc_code,
        inb_consignor_code           = s.wms_inb_consignor_code,
        inb_reason_code              = s.wms_inb_reason_code,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()

    FROM stg.stg_wms_inbound_header s

LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

    WHERE t.inb_loc_code = s.wms_inb_loc_code
    AND t.inb_orderno = s.wms_inb_orderno
    AND t.inb_ou = s.wms_inb_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundHeader
    (
         inb_loc_key  , inb_loc_code, inb_orderno, inb_ou, inb_amendno, inb_refdoctype, inb_refdocno, inb_refdocdate, inb_orderdate, inb_status, inb_custcode, inb_vendorcode, inb_address1, inb_address2, inb_address3, inb_postcode, inb_country, inb_state, inb_city, inb_phoneno, inb_secrefdoctype1, inb_secrefdoctype2, inb_secrefdocno1, inb_secrefdocno2, inb_secrefdocdate1, inb_secrefdocdate2, inb_shipmode, inb_shiptype, inb_instructions, inb_created_by, inb_created_date, inb_modified_by, inb_modified_date, inb_timestamp, inb_operation_status, inb_contract_id, inb_contract_amend_no, inb_gen_from, inb_custcode_h, inb_type, inb_addr_loc_code, inb_consignor_code, inb_reason_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
      COALESCE(l.loc_key,-1),s.wms_inb_loc_code, s.wms_inb_orderno, s.wms_inb_ou, s.wms_inb_amendno, s.wms_inb_refdoctype, s.wms_inb_refdocno, s.wms_inb_refdocdate, s.wms_inb_orderdate, s.wms_inb_status, s.wms_inb_custcode, s.wms_inb_vendorcode, s.wms_inb_address1, s.wms_inb_address2, s.wms_inb_address3, s.wms_inb_postcode, s.wms_inb_country, s.wms_inb_state, s.wms_inb_city, s.wms_inb_phoneno, s.wms_inb_secrefdoctype1, s.wms_inb_secrefdoctype2, s.wms_inb_secrefdocno1, s.wms_inb_secrefdocno2, s.wms_inb_secrefdocdate1, s.wms_inb_secrefdocdate2, s.wms_inb_shipmode, s.wms_inb_shiptype, s.wms_inb_instructions, s.wms_inb_created_by, s.wms_inb_created_date, s.wms_inb_modified_by, s.wms_inb_modified_date, s.wms_inb_timestamp, s.wms_inb_operation_status, s.wms_inb_contract_id, s.wms_inb_contract_amend_no, s.wms_inb_gen_from, s.wms_inb_custcode_h, s.wms_inb_type, s.wms_inb_addr_loc_code, s.wms_inb_consignor_code, s.wms_inb_reason_code, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_inbound_header s



    LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou 

    LEFT JOIN dwh.F_InboundHeader t
    ON s.wms_inb_loc_code = t.inb_loc_code
    AND s.wms_inb_orderno = t.inb_orderno
    AND s.wms_inb_ou = t.inb_ou
    WHERE t.inb_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_inbound_header
    (
        wms_inb_loc_code, wms_inb_orderno, wms_inb_ou, wms_inb_amendno, wms_inb_refdoctype, wms_inb_refdocno, wms_inb_refdocdate, wms_inb_orderdate, wms_inb_status, wms_inb_custcode, wms_inb_vendorcode, wms_inb_addressid, wms_inb_address1, wms_inb_address2, wms_inb_address3, wms_inb_unqaddress, wms_inb_postcode, wms_inb_country, wms_inb_state, wms_inb_city, wms_inb_phoneno, wms_inb_secrefdoctype1, wms_inb_secrefdoctype2, wms_inb_secrefdoctype3, wms_inb_secrefdocno1, wms_inb_secrefdocno2, wms_inb_secrefdocno3, wms_inb_secrefdocdate1, wms_inb_secrefdocdate2, wms_inb_secrefdocdate3, wms_inb_shipmode, wms_inb_shiptype, wms_inb_instructions, wms_inb_created_by, wms_inb_created_date, wms_inb_modified_by, wms_inb_modified_date, wms_inb_timestamp, wms_inb_userdefined1, wms_inb_userdefined2, wms_inb_userdefined3, wms_inb_operation_status, wms_inb_ord_type, wms_inb_contract_id, wms_inb_contract_amend_no, wms_inb_gen_from, wms_inb_custcode_h, wms_inb_type, wms_inb_edifee_bil_status, wms_inb_ordprfee_bil_status, wms_inb_baschgpo_bil_status, wms_inb_idopln_bil_status, wms_inb_addr_loc_code, wms_inb_consignor_code, wms_inb_reason_code, wms_inb_chporcn_sell_bil_status, etlcreateddatetime
    )
    SELECT
        wms_inb_loc_code, wms_inb_orderno, wms_inb_ou, wms_inb_amendno, wms_inb_refdoctype, wms_inb_refdocno, wms_inb_refdocdate, wms_inb_orderdate, wms_inb_status, wms_inb_custcode, wms_inb_vendorcode, wms_inb_addressid, wms_inb_address1, wms_inb_address2, wms_inb_address3, wms_inb_unqaddress, wms_inb_postcode, wms_inb_country, wms_inb_state, wms_inb_city, wms_inb_phoneno, wms_inb_secrefdoctype1, wms_inb_secrefdoctype2, wms_inb_secrefdoctype3, wms_inb_secrefdocno1, wms_inb_secrefdocno2, wms_inb_secrefdocno3, wms_inb_secrefdocdate1, wms_inb_secrefdocdate2, wms_inb_secrefdocdate3, wms_inb_shipmode, wms_inb_shiptype, wms_inb_instructions, wms_inb_created_by, wms_inb_created_date, wms_inb_modified_by, wms_inb_modified_date, wms_inb_timestamp, wms_inb_userdefined1, wms_inb_userdefined2, wms_inb_userdefined3, wms_inb_operation_status, wms_inb_ord_type, wms_inb_contract_id, wms_inb_contract_amend_no, wms_inb_gen_from, wms_inb_custcode_h, wms_inb_type, wms_inb_edifee_bil_status, wms_inb_ordprfee_bil_status, wms_inb_baschgpo_bil_status, wms_inb_idopln_bil_status, wms_inb_addr_loc_code, wms_inb_consignor_code, wms_inb_reason_code, wms_inb_chporcn_sell_bil_status, etlcreateddatetime
    FROM stg.stg_wms_inbound_header;
    END IF;

    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_inboundheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inbounditemamenddetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inbounditemamenddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
	

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_inbound_item_detail_h;

    UPDATE dwh.F_InboundItemAmendDetail t
    SET 
        inb_amh_key              = oh.inb_amh_key,
        inb_loc_key              = COALESCE(l.loc_key,-1),
        inb_itm_key              = COALESCE(c.itm_hdr_key,-1),
        inb_item_code            = s.wms_inb_item_code,
        inb_order_qty            = s.wms_inb_order_qty,
        inb_alt_uom              = s.wms_inb_alt_uom,
        inb_sch_type             = s.wms_inb_sch_type,
        inb_receipt_date         = s.wms_inb_receipt_date,
        inb_item_inst            = s.wms_inb_item_inst,
        inb_supp_code            = s.wms_inb_supp_code,
        inb_balqty               = s.wms_inb_balqty,
        inb_linestatus           = s.wms_inb_linestatus,
        inb_recdqty              = s.wms_inb_recdqty,
        inb_accpdqty             = s.wms_inb_accpdqty,
        inb_itm_grrejdqty        = s.wms_inb_itm_grrejdqty,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_wms_inbound_item_detail_h s	
	INNER JOIN dwh.f_inboundamendheader oh
    ON  s.wms_inb_loc_code = oh.inb_loc_code 
	and s.wms_inb_orderno =oh.inb_orderno 
	and s.wms_inb_ou = oh.inb_ou 
	and s.wms_inb_amendno =oh.inb_amendno

LEFT JOIN dwh.d_itemheader C        
        ON s.wms_inb_item_code       = C.itm_code 
        AND s.wms_inb_ou      = C.itm_ou

LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

    WHERE t.inb_loc_code = s.wms_inb_loc_code
    AND t.inb_orderno = s.wms_inb_orderno
    AND t.inb_lineno = s.wms_inb_lineno
    AND t.inb_ou = s.wms_inb_ou
    AND t.inb_amendno = s.wms_inb_amendno     
	AND t.inb_amh_key  = oh.inb_amh_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundItemAmendDetail
    (
       inb_amh_key, inb_itm_key ,
        inb_loc_key ,inb_loc_code, inb_orderno, inb_lineno, inb_ou, inb_amendno, inb_item_code, inb_order_qty, inb_alt_uom, inb_sch_type, inb_receipt_date, inb_item_inst, inb_supp_code, inb_balqty, inb_linestatus, inb_recdqty, inb_accpdqty, inb_itm_grrejdqty, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        

         oh.inb_amh_key,COALESCE(c.itm_hdr_key,-1),COALESCE(l.loc_key,-1),
        s.wms_inb_loc_code, s.wms_inb_orderno, s.wms_inb_lineno, s.wms_inb_ou, s.wms_inb_amendno, s.wms_inb_item_code, s.wms_inb_order_qty, s.wms_inb_alt_uom, s.wms_inb_sch_type, s.wms_inb_receipt_date, s.wms_inb_item_inst, s.wms_inb_supp_code, s.wms_inb_balqty, s.wms_inb_linestatus, s.wms_inb_recdqty, s.wms_inb_accpdqty, s.wms_inb_itm_grrejdqty, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_inbound_item_detail_h s
	
	INNER JOIN dwh.f_inboundamendheader oh
   ON   s.wms_inb_loc_code = oh.inb_loc_code 
	and s.wms_inb_orderno =oh.inb_orderno 
	and s.wms_inb_ou = oh.inb_ou 
	and s.wms_inb_amendno =oh.inb_amendno

    
    LEFT JOIN dwh.d_itemheader C        
        ON s.wms_inb_item_code       = C.itm_code 
        AND s.wms_inb_ou      = C.itm_ou

    LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

    LEFT JOIN dwh.F_InboundItemAmendDetail t
    ON s.wms_inb_loc_code = t.inb_loc_code
    AND s.wms_inb_orderno = t.inb_orderno
    AND s.wms_inb_lineno = t.inb_lineno
    AND s.wms_inb_ou = t.inb_ou
    AND s.wms_inb_amendno = t.inb_amendno
		AND t.inb_amh_key  = oh.inb_amh_key

    WHERE t.inb_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_inbound_item_detail_h
    (
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_amendno, wms_inb_item_code, wms_inb_order_qty, wms_inb_alt_uom, wms_inb_sch_type, wms_inb_receipt_date, wms_inb_item_inst, wms_inb_supp_code, wms_inb_addressid, wms_inb_balqty, wms_inb_linestatus, wms_inb_recdqty, wms_inb_accpdqty, wms_inb_returnedqty, wms_inb_itm_grrejdqty, wms_inb_itm_grmovdqty, wms_inb_operation_status, wms_inb_cust_item_code, wms_inb_master_uom_qty, etlcreateddatetime
    )
    SELECT
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_amendno, wms_inb_item_code, wms_inb_order_qty, wms_inb_alt_uom, wms_inb_sch_type, wms_inb_receipt_date, wms_inb_item_inst, wms_inb_supp_code, wms_inb_addressid, wms_inb_balqty, wms_inb_linestatus, wms_inb_recdqty, wms_inb_accpdqty, wms_inb_returnedqty, wms_inb_itm_grrejdqty, wms_inb_itm_grmovdqty, wms_inb_operation_status, wms_inb_cust_item_code, wms_inb_master_uom_qty, etlcreateddatetime
    FROM stg.stg_wms_inbound_item_detail_h;
    END IF;
	 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_inbounditemamenddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inboundorderbindetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inboundorderbindetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN


    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_int_ord_bin_dtl;

    UPDATE dwh.F_InboundOrderBinDetail t
    SET
	    in_ord_hdr_key   = oh.in_ord_hdr_key,
        inb_loc_key             =   COALESCE(l.loc_key,-1),
        in_ord_item              = s.wms_in_ord_item,
        in_ord_bin_qty           = s.wms_in_ord_bin_qty,
        in_ord_source_bin        = s.wms_in_ord_source_bin,
        in_ord_target_bin        = s.wms_in_ord_target_bin,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_wms_int_ord_bin_dtl s
	INNER JOIN dwh.f_internalorderheader oh
    ON  s.wms_in_ord_location = oh.in_ord_location  
    and s.wms_in_ord_no =oh.in_ord_no
    and s.wms_in_ord_ou = oh.in_ord_ou
	
LEFT JOIN dwh.d_location L      
        ON s.wms_in_ord_location   = L.loc_code 
        AND s.wms_in_ord_ou        = L.loc_ou

    WHERE t.in_ord_location = s.wms_in_ord_location
    AND t.in_ord_no = s.wms_in_ord_no
    AND t.in_ord_lineno = s.wms_in_ord_lineno
    AND t.in_ord_ou = s.wms_in_ord_ou
	AND t.in_ord_hdr_key   = oh.in_ord_hdr_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundOrderBinDetail
    (
        in_ord_hdr_key ,inb_loc_key ,in_ord_location, in_ord_no, in_ord_lineno, in_ord_ou, in_ord_item, in_ord_bin_qty, in_ord_source_bin, in_ord_target_bin, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        oh.in_ord_hdr_key, COALESCE(l.loc_key,-1),s.wms_in_ord_location, s.wms_in_ord_no, s.wms_in_ord_lineno, s.wms_in_ord_ou, s.wms_in_ord_item, s.wms_in_ord_bin_qty, s.wms_in_ord_source_bin, s.wms_in_ord_target_bin, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_int_ord_bin_dtl s
	INNER JOIN dwh.f_internalorderheader oh
    ON  s.wms_in_ord_location = oh.in_ord_location  
    and s.wms_in_ord_no =oh.in_ord_no
    and s.wms_in_ord_ou = oh.in_ord_ou

    LEFT JOIN dwh.d_location L      
        ON s.wms_in_ord_location   = L.loc_code 
        AND s.wms_in_ord_ou        = L.loc_ou

    LEFT JOIN dwh.F_InboundOrderBinDetail t
    ON s.wms_in_ord_location = t.in_ord_location
    AND s.wms_in_ord_no = t.in_ord_no
    AND s.wms_in_ord_lineno = t.in_ord_lineno
    AND s.wms_in_ord_ou = t.in_ord_ou
	AND  t.in_ord_hdr_key   = oh.in_ord_hdr_key

    WHERE t.in_ord_location IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_int_ord_bin_dtl
    (
        wms_in_ord_location, wms_in_ord_no, wms_in_ord_lineno, wms_in_ord_ou, wms_in_ord_item, wms_in_ord_bin_qty, wms_in_ord_source_bin, wms_in_ord_target_bin, wms_in_ord_customer_item_code, etlcreateddatetime
    )
    SELECT
        wms_in_ord_location, wms_in_ord_no, wms_in_ord_lineno, wms_in_ord_ou, wms_in_ord_item, wms_in_ord_bin_qty, wms_in_ord_source_bin, wms_in_ord_target_bin, wms_in_ord_customer_item_code, etlcreateddatetime
    FROM stg.stg_wms_int_ord_bin_dtl;
    END IF;
 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_inboundorderbindetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inboundplantracking(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inboundplantracking(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_inbound_pln_track_dtl;

    UPDATE dwh.F_InboundPlanTracking t
    SET
        pln_date_key        = COALESCE(d.datekey,-1),
        pln_stage             = s.wms_pln_stage,
        pln_pln_no            = s.wms_pln_pln_no,
        pln_exe_no            = s.wms_pln_exe_no,
        pln_exe_status        = s.wms_pln_exe_status,
        pln_user              = s.wms_pln_user,
        pln_date              = s.wms_pln_date,
        etlactiveind          = 1,
        etljobname            = p_etljobname,
        envsourcecd           = p_envsourcecd,
        datasourcecd          = p_datasourcecd,
        etlupdatedatetime     = NOW()
    FROM stg.stg_wms_inbound_pln_track_dtl s
    LEFT JOIN dwh.d_date D          
        ON s.wms_pln_date::date = D.dateactual


    WHERE t.pln_lineno = s.wms_pln_lineno
    AND t.pln_ou = s.wms_pln_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundPlanTracking
    (
       pln_date_key, pln_lineno, pln_ou, pln_stage, pln_pln_no, pln_exe_no, pln_exe_status, pln_user, pln_date, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
          D.datekey ,s.wms_pln_lineno, s.wms_pln_ou, s.wms_pln_stage, s.wms_pln_pln_no, s.wms_pln_exe_no, s.wms_pln_exe_status, s.wms_pln_user, s.wms_pln_date, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_inbound_pln_track_dtl s

       LEFT JOIN dwh.d_date D          
        ON s.wms_pln_date::date = D.dateactual
        
    LEFT JOIN dwh.F_InboundPlanTracking t
    ON s.wms_pln_lineno = t.pln_lineno
    AND s.wms_pln_ou = t.pln_ou
    WHERE t.pln_lineno IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_inbound_pln_track_dtl
    (
        wms_pln_lineno, wms_pln_ou, wms_pln_stage, wms_pln_pln_no, wms_pln_exe_no, wms_pln_exe_status, wms_pln_user, wms_pln_date, etlcreateddatetime
    )
    SELECT
        wms_pln_lineno, wms_pln_ou, wms_pln_stage, wms_pln_pln_no, wms_pln_exe_no, wms_pln_exe_status, wms_pln_user, wms_pln_date, etlcreateddatetime
    FROM stg.stg_wms_inbound_pln_track_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_inboundplantracking(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inboundscheduleitemamenddetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inboundscheduleitemamenddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

	

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_inbound_sch_item_detail_h;

    UPDATE dwh.F_InboundScheduleItemAmendDetail t
    SET
	
	   
        inb_loc_key             =COALESCE(l.loc_key,-1),
        inb_itm_key             = COALESCE(c.itm_hdr_key,-1),  
        inb_item_lineno         = s.wms_inb_item_lineno,
        inb_item_code           = s.wms_inb_item_code,
        inb_schedule_qty        = s.wms_inb_schedule_qty,
        inb_receipt_date        = s.wms_inb_receipt_date,
        inb_item_inst           = s.wms_inb_item_inst,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_wms_inbound_sch_item_detail_h s
	INNER JOIN dwh.f_inboundamendheader oh
   ON   s.wms_inb_loc_code = oh.inb_loc_code 
	and s.wms_inb_orderno =oh.inb_orderno 
	and s.wms_inb_ou = oh.inb_ou 
	and s.wms_inb_amendno =oh.inb_amendno

    LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
        ON s.wms_inb_item_code       = C.itm_code 
        AND s.wms_inb_ou      = C.itm_ou

    WHERE t.inb_loc_code = s.wms_inb_loc_code
    AND t.inb_orderno = s.wms_inb_orderno
    AND t.inb_lineno = s.wms_inb_lineno
    AND t.inb_ou = s.wms_inb_ou
    AND t.inb_amendno = s.wms_inb_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundScheduleItemAmendDetail
    (
        inb_loc_key  ,  inb_itm_key,inb_loc_code, inb_orderno, inb_lineno, inb_ou, inb_amendno, inb_item_lineno, inb_item_code, inb_schedule_qty, inb_receipt_date, inb_item_inst, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1),COALESCE(c.itm_hdr_key,-1),s.wms_inb_loc_code, s.wms_inb_orderno, s.wms_inb_lineno, s.wms_inb_ou, s.wms_inb_amendno, s.wms_inb_item_lineno, s.wms_inb_item_code, s.wms_inb_schedule_qty, s.wms_inb_receipt_date, s.wms_inb_item_inst, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_inbound_sch_item_detail_h s
	
	INNER JOIN dwh.f_inboundamendheader oh
   ON   s.wms_inb_loc_code = oh.inb_loc_code 
	and s.wms_inb_orderno =oh.inb_orderno 
	and s.wms_inb_ou = oh.inb_ou 
	and s.wms_inb_amendno =oh.inb_amendno

   LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
        ON s.wms_inb_item_code       = C.itm_code 
        AND s.wms_inb_ou      = C.itm_ou

    LEFT JOIN dwh.F_InboundScheduleItemAmendDetail t
    ON s.wms_inb_loc_code = t.inb_loc_code
    AND s.wms_inb_orderno = t.inb_orderno
    AND s.wms_inb_lineno = t.inb_lineno
    AND s.wms_inb_ou = t.inb_ou
    AND s.wms_inb_amendno = t.inb_amendno
    WHERE t.inb_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_inbound_sch_item_detail_h
    (
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_amendno, wms_inb_item_lineno, wms_inb_item_code, wms_inb_schedule_qty, wms_inb_receipt_date, wms_inb_item_inst, etlcreateddatetime
    )
    SELECT
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_amendno, wms_inb_item_lineno, wms_inb_item_code, wms_inb_schedule_qty, wms_inb_receipt_date, wms_inb_item_inst, etlcreateddatetime
    FROM stg.stg_wms_inbound_sch_item_detail_h;
    END IF;
	 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_inboundscheduleitemamenddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_inboundscheduleitemdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_inboundscheduleitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);


    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
 IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN


    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_inbound_sch_item_detail;

    UPDATE dwh.F_InboundScheduleItemDetail t
    SET
        inb_hdr_key   =    oh.inb_hdr_key,
        inb_loc_key             =COALESCE(l.loc_key,-1),
        inb_itm_key             = COALESCE(c.itm_hdr_key,-1),
        inb_item_lineno         = s.wms_inb_item_lineno,
        inb_item_code           = s.wms_inb_item_code,
        inb_schedule_qty        = s.wms_inb_schedule_qty,
        inb_receipt_date        = s.wms_inb_receipt_date,
        inb_item_inst           = s.wms_inb_item_inst,
        inb_order_uom           = s.wms_inb_order_uom,
        inb_mas_uom_qty         = s.wms_inb_mas_uom_qty,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_wms_inbound_sch_item_detail s
	INNER JOIN dwh.f_inboundheader oh
    ON
            s.wms_inb_loc_code = oh.inb_loc_code 
       and  s.wms_inb_orderno =oh.inb_orderno
        and s.wms_inb_ou = oh.inb_ou
		
LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

LEFT JOIN dwh.d_itemheader C        
        ON s.wms_inb_item_code       = C.itm_code 
        AND s.wms_inb_ou      = C.itm_ou

    WHERE t.inb_loc_code = s.wms_inb_loc_code
    AND t.inb_orderno = s.wms_inb_orderno
    AND t.inb_lineno = s.wms_inb_lineno
    AND t.inb_ou = s.wms_inb_ou
	AND t.inb_hdr_key   =    oh.inb_hdr_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InboundScheduleItemDetail
    (
       inb_hdr_key, inb_loc_key  ,inb_itm_key, inb_loc_code, inb_orderno, inb_lineno, inb_ou, inb_item_lineno, inb_item_code, inb_schedule_qty, inb_receipt_date, inb_item_inst, inb_order_uom, inb_mas_uom_qty, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       oh.inb_hdr_key ,COALESCE(l.loc_key,-1), COALESCE(c.itm_hdr_key,-1),s.wms_inb_loc_code, s.wms_inb_orderno, s.wms_inb_lineno, s.wms_inb_ou, s.wms_inb_item_lineno, s.wms_inb_item_code, s.wms_inb_schedule_qty, s.wms_inb_receipt_date, s.wms_inb_item_inst, s.wms_inb_order_uom, s.wms_inb_mas_uom_qty, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_inbound_sch_item_detail s
      INNER JOIN dwh.f_inboundheader oh
       ON
            s.wms_inb_loc_code = oh.inb_loc_code 
       and  s.wms_inb_orderno =oh.inb_orderno
        and s.wms_inb_ou = oh.inb_ou
		
    LEFT JOIN dwh.d_location L      
        ON s.wms_inb_loc_code   = L.loc_code 
        AND s.wms_inb_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
        ON s.wms_inb_item_code       = C.itm_code 
        AND s.wms_inb_ou      = C.itm_ou

    LEFT JOIN dwh.F_InboundScheduleItemDetail t
    ON s.wms_inb_loc_code = t.inb_loc_code
    AND s.wms_inb_orderno = t.inb_orderno
    AND s.wms_inb_lineno = t.inb_lineno
    AND s.wms_inb_ou = t.inb_ou
		AND t.inb_hdr_key   =    oh.inb_hdr_key

    WHERE t.inb_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_inbound_sch_item_detail
    (
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_item_lineno, wms_inb_item_code, wms_inb_schedule_qty, wms_inb_receipt_date, wms_inb_item_inst, wms_inb_order_uom, wms_inb_mas_uom_qty, etlcreateddatetime
    )
    SELECT
        wms_inb_loc_code, wms_inb_orderno, wms_inb_lineno, wms_inb_ou, wms_inb_item_lineno, wms_inb_item_code, wms_inb_schedule_qty, wms_inb_receipt_date, wms_inb_item_inst, wms_inb_order_uom, wms_inb_mas_uom_qty, etlcreateddatetime
    FROM stg.stg_wms_inbound_sch_item_detail;
    END IF;
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_inboundscheduleitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_internalorderheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_internalorderheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_internal_order_hdr;

    UPDATE dwh.F_InternalOrderHeader t
    SET
        in_ord_hdr_loc_key				= COALESCE(l.loc_key,-1),
		in_ord_hdr_customer_key			= COALESCE(c.customer_key,-1),
        in_ord_date                     = s.wms_in_ord_date,
        in_ord_ref_doc_typ              = s.wms_in_ord_ref_doc_typ,
        in_ord_customer_id              = s.wms_in_ord_customer_id,
        in_ord_pri_ref_doc_typ          = s.wms_in_ord_pri_ref_doc_typ,
        in_ord_pri_ref_doc_no           = s.wms_in_ord_pri_ref_doc_no,
        in_ord_pri_ref_doc_date         = s.wms_in_ord_pri_ref_doc_date,
        in_ord_status                   = s.wms_in_ord_status,
        in_ord_amendno                  = s.wms_in_ord_amendno,
        in_ord_timestamp                = s.wms_in_ord_timestamp,
        in_ord_userdefined1             = s.wms_in_ord_userdefined1,
        in_ord_userdefined2             = s.wms_in_ord_userdefined2,
        in_ord_userdefined3             = s.wms_in_ord_userdefined3,
        in_createdby                    = s.wms_in_createdby,
        in_created_date                 = s.wms_in_created_date,
        in_modifiedby                   = s.wms_in_modifiedby,
        in_modified_date                = s.wms_in_modified_date,
        in_ord_contract_id              = s.wms_in_ord_contract_id,
        in_ord_contract_amend_no        = s.wms_in_ord_contract_amend_no,
        in_ord_wf_status                = s.wms_in_ord_wf_status,
        in_ord_reasonforreturn          = s.wms_in_ord_reasonforreturn,
        in_ord_stk_acc_level            = s.wms_in_ord_stk_acc_level,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_wms_internal_order_hdr s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_in_ord_location 		= l.loc_code 
		AND s.wms_in_ord_ou 			= l.loc_ou 
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_in_ord_customer_id 	= c.customer_id 
		AND s.wms_in_ord_ou 			= c.customer_ou 
    WHERE 	t.in_ord_location 			= s.wms_in_ord_location
    AND 	t.in_ord_no 				= s.wms_in_ord_no
    AND 	t.in_ord_ou 				= s.wms_in_ord_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_InternalOrderHeader
    (
		in_ord_hdr_loc_key, in_ord_hdr_customer_key,
        in_ord_location, in_ord_no, in_ord_ou, in_ord_date, in_ord_ref_doc_typ, in_ord_customer_id, in_ord_pri_ref_doc_typ, in_ord_pri_ref_doc_no, in_ord_pri_ref_doc_date, in_ord_status, in_ord_amendno, in_ord_timestamp, in_ord_userdefined1, in_ord_userdefined2, in_ord_userdefined3, in_createdby, in_created_date, in_modifiedby, in_modified_date, in_ord_contract_id, in_ord_contract_amend_no, in_ord_wf_status, in_ord_reasonforreturn, in_ord_stk_acc_level, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1), COALESCE(c.customer_key,-1),
		s.wms_in_ord_location, s.wms_in_ord_no, s.wms_in_ord_ou, s.wms_in_ord_date, s.wms_in_ord_ref_doc_typ, s.wms_in_ord_customer_id, s.wms_in_ord_pri_ref_doc_typ, s.wms_in_ord_pri_ref_doc_no, s.wms_in_ord_pri_ref_doc_date, s.wms_in_ord_status, s.wms_in_ord_amendno, s.wms_in_ord_timestamp, s.wms_in_ord_userdefined1, s.wms_in_ord_userdefined2, s.wms_in_ord_userdefined3, s.wms_in_createdby, s.wms_in_created_date, s.wms_in_modifiedby, s.wms_in_modified_date, s.wms_in_ord_contract_id, s.wms_in_ord_contract_amend_no, s.wms_in_ord_wf_status, s.wms_in_ord_reasonforreturn, s.wms_in_ord_stk_acc_level, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_internal_order_hdr s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_in_ord_location 		= l.loc_code 
		AND s.wms_in_ord_ou 			= l.loc_ou 
	LEFT JOIN dwh.d_customer c 		
		ON  s.wms_in_ord_customer_id 	= c.customer_id 
		AND s.wms_in_ord_ou 			= c.customer_ou 
    LEFT JOIN dwh.F_InternalOrderHeader t
    ON 		s.wms_in_ord_location 		= t.in_ord_location
    AND 	s.wms_in_ord_no 			= t.in_ord_no
    AND 	s.wms_in_ord_ou 			= t.in_ord_ou
    WHERE t.in_ord_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_internal_order_hdr
    (
        wms_in_ord_location, wms_in_ord_no, wms_in_ord_ou, wms_in_ord_date, wms_in_ord_ref_doc_typ, wms_in_ord_customer_id, wms_in_ord_pri_ref_doc_typ, wms_in_ord_pri_ref_doc_no, wms_in_ord_pri_ref_doc_date, wms_in_ord_sec_ref_doc_typ, wms_in_ord_sec_ref_doc_no, wms_in_ord_sec_ref_doc_date, wms_in_ord_status, wms_in_ord_amendno, wms_in_ord_timestamp, wms_in_ord_userdefined1, wms_in_ord_userdefined2, wms_in_ord_userdefined3, wms_in_createdby, wms_in_created_date, wms_in_modifiedby, wms_in_modified_date, wms_in_ord_contract_id, wms_in_ord_contract_amend_no, wms_in_ordprfee_bil_status, wms_in_ord_wf_status, wms_in_ord_reasonforreturn, wms_in_ord_stk_acc_level, wms_in_chporcn_sell_bil_status, etlcreateddatetime
    )
    SELECT
        wms_in_ord_location, wms_in_ord_no, wms_in_ord_ou, wms_in_ord_date, wms_in_ord_ref_doc_typ, wms_in_ord_customer_id, wms_in_ord_pri_ref_doc_typ, wms_in_ord_pri_ref_doc_no, wms_in_ord_pri_ref_doc_date, wms_in_ord_sec_ref_doc_typ, wms_in_ord_sec_ref_doc_no, wms_in_ord_sec_ref_doc_date, wms_in_ord_status, wms_in_ord_amendno, wms_in_ord_timestamp, wms_in_ord_userdefined1, wms_in_ord_userdefined2, wms_in_ord_userdefined3, wms_in_createdby, wms_in_created_date, wms_in_modifiedby, wms_in_modified_date, wms_in_ord_contract_id, wms_in_ord_contract_amend_no, wms_in_ordprfee_bil_status, wms_in_ord_wf_status, wms_in_ord_reasonforreturn, wms_in_ord_stk_acc_level, wms_in_chporcn_sell_bil_status, etlcreateddatetime
    FROM stg.stg_wms_internal_order_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_internalorderheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_itemallocdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_itemallocdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;	
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_alloc_item_detail;

	UPDATE dwh.f_itemallocdetail t
    SET 
		  allc_itm_hdr_key				= COALESCE(i.itm_hdr_key,-1)
		, allc_wh_key					= COALESCE(w.wh_key,-1)
		, allc_zone_key					= COALESCE(z.zone_key,-1)
		, allc_thu_key					= COALESCE(th.thu_key,-1)
		, allc_uom_key					= COALESCE(u.uom_key,-1)
		, allc_stg_mas_key				= COALESCE(st.stg_mas_key,-1)
		, allc_ouinstid 				= s.allc_ouinstid
		, allc_order_no 				= s.allc_order_no
		, allc_order_line_no 			= s.allc_order_line_no
		, allc_order_sch_no 			= s.allc_order_sch_no
		, allc_item_code 				= s.allc_item_code
		, allc_wh_no 					= s.allc_wh_no
		, allc_zone_no 					= s.allc_zone_no
		, allc_bin_no 					= s.allc_bin_no
		, allc_lot_no 					= s.allc_lot_no
		, allc_batch_no 				= s.allc_batch_no
		, allc_serial_no 				= s.allc_serial_no
		, allc_su 						= s.allc_su
		, allc_su_serial_no 			= s.allc_su_serial_no
		, allc_su_type 					= s.allc_su_type
		, allc_thu_id 					= s.allc_thu_id
		, allc_tran_qty 				= s.allc_tran_qty
		, allc_allocated_qty 			= s.allc_allocated_qty
		, allc_mas_uom 					= s.allc_mas_uom
		, allc_created_by 				= s.allc_created_by
        , allc_created_date 			= s.allc_created_date
        , allc_modified_by 				= s.allc_modified_by
        , allc_modified_date 			= s.allc_modified_date
		, allc_thu_serial_no 			= s.allc_thu_serial_no
		, allc_stock_status 			= s.allc_stock_status
		, allc_inpro_stage 				= s.allc_inpro_stage
		, allc_staging_id_crosdk 		= s.allc_staging_id_crosdk
		, allc_inpro_stk_serial_line_no = s.allc_inpro_stk_serial_line_no
		, allc_inpro_stk_line_no 		= s.allc_inpro_stk_line_no
		, allc_su2 						= s.allc_su2
		, allc_su_serial_no2 			= s.allc_su_serial_no2
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_alloc_item_detail s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.allc_ouinstid				= i.itm_ou
		AND s.allc_item_code 			= i.itm_code 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.allc_wh_no 				= w.wh_code 
		AND s.allc_ouinstid				= w.wh_ou 
		AND s.allc_doc_ou 				= w.wh_ou 
	LEFT JOIN dwh.d_zone z 			
		ON  s.allc_zone_no 				= z.zone_code
		AND s.allc_ouinstid				= z.zone_ou
		AND s.allc_doc_ou 				= z.zone_ou 	
		AND s.allc_wh_no				= z.zone_loc_code
	LEFT JOIN dwh.d_thu th 		
		ON  s.allc_thu_id		  		= th.thu_id 
		AND s.allc_ouinstid				= th.thu_ou
		AND s.allc_doc_ou 				= th.thu_ou 	
	LEFT JOIN dwh.d_uom u 		
		ON  s.allc_mas_uom  			= u.mas_uomcode 
		AND s.allc_ouinstid				= u.mas_ouinstance
		AND s.allc_doc_ou 				= u.mas_ouinstance 	
	LEFT JOIN dwh.d_stage st 		
		ON  s.allc_staging_id_crosdk  	= st.stg_mas_id 
		AND s.allc_ouinstid				= st.stg_mas_ou
		AND s.allc_doc_ou 				= st.stg_mas_ou 	
		AND s.allc_wh_no				= st.stg_mas_loc
    WHERE   t.allc_doc_no 				= s.allc_doc_no
		AND	t.allc_doc_ou 				= s.allc_doc_ou
		AND	t.allc_doc_line_no 			= s.allc_doc_line_no
		AND	t.allc_alloc_line_no		= s.allc_alloc_line_no;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_itemallocdetail
	(
		  allc_itm_hdr_key				, allc_wh_key					, allc_zone_key								
		, allc_thu_key					, allc_uom_key					, allc_stg_mas_key					, allc_ouinstid
		, allc_doc_no					, allc_doc_ou					, allc_doc_line_no					, allc_alloc_line_no
		, allc_order_no					, allc_order_line_no			, allc_order_sch_no					, allc_item_code
		, allc_wh_no					, allc_zone_no					, allc_bin_no						, allc_lot_no
		, allc_batch_no					, allc_serial_no				, allc_su							, allc_su_serial_no
		, allc_su_type					, allc_thu_id					, allc_tran_qty						, allc_allocated_qty
		, allc_mas_uom					, allc_created_by				, allc_created_date                 , allc_modified_by            , allc_modified_date          , allc_thu_serial_no				, allc_stock_status
		, allc_inpro_stage				, allc_staging_id_crosdk		, allc_inpro_stk_serial_line_no		, allc_inpro_stk_line_no
		, allc_su2						, allc_su_serial_no2			, etlactiveind						, etljobname
		, envsourcecd					, datasourcecd					, etlcreatedatetime
	)
	
	SELECT DISTINCT 
		  COALESCE(i.itm_hdr_key,-1)	, COALESCE(w.wh_key,-1)			, COALESCE(z.zone_key,-1)			, COALESCE(th.thu_key,-1)			
		, COALESCE(u.uom_key,-1)		, COALESCE(st.stg_mas_key,-1)	, s.allc_ouinstid
		, s.allc_doc_no					, s.allc_doc_ou					, s.allc_doc_line_no				, s.allc_alloc_line_no
		, s.allc_order_no				, s.allc_order_line_no			, s.allc_order_sch_no				, s.allc_item_code
		, s.allc_wh_no					, s.allc_zone_no				, s.allc_bin_no						, s.allc_lot_no
		, s.allc_batch_no				, s.allc_serial_no				, s.allc_su							, s.allc_su_serial_no
		, s.allc_su_type				, s.allc_thu_id					, s.allc_tran_qty					, s.allc_allocated_qty
		, s.allc_mas_uom				, s.allc_created_by				, s.allc_created_date               , s.allc_modified_by            , s.allc_modified_date,      s.allc_thu_serial_no		, s.allc_stock_status
		, s.allc_inpro_stage			, s.allc_staging_id_crosdk		, s.allc_inpro_stk_serial_line_no	, s.allc_inpro_stk_line_no
		, s.allc_su2					, s.allc_su_serial_no2			, 1 AS etlactiveind					, p_etljobname
		, p_envsourcecd					, p_datasourcecd				, NOW()
	FROM stg.stg_wms_alloc_item_detail s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.allc_ouinstid				= i.itm_ou
		AND s.allc_doc_ou 				= i.itm_ou 
		AND s.allc_item_code 			= i.itm_code 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.allc_wh_no 				= w.wh_code 
		AND s.allc_ouinstid				= w.wh_ou 
		AND s.allc_doc_ou 				= w.wh_ou 
	LEFT JOIN dwh.d_zone z 			
		ON  s.allc_zone_no 				= z.zone_code
		AND s.allc_ouinstid				= z.zone_ou
		AND s.allc_doc_ou 				= z.zone_ou 	
		AND s.allc_wh_no				= z.zone_loc_code
	LEFT JOIN dwh.d_thu th 		
		ON  s.allc_thu_id		  		= th.thu_id 
		AND s.allc_ouinstid				= th.thu_ou
		AND s.allc_doc_ou 				= th.thu_ou 	
	LEFT JOIN dwh.d_uom u 		
		ON  s.allc_mas_uom  			= u.mas_uomcode 
		AND s.allc_ouinstid				= u.mas_ouinstance
		AND s.allc_doc_ou 				= u.mas_ouinstance 	
	LEFT JOIN dwh.d_stage st 		
		ON  s.allc_staging_id_crosdk  	= st.stg_mas_id 
		AND s.allc_ouinstid				= st.stg_mas_ou
		AND s.allc_doc_ou 				= st.stg_mas_ou 		
		AND s.allc_wh_no				= st.stg_mas_loc
	LEFT JOIN dwh.f_itemallocdetail t  	
		ON  t.allc_doc_no 				= s.allc_doc_no
		AND	t.allc_doc_ou 				= s.allc_doc_ou
		AND	t.allc_doc_line_no 			= s.allc_doc_line_no
		AND	t.allc_alloc_line_no		= s.allc_alloc_line_no
    WHERE t.allc_doc_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_alloc_item_detail
	(
		  allc_ouinstid				, allc_doc_no			, allc_doc_ou				, allc_doc_line_no
		, allc_alloc_line_no		, allc_order_no			, allc_order_line_no		, allc_order_sch_no
		, allc_item_code			, allc_wh_no			, allc_zone_no				, allc_bin_no
		, allc_lot_no				, allc_batch_no			, allc_serial_no			, allc_su
		, allc_su_serial_no			, allc_su_type			, allc_thu_id				, allc_tran_qty
		, allc_allocated_qty		, allc_mas_uom			, allc_created_date			, allc_modified_date
		, allc_created_by			, allc_modified_by		, allc_tolerance_qty		, allc_thu_serial_no
		, allc_stock_status			, allc_inpro_stage		, allc_staging_id_crosdk	, allc_inpro_stk_serial_line_no
		, allc_inpro_stk_line_no	, allc_box_thu_id		, allc_box_no				, allc_su2
		, allc_su_serial_no2		, etlcreateddatetime
	
	)
	SELECT 
		  allc_ouinstid				, allc_doc_no			, allc_doc_ou				, allc_doc_line_no
		, allc_alloc_line_no		, allc_order_no			, allc_order_line_no		, allc_order_sch_no
		, allc_item_code			, allc_wh_no			, allc_zone_no				, allc_bin_no
		, allc_lot_no				, allc_batch_no			, allc_serial_no			, allc_su
		, allc_su_serial_no			, allc_su_type			, allc_thu_id				, allc_tran_qty
		, allc_allocated_qty		, allc_mas_uom			, allc_created_date			, allc_modified_date
		, allc_created_by			, allc_modified_by		, allc_tolerance_qty		, allc_thu_serial_no
		, allc_stock_status			, allc_inpro_stage		, allc_staging_id_crosdk	, allc_inpro_stk_serial_line_no
		, allc_inpro_stk_line_no	, allc_box_thu_id		, allc_box_no				, allc_su2
		, allc_su_serial_no2		, etlcreateddatetime
	FROM stg.stg_wms_alloc_item_detail;
    END IF;	
	
    EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
        
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt; 	
END;
$$;


ALTER PROCEDURE dwh.usp_f_itemallocdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_jvvouchertrndtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_jvvouchertrndtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_jv_voucher_trn_dtl;

    UPDATE dwh.F_jvvouchertrndtl t
    SET
        ou_id                      = s.ou_id,
        voucher_no                 = s.voucher_no,
        voucher_serial_no          = s.voucher_serial_no,
        timestamp                  = s.timestamp,
        account_code               = s.account_code,
        drcr_flag                  = s.drcr_flag,
        tran_currency              = s.tran_currency,
        tran_amount                = s.tran_amount,
        exchange_rate              = s.exchange_rate,
        par_exchange_rate          = s.par_exchange_rate,
        base_amount                = s.base_amount,
        par_base_amount            = s.par_base_amount,
        remarks                    = s.remarks,
        costcenter_code            = s.costcenter_code,
        analysis_code              = s.analysis_code,
        subanal_code               = s.subanal_code,
        createdby                  = s.createdby,
        createddate                = s.createddate,
        modifiedby                 = s.modifiedby,
        modifieddate               = s.modifieddate,
        DestFBID                   = s.DestFBID,
        DestAccountCode            = s.DestAccountCode,
        InterCompJV                = s.InterCompJV,
        dest_cost_center           = s.dest_cost_center,
        account_currency           = s.account_currency,
        base_erate_inacccur        = s.base_erate_inacccur,
        des_ouid                   = s.des_ouid,
        RevInterCompJV             = s.RevInterCompJV,
        usage_id                   = s.usage_id,
        guid1                      = s.guid1,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_jv_voucher_trn_dtl s
    WHERE t.ou_id = s.ou_id
    AND t.voucher_no = s.voucher_no
    AND t.voucher_serial_no = s.voucher_serial_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_jvvouchertrndtl
    (
        ou_id, voucher_no, voucher_serial_no, timestamp, account_code, drcr_flag, tran_currency, tran_amount, exchange_rate, par_exchange_rate, base_amount, par_base_amount, remarks, costcenter_code, analysis_code, subanal_code, createdby, createddate, modifiedby, modifieddate, DestFBID, DestAccountCode, InterCompJV, dest_cost_center, account_currency, base_erate_inacccur, des_ouid, RevInterCompJV, usage_id, guid1, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.ou_id, s.voucher_no, s.voucher_serial_no, s.timestamp, s.account_code, s.drcr_flag, s.tran_currency, s.tran_amount, s.exchange_rate, s.par_exchange_rate, s.base_amount, s.par_base_amount, s.remarks, s.costcenter_code, s.analysis_code, s.subanal_code, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.DestFBID, s.DestAccountCode, s.InterCompJV, s.dest_cost_center, s.account_currency, s.base_erate_inacccur, s.des_ouid, s.RevInterCompJV, s.usage_id, s.guid1, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_jv_voucher_trn_dtl s
    LEFT JOIN dwh.F_jvvouchertrndtl t
    ON s.ou_id = t.ou_id
    AND s.voucher_no = t.voucher_no
    AND s.voucher_serial_no = t.voucher_serial_no
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_jv_voucher_trn_dtl
    (
        ou_id, voucher_no, voucher_serial_no, timestamp, account_code, drcr_flag, tran_currency, tran_amount, exchange_rate, par_exchange_rate, base_amount, par_base_amount, remarks, costcenter_code, analysis_code, subanal_code, createdby, createddate, modifiedby, modifieddate, DestFBID, DestAccountCode, InterCompJV, dest_cost_center, dest_analysis_code, dest_subanalysis_code, account_currency, base_erate_inacccur, pbase_erate_inacccur, des_ouid, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, dest_company, RevInterCompJV, proposal_number, pending_cap_amount, capitalized_amount, usage_id, ifb_recon_jvno, cap_flag, writeoff_amt, writeoff_remarks, writeoff_JVno, writeoff_doc_ou, writeoff_doc_no, writeoff_doc_type, guid1, writeoff_doc_lineno, etlcreateddatetime
    )
    SELECT
        ou_id, voucher_no, voucher_serial_no, timestamp, account_code, drcr_flag, tran_currency, tran_amount, exchange_rate, par_exchange_rate, base_amount, par_base_amount, remarks, costcenter_code, analysis_code, subanal_code, createdby, createddate, modifiedby, modifieddate, DestFBID, DestAccountCode, InterCompJV, dest_cost_center, dest_analysis_code, dest_subanalysis_code, account_currency, base_erate_inacccur, pbase_erate_inacccur, des_ouid, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, dest_company, RevInterCompJV, proposal_number, pending_cap_amount, capitalized_amount, usage_id, ifb_recon_jvno, cap_flag, writeoff_amt, writeoff_remarks, writeoff_JVno, writeoff_doc_ou, writeoff_doc_no, writeoff_doc_type, guid1, writeoff_doc_lineno, etlcreateddatetime
    FROM stg.stg_jv_voucher_trn_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_jvvouchertrndtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_jvvouchertrnhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_jvvouchertrnhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_jv_voucher_trn_hdr;

    UPDATE dwh.F_jvvouchertrnhdr t
    SET
     
        timestamp                 = s.timestamp,
        voucher_type              = s.voucher_type,
        voucher_date              = s.voucher_date,
        numbering_type            = s.numbering_type,
        fb_id                     = s.fb_id,
        ref_voucher_no            = s.ref_voucher_no,
        ref_voucher_type          = s.ref_voucher_type,
        rev_year                  = s.rev_year,
        rev_period                = s.rev_period,
        control_total             = s.control_total,
        remarks                   = s.remarks,
        voucher_status            = s.voucher_status,
        authorised_by             = s.authorised_by,
        authorised_date           = s.authorised_date,
        base_amount               = s.base_amount,
        component_id              = s.component_id,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        tcal_exclusive_amt        = s.tcal_exclusive_amt,
        total_tcal_amount         = s.total_tcal_amount,
        tcal_status               = s.tcal_status,
        auto_gen_flag             = s.auto_gen_flag,
        source_fbid               = s.source_fbid,
        source_tran_no            = s.source_tran_no,
        source_tran_ou            = s.source_tran_ou,
        source_tran_type          = s.source_tran_type,
        source_tran_date          = s.source_tran_date,
        costcenter_hdr            = s.costcenter_hdr,
        Revsal_date               = s.Revsal_date,
        rev_remarks               = s.rev_remarks,
        ifb_usage                 = s.ifb_usage,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_jv_voucher_trn_hdr s
    WHERE t.ou_id = s.ou_id
    AND t.voucher_no = s.voucher_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_jvvouchertrnhdr
    (
        ou_id, voucher_no, timestamp, voucher_type, voucher_date, numbering_type, fb_id, ref_voucher_no, ref_voucher_type, rev_year, rev_period, control_total, remarks, voucher_status, authorised_by, authorised_date, base_amount, component_id, createdby, createddate, modifiedby, modifieddate, tcal_exclusive_amt, total_tcal_amount, tcal_status, auto_gen_flag, source_fbid, source_tran_no, source_tran_ou, source_tran_type, source_tran_date, costcenter_hdr, Revsal_date, rev_remarks, ifb_usage, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.ou_id, s.voucher_no, s.timestamp, s.voucher_type, s.voucher_date, s.numbering_type, s.fb_id, s.ref_voucher_no, s.ref_voucher_type, s.rev_year, s.rev_period, s.control_total, s.remarks, s.voucher_status, s.authorised_by, s.authorised_date, s.base_amount, s.component_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.tcal_exclusive_amt, s.total_tcal_amount, s.tcal_status, s.auto_gen_flag, s.source_fbid, s.source_tran_no, s.source_tran_ou, s.source_tran_type, s.source_tran_date, s.costcenter_hdr, s.Revsal_date, s.rev_remarks, s.ifb_usage, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_jv_voucher_trn_hdr s
    LEFT JOIN dwh.F_jvvouchertrnhdr t
    ON s.ou_id = t.ou_id
    AND s.voucher_no = t.voucher_no
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_jv_voucher_trn_hdr
    (
        ou_id, voucher_no, timestamp, voucher_type, voucher_date, numbering_type, fb_id, ref_voucher_no, ref_voucher_type, rev_year, rev_period, control_total, remarks, recvchrtemp_no, voucher_status, converted_flag, authorised_by, authorised_date, base_amount, component_id, doc_status, createdby, createddate, modifiedby, modifieddate, tcal_exclusive_amt, total_tcal_amount, tcal_status, auto_gen_flag, source_fbid, source_tran_no, source_tran_ou, source_tran_type, source_tran_date, workflow_status, project_ou, Project_code, afe_number, job_number, costcenter_hdr, Revsal_date, voucher_sub_type, rev_remarks, proposal_number, ifb_usage, ifb_remarks, action_typ, ifb_tran_no, ifb_tran_ou, ifb_tran_type, writeoff_flag, etlcreateddatetime
    )
    SELECT
        ou_id, voucher_no, timestamp, voucher_type, voucher_date, numbering_type, fb_id, ref_voucher_no, ref_voucher_type, rev_year, rev_period, control_total, remarks, recvchrtemp_no, voucher_status, converted_flag, authorised_by, authorised_date, base_amount, component_id, doc_status, createdby, createddate, modifiedby, modifieddate, tcal_exclusive_amt, total_tcal_amount, tcal_status, auto_gen_flag, source_fbid, source_tran_no, source_tran_ou, source_tran_type, source_tran_date, workflow_status, project_ou, Project_code, afe_number, job_number, costcenter_hdr, Revsal_date, voucher_sub_type, rev_remarks, proposal_number, ifb_usage, ifb_remarks, action_typ, ifb_tran_no, ifb_tran_ou, ifb_tran_type, writeoff_flag, etlcreateddatetime
    FROM stg.stg_jv_voucher_trn_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_jvvouchertrnhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_loadingdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_loadingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_depsource VARCHAR(100);
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag ,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_loading_exec_dtl;

    UPDATE dwh.F_LoadingDetail t
    SET
        loading_hdr_key				   = COALESCE(fh.loading_hdr_key,-1),
		loading_dtl_loc_key			   = COALESCE(l.loc_key,-1),
		loading_dtl_thu_key			   = COALESCE(th.thu_key,-1),
		loading_dtl_stg_mas_key		   = COALESCE(st.stg_mas_key,-1),
		loading_dtl_shp_pt_key	   	   = COALESCE(sp.shp_pt_key,-1),
        loading_thu_id                 = s.wms_loading_thu_id,
        loading_ship_point             = s.wms_loading_ship_point,
        loading_disp_doc_type          = s.wms_loading_disp_doc_type,
        loading_disp_doc_no            = s.wms_loading_disp_doc_no,
        loading_transfer_doc           = s.wms_loading_transfer_doc,
        loading_thu_desc               = s.wms_loading_thu_desc,
        loading_thu_class              = s.wms_loading_thu_class,
        loading_thu_sr_no              = s.wms_loading_thu_sr_no,
        loading_thu_acc                = s.wms_loading_thu_acc,
        loading_disp_doc_date          = s.wms_loading_disp_doc_date,
        loading_pal_qty                = s.wms_loading_pal_qty,
        loading_tran_typ               = s.wms_loading_tran_typ,
        loading_start_date_time        = s.wms_loading_start_date_time,
        loading_end_date_time          = s.wms_loading_end_date_time,
        loading_so_no                  = s.wms_loading_so_no,
        loading_stage                  = s.wms_loading_stage,
        loading_curr_exec              = s.wms_loading_curr_exec,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_loading_exec_dtl s
	INNER JOIN dwh.f_loadingheader fh 
		ON  s.wms_loading_exec_no		= fh.loading_exec_no
		AND s.wms_loading_exec_ou 		= fh.loading_exec_ou
		AND s.wms_loading_loc_code		= fh.loading_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_loading_loc_code 		= l.loc_code 
		AND s.wms_loading_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_shippingpoint sp 			
		ON  s.wms_loading_ship_point 	= sp.shp_pt_id
		AND s.wms_loading_exec_ou 		= sp.shp_pt_ou 
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_loading_thu_id		= th.thu_id 
		AND s.wms_loading_exec_ou 		= th.thu_ou  	
	LEFT JOIN dwh.d_stage st 		
		ON  s.wms_loading_stage  		= st.stg_mas_id 
		AND s.wms_loading_exec_ou 		= st.stg_mas_ou 
		AND s.wms_loading_loc_code		= st.stg_mas_loc
		
    WHERE 	t.loading_loc_code		   = s.wms_loading_loc_code
    AND 	t.loading_exec_no 		   = s.wms_loading_exec_no
    AND 	t.loading_exec_ou 		   = s.wms_loading_exec_ou
    AND 	t.loading_lineno 		   = s.wms_loading_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_LoadingDetail
    (
		loading_hdr_key, loading_dtl_loc_key, loading_dtl_thu_key, loading_dtl_stg_mas_key, loading_dtl_shp_pt_key,
        loading_loc_code, loading_exec_no, loading_exec_ou, loading_lineno, loading_thu_id, loading_ship_point, loading_disp_doc_type, loading_disp_doc_no, loading_transfer_doc, loading_thu_desc, loading_thu_class, loading_thu_sr_no, loading_thu_acc, loading_disp_doc_date, loading_pal_qty, loading_tran_typ, loading_start_date_time, loading_end_date_time, loading_so_no, loading_stage, loading_curr_exec, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(fh.loading_hdr_key,-1), COALESCE(l.loc_key,-1), COALESCE(th.thu_key,-1), COALESCE(st.stg_mas_key,-1), COALESCE(sp.shp_pt_key,-1),
        s.wms_loading_loc_code, s.wms_loading_exec_no, s.wms_loading_exec_ou, s.wms_loading_lineno, s.wms_loading_thu_id, s.wms_loading_ship_point, s.wms_loading_disp_doc_type, s.wms_loading_disp_doc_no, s.wms_loading_transfer_doc, s.wms_loading_thu_desc, s.wms_loading_thu_class, s.wms_loading_thu_sr_no, s.wms_loading_thu_acc, s.wms_loading_disp_doc_date, s.wms_loading_pal_qty, s.wms_loading_tran_typ, s.wms_loading_start_date_time, s.wms_loading_end_date_time, s.wms_loading_so_no, s.wms_loading_stage, s.wms_loading_curr_exec, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_loading_exec_dtl s
	INNER JOIN dwh.f_loadingheader fh 
		ON  s.wms_loading_exec_no		= fh.loading_exec_no
		AND s.wms_loading_exec_ou 		= fh.loading_exec_ou 
		AND s.wms_loading_loc_code		= fh.loading_loc_code
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_loading_loc_code 		= l.loc_code 
		AND s.wms_loading_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_shippingpoint sp 			
		ON  s.wms_loading_ship_point 	= sp.shp_pt_id
		AND s.wms_loading_exec_ou 		= sp.shp_pt_ou 
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_loading_thu_id		= th.thu_id 
		AND s.wms_loading_exec_ou 		= th.thu_ou  	
	LEFT JOIN dwh.d_stage st 		
		ON  s.wms_loading_stage  		= st.stg_mas_id 
		AND s.wms_loading_exec_ou 		= st.stg_mas_ou 		
    LEFT JOIN dwh.F_LoadingDetail t
    ON s.wms_loading_loc_code = t.loading_loc_code
    AND s.wms_loading_exec_no = t.loading_exec_no
    AND s.wms_loading_exec_ou = t.loading_exec_ou
    AND s.wms_loading_lineno = t.loading_lineno
    WHERE t.loading_exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_loading_exec_dtl
    (
        wms_loading_loc_code, wms_loading_exec_no, wms_loading_exec_ou, wms_loading_lineno, wms_loading_thu_id, wms_loading_ship_point, wms_loading_disp_doc_type, wms_loading_disp_doc_no, wms_loading_transfer_doc, wms_loading_thu_desc, wms_loading_thu_class, wms_loading_thu_sr_no, wms_loading_thu_acc, wms_loading_disp_doc_date, wms_loading_pal_qty, wms_loading_tran_typ, wms_loading_ven_thuid, wms_loading_start_date_time, wms_loading_end_date_time, wms_loading_so_no, wms_unload_flag, wms_loading_thu_sr_no2, wms_loading_reason_code, wms_loading_userdef1, wms_loading_userdef2, wms_loading_userdef3, wms_loading_userdef4, wms_loading_userdef5, wms_loading_stage, wms_loading_curr_exec, etlcreateddatetime
    )
    SELECT
        wms_loading_loc_code, wms_loading_exec_no, wms_loading_exec_ou, wms_loading_lineno, wms_loading_thu_id, wms_loading_ship_point, wms_loading_disp_doc_type, wms_loading_disp_doc_no, wms_loading_transfer_doc, wms_loading_thu_desc, wms_loading_thu_class, wms_loading_thu_sr_no, wms_loading_thu_acc, wms_loading_disp_doc_date, wms_loading_pal_qty, wms_loading_tran_typ, wms_loading_ven_thuid, wms_loading_start_date_time, wms_loading_end_date_time, wms_loading_so_no, wms_unload_flag, wms_loading_thu_sr_no2, wms_loading_reason_code, wms_loading_userdef1, wms_loading_userdef2, wms_loading_userdef3, wms_loading_userdef4, wms_loading_userdef5, wms_loading_stage, wms_loading_curr_exec, etlcreateddatetime
    FROM stg.stg_wms_loading_exec_dtl;
    END IF;
ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 		 
    
EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;
     
 
   
END;
$$;


ALTER PROCEDURE dwh.usp_f_loadingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_loadingheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_loadingheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_loading_exec_hdr;

    UPDATE dwh.F_LoadingHeader t
    SET
        loading_hdr_loc_key			  = COALESCE(l.loc_key,-1),
		loading_hdr_emp_hdr_key		  = COALESCE(e.emp_hdr_key,-1),
		loading_hdr_veh_key			  = COALESCE(v.veh_key,-1),
		loading_hdr_eqp_key			  = COALESCE(eq.eqp_key,-1),
        loading_exec_date             = s.wms_loading_exec_date,
        loading_exec_status           = s.wms_loading_exec_status,
        loading_ld_sheet_no           = s.wms_loading_ld_sheet_no,
        loading_dock                  = s.wms_loading_dock,
        loading_mhe                   = s.wms_loading_mhe,
        loading_employee              = s.wms_loading_employee,
        loading_packing_bay           = s.wms_loading_packing_bay,
        loading_veh_type              = s.wms_loading_veh_type,
        loading_veh_no                = s.wms_loading_veh_no,
        loading_equip_type            = s.wms_laoding_equip_type,
        loading_equip_no              = s.wms_laoding_equip_no,
        loading_container_no          = s.wms_loading_container_no,
        loading_person                = s.wms_loading_person,
        loading_lsp                   = s.wms_loading_lsp,
        loading_created_by            = s.wms_loading_created_by,
        loading_created_date          = s.wms_loading_created_date,
        loading_modified_by           = s.wms_loading_modified_by,
        loading_modified_date         = s.wms_loading_modified_date,
        loading_timestamp             = s.wms_loading_timestamp,
        loading_manifest_no           = s.wms_loading_manifest_no,
        loading_exec_startdate        = s.wms_loading_exec_startdate,
        loading_exec_enddate          = s.wms_loading_exec_enddate,
        loading_exe_urgent            = s.wms_loading_exe_urgent,
        loading_exec_seal_no          = s.wms_loading_exec_seal_no,
        loading_booking_req           = s.wms_loading_booking_req,
        loading_gen_from              = s.wms_loading_gen_from,
        loading_rsn_code              = s.wms_loading_rsn_code,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_loading_exec_hdr s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_loading_loc_code 		= l.loc_code 
		AND s.wms_loading_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_employeeheader e 
		ON  s.wms_loading_employee		= e.emp_employee_code
		AND s.wms_loading_exec_ou 		= e.emp_ou 
	LEFT JOIN dwh.d_vehicle v 
		ON  s.wms_loading_veh_no		= v.veh_id
		AND s.wms_loading_exec_ou 		= v.veh_ou 
	LEFT JOIN dwh.d_equipment eq 
		ON  s.wms_laoding_equip_no		= eq.eqp_equipment_id
		AND s.wms_loading_exec_ou 		= eq.eqp_ou 
    WHERE t.loading_loc_code = s.wms_loading_loc_code
    AND t.loading_exec_no = s.wms_loading_exec_no
    AND t.loading_exec_ou = s.wms_loading_exec_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_LoadingHeader
    (
		loading_hdr_loc_key, loading_hdr_emp_hdr_key, loading_hdr_veh_key, loading_hdr_eqp_key,
        loading_loc_code, loading_exec_no, loading_exec_ou, loading_exec_date, loading_exec_status, loading_ld_sheet_no, loading_dock, loading_mhe, loading_employee, loading_packing_bay, loading_veh_type, loading_veh_no, loading_equip_type, loading_equip_no, loading_container_no, loading_person, loading_lsp, loading_created_by, loading_created_date, loading_modified_by, loading_modified_date, loading_timestamp, loading_manifest_no, loading_exec_startdate, loading_exec_enddate, loading_exe_urgent, loading_exec_seal_no, loading_booking_req, loading_gen_from, loading_rsn_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1), COALESCE(e.emp_hdr_key,-1), COALESCE(v.veh_key,-1), COALESCE(eq.eqp_key,-1),
        s.wms_loading_loc_code, s.wms_loading_exec_no, s.wms_loading_exec_ou, s.wms_loading_exec_date, s.wms_loading_exec_status, s.wms_loading_ld_sheet_no, s.wms_loading_dock, s.wms_loading_mhe, s.wms_loading_employee, s.wms_loading_packing_bay, s.wms_loading_veh_type, s.wms_loading_veh_no, s.wms_laoding_equip_type, s.wms_laoding_equip_no, s.wms_loading_container_no, s.wms_loading_person, s.wms_loading_lsp, s.wms_loading_created_by, s.wms_loading_created_date, s.wms_loading_modified_by, s.wms_loading_modified_date, s.wms_loading_timestamp, s.wms_loading_manifest_no, s.wms_loading_exec_startdate, s.wms_loading_exec_enddate, s.wms_loading_exe_urgent, s.wms_loading_exec_seal_no, s.wms_loading_booking_req, s.wms_loading_gen_from, s.wms_loading_rsn_code, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_loading_exec_hdr s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_loading_loc_code 		= l.loc_code 
		AND s.wms_loading_exec_ou 		= l.loc_ou 
	LEFT JOIN dwh.d_employeeheader e 
		ON  s.wms_loading_employee		= e.emp_employee_code
		AND s.wms_loading_exec_ou 		= e.emp_ou 
	LEFT JOIN dwh.d_vehicle v 
		ON  s.wms_loading_veh_no		= v.veh_id
		AND s.wms_loading_exec_ou 		= v.veh_ou 
	LEFT JOIN dwh.d_equipment eq 
		ON  s.wms_laoding_equip_no		= eq.eqp_equipment_id
		AND s.wms_loading_exec_ou 		= eq.eqp_ou 
    LEFT JOIN dwh.F_LoadingHeader t
    ON 		s.wms_loading_loc_code 		= t.loading_loc_code
    AND 	s.wms_loading_exec_no 		= t.loading_exec_no
    AND 	s.wms_loading_exec_ou 		= t.loading_exec_ou
    WHERE 	t.loading_exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_loading_exec_hdr
    (
        wms_loading_loc_code, wms_loading_exec_no, wms_loading_exec_ou, wms_loading_exec_date, wms_loading_exec_status, wms_loading_ld_sheet_no, wms_loading_dock, wms_loading_mhe, wms_loading_employee, wms_loading_packing_bay, wms_loading_veh_type, wms_loading_veh_no, wms_laoding_equip_type, wms_laoding_equip_no, wms_loading_container_no, wms_loading_person, wms_loading_lsp, wms_loading_created_by, wms_loading_created_date, wms_loading_modified_by, wms_loading_modified_date, wms_loading_timestamp, wms_loading_userdefined1, wms_loading_userdefined2, wms_loading_userdefined3, wms_loading_manifest_no, wms_loading_exec_startdate, wms_loading_exec_enddate, wms_loading_exe_urgent, wms_loading_exec_seal_no, wms_loading_booking_req, wms_loading_manf_flag, wms_loading_gen_from, wms_loading_rsn_code, wms_loading_trip_planid, etlcreateddatetime
    )
    SELECT
        wms_loading_loc_code, wms_loading_exec_no, wms_loading_exec_ou, wms_loading_exec_date, wms_loading_exec_status, wms_loading_ld_sheet_no, wms_loading_dock, wms_loading_mhe, wms_loading_employee, wms_loading_packing_bay, wms_loading_veh_type, wms_loading_veh_no, wms_laoding_equip_type, wms_laoding_equip_no, wms_loading_container_no, wms_loading_person, wms_loading_lsp, wms_loading_created_by, wms_loading_created_date, wms_loading_modified_by, wms_loading_modified_date, wms_loading_timestamp, wms_loading_userdefined1, wms_loading_userdefined2, wms_loading_userdefined3, wms_loading_manifest_no, wms_loading_exec_startdate, wms_loading_exec_enddate, wms_loading_exe_urgent, wms_loading_exec_seal_no, wms_loading_booking_req, wms_loading_manf_flag, wms_loading_gen_from, wms_loading_rsn_code, wms_loading_trip_planid, etlcreateddatetime
    FROM stg.stg_wms_loading_exec_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_loadingheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_locationareadetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_locationareadetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_loc_prop_hdr;

    UPDATE dwh.f_locationareadetail t
    SET
        loc_pop_loc_key             = COALESCE(l.loc_key,-1),
        loc_pop_length              = s.wms_loc_pop_length,
        loc_pop_breath              = s.wms_loc_pop_breath,
        loc_pop_uom                 = s.wms_loc_pop_uom,
        loc_pop_area_uom            = s.wms_loc_pop_area_uom,
        loc_pop_tot_area            = s.wms_loc_pop_tot_area,
        loc_pop_tot_stag_area       = s.wms_loc_pop_tot_stag_area,
        loc_pop_storg_area          = s.wms_loc_pop_storg_area,
        loc_pop_no_of_bins          = s.wms_loc_pop_no_of_bins,
        loc_pop_no_of_zones         = s.wms_loc_pop_no_of_zones,
        loc_other_area              = s.wms_loc_other_area,
        loc_office_area             = s.wms_loc_office_area,
        loc_outbound_area           = s.wms_loc_outbound_area,
        created_by                  = s.created_by,
        created_date                = s.created_date,
        modified_by                 = s.modified_by,
        modified_date               = s.modified_date,
        warehouse_loc_radio         = s.warehouse_loc_radio,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_wms_loc_prop_hdr s
	LEFT JOIN dwh.d_location l
		ON  s.wms_loc_pop_code		= l.loc_code
		AND s.wms_loc_pop_ou		= l.loc_ou
    WHERE   t.loc_pop_code 			= s.wms_loc_pop_code
		AND t.loc_pop_ou 			= s.wms_loc_pop_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_locationareadetail
    (
        loc_pop_loc_key, loc_pop_code, loc_pop_ou, loc_pop_length, loc_pop_breath, loc_pop_uom, loc_pop_area_uom, loc_pop_tot_area, loc_pop_tot_stag_area, loc_pop_storg_area, loc_pop_no_of_bins, loc_pop_no_of_zones, loc_other_area, loc_office_area, loc_outbound_area, created_by, created_date, modified_by, modified_date, warehouse_loc_radio, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1), s.wms_loc_pop_code, s.wms_loc_pop_ou, s.wms_loc_pop_length, s.wms_loc_pop_breath, s.wms_loc_pop_uom, s.wms_loc_pop_area_uom, s.wms_loc_pop_tot_area, s.wms_loc_pop_tot_stag_area, s.wms_loc_pop_storg_area, s.wms_loc_pop_no_of_bins, s.wms_loc_pop_no_of_zones, s.wms_loc_other_area, s.wms_loc_office_area, s.wms_loc_outbound_area, s.created_by, s.created_date, s.modified_by, s.modified_date, s.warehouse_loc_radio, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_loc_prop_hdr s
	LEFT JOIN dwh.d_location l
		ON  s.wms_loc_pop_code 		= l.loc_code
		AND s.wms_loc_pop_ou 		= l.loc_ou	
    LEFT JOIN dwh.F_LocationAreaDetail t
		ON  s.wms_loc_pop_code 		= t.loc_pop_code
		AND s.wms_loc_pop_ou 		= t.loc_pop_ou
    WHERE   t.loc_pop_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_loc_prop_hdr
    (
        wms_loc_pop_code, wms_loc_pop_ou, wms_loc_pop_length, wms_loc_pop_breath, wms_loc_pop_uom, wms_loc_pop_area_uom, wms_loc_pop_tot_area, wms_loc_pop_tot_stag_area, wms_loc_pop_storg_area, wms_loc_pop_no_of_bins, wms_loc_pop_no_of_zones, wms_loc_other_area, wms_loc_office_area, wms_loc_outbound_area, created_by, created_date, modified_by, modified_date, warehouse_loc_radio, etlcreateddatetime
    )
    SELECT
        wms_loc_pop_code, wms_loc_pop_ou, wms_loc_pop_length, wms_loc_pop_breath, wms_loc_pop_uom, wms_loc_pop_area_uom, wms_loc_pop_tot_area, wms_loc_pop_tot_stag_area, wms_loc_pop_storg_area, wms_loc_pop_no_of_bins, wms_loc_pop_no_of_zones, wms_loc_other_area, wms_loc_office_area, wms_loc_outbound_area, created_by, created_date, modified_by, modified_date, warehouse_loc_radio, etlcreateddatetime
    FROM stg.stg_wms_loc_prop_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_locationareadetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_lotmasterdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_lotmasterdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_lnm_lm_lotmaster;

    UPDATE dwh.f_lotmasterdetail t
    SET
        lot_mst_dtl_itm_hdr_key			= COALESCE(i.itm_hdr_key,-1),
		lot_mst_dtl_wh_key				= COALESCE(w.wh_key,-1),
        lm_trans_type                   = s.lm_trans_type,
        lm_trans_date                   = s.lm_trans_date,
        lm_manufacturing_date           = s.lm_manufacturing_date,
        lm_expiry_date                  = s.lm_expiry_date,
        lm_created_date                 = s.lm_created_date,
        lm_created_by                   = s.lm_created_by,
        lm_supp_batch_no                = s.lm_supp_batch_no,
        lm_asn_srl_no                   = s.wms_lm_asn_srl_no,
        lm_asn_uid                      = s.wms_lm_asn_uid,
        lm_asn_cust_sl_no               = s.wms_lm_asn_cust_sl_no,
        lm_asn_ref_doc_no1              = s.wms_lm_asn_ref_doc_no1,
        lm_asn_consignee                = s.wms_lm_asn_consignee,
        lm_asn_outboundorder_no         = s.wms_lm_asn_outboundorder_no,
        lm_asn_outboundorder_qty        = s.wms_lm_asn_outboundorder_qty,
        lm_asn_bestbeforedate           = s.wms_lm_asn_bestbeforedate,
        lm_asn_remarks                  = s.wms_lm_asn_remarks,
        lm_gr_plan_no                   = s.wms_lm_gr_plan_no,
        lm_gr_execution_date            = s.wms_lm_gr_execution_date,
        lm_exp_flg                      = s.wms_lm_exp_flg,
        lm_gr_cust_sno                  = s.wms_lm_gr_cust_sno,
        lm_gr_3pl_sno                   = s.wms_lm_gr_3pl_sno,
        lm_gr_warranty_sno              = s.wms_lm_gr_warranty_sno,
        lm_gr_coo                       = s.wms_lm_gr_coo,
        lm_gr_product_status            = s.wms_lm_gr_product_status,
        lm_gr_inv_type                  = s.wms_lm_gr_inv_type,
        lm_gr_item_attribute1           = s.wms_lm_gr_item_attribute1,
        lm_gr_item_attribute2           = s.wms_lm_gr_item_attribute2,
        lm_gr_item_attribute3           = s.wms_lm_gr_item_attribute3,
        lm_giftcard_sno                 = s.wms_lm_giftcard_sno,
        lm_gr_item_attribute7           = s.wms_lm_gr_item_attribute7,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_wms_lnm_lm_lotmaster s
    LEFT JOIN dwh.d_itemheader i 
		ON  s.lm_item_code				= i.itm_code
		AND s.lm_lotno_ou 				= i.itm_ou 
	LEFT JOIN dwh.d_warehouse w 
		ON  s.lm_wh_code				= w.wh_code
		AND s.lm_lotno_ou 				= w.wh_ou 
    WHERE 	t.lm_lotno_ou 				= s.lm_lotno_ou
    AND 	t.lm_wh_code 				= s.lm_wh_code
    AND 	t.lm_item_code 				= s.lm_item_code
    AND 	t.lm_lot_no 				= s.lm_lot_no
    AND 	t.lm_serial_no 				= s.lm_serial_no
    AND 	t.lm_trans_no	 			= s.lm_trans_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_lotmasterdetail
    (
        lot_mst_dtl_itm_hdr_key, lot_mst_dtl_wh_key,
        lm_lotno_ou, lm_wh_code, lm_item_code, lm_lot_no, lm_serial_no, lm_trans_no, lm_trans_type, lm_trans_date, lm_manufacturing_date, lm_expiry_date, lm_created_date, lm_created_by, lm_supp_batch_no, lm_asn_srl_no, lm_asn_uid, lm_asn_cust_sl_no, lm_asn_ref_doc_no1, lm_asn_consignee, lm_asn_outboundorder_no, lm_asn_outboundorder_qty, lm_asn_bestbeforedate, lm_asn_remarks, lm_gr_plan_no, lm_gr_execution_date, lm_exp_flg, lm_gr_cust_sno, lm_gr_3pl_sno, lm_gr_warranty_sno, lm_gr_coo, lm_gr_product_status, lm_gr_inv_type, lm_gr_item_attribute1, lm_gr_item_attribute2, lm_gr_item_attribute3, lm_giftcard_sno, lm_gr_item_attribute7, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(i.itm_hdr_key,-1), COALESCE(w.wh_key,-1),
        s.lm_lotno_ou, s.lm_wh_code, s.lm_item_code, s.lm_lot_no, s.lm_serial_no, s.lm_trans_no, s.lm_trans_type, s.lm_trans_date, s.lm_manufacturing_date, s.lm_expiry_date, s.lm_created_date, s.lm_created_by, s.lm_supp_batch_no, s.wms_lm_asn_srl_no, s.wms_lm_asn_uid, s.wms_lm_asn_cust_sl_no, s.wms_lm_asn_ref_doc_no1, s.wms_lm_asn_consignee, s.wms_lm_asn_outboundorder_no, s.wms_lm_asn_outboundorder_qty, s.wms_lm_asn_bestbeforedate, s.wms_lm_asn_remarks, s.wms_lm_gr_plan_no, s.wms_lm_gr_execution_date, s.wms_lm_exp_flg, s.wms_lm_gr_cust_sno, s.wms_lm_gr_3pl_sno, s.wms_lm_gr_warranty_sno, s.wms_lm_gr_coo, s.wms_lm_gr_product_status, s.wms_lm_gr_inv_type, s.wms_lm_gr_item_attribute1, s.wms_lm_gr_item_attribute2, s.wms_lm_gr_item_attribute3, s.wms_lm_giftcard_sno, s.wms_lm_gr_item_attribute7, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_lnm_lm_lotmaster s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.lm_item_code				= i.itm_code
		AND s.lm_lotno_ou 				= i.itm_ou 
	LEFT JOIN dwh.d_warehouse w 
		ON  s.lm_wh_code				= w.wh_code
		AND s.lm_lotno_ou 				= w.wh_ou 
    LEFT JOIN dwh.f_lotmasterdetail t
    ON 		s.lm_lotno_ou 				= t.lm_lotno_ou
    AND 	s.lm_wh_code 				= t.lm_wh_code
    AND 	s.lm_item_code	 			= t.lm_item_code
    AND 	s.lm_lot_no 				= t.lm_lot_no
    AND 	s.lm_serial_no 				= t.lm_serial_no
    AND 	s.lm_trans_no 				= t.lm_trans_no
    WHERE t.lm_lotno_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_lnm_lm_lotmaster
    (
        lm_lotno_ou, lm_wh_code, lm_item_code, lm_lot_no, lm_serial_no, lm_trans_no, lm_trans_type, lm_trans_date, lm_manufacturing_date, lm_expiry_date, lm_created_date, lm_created_by, lm_supp_batch_no, wms_lm_asn_srl_no, wms_lm_asn_uid, wms_lm_asn_cust_sl_no, wms_lm_asn_ref_doc_no1, wms_lm_asn_consignee, wms_lm_asn_outboundorder_no, wms_lm_asn_outboundorder_qty, wms_lm_asn_outboundorder_lineno, wms_lm_asn_bestbeforedate, wms_lm_asn_remarks, wms_lm_gr_plan_no, wms_lm_gr_execution_date, wms_lm_exp_flg, wms_lm_gr_cust_sno, wms_lm_gr_3pl_sno, wms_lm_gr_warranty_sno, wms_lm_gr_coo, wms_lm_gr_product_status, wms_lm_gr_inv_type, wms_lm_gr_item_attribute1, wms_lm_gr_item_attribute2, wms_lm_gr_item_attribute3, wms_lm_gr_item_attribute4, wms_lm_gr_item_attribute5, wms_lm_giftcard_sno, wms_lm_gr_item_attribute6, wms_lm_gr_item_attribute7, wms_lm_gr_item_attribute8, wms_lm_gr_item_attribute9, wms_lm_gr_item_attribute10, wms_lm_new_lottables1, wms_lm_new_lottables2, wms_lm_new_lottables3, wms_lm_new_lottables4, wms_lm_new_lottables5, wms_lm_new_lottables6, wms_lm_new_lottables7, wms_lm_new_lottables8, wms_lm_new_lottables9, wms_lm_new_lottables10, etlcreateddatetime
    )
    SELECT
        lm_lotno_ou, lm_wh_code, lm_item_code, lm_lot_no, lm_serial_no, lm_trans_no, lm_trans_type, lm_trans_date, lm_manufacturing_date, lm_expiry_date, lm_created_date, lm_created_by, lm_supp_batch_no, wms_lm_asn_srl_no, wms_lm_asn_uid, wms_lm_asn_cust_sl_no, wms_lm_asn_ref_doc_no1, wms_lm_asn_consignee, wms_lm_asn_outboundorder_no, wms_lm_asn_outboundorder_qty, wms_lm_asn_outboundorder_lineno, wms_lm_asn_bestbeforedate, wms_lm_asn_remarks, wms_lm_gr_plan_no, wms_lm_gr_execution_date, wms_lm_exp_flg, wms_lm_gr_cust_sno, wms_lm_gr_3pl_sno, wms_lm_gr_warranty_sno, wms_lm_gr_coo, wms_lm_gr_product_status, wms_lm_gr_inv_type, wms_lm_gr_item_attribute1, wms_lm_gr_item_attribute2, wms_lm_gr_item_attribute3, wms_lm_gr_item_attribute4, wms_lm_gr_item_attribute5, wms_lm_giftcard_sno, wms_lm_gr_item_attribute6, wms_lm_gr_item_attribute7, wms_lm_gr_item_attribute8, wms_lm_gr_item_attribute9, wms_lm_gr_item_attribute10, wms_lm_new_lottables1, wms_lm_new_lottables2, wms_lm_new_lottables3, wms_lm_new_lottables4, wms_lm_new_lottables5, wms_lm_new_lottables6, wms_lm_new_lottables7, wms_lm_new_lottables8, wms_lm_new_lottables9, wms_lm_new_lottables10, etlcreateddatetime
    FROM stg.stg_wms_lnm_lm_lotmaster;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_lotmasterdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_lottrackingdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_lottrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stock_lot_tracking_dtl;

    UPDATE dwh.f_lotTrackingDetail t
    SET
		stk_loc_key				= COALESCE (l.loc_key,-1),
		stk_item_key			= COALESCE (i.itm_hdr_key,-1),
		stk_customer_key		= COALESCE (c.customer_key,-1),
        stk_opn_bal              = s.wms_stk_opn_bal,
        stk_received             = s.wms_stk_received,
        stk_issued               = s.wms_stk_issued,
        stk_cls_bal              = s.wms_stk_cls_bal,
        stk_write_off_qty        = s.wms_stk_write_off_qty,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_wms_stock_lot_tracking_dtl s
	LEFT JOIN dwh.d_location l
	ON s.wms_stk_location	= l.loc_code
	AND s.wms_stk_ou		= l.loc_ou
	LEFT JOIN dwh.d_itemheader I
	ON s.wms_stk_item		= i.itm_code
	AND s.wms_stk_ou		= i.itm_ou
	LEFT JOIN dwh.d_customer c
	on TRIM(s.wms_stk_customer)	= c.customer_id
	and s.wms_stk_ou		= c.customer_ou
    WHERE t.stk_ou = s.wms_stk_ou
    AND t.stk_location = s.wms_stk_location
    AND t.stk_item = s.wms_stk_item
    AND TRIM(t.stk_customer) = TRIM(s.wms_stk_customer)
    AND t.stk_date = s.wms_stk_date
    AND t.stk_lot_no = s.wms_stk_lot_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_LotTrackingDetail
    (
		stk_loc_key		, stk_item_key		, stk_customer_key	,	
        stk_ou			, stk_location		, stk_item			,
		stk_customer	, stk_date			, stk_lot_no		,
		stk_opn_bal		, stk_received		, stk_issued		,
		stk_cls_bal		, stk_write_off_qty	,
		etlactiveind	, etljobname		, envsourcecd		,
		datasourcecd	, etlcreatedatetime
    )

    SELECT
		COALESCE (l.loc_key,-1)	, COALESCE (i.itm_hdr_key,-1)	, COALESCE (c.customer_key,-1)	,
        s.wms_stk_ou			, s.wms_stk_location			, s.wms_stk_item				,
		TRIM(s.wms_stk_customer), s.wms_stk_date				, s.wms_stk_lot_no				,
		s.wms_stk_opn_bal		, s.wms_stk_received			, s.wms_stk_issued				, 
		s.wms_stk_cls_bal		, s.wms_stk_write_off_qty		,
				1				, p_etljobname					, p_envsourcecd					,
		p_datasourcecd			, NOW()
    FROM stg.stg_wms_stock_lot_tracking_dtl s
	LEFT JOIN dwh.d_location l
	ON s.wms_stk_location	= l.loc_code
	AND s.wms_stk_ou		= l.loc_ou
	LEFT JOIN dwh.d_itemheader I
	ON s.wms_stk_item		= i.itm_code
	AND s.wms_stk_ou		= i.itm_ou
	LEFT JOIN dwh.d_customer c
	on TRIM(s.wms_stk_customer)	= c.customer_id
	and s.wms_stk_ou			= c.customer_ou
    LEFT JOIN dwh.F_LotTrackingDetail t
    ON s.wms_stk_ou = t.stk_ou
    AND s.wms_stk_location = t.stk_location
    AND s.wms_stk_item = t.stk_item
    AND TRIM(s.wms_stk_customer) = TRIM(t.stk_customer)
    AND s.wms_stk_date = t.stk_date
    AND s.wms_stk_lot_no = t.stk_lot_no
    WHERE t.stk_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_lot_tracking_dtl
    (
        wms_stk_ou			, wms_stk_location	, wms_stk_item			, wms_stk_customer		, 
		wms_stk_date		, wms_stk_lot_no	, wms_stk_opn_bal		, wms_stk_received		,
		wms_stk_issued		, wms_stk_cls_bal	, wms_stk_write_off_qty	, wms_stk_stock_status	, 
		etlcreateddatetime
    )
    SELECT
        wms_stk_ou			, wms_stk_location	, wms_stk_item			, wms_stk_customer		, 
		wms_stk_date		, wms_stk_lot_no	, wms_stk_opn_bal		, wms_stk_received		,
		wms_stk_issued		, wms_stk_cls_bal	, wms_stk_write_off_qty	, wms_stk_stock_status	, 
		etlcreateddatetime
	FROM stg.stg_wms_stock_lot_tracking_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_lottrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_notesattachment(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_notesattachment(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_Not_Notes_AttachDoc;

    UPDATE dwh.F_NotesAttachment t
    SET
        tran_no                   	= s.tran_no,
        tran_type                 	= s.tran_type,
        tran_ou                   	= s.tran_ou,
        amendment_no              	= s.amendment_no,
        keyfield1                 	= s.keyfield1,
        keyfield2                 	= s.keyfield2,
        keyfield3                 	= s.keyfield3,
        keyfield4                 	= s.keyfield4,
        doc_attach_compkey        	= s.doc_attach_compkey,
        natimestamp               	= s.natimestamp,
        created_by                	= s.created_by,
        created_date              	= s.created_date,
        modified_by               	= s.modified_by,
        modified_date             	= s.modified_date,
        attach_file               	= s.attach_file,
        attach_df                 	= s.attach_df,
        Attached_on               	= s.Attached_on,
        attach_desc               	= s.attach_desc,
        notes_comments            	= s.notes_comments,
        etlactiveind              	= 1,
        etljobname                	= p_etljobname,
        envsourcecd               	= p_envsourcecd,
        datasourcecd              	= p_datasourcecd,
        etlupdatedatetime         	= NOW()
    FROM stg.stg_Not_Notes_AttachDoc s
    WHERE   t.Sequence_no 			= s.Sequence_no
		AND t.notes_compkey 		= s.notes_compkey
		AND t.line_no 				= s.line_no
		AND t.line_entity 			= s.line_entity;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_NotesAttachment
    (
        Sequence_no, tran_no, tran_type, tran_ou, amendment_no, keyfield1, keyfield2, keyfield3, keyfield4, notes_compkey, doc_attach_compkey, natimestamp, created_by, created_date, modified_by, modified_date, line_no, line_entity, attach_file, attach_df, Attached_on, attach_desc, notes_comments, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.Sequence_no, s.tran_no, s.tran_type, s.tran_ou, s.amendment_no, s.keyfield1, s.keyfield2, s.keyfield3, s.keyfield4, s.notes_compkey, s.doc_attach_compkey, s.natimestamp, s.created_by, s.created_date, s.modified_by, s.modified_date, s.line_no, s.line_entity, s.attach_file, s.attach_df, s.Attached_on, s.attach_desc, s.notes_comments, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_Not_Notes_AttachDoc s
    LEFT JOIN dwh.F_NotesAttachment t
		ON s.Sequence_no 			= t.Sequence_no
		AND s.notes_compkey 		= t.notes_compkey
		AND s.line_no 				= t.line_no
		AND s.line_entity 			= t.line_entity
    WHERE t.Sequence_no IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_Not_Notes_AttachDoc
    (
        Sequence_no, tran_no, tran_type, tran_ou, amendment_no, keyfield1, keyfield2, keyfield3, keyfield4, notes_compkey, doc_attach_compkey, natimestamp, created_by, created_date, modified_by, modified_date, line_no, line_entity, attach_file, attach_df, Attached_on, attach_desc, notes_comments, etlcreateddatetime
    )
    SELECT
        Sequence_no, tran_no, tran_type, tran_ou, amendment_no, keyfield1, keyfield2, keyfield3, keyfield4, notes_compkey, doc_attach_compkey, natimestamp, created_by, created_date, modified_by, modified_date, line_no, line_entity, attach_file, attach_df, Attached_on, attach_desc, notes_comments, etlcreateddatetime
    FROM stg.stg_Not_Notes_AttachDoc;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_notesattachment(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_notesheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_notesheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_not_notes_hdr;

	UPDATE dwh.f_notesheader t
    SET
		tran_no				=	s.tran_no
		, tran_type			=	s.tran_type
		, tran_ou			=	s.tran_ou
		, amendment_no		=	s.amendment_no
		, keyfield1			=	s.keyfield1
		, keyfield2			=	s.keyfield2
		, keyfield3			=	s.keyfield3
		, keyfield4			=	s.keyfield4
		, doc_attach_compkey=	s.doc_attach_compkey
		, doc_notes			=	s.doc_notes
		, time_stamp		=	s.timestamp
		, created_by		=	s.created_by
		, created_date		=	s.created_date
		, modified_by		=	s.modified_by
		, modified_date		=	s.modified_date
		, doc_db			=	s.doc_db
		, doc_file			=	s.doc_file
		, doc_desc			=	s.doc_desc
		, doc_db_desc		=	s.doc_db_desc
		, Folder			=	s.Folder
		, etlactiveind 		=	1
		, etljobname 		=	p_etljobname
		, envsourcecd 		=	p_envsourcecd
		, datasourcecd 		=	p_datasourcecd
		, etlupdatedatetime =	NOW()
		FROM	stg.stg_not_notes_hdr s
		WHERE	t.notes_compkey	= s.notes_compkey;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_notesheader
	(   
        tran_no				,	tran_type		,	tran_ou			,
		amendment_no		,	keyfield1		,	keyfield2		,
		keyfield3			,	keyfield4		,	notes_compkey	,
		doc_attach_compkey	,	doc_notes		,	time_stamp		,
		created_by			,	created_date	,	modified_by		,
		modified_date		,	doc_db			,	doc_file		,
		doc_desc			,	doc_db_desc		,	Folder			,
		etlactiveind		,	etljobname		,	envsourcecd		,
		datasourcecd		,	etlcreatedatetime
	)
	
	SELECT 
		OH.tran_no				,	OH.tran_type		,	OH.tran_ou			,
		OH.amendment_no			,	OH.keyfield1		,	OH.keyfield2		,
		OH.keyfield3			,	OH.keyfield4		,	OH.notes_compkey	,
		OH.doc_attach_compkey	,	OH.doc_notes		,	OH.timestamp		,
		OH.created_by			,	OH.created_date		,	OH.modified_by		,
		OH.modified_date		,	OH.doc_db			,	OH.doc_file			,
		OH.doc_desc				,	OH.doc_db_desc		,	OH.Folder			,
		1 AS etlactiveind		,	p_etljobname		,	p_envsourcecd		,
		p_datasourcecd			,	NOW()
      
	FROM stg.stg_not_notes_hdr OH
	LEFT JOIN dwh.f_notesheader FH 	
	ON FH.notes_compkey 	= OH.notes_compkey
    WHERE FH.notes_compkey IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_not_notes_hdr
	(
		tran_no			,	tran_type			,	tran_ou			,	amendment_no	,
		keyfield1		,	keyfield2			,	keyfield3		,	keyfield4		,
		notes_compkey	,	doc_attach_compkey	,	doc_notes		,	"timestamp"		,
		created_by		,   created_date		,    modified_by	,	modified_date	,
		doc_db			,	doc_file			,    doc_desc		,	doc_db_desc		,
		folder			,	etlcreateddatetime
	)
	SELECT 
		tran_no				,	tran_type		,	tran_ou			,	amendment_no	,
		keyfield1			,	keyfield2		,	keyfield3		,	keyfield4		,
		notes_compkey		,	doc_attach_compkey,	doc_notes		,	timestamp		,
		created_by			,	created_date	,	modified_by		,	modified_date	,
		doc_db				,	doc_file		,	doc_desc		,	doc_db_desc		,
		Folder				,	etlcreateddatetime
	FROM stg.stg_not_notes_hdr;
    END IF;
    
    
    EXCEPTION WHEN others THEN
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
   
 
   
END;
$$;


ALTER PROCEDURE dwh.usp_f_notesheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outbounddocdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outbounddocdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_depsource VARCHAR(100);
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag ,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN	

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_doc_detail;

	UPDATE dwh.f_outboundDocDetail t
    SET 
	
	obh_hr_key  				=    ob.obh_hr_key,
    obd_loc_key                 = COALESCE(l.loc_key,-1),
    oub_doc_loc_code       		= s.wms_oub_doc_loc_code,
		oub_outbound_ord       	= s.wms_oub_outbound_ord,
		oub_doc_lineno       	= s.wms_oub_doc_lineno,
		oub_doc_ou       		= s.wms_oub_doc_ou,
		oub_doc_type       		= s.wms_oub_doc_type,
		oub_doc_attach       	= s.wms_oub_doc_attach,
		oub_doc_hdn_attach      = s.wms_oub_doc_hdn_attach,
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_doc_detail s
	INNER JOIN dwh.f_outboundheader ob
	on  s.wms_oub_doc_ou = ob.oub_ou
	and s.wms_oub_doc_loc_code = ob.oub_loc_code 
	and s.wms_oub_outbound_ord =ob.oub_outbound_ord
	
		LEFT JOIN dwh.d_location L 		
		ON s.wms_oub_doc_loc_code 	= L.loc_code 
        AND s.wms_oub_doc_ou      = L.loc_ou

  

    WHERE   t.oub_doc_loc_code       	= s.wms_oub_doc_loc_code
					AND	t.oub_outbound_ord       	= s.wms_oub_outbound_ord
					AND	t.oub_doc_lineno        	= s.wms_oub_doc_lineno
						AND t.oub_doc_ou          		= s.wms_oub_doc_ou
						AND t.obh_hr_key  =    ob.obh_hr_key;
 
/*
   
   		DELETE FROM dwh.f_outboundDocDetail FH
		USING stg.stg_wms_outbound_doc_detail OH
		WHERE FH.oub_doc_loc_code       = OH.wms_oub_doc_loc_code
		AND	FH.oub_outbound_ord       	= OH.wms_oub_outbound_ord
		AND	FH.oub_doc_lineno        	= OH.wms_oub_doc_lineno
		AND FH.oub_doc_ou          		= OH.wms_oub_doc_ou;
-- 		AND COALESCE(ob.oub_modified_date,ob.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
 
    GET DIAGNOSTICS updcnt = ROW_COUNT;
--	select 0 into updcnt;

	INSERT INTO dwh.f_outboundDocDetail
	(    obh_hr_key,obd_loc_key,
					oub_doc_loc_code,
          oub_outbound_ord,
          oub_doc_lineno,
          oub_doc_ou,
          oub_doc_type,
          oub_doc_attach,
          oub_doc_hdn_attach,
       etlactiveind,			     etljobname
		, envsourcecd,                     datasourcecd,                 etlcreatedatetime
	)
	
	SELECT 

      ob.obh_hr_key,COALESCE(l.loc_key,-1),OH.wms_oub_doc_loc_code,
      OH.wms_oub_outbound_ord,
      OH.wms_oub_doc_lineno,
      OH.wms_oub_doc_ou,
      OH.wms_oub_doc_type,
      OH.wms_oub_doc_attach,
      OH.wms_oub_doc_hdn_attach,          1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,                      NOW()
      
	FROM stg.stg_wms_outbound_doc_detail OH
	INNER JOIN dwh.f_outboundheader ob
		on  OH.wms_oub_doc_ou = ob.oub_ou
		and OH.wms_oub_doc_loc_code = ob.oub_loc_code 
		and OH.wms_oub_outbound_ord =ob.oub_outbound_ord
	LEFT JOIN dwh.d_location L 		
		ON OH.wms_oub_doc_loc_code 	= L.loc_code 
        AND OH.wms_oub_doc_ou      = L.loc_ou

	LEFT JOIN dwh.f_outboundDocDetail FH 	
		ON FH.oub_doc_loc_code       	= OH.wms_oub_doc_loc_code
		AND	FH.oub_outbound_ord       	= OH.wms_oub_outbound_ord
		AND	FH.oub_doc_lineno        	= OH.wms_oub_doc_lineno
		AND FH.oub_doc_ou          		= OH.wms_oub_doc_ou
        AND FH.obh_hr_key 				=    ob.obh_hr_key
	    WHERE FH.oub_doc_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
/*	
	UPDATE dwh.f_outboundDocDetail s
    SET obh_hr_key  			   =    ob.obh_hr_key,
		etlupdatedatetime          =    NOW()
	FROM dwh.f_outboundheader ob
	where   s.oub_doc_ou 		= 	ob.oub_ou
	and 	s.oub_doc_loc_code 	= 	ob.oub_loc_code 
	and 	s.oub_outbound_ord 	=	ob.oub_outbound_ord
	and COALESCE(ob.oub_modified_date,ob.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/	
	
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_doc_detail

	(
	    wms_oub_doc_loc_code,	wms_oub_outbound_ord,		wms_oub_doc_lineno,
		wms_oub_doc_ou,			wms_oub_doc_type,			wms_oub_doc_attach,
		wms_oub_doc_hdn_attach,	etlcreateddatetime
	)
	SELECT 
		wms_oub_doc_loc_code,	wms_oub_outbound_ord,		wms_oub_doc_lineno,
		wms_oub_doc_ou,			wms_oub_doc_type,			wms_oub_doc_attach,
		wms_oub_doc_hdn_attach, etlcreateddatetime
	FROM stg.stg_wms_outbound_doc_detail;
    END IF;
ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 		 
    
EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
        
       select 0 into inscnt;
       select 0 into updcnt;
  
END;
$$;


ALTER PROCEDURE dwh.usp_f_outbounddocdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outbounddocdetailweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outbounddocdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
	p_interval integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag ,h.depsource, d.intervaldays
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource, p_interval
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN	

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_doc_detail;

	UPDATE dwh.f_outboundDocDetail t
    SET 
	
	obh_hr_key  				=    ob.obh_hr_key,
    obd_loc_key                 = COALESCE(l.loc_key,-1),
    oub_doc_loc_code       		= s.wms_oub_doc_loc_code,
		oub_outbound_ord       	= s.wms_oub_outbound_ord,
		oub_doc_lineno       	= s.wms_oub_doc_lineno,
		oub_doc_ou       		= s.wms_oub_doc_ou,
		oub_doc_type       		= s.wms_oub_doc_type,
		oub_doc_attach       	= s.wms_oub_doc_attach,
		oub_doc_hdn_attach      = s.wms_oub_doc_hdn_attach,
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_doc_detail s
	INNER JOIN dwh.f_outboundheader ob
	on  s.wms_oub_doc_ou = ob.oub_ou
	and s.wms_oub_doc_loc_code = ob.oub_loc_code 
	and s.wms_oub_outbound_ord =ob.oub_outbound_ord
	
		LEFT JOIN dwh.d_location L 		
		ON s.wms_oub_doc_loc_code 	= L.loc_code 
        AND s.wms_oub_doc_ou      = L.loc_ou

  

    WHERE   t.oub_doc_loc_code       	= s.wms_oub_doc_loc_code
					AND	t.oub_outbound_ord       	= s.wms_oub_outbound_ord
					AND	t.oub_doc_lineno        	= s.wms_oub_doc_lineno
						AND t.oub_doc_ou          		= s.wms_oub_doc_ou
						AND t.obh_hr_key  =    ob.obh_hr_key;
 
/*
   
   		DELETE FROM dwh.f_outboundDocDetail FH
		USING stg.stg_wms_outbound_doc_detail OH
		WHERE FH.oub_doc_loc_code       = OH.wms_oub_doc_loc_code
		AND	FH.oub_outbound_ord       	= OH.wms_oub_outbound_ord
		AND	FH.oub_doc_lineno        	= OH.wms_oub_doc_lineno
		AND FH.oub_doc_ou          		= OH.wms_oub_doc_ou;
-- 		AND COALESCE(ob.oub_modified_date,ob.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
 
    GET DIAGNOSTICS updcnt = ROW_COUNT;
--	select 0 into updcnt;

	INSERT INTO dwh.f_outboundDocDetail
	(    obh_hr_key,obd_loc_key,
					oub_doc_loc_code,
          oub_outbound_ord,
          oub_doc_lineno,
          oub_doc_ou,
          oub_doc_type,
          oub_doc_attach,
          oub_doc_hdn_attach,
       etlactiveind,			     etljobname
		, envsourcecd,                     datasourcecd,                 etlcreatedatetime
	)
	
	SELECT 

      ob.obh_hr_key,COALESCE(l.loc_key,-1),OH.wms_oub_doc_loc_code,
      OH.wms_oub_outbound_ord,
      OH.wms_oub_doc_lineno,
      OH.wms_oub_doc_ou,
      OH.wms_oub_doc_type,
      OH.wms_oub_doc_attach,
      OH.wms_oub_doc_hdn_attach,          1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,                      NOW()
      
	FROM stg.stg_wms_outbound_doc_detail OH
	INNER JOIN dwh.f_outboundheader ob
		on  OH.wms_oub_doc_ou = ob.oub_ou
		and OH.wms_oub_doc_loc_code = ob.oub_loc_code 
		and OH.wms_oub_outbound_ord =ob.oub_outbound_ord
	LEFT JOIN dwh.d_location L 		
		ON OH.wms_oub_doc_loc_code 	= L.loc_code 
        AND OH.wms_oub_doc_ou      = L.loc_ou

	LEFT JOIN dwh.f_outboundDocDetail FH 	
		ON FH.oub_doc_loc_code       	= OH.wms_oub_doc_loc_code
		AND	FH.oub_outbound_ord       	= OH.wms_oub_outbound_ord
		AND	FH.oub_doc_lineno        	= OH.wms_oub_doc_lineno
		AND FH.oub_doc_ou          		= OH.wms_oub_doc_ou
        AND FH.obh_hr_key 				=    ob.obh_hr_key
	    WHERE FH.oub_doc_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	update dwh.f_outboundDocDetail t1
	set etlactiveind =  0,
	etlupdatedatetime = Now()::timestamp
	from dwh.f_outboundDocDetail t
	left join stg.stg_wms_outbound_doc_detail s
	on t.oub_doc_loc_code       	= s.wms_oub_doc_loc_code
	AND	t.oub_outbound_ord       	= s.wms_oub_outbound_ord
	AND	t.oub_doc_lineno        	= s.wms_oub_doc_lineno
	AND t.oub_doc_ou          		= s.wms_oub_doc_ou
	AND t.obh_hr_key  =    t1.obh_hr_key
	WHERE COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
	AND s.wms_oub_doc_ou is null;
	
	--GET DIAGNOSTICS updcnt = ROW_COUNT;
	
/*	
	UPDATE dwh.f_outboundDocDetail s
    SET obh_hr_key  			   =    ob.obh_hr_key,
		etlupdatedatetime          =    NOW()
	FROM dwh.f_outboundheader ob
	where   s.oub_doc_ou 		= 	ob.oub_ou
	and 	s.oub_doc_loc_code 	= 	ob.oub_loc_code 
	and 	s.oub_outbound_ord 	=	ob.oub_outbound_ord
	and COALESCE(ob.oub_modified_date,ob.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/	
	
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_doc_detail

	(
	    wms_oub_doc_loc_code,	wms_oub_outbound_ord,		wms_oub_doc_lineno,
		wms_oub_doc_ou,			wms_oub_doc_type,			wms_oub_doc_attach,
		wms_oub_doc_hdn_attach,	etlcreateddatetime
	)
	SELECT 
		wms_oub_doc_loc_code,	wms_oub_outbound_ord,		wms_oub_doc_lineno,
		wms_oub_doc_ou,			wms_oub_doc_type,			wms_oub_doc_attach,
		wms_oub_doc_hdn_attach, etlcreateddatetime
	FROM stg.stg_wms_outbound_doc_detail;
    END IF;
ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 		 
    
EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
        
       select 0 into inscnt;
       select 0 into updcnt;
  
END;
$$;


ALTER PROCEDURE dwh.usp_f_outbounddocdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_header;



    UPDATE dwh.F_OutboundHeader t
    SET
        obh_loc_key     				= COALESCE(l.loc_key,-1),
        obh_cust_key    				= COALESCE(c.customer_key,-1),
		oub_orderdatekey				= COALESCE(d.datekey,-1),
        oub_prim_rf_dc_typ               = s.wms_oub_prim_rf_dc_typ,
        oub_prim_rf_dc_no                = s.wms_oub_prim_rf_dc_no,
        oub_prim_rf_dc_date              = s.wms_oub_prim_rf_dc_date,
        oub_orderdate                    = s.wms_oub_orderdate,
        oub_ob_status                    = s.wms_oub_ob_status,
        oub_order_type                   = s.wms_oub_order_type,
        oub_order_priority               = s.wms_oub_order_priority,
        oub_urgent_chk                   = s.wms_oub_urgent_chk,
        oub_cust_code                    = s.wms_oub_cust_code,
        oub_cust_type                    = s.wms_oub_cust_type,
        oub_end_cust_ref_doc             = s.wms_oub_end_cust_ref_doc,
        oub_ord_src                      = s.wms_oub_ord_src,
        oub_amendno                      = s.wms_oub_amendno,
        oub_refdoctype                   = s.wms_oub_refdoctype,
        oub_refdocno                     = s.wms_oub_refdocno,
        oub_refdocdate                   = s.wms_oub_refdocdate,
        oub_carriername                  = s.wms_oub_carriername,
        oub_shipment_mode                = s.wms_oub_shipment_mode,
        oub_shipment_type                = s.wms_oub_shipment_type,
        oub_cnsgn_code_shpto             = s.wms_oub_cnsgn_code_shpto,
        oub_ship_point_id                = s.wms_oub_ship_point_id,
        oub_address1                     = s.wms_oub_address1,
        oub_address2                     = s.wms_oub_address2,
        oub_address3                     = s.wms_oub_address3,
        oub_postcode                     = s.wms_oub_postcode,
        oub_country                      = s.wms_oub_country,
        oub_state                        = s.wms_oub_state,
        oub_city                         = s.wms_oub_city,
        oub_phoneno                      = s.wms_oub_phoneno,
        oub_delivery_date                = s.wms_oub_delivery_date,
        oub_service_from                 = s.wms_oub_service_from,
        oub_service_to                   = s.wms_oub_service_to,
        oub_itm_plan_gd_iss_dt           = s.wms_oub_itm_plan_gd_iss_dt,
        oub_itm_plan_dt_iss              = s.wms_oub_itm_plan_dt_iss,
        oub_instructions                 = s.wms_oub_instructions,
        oub_incoterms                    = s.wms_oub_incoterms,
        oub_created_by                   = s.wms_oub_created_by,
        oub_created_date                 = s.wms_oub_created_date,
        oub_modified_by                  = s.wms_oub_modified_by,
        oub_modified_date                = s.wms_oub_modified_date,
        oub_timestamp                    = s.wms_oub_timestamp,
        oub_operation_status             = s.wms_oub_operation_status,
        oub_contract_id                  = s.wms_oub_contract_id,
        oub_contract_amend_no            = s.wms_oub_contract_amend_no,
        oub_subservice_type              = s.wms_oub_subservice_type,
        oub_shp_name                     = s.wms_oub_shp_name,
        oub_shp_zone                     = s.wms_oub_shp_zone,
        oub_shp_sub_zne                  = s.wms_oub_shp_sub_zne,
        oub_shp_region                   = s.wms_oub_shp_region,
        oub_pickup_from_date_time        = s.wms_oub_pickup_from_date_time,
        oub_pickup_to_date_time          = s.wms_oub_pickup_to_date_time,
        oub_transport_location           = s.wms_oub_transport_location,
        oub_transport_service            = s.wms_oub_transport_service,
        oub_gen_req_id                   = s.wms_oub_gen_req_id,
        oub_gen_from                     = s.wms_oub_gen_from,
        oub_opfeboty_bil_status          = s.wms_oub_opfeboty_bil_status,
        oub_exp_stk                      = s.wms_oub_exp_stk,
        oub_consolidation_no             = s.wms_oub_consolidation_no,
        oub_bill_to_name                 = s.wms_oub_bill_to_name,
        oub_bill_det_addr_line1          = s.wms_oub_bill_det_addr_line1,
        oub_bill_det_addr_line2          = s.wms_oub_bill_det_addr_line2,
        oub_bill_det_post_code           = s.wms_oub_bill_det_post_code,
        oub_bill_det_country             = s.wms_oub_bill_det_country,
        oub_bill_det_city                = s.wms_oub_bill_det_city,
        oub_bill_det_state               = s.wms_oub_bill_det_state,
        oub_bill_det_phone               = s.wms_oub_bill_det_phone,
        oub_bill_det_ship_addr           = s.wms_oub_bill_det_ship_addr,
        oub_consgn_name                  = s.wms_oub_consgn_name,
        oub_cancel                       = s.wms_oub_cancel,
        oub_cancel_code                  = s.wms_oub_cancel_code,
        oub_prt_full_fill                = s.wms_oub_prt_full_fill,
        oub_reason_code                  = s.wms_oub_reason_code,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_wms_outbound_header s
	 LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
	LEFT JOIN dwh.d_date d
		ON s.wms_oub_orderdate::date = d.dateactual
    WHERE t.oub_ou = s.wms_oub_ou
    AND t.oub_loc_code = s.wms_oub_loc_code
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord;

    GET DIAGNOSTICS updcnt = ROW_COUNT;
	

/*
	DELETE from dwh.F_OutboundHeader t
	USING stg.stg_wms_outbound_header s
    where s.wms_oub_ou = t.oub_ou
    AND s.wms_oub_loc_code = t.oub_loc_code
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord;
-- 	where COALESCE(oub_modified_date,oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    INSERT INTO dwh.F_OutboundHeader
    (
		obh_loc_key, obh_cust_key, oub_orderdatekey,
		oub_ou, oub_loc_code, oub_outbound_ord, oub_prim_rf_dc_typ, oub_prim_rf_dc_no, oub_prim_rf_dc_date, 
		oub_orderdate, oub_ob_status, oub_order_type, oub_order_priority, oub_urgent_chk, oub_cust_code, 
		oub_cust_type, oub_end_cust_ref_doc, oub_ord_src, oub_amendno, oub_refdoctype, oub_refdocno, 
		oub_refdocdate, oub_carriername, oub_shipment_mode, oub_shipment_type, oub_cnsgn_code_shpto, 
		oub_ship_point_id, oub_address1, oub_address2, oub_address3, oub_postcode, oub_country, oub_state, 
		oub_city, oub_phoneno, oub_delivery_date, oub_service_from, oub_service_to, oub_itm_plan_gd_iss_dt, 
		oub_itm_plan_dt_iss, oub_instructions, oub_incoterms, oub_created_by, oub_created_date, oub_modified_by, 
		oub_modified_date, oub_timestamp, oub_operation_status, oub_contract_id, oub_contract_amend_no, oub_subservice_type, oub_shp_name, oub_shp_zone, oub_shp_sub_zne, oub_shp_region, oub_pickup_from_date_time, oub_pickup_to_date_time, oub_transport_location, oub_transport_service, oub_gen_req_id, oub_gen_from, oub_opfeboty_bil_status, oub_exp_stk, oub_consolidation_no, oub_bill_to_name, oub_bill_det_addr_line1, oub_bill_det_addr_line2, oub_bill_det_post_code, oub_bill_det_country, oub_bill_det_city, oub_bill_det_state, oub_bill_det_phone, oub_bill_det_ship_addr, oub_consgn_name, oub_cancel, oub_cancel_code, oub_prt_full_fill, oub_reason_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(l.loc_key,-1),COALESCE(c.customer_key,-1),COALESCE(d.datekey,-1),
	   s.wms_oub_ou, s.wms_oub_loc_code, s.wms_oub_outbound_ord, s.wms_oub_prim_rf_dc_typ, s.wms_oub_prim_rf_dc_no, s.wms_oub_prim_rf_dc_date, s.wms_oub_orderdate, s.wms_oub_ob_status, s.wms_oub_order_type, s.wms_oub_order_priority, s.wms_oub_urgent_chk, s.wms_oub_cust_code, s.wms_oub_cust_type, s.wms_oub_end_cust_ref_doc, s.wms_oub_ord_src, s.wms_oub_amendno, s.wms_oub_refdoctype, s.wms_oub_refdocno, s.wms_oub_refdocdate, s.wms_oub_carriername, s.wms_oub_shipment_mode, s.wms_oub_shipment_type, s.wms_oub_cnsgn_code_shpto, s.wms_oub_ship_point_id, s.wms_oub_address1, s.wms_oub_address2, s.wms_oub_address3, s.wms_oub_postcode, s.wms_oub_country, s.wms_oub_state, s.wms_oub_city, s.wms_oub_phoneno, s.wms_oub_delivery_date, s.wms_oub_service_from, s.wms_oub_service_to, s.wms_oub_itm_plan_gd_iss_dt, s.wms_oub_itm_plan_dt_iss, s.wms_oub_instructions, s.wms_oub_incoterms, s.wms_oub_created_by, s.wms_oub_created_date, s.wms_oub_modified_by, s.wms_oub_modified_date, s.wms_oub_timestamp, s.wms_oub_operation_status, s.wms_oub_contract_id, s.wms_oub_contract_amend_no, s.wms_oub_subservice_type, s.wms_oub_shp_name, s.wms_oub_shp_zone, s.wms_oub_shp_sub_zne, s.wms_oub_shp_region, s.wms_oub_pickup_from_date_time, s.wms_oub_pickup_to_date_time, s.wms_oub_transport_location, s.wms_oub_transport_service, s.wms_oub_gen_req_id, s.wms_oub_gen_from, s.wms_oub_opfeboty_bil_status, s.wms_oub_exp_stk, s.wms_oub_consolidation_no, s.wms_oub_bill_to_name, s.wms_oub_bill_det_addr_line1, s.wms_oub_bill_det_addr_line2, s.wms_oub_bill_det_post_code, s.wms_oub_bill_det_country, s.wms_oub_bill_det_city, s.wms_oub_bill_det_state, s.wms_oub_bill_det_phone, s.wms_oub_bill_det_ship_addr, s.wms_oub_consgn_name, s.wms_oub_cancel, s.wms_oub_cancel_code, s.wms_oub_prt_full_fill, s.wms_oub_reason_code, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_header s
	 LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
	LEFT JOIN dwh.d_date d
		ON s.wms_oub_orderdate::date = d.dateactual
    LEFT JOIN dwh.F_OutboundHeader t
    ON s.wms_oub_ou = t.oub_ou
    AND s.wms_oub_loc_code = t.oub_loc_code
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    WHERE t.oub_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	--select 0 into updcnt;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_header
    (
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_edifee_bil_status, wms_oub_ordprfee_bil_status, wms_oub_baschgpo_bil_status, wms_oub_priority_bil_status, wms_oub_kmedipro_bil_status, wms_oub_odopln_bil_status, wms_oub_gen_req_id, wms_oub_gen_from, wms_oub_opfeboty_bil_status, wms_oub_exp_stk, wms_oub_consolidation_no, wms_oub_channel_type, wms_oub_seller_type, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_consgn_name, wms_oub_cancel, wms_oub_cancel_code, wms_oub_prt_full_fill, wms_oub_staxcbuy_bil_status, wms_oub_orprfbos_bil_status, wms_oub_txchrgsl_bil_status, wms_oub_shpchrsl_bil_status, wms_oub_reason_code, wms_oub_odoprll_bil_status, wms_oub_verte_order_no, wms_oub_markprch_sell_bil_status, wms_oub_trippln_id, wms_oub_whexchpd_sell_bil_status, wms_oub_wechbain_sell_bil_status, wms_oub_chbtnsin_sell_bil_status, wms_oub_markmior_sell_bil_status, wms_oub_hcoqumot_sell_bil_status, wms_oub_hdchotqt_status, wms_oub_hcdeotqt_status, wms_oub_br_ou, wms_oub_chporcn_sell_bil_status, wms_oub_chactinv_sell_bil_status, wms_oub_ffgvsmmo_sell_bil_status, wms_oub_cupkslch_sell_bil_status, wms_transport_activity, etlcreateddatetime
    )
    SELECT
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_edifee_bil_status, wms_oub_ordprfee_bil_status, wms_oub_baschgpo_bil_status, wms_oub_priority_bil_status, wms_oub_kmedipro_bil_status, wms_oub_odopln_bil_status, wms_oub_gen_req_id, wms_oub_gen_from, wms_oub_opfeboty_bil_status, wms_oub_exp_stk, wms_oub_consolidation_no, wms_oub_channel_type, wms_oub_seller_type, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_consgn_name, wms_oub_cancel, wms_oub_cancel_code, wms_oub_prt_full_fill, wms_oub_staxcbuy_bil_status, wms_oub_orprfbos_bil_status, wms_oub_txchrgsl_bil_status, wms_oub_shpchrsl_bil_status, wms_oub_reason_code, wms_oub_odoprll_bil_status, wms_oub_verte_order_no, wms_oub_markprch_sell_bil_status, wms_oub_trippln_id, wms_oub_whexchpd_sell_bil_status, wms_oub_wechbain_sell_bil_status, wms_oub_chbtnsin_sell_bil_status, wms_oub_markmior_sell_bil_status, wms_oub_hcoqumot_sell_bil_status, wms_oub_hdchotqt_status, wms_oub_hcdeotqt_status, wms_oub_br_ou, wms_oub_chporcn_sell_bil_status, wms_oub_chactinv_sell_bil_status, wms_oub_ffgvsmmo_sell_bil_status, wms_oub_cupkslch_sell_bil_status, wms_transport_activity, etlcreateddatetime
    FROM stg.stg_wms_outbound_header;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundheaderhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundheaderhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_header_h;

    UPDATE dwh.F_OutboundHeaderHistory t
    SET

        obh_loc_key                          = COALESCE(l.loc_key,-1),
        obh_cust_key                         = COALESCE(c.customer_key,-1),
        oub_orderdatekey                     = COALESCE(d.datekey,-1),
        oub_prim_rf_dc_typ                   = s.wms_oub_prim_rf_dc_typ,
        oub_prim_rf_dc_no                    = s.wms_oub_prim_rf_dc_no,
        oub_prim_rf_dc_date                  = s.wms_oub_prim_rf_dc_date,
        oub_orderdate                        = s.wms_oub_orderdate,
        oub_ob_status                        = s.wms_oub_ob_status,
        oub_order_type                       = s.wms_oub_order_type,
        oub_order_priority                   = s.wms_oub_order_priority,
        oub_urgent_chk                       = s.wms_oub_urgent_chk,
        oub_cust_code                        = s.wms_oub_cust_code,
        oub_cust_type                        = s.wms_oub_cust_type,
        oub_end_cust_ref_doc                 = s.wms_oub_end_cust_ref_doc,
        oub_address_id                       = s.wms_oub_address_id,
        oub_ord_src                          = s.wms_oub_ord_src,
        oub_refdoctype                       = s.wms_oub_refdoctype,
        oub_refdocno                         = s.wms_oub_refdocno,
        oub_refdocdate                       = s.wms_oub_refdocdate,
        oub_secrefdoctype1                   = s.wms_oub_secrefdoctype1,
        oub_secrefdoctype2                   = s.wms_oub_secrefdoctype2,
        oub_secrefdoctype3                   = s.wms_oub_secrefdoctype3,
        oub_secrefdocno1                     = s.wms_oub_secrefdocno1,
        oub_secrefdocno2                     = s.wms_oub_secrefdocno2,
        oub_secrefdocno3                     = s.wms_oub_secrefdocno3,
        oub_secrefdocdate1                   = s.wms_oub_secrefdocdate1,
        oub_secrefdocdate2                   = s.wms_oub_secrefdocdate2,
        oub_secrefdocdate3                   = s.wms_oub_secrefdocdate3,
        oub_carriername                      = s.wms_oub_carriername,
        oub_shipment_mode                    = s.wms_oub_shipment_mode,
        oub_shipment_type                    = s.wms_oub_shipment_type,
        oub_cnsgn_code_shpto                 = s.wms_oub_cnsgn_code_shpto,
        oub_ship_point_id                    = s.wms_oub_ship_point_id,
        oub_address1                         = s.wms_oub_address1,
        oub_address2                         = s.wms_oub_address2,
        oub_address3                         = s.wms_oub_address3,
        oub_unqaddress                       = s.wms_oub_unqaddress,
        oub_postcode                         = s.wms_oub_postcode,
        oub_country                          = s.wms_oub_country,
        oub_state                            = s.wms_oub_state,
        oub_city                             = s.wms_oub_city,
        oub_phoneno                          = s.wms_oub_phoneno,
        oub_delivery_date                    = s.wms_oub_delivery_date,
        oub_service_from                     = s.wms_oub_service_from,
        oub_service_to                       = s.wms_oub_service_to,
        oub_itm_plan_gd_iss_dt               = s.wms_oub_itm_plan_gd_iss_dt,
        oub_itm_plan_dt_iss                  = s.wms_oub_itm_plan_dt_iss,
        oub_instructions                     = s.wms_oub_instructions,
        oub_incoterms                        = s.wms_oub_incoterms,
        oub_inco_location                    = s.wms_oub_inco_location,
        oub_country_of_origin                = s.wms_oub_country_of_origin,
        oub_port_of_shipment                 = s.wms_oub_port_of_shipment,
        oub_destination_country              = s.wms_oub_destination_country,
        oub_port_destination                 = s.wms_oub_port_destination,
        oub_created_by                       = s.wms_oub_created_by,
        oub_created_date                     = s.wms_oub_created_date,
        oub_modified_by                      = s.wms_oub_modified_by,
        oub_modified_date                    = s.wms_oub_modified_date,
        oub_timestamp                        = s.wms_oub_timestamp,
        oub_userdefined1                     = s.wms_oub_userdefined1,
        oub_userdefined2                     = s.wms_oub_userdefined2,
        oub_userdefined3                     = s.wms_oub_userdefined3,
        oub_operation_status                 = s.wms_oub_operation_status,
        oub_contract_id                      = s.wms_oub_contract_id,
        oub_contract_amend_no                = s.wms_oub_contract_amend_no,
        oub_subservice_type                  = s.wms_oub_subservice_type,
        oub_shp_name                         = s.wms_oub_shp_name,
        oub_shp_zone                         = s.wms_oub_shp_zone,
        oub_shp_sub_zne                      = s.wms_oub_shp_sub_zne,
        oub_shp_region                       = s.wms_oub_shp_region,
        oub_pickup_from_date_time            = s.wms_oub_pickup_from_date_time,
        oub_pickup_to_date_time              = s.wms_oub_pickup_to_date_time,
        oub_transport_location               = s.wms_oub_transport_location,
        oub_transport_service                = s.wms_oub_transport_service,
        oub_bill_to_name                     = s.wms_oub_bill_to_name,
        oub_bill_det_addr_line1              = s.wms_oub_bill_det_addr_line1,
        oub_bill_det_addr_line2              = s.wms_oub_bill_det_addr_line2,
        oub_bill_det_post_code               = s.wms_oub_bill_det_post_code,
        oub_bill_det_country                 = s.wms_oub_bill_det_country,
        oub_bill_det_city                    = s.wms_oub_bill_det_city,
        oub_bill_det_state                   = s.wms_oub_bill_det_state,
        oub_bill_det_phone                   = s.wms_oub_bill_det_phone,
        oub_bill_det_ship_addr               = s.wms_oub_bill_det_ship_addr,
        oub_bill_det_pay_gate_auth_no        = s.wms_oub_bill_det_pay_gate_auth_no,
        oub_bill_det_auth_date               = s.wms_oub_bill_det_auth_date,
        oub_bill_det_pay_sts                 = s.wms_oub_bill_det_pay_sts,
        oub_cancel                           = s.wms_oub_cancel,
        oub_cancel_code                      = s.wms_oub_cancel_code,
        oub_reason_code                      = s.wms_oub_reason_code,
        oub_trippln_id                       = s.wms_oub_trippln_id,
        oub_br_ou                            = s.wms_oub_br_ou,
        etlactiveind                         = 1,
        etljobname                           = p_etljobname,
        envsourcecd                          = p_envsourcecd,
        datasourcecd                         = p_datasourcecd,
        etlupdatedatetime                    = NOW()
    FROM stg.stg_wms_outbound_header_h s
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
    LEFT JOIN dwh.d_date d
        ON s.wms_oub_orderdate::date = d.dateactual
    WHERE t.oub_ou = s.wms_oub_ou
    AND t.oub_loc_code = s.wms_oub_loc_code
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_amendno = s.wms_oub_amendno;

     GET DIAGNOSTICS updcnt = ROW_COUNT;
	 
-- 			Delete from dwh.F_OutboundHeaderHistory t
-- 			USING stg.stg_wms_outbound_header_h s
-- 			WHERE t.oub_ou = s.wms_oub_ou
-- 	    AND t.oub_loc_code = s.wms_oub_loc_code
-- 	    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--         AND t.oub_amendno = s.wms_oub_amendno;
		
-- --AND COALESCE(wms_oub_modified_date,wms_oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

    INSERT INTO dwh.F_OutboundHeaderHistory
    (
        obh_loc_key,obh_cust_key,oub_orderdatekey,oub_ou, oub_loc_code, oub_outbound_ord, oub_prim_rf_dc_typ, oub_prim_rf_dc_no, oub_prim_rf_dc_date, oub_orderdate, oub_ob_status, oub_order_type, oub_order_priority, oub_urgent_chk, oub_cust_code, oub_cust_type, oub_end_cust_ref_doc, oub_address_id, oub_ord_src, oub_amendno, oub_refdoctype, oub_refdocno, oub_refdocdate, oub_secrefdoctype1, oub_secrefdoctype2, oub_secrefdoctype3, oub_secrefdocno1, oub_secrefdocno2, oub_secrefdocno3, oub_secrefdocdate1, oub_secrefdocdate2, oub_secrefdocdate3, oub_carriername, oub_shipment_mode, oub_shipment_type, oub_cnsgn_code_shpto, oub_ship_point_id, oub_address1, oub_address2, oub_address3, oub_unqaddress, oub_postcode, oub_country, oub_state, oub_city, oub_phoneno, oub_delivery_date, oub_service_from, oub_service_to, oub_itm_plan_gd_iss_dt, oub_itm_plan_dt_iss, oub_instructions, oub_incoterms, oub_inco_location, oub_country_of_origin, oub_port_of_shipment, oub_destination_country, oub_port_destination, oub_created_by, oub_created_date, oub_modified_by, oub_modified_date, oub_timestamp, oub_userdefined1, oub_userdefined2, oub_userdefined3, oub_operation_status, oub_contract_id, oub_contract_amend_no, oub_subservice_type, oub_shp_name, oub_shp_zone, oub_shp_sub_zne, oub_shp_region, oub_pickup_from_date_time, oub_pickup_to_date_time, oub_transport_location, oub_transport_service, oub_bill_to_name, oub_bill_det_addr_line1, oub_bill_det_addr_line2, oub_bill_det_post_code, oub_bill_det_country, oub_bill_det_city, oub_bill_det_state, oub_bill_det_phone, oub_bill_det_ship_addr, oub_bill_det_pay_gate_auth_no, oub_bill_det_auth_date, oub_bill_det_pay_sts, oub_cancel, oub_cancel_code, oub_reason_code, oub_trippln_id, oub_br_ou, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(l.loc_key,-1),COALESCE(c.customer_key,-1),COALESCE(d.datekey,-1), s.wms_oub_ou, s.wms_oub_loc_code, s.wms_oub_outbound_ord, s.wms_oub_prim_rf_dc_typ, s.wms_oub_prim_rf_dc_no, s.wms_oub_prim_rf_dc_date, s.wms_oub_orderdate, s.wms_oub_ob_status, s.wms_oub_order_type, s.wms_oub_order_priority, s.wms_oub_urgent_chk, s.wms_oub_cust_code, s.wms_oub_cust_type, s.wms_oub_end_cust_ref_doc, s.wms_oub_address_id, s.wms_oub_ord_src, s.wms_oub_amendno, s.wms_oub_refdoctype, s.wms_oub_refdocno, s.wms_oub_refdocdate, s.wms_oub_secrefdoctype1, s.wms_oub_secrefdoctype2, s.wms_oub_secrefdoctype3, s.wms_oub_secrefdocno1, s.wms_oub_secrefdocno2, s.wms_oub_secrefdocno3, s.wms_oub_secrefdocdate1, s.wms_oub_secrefdocdate2, s.wms_oub_secrefdocdate3, s.wms_oub_carriername, s.wms_oub_shipment_mode, s.wms_oub_shipment_type, s.wms_oub_cnsgn_code_shpto, s.wms_oub_ship_point_id, s.wms_oub_address1, s.wms_oub_address2, s.wms_oub_address3, s.wms_oub_unqaddress, s.wms_oub_postcode, s.wms_oub_country, s.wms_oub_state, s.wms_oub_city, s.wms_oub_phoneno, s.wms_oub_delivery_date, s.wms_oub_service_from, s.wms_oub_service_to, s.wms_oub_itm_plan_gd_iss_dt, s.wms_oub_itm_plan_dt_iss, s.wms_oub_instructions, s.wms_oub_incoterms, s.wms_oub_inco_location, s.wms_oub_country_of_origin, s.wms_oub_port_of_shipment, s.wms_oub_destination_country, s.wms_oub_port_destination, s.wms_oub_created_by, s.wms_oub_created_date, s.wms_oub_modified_by, s.wms_oub_modified_date, s.wms_oub_timestamp, s.wms_oub_userdefined1, s.wms_oub_userdefined2, s.wms_oub_userdefined3, s.wms_oub_operation_status, s.wms_oub_contract_id, s.wms_oub_contract_amend_no, s.wms_oub_subservice_type, s.wms_oub_shp_name, s.wms_oub_shp_zone, s.wms_oub_shp_sub_zne, s.wms_oub_shp_region, s.wms_oub_pickup_from_date_time, s.wms_oub_pickup_to_date_time, s.wms_oub_transport_location, s.wms_oub_transport_service, s.wms_oub_bill_to_name, s.wms_oub_bill_det_addr_line1, s.wms_oub_bill_det_addr_line2, s.wms_oub_bill_det_post_code, s.wms_oub_bill_det_country, s.wms_oub_bill_det_city, s.wms_oub_bill_det_state, s.wms_oub_bill_det_phone, s.wms_oub_bill_det_ship_addr, s.wms_oub_bill_det_pay_gate_auth_no, s.wms_oub_bill_det_auth_date, s.wms_oub_bill_det_pay_sts, s.wms_oub_cancel, s.wms_oub_cancel_code, s.wms_oub_reason_code, s.wms_oub_trippln_id, s.wms_oub_br_ou, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_header_h s
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
    LEFT JOIN dwh.d_date d
        ON s.wms_oub_orderdate::date = d.dateactual
    LEFT JOIN dwh.F_OutboundHeaderHistory t
    ON s.wms_oub_ou = t.oub_ou
    AND s.wms_oub_loc_code = t.oub_loc_code
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_amendno = t.oub_amendno
    WHERE t.oub_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_header_h
    (
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_cancel, wms_oub_cancel_code, wms_oub_reason_code, wms_oub_trippln_id, wms_oub_br_ou, etlcreateddatetime
    )
    SELECT
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_cancel, wms_oub_cancel_code, wms_oub_reason_code, wms_oub_trippln_id, wms_oub_br_ou, etlcreateddatetime
    FROM stg.stg_wms_outbound_header_h;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundheaderhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundheaderhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundheaderhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
	p_intervaldays integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_intervaldays
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_header_h;

    UPDATE dwh.F_OutboundHeaderHistory t
    SET

        obh_loc_key                          = COALESCE(l.loc_key,-1),
        obh_cust_key                         = COALESCE(c.customer_key,-1),
        oub_orderdatekey                     = COALESCE(d.datekey,-1),
        oub_prim_rf_dc_typ                   = s.wms_oub_prim_rf_dc_typ,
        oub_prim_rf_dc_no                    = s.wms_oub_prim_rf_dc_no,
        oub_prim_rf_dc_date                  = s.wms_oub_prim_rf_dc_date,
        oub_orderdate                        = s.wms_oub_orderdate,
        oub_ob_status                        = s.wms_oub_ob_status,
        oub_order_type                       = s.wms_oub_order_type,
        oub_order_priority                   = s.wms_oub_order_priority,
        oub_urgent_chk                       = s.wms_oub_urgent_chk,
        oub_cust_code                        = s.wms_oub_cust_code,
        oub_cust_type                        = s.wms_oub_cust_type,
        oub_end_cust_ref_doc                 = s.wms_oub_end_cust_ref_doc,
        oub_address_id                       = s.wms_oub_address_id,
        oub_ord_src                          = s.wms_oub_ord_src,
        oub_refdoctype                       = s.wms_oub_refdoctype,
        oub_refdocno                         = s.wms_oub_refdocno,
        oub_refdocdate                       = s.wms_oub_refdocdate,
        oub_secrefdoctype1                   = s.wms_oub_secrefdoctype1,
        oub_secrefdoctype2                   = s.wms_oub_secrefdoctype2,
        oub_secrefdoctype3                   = s.wms_oub_secrefdoctype3,
        oub_secrefdocno1                     = s.wms_oub_secrefdocno1,
        oub_secrefdocno2                     = s.wms_oub_secrefdocno2,
        oub_secrefdocno3                     = s.wms_oub_secrefdocno3,
        oub_secrefdocdate1                   = s.wms_oub_secrefdocdate1,
        oub_secrefdocdate2                   = s.wms_oub_secrefdocdate2,
        oub_secrefdocdate3                   = s.wms_oub_secrefdocdate3,
        oub_carriername                      = s.wms_oub_carriername,
        oub_shipment_mode                    = s.wms_oub_shipment_mode,
        oub_shipment_type                    = s.wms_oub_shipment_type,
        oub_cnsgn_code_shpto                 = s.wms_oub_cnsgn_code_shpto,
        oub_ship_point_id                    = s.wms_oub_ship_point_id,
        oub_address1                         = s.wms_oub_address1,
        oub_address2                         = s.wms_oub_address2,
        oub_address3                         = s.wms_oub_address3,
        oub_unqaddress                       = s.wms_oub_unqaddress,
        oub_postcode                         = s.wms_oub_postcode,
        oub_country                          = s.wms_oub_country,
        oub_state                            = s.wms_oub_state,
        oub_city                             = s.wms_oub_city,
        oub_phoneno                          = s.wms_oub_phoneno,
        oub_delivery_date                    = s.wms_oub_delivery_date,
        oub_service_from                     = s.wms_oub_service_from,
        oub_service_to                       = s.wms_oub_service_to,
        oub_itm_plan_gd_iss_dt               = s.wms_oub_itm_plan_gd_iss_dt,
        oub_itm_plan_dt_iss                  = s.wms_oub_itm_plan_dt_iss,
        oub_instructions                     = s.wms_oub_instructions,
        oub_incoterms                        = s.wms_oub_incoterms,
        oub_inco_location                    = s.wms_oub_inco_location,
        oub_country_of_origin                = s.wms_oub_country_of_origin,
        oub_port_of_shipment                 = s.wms_oub_port_of_shipment,
        oub_destination_country              = s.wms_oub_destination_country,
        oub_port_destination                 = s.wms_oub_port_destination,
        oub_created_by                       = s.wms_oub_created_by,
        oub_created_date                     = s.wms_oub_created_date,
        oub_modified_by                      = s.wms_oub_modified_by,
        oub_modified_date                    = s.wms_oub_modified_date,
        oub_timestamp                        = s.wms_oub_timestamp,
        oub_userdefined1                     = s.wms_oub_userdefined1,
        oub_userdefined2                     = s.wms_oub_userdefined2,
        oub_userdefined3                     = s.wms_oub_userdefined3,
        oub_operation_status                 = s.wms_oub_operation_status,
        oub_contract_id                      = s.wms_oub_contract_id,
        oub_contract_amend_no                = s.wms_oub_contract_amend_no,
        oub_subservice_type                  = s.wms_oub_subservice_type,
        oub_shp_name                         = s.wms_oub_shp_name,
        oub_shp_zone                         = s.wms_oub_shp_zone,
        oub_shp_sub_zne                      = s.wms_oub_shp_sub_zne,
        oub_shp_region                       = s.wms_oub_shp_region,
        oub_pickup_from_date_time            = s.wms_oub_pickup_from_date_time,
        oub_pickup_to_date_time              = s.wms_oub_pickup_to_date_time,
        oub_transport_location               = s.wms_oub_transport_location,
        oub_transport_service                = s.wms_oub_transport_service,
        oub_bill_to_name                     = s.wms_oub_bill_to_name,
        oub_bill_det_addr_line1              = s.wms_oub_bill_det_addr_line1,
        oub_bill_det_addr_line2              = s.wms_oub_bill_det_addr_line2,
        oub_bill_det_post_code               = s.wms_oub_bill_det_post_code,
        oub_bill_det_country                 = s.wms_oub_bill_det_country,
        oub_bill_det_city                    = s.wms_oub_bill_det_city,
        oub_bill_det_state                   = s.wms_oub_bill_det_state,
        oub_bill_det_phone                   = s.wms_oub_bill_det_phone,
        oub_bill_det_ship_addr               = s.wms_oub_bill_det_ship_addr,
        oub_bill_det_pay_gate_auth_no        = s.wms_oub_bill_det_pay_gate_auth_no,
        oub_bill_det_auth_date               = s.wms_oub_bill_det_auth_date,
        oub_bill_det_pay_sts                 = s.wms_oub_bill_det_pay_sts,
        oub_cancel                           = s.wms_oub_cancel,
        oub_cancel_code                      = s.wms_oub_cancel_code,
        oub_reason_code                      = s.wms_oub_reason_code,
        oub_trippln_id                       = s.wms_oub_trippln_id,
        oub_br_ou                            = s.wms_oub_br_ou,
        etlactiveind                         = 1,
        etljobname                           = p_etljobname,
        envsourcecd                          = p_envsourcecd,
        datasourcecd                         = p_datasourcecd,
        etlupdatedatetime                    = NOW()
    FROM stg.stg_wms_outbound_header_h s
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
    LEFT JOIN dwh.d_date d
        ON s.wms_oub_orderdate::date = d.dateactual
    WHERE t.oub_ou = s.wms_oub_ou
    AND t.oub_loc_code = s.wms_oub_loc_code
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_amendno = s.wms_oub_amendno;

     GET DIAGNOSTICS updcnt = ROW_COUNT;
	 
-- 			Delete from dwh.F_OutboundHeaderHistory t
-- 			USING stg.stg_wms_outbound_header_h s
-- 			WHERE t.oub_ou = s.wms_oub_ou
-- 	    AND t.oub_loc_code = s.wms_oub_loc_code
-- 	    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--         AND t.oub_amendno = s.wms_oub_amendno;
		
-- --AND COALESCE(wms_oub_modified_date,wms_oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

    INSERT INTO dwh.F_OutboundHeaderHistory
    (
        obh_loc_key,obh_cust_key,oub_orderdatekey,oub_ou, oub_loc_code, oub_outbound_ord, oub_prim_rf_dc_typ, oub_prim_rf_dc_no, oub_prim_rf_dc_date, oub_orderdate, oub_ob_status, oub_order_type, oub_order_priority, oub_urgent_chk, oub_cust_code, oub_cust_type, oub_end_cust_ref_doc, oub_address_id, oub_ord_src, oub_amendno, oub_refdoctype, oub_refdocno, oub_refdocdate, oub_secrefdoctype1, oub_secrefdoctype2, oub_secrefdoctype3, oub_secrefdocno1, oub_secrefdocno2, oub_secrefdocno3, oub_secrefdocdate1, oub_secrefdocdate2, oub_secrefdocdate3, oub_carriername, oub_shipment_mode, oub_shipment_type, oub_cnsgn_code_shpto, oub_ship_point_id, oub_address1, oub_address2, oub_address3, oub_unqaddress, oub_postcode, oub_country, oub_state, oub_city, oub_phoneno, oub_delivery_date, oub_service_from, oub_service_to, oub_itm_plan_gd_iss_dt, oub_itm_plan_dt_iss, oub_instructions, oub_incoterms, oub_inco_location, oub_country_of_origin, oub_port_of_shipment, oub_destination_country, oub_port_destination, oub_created_by, oub_created_date, oub_modified_by, oub_modified_date, oub_timestamp, oub_userdefined1, oub_userdefined2, oub_userdefined3, oub_operation_status, oub_contract_id, oub_contract_amend_no, oub_subservice_type, oub_shp_name, oub_shp_zone, oub_shp_sub_zne, oub_shp_region, oub_pickup_from_date_time, oub_pickup_to_date_time, oub_transport_location, oub_transport_service, oub_bill_to_name, oub_bill_det_addr_line1, oub_bill_det_addr_line2, oub_bill_det_post_code, oub_bill_det_country, oub_bill_det_city, oub_bill_det_state, oub_bill_det_phone, oub_bill_det_ship_addr, oub_bill_det_pay_gate_auth_no, oub_bill_det_auth_date, oub_bill_det_pay_sts, oub_cancel, oub_cancel_code, oub_reason_code, oub_trippln_id, oub_br_ou, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(l.loc_key,-1),COALESCE(c.customer_key,-1),COALESCE(d.datekey,-1), s.wms_oub_ou, s.wms_oub_loc_code, s.wms_oub_outbound_ord, s.wms_oub_prim_rf_dc_typ, s.wms_oub_prim_rf_dc_no, s.wms_oub_prim_rf_dc_date, s.wms_oub_orderdate, s.wms_oub_ob_status, s.wms_oub_order_type, s.wms_oub_order_priority, s.wms_oub_urgent_chk, s.wms_oub_cust_code, s.wms_oub_cust_type, s.wms_oub_end_cust_ref_doc, s.wms_oub_address_id, s.wms_oub_ord_src, s.wms_oub_amendno, s.wms_oub_refdoctype, s.wms_oub_refdocno, s.wms_oub_refdocdate, s.wms_oub_secrefdoctype1, s.wms_oub_secrefdoctype2, s.wms_oub_secrefdoctype3, s.wms_oub_secrefdocno1, s.wms_oub_secrefdocno2, s.wms_oub_secrefdocno3, s.wms_oub_secrefdocdate1, s.wms_oub_secrefdocdate2, s.wms_oub_secrefdocdate3, s.wms_oub_carriername, s.wms_oub_shipment_mode, s.wms_oub_shipment_type, s.wms_oub_cnsgn_code_shpto, s.wms_oub_ship_point_id, s.wms_oub_address1, s.wms_oub_address2, s.wms_oub_address3, s.wms_oub_unqaddress, s.wms_oub_postcode, s.wms_oub_country, s.wms_oub_state, s.wms_oub_city, s.wms_oub_phoneno, s.wms_oub_delivery_date, s.wms_oub_service_from, s.wms_oub_service_to, s.wms_oub_itm_plan_gd_iss_dt, s.wms_oub_itm_plan_dt_iss, s.wms_oub_instructions, s.wms_oub_incoterms, s.wms_oub_inco_location, s.wms_oub_country_of_origin, s.wms_oub_port_of_shipment, s.wms_oub_destination_country, s.wms_oub_port_destination, s.wms_oub_created_by, s.wms_oub_created_date, s.wms_oub_modified_by, s.wms_oub_modified_date, s.wms_oub_timestamp, s.wms_oub_userdefined1, s.wms_oub_userdefined2, s.wms_oub_userdefined3, s.wms_oub_operation_status, s.wms_oub_contract_id, s.wms_oub_contract_amend_no, s.wms_oub_subservice_type, s.wms_oub_shp_name, s.wms_oub_shp_zone, s.wms_oub_shp_sub_zne, s.wms_oub_shp_region, s.wms_oub_pickup_from_date_time, s.wms_oub_pickup_to_date_time, s.wms_oub_transport_location, s.wms_oub_transport_service, s.wms_oub_bill_to_name, s.wms_oub_bill_det_addr_line1, s.wms_oub_bill_det_addr_line2, s.wms_oub_bill_det_post_code, s.wms_oub_bill_det_country, s.wms_oub_bill_det_city, s.wms_oub_bill_det_state, s.wms_oub_bill_det_phone, s.wms_oub_bill_det_ship_addr, s.wms_oub_bill_det_pay_gate_auth_no, s.wms_oub_bill_det_auth_date, s.wms_oub_bill_det_pay_sts, s.wms_oub_cancel, s.wms_oub_cancel_code, s.wms_oub_reason_code, s.wms_oub_trippln_id, s.wms_oub_br_ou, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_header_h s
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
    LEFT JOIN dwh.d_date d
        ON s.wms_oub_orderdate::date = d.dateactual
    LEFT JOIN dwh.F_OutboundHeaderHistory t
		ON s.wms_oub_ou = t.oub_ou
		AND s.wms_oub_loc_code = t.oub_loc_code
		AND s.wms_oub_outbound_ord = t.oub_outbound_ord
		AND s.wms_oub_amendno = t.oub_amendno
    WHERE t.oub_ou IS NULL;
	
    GET DIAGNOSTICS inscnt = ROW_COUNT;

	
--Updating etlactiveind for Deleted source data 

		UPDATE	dwh.F_OutboundHeaderHistory t1
		SET		etlactiveind		=  0,
				etlupdatedatetime	= Now()::TIMESTAMP
		FROM	dwh.F_OutboundHeaderHistory t
		LEFT JOIN stg.stg_wms_outbound_header_h s
		ON		s.wms_oub_ou			= t.oub_ou
		AND		s.wms_oub_loc_code		= t.oub_loc_code
		AND		s.wms_oub_outbound_ord	= t.oub_outbound_ord
		AND		s.wms_oub_amendno		= t.oub_amendno
		WHERE	t.obh_hr_his_key		= t1.obh_hr_his_key
		AND		COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_intervaldays)::DATE
		AND		s.wms_oub_ou IS NULL;

--Updating etlactiveind for Deleted source data ends;

	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_header_h
    (
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_cancel, wms_oub_cancel_code, wms_oub_reason_code, wms_oub_trippln_id, wms_oub_br_ou, etlcreateddatetime
    )
    SELECT
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_cancel, wms_oub_cancel_code, wms_oub_reason_code, wms_oub_trippln_id, wms_oub_br_ou, etlcreateddatetime
    FROM stg.stg_wms_outbound_header_h;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundheaderhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundheaderweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
	p_interval integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_interval
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_header;

    UPDATE dwh.F_OutboundHeader t
    SET
        obh_loc_key     				= COALESCE(l.loc_key,-1),
        obh_cust_key    				= COALESCE(c.customer_key,-1),
		oub_orderdatekey				= COALESCE(d.datekey,-1),
        oub_prim_rf_dc_typ               = s.wms_oub_prim_rf_dc_typ,
        oub_prim_rf_dc_no                = s.wms_oub_prim_rf_dc_no,
        oub_prim_rf_dc_date              = s.wms_oub_prim_rf_dc_date,
        oub_orderdate                    = s.wms_oub_orderdate,
        oub_ob_status                    = s.wms_oub_ob_status,
        oub_order_type                   = s.wms_oub_order_type,
        oub_order_priority               = s.wms_oub_order_priority,
        oub_urgent_chk                   = s.wms_oub_urgent_chk,
        oub_cust_code                    = s.wms_oub_cust_code,
        oub_cust_type                    = s.wms_oub_cust_type,
        oub_end_cust_ref_doc             = s.wms_oub_end_cust_ref_doc,
        oub_ord_src                      = s.wms_oub_ord_src,
        oub_amendno                      = s.wms_oub_amendno,
        oub_refdoctype                   = s.wms_oub_refdoctype,
        oub_refdocno                     = s.wms_oub_refdocno,
        oub_refdocdate                   = s.wms_oub_refdocdate,
        oub_carriername                  = s.wms_oub_carriername,
        oub_shipment_mode                = s.wms_oub_shipment_mode,
        oub_shipment_type                = s.wms_oub_shipment_type,
        oub_cnsgn_code_shpto             = s.wms_oub_cnsgn_code_shpto,
        oub_ship_point_id                = s.wms_oub_ship_point_id,
        oub_address1                     = s.wms_oub_address1,
        oub_address2                     = s.wms_oub_address2,
        oub_address3                     = s.wms_oub_address3,
        oub_postcode                     = s.wms_oub_postcode,
        oub_country                      = s.wms_oub_country,
        oub_state                        = s.wms_oub_state,
        oub_city                         = s.wms_oub_city,
        oub_phoneno                      = s.wms_oub_phoneno,
        oub_delivery_date                = s.wms_oub_delivery_date,
        oub_service_from                 = s.wms_oub_service_from,
        oub_service_to                   = s.wms_oub_service_to,
        oub_itm_plan_gd_iss_dt           = s.wms_oub_itm_plan_gd_iss_dt,
        oub_itm_plan_dt_iss              = s.wms_oub_itm_plan_dt_iss,
        oub_instructions                 = s.wms_oub_instructions,
        oub_incoterms                    = s.wms_oub_incoterms,
        oub_created_by                   = s.wms_oub_created_by,
        oub_created_date                 = s.wms_oub_created_date,
        oub_modified_by                  = s.wms_oub_modified_by,
        oub_modified_date                = s.wms_oub_modified_date,
        oub_timestamp                    = s.wms_oub_timestamp,
        oub_operation_status             = s.wms_oub_operation_status,
        oub_contract_id                  = s.wms_oub_contract_id,
        oub_contract_amend_no            = s.wms_oub_contract_amend_no,
        oub_subservice_type              = s.wms_oub_subservice_type,
        oub_shp_name                     = s.wms_oub_shp_name,
        oub_shp_zone                     = s.wms_oub_shp_zone,
        oub_shp_sub_zne                  = s.wms_oub_shp_sub_zne,
        oub_shp_region                   = s.wms_oub_shp_region,
        oub_pickup_from_date_time        = s.wms_oub_pickup_from_date_time,
        oub_pickup_to_date_time          = s.wms_oub_pickup_to_date_time,
        oub_transport_location           = s.wms_oub_transport_location,
        oub_transport_service            = s.wms_oub_transport_service,
        oub_gen_req_id                   = s.wms_oub_gen_req_id,
        oub_gen_from                     = s.wms_oub_gen_from,
        oub_opfeboty_bil_status          = s.wms_oub_opfeboty_bil_status,
        oub_exp_stk                      = s.wms_oub_exp_stk,
        oub_consolidation_no             = s.wms_oub_consolidation_no,
        oub_bill_to_name                 = s.wms_oub_bill_to_name,
        oub_bill_det_addr_line1          = s.wms_oub_bill_det_addr_line1,
        oub_bill_det_addr_line2          = s.wms_oub_bill_det_addr_line2,
        oub_bill_det_post_code           = s.wms_oub_bill_det_post_code,
        oub_bill_det_country             = s.wms_oub_bill_det_country,
        oub_bill_det_city                = s.wms_oub_bill_det_city,
        oub_bill_det_state               = s.wms_oub_bill_det_state,
        oub_bill_det_phone               = s.wms_oub_bill_det_phone,
        oub_bill_det_ship_addr           = s.wms_oub_bill_det_ship_addr,
        oub_consgn_name                  = s.wms_oub_consgn_name,
        oub_cancel                       = s.wms_oub_cancel,
        oub_cancel_code                  = s.wms_oub_cancel_code,
        oub_prt_full_fill                = s.wms_oub_prt_full_fill,
        oub_reason_code                  = s.wms_oub_reason_code,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_wms_outbound_header s
	 LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
	LEFT JOIN dwh.d_date d
		ON s.wms_oub_orderdate::date = d.dateactual
    WHERE t.oub_ou = s.wms_oub_ou
    AND t.oub_loc_code = s.wms_oub_loc_code
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord;

    GET DIAGNOSTICS updcnt = ROW_COUNT;
	

/*
	DELETE from dwh.F_OutboundHeader t
	USING stg.stg_wms_outbound_header s
    where s.wms_oub_ou = t.oub_ou
    AND s.wms_oub_loc_code = t.oub_loc_code
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord;
-- 	where COALESCE(oub_modified_date,oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    INSERT INTO dwh.F_OutboundHeader
    (
		obh_loc_key, obh_cust_key, oub_orderdatekey,
		oub_ou, oub_loc_code, oub_outbound_ord, oub_prim_rf_dc_typ, oub_prim_rf_dc_no, oub_prim_rf_dc_date, 
		oub_orderdate, oub_ob_status, oub_order_type, oub_order_priority, oub_urgent_chk, oub_cust_code, 
		oub_cust_type, oub_end_cust_ref_doc, oub_ord_src, oub_amendno, oub_refdoctype, oub_refdocno, 
		oub_refdocdate, oub_carriername, oub_shipment_mode, oub_shipment_type, oub_cnsgn_code_shpto, 
		oub_ship_point_id, oub_address1, oub_address2, oub_address3, oub_postcode, oub_country, oub_state, 
		oub_city, oub_phoneno, oub_delivery_date, oub_service_from, oub_service_to, oub_itm_plan_gd_iss_dt, 
		oub_itm_plan_dt_iss, oub_instructions, oub_incoterms, oub_created_by, oub_created_date, oub_modified_by, 
		oub_modified_date, oub_timestamp, oub_operation_status, oub_contract_id, oub_contract_amend_no, oub_subservice_type, oub_shp_name, oub_shp_zone, oub_shp_sub_zne, oub_shp_region, oub_pickup_from_date_time, oub_pickup_to_date_time, oub_transport_location, oub_transport_service, oub_gen_req_id, oub_gen_from, oub_opfeboty_bil_status, oub_exp_stk, oub_consolidation_no, oub_bill_to_name, oub_bill_det_addr_line1, oub_bill_det_addr_line2, oub_bill_det_post_code, oub_bill_det_country, oub_bill_det_city, oub_bill_det_state, oub_bill_det_phone, oub_bill_det_ship_addr, oub_consgn_name, oub_cancel, oub_cancel_code, oub_prt_full_fill, oub_reason_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(l.loc_key,-1),COALESCE(c.customer_key,-1),COALESCE(d.datekey,-1),
	   s.wms_oub_ou, s.wms_oub_loc_code, s.wms_oub_outbound_ord, s.wms_oub_prim_rf_dc_typ, s.wms_oub_prim_rf_dc_no, s.wms_oub_prim_rf_dc_date, s.wms_oub_orderdate, s.wms_oub_ob_status, s.wms_oub_order_type, s.wms_oub_order_priority, s.wms_oub_urgent_chk, s.wms_oub_cust_code, s.wms_oub_cust_type, s.wms_oub_end_cust_ref_doc, s.wms_oub_ord_src, s.wms_oub_amendno, s.wms_oub_refdoctype, s.wms_oub_refdocno, s.wms_oub_refdocdate, s.wms_oub_carriername, s.wms_oub_shipment_mode, s.wms_oub_shipment_type, s.wms_oub_cnsgn_code_shpto, s.wms_oub_ship_point_id, s.wms_oub_address1, s.wms_oub_address2, s.wms_oub_address3, s.wms_oub_postcode, s.wms_oub_country, s.wms_oub_state, s.wms_oub_city, s.wms_oub_phoneno, s.wms_oub_delivery_date, s.wms_oub_service_from, s.wms_oub_service_to, s.wms_oub_itm_plan_gd_iss_dt, s.wms_oub_itm_plan_dt_iss, s.wms_oub_instructions, s.wms_oub_incoterms, s.wms_oub_created_by, s.wms_oub_created_date, s.wms_oub_modified_by, s.wms_oub_modified_date, s.wms_oub_timestamp, s.wms_oub_operation_status, s.wms_oub_contract_id, s.wms_oub_contract_amend_no, s.wms_oub_subservice_type, s.wms_oub_shp_name, s.wms_oub_shp_zone, s.wms_oub_shp_sub_zne, s.wms_oub_shp_region, s.wms_oub_pickup_from_date_time, s.wms_oub_pickup_to_date_time, s.wms_oub_transport_location, s.wms_oub_transport_service, s.wms_oub_gen_req_id, s.wms_oub_gen_from, s.wms_oub_opfeboty_bil_status, s.wms_oub_exp_stk, s.wms_oub_consolidation_no, s.wms_oub_bill_to_name, s.wms_oub_bill_det_addr_line1, s.wms_oub_bill_det_addr_line2, s.wms_oub_bill_det_post_code, s.wms_oub_bill_det_country, s.wms_oub_bill_det_city, s.wms_oub_bill_det_state, s.wms_oub_bill_det_phone, s.wms_oub_bill_det_ship_addr, s.wms_oub_consgn_name, s.wms_oub_cancel, s.wms_oub_cancel_code, s.wms_oub_prt_full_fill, s.wms_oub_reason_code, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_header s
	 LEFT JOIN dwh.d_location L      
        ON s.wms_oub_loc_code   = L.loc_code 
        AND s.wms_oub_ou      = L.loc_ou
    LEFT JOIN dwh.d_customer C      
        ON s.wms_oub_cust_code  = C.customer_id 
        AND s.wms_oub_ou        = C.customer_ou
	LEFT JOIN dwh.d_date d
		ON s.wms_oub_orderdate::date = d.dateactual
    LEFT JOIN dwh.F_OutboundHeader t
    ON s.wms_oub_ou = t.oub_ou
    AND s.wms_oub_loc_code = t.oub_loc_code
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    WHERE t.oub_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	update dwh.F_OutboundHeader t1
	set etlactiveind =  0,
	etlupdatedatetime = Now()::timestamp
	from dwh.F_OutboundHeader t
	left join stg.stg_wms_outbound_header s
	ON s.wms_oub_ou = t.oub_ou
	AND s.wms_oub_loc_code = t.oub_loc_code
	AND s.wms_oub_outbound_ord = t.oub_outbound_ord
	AND t.obh_hr_key=t1.obh_hr_key
	WHERE COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' *p_interval )::DATE
	AND s.wms_oub_loc_code is null;
	
	--GET DIAGNOSTICS updcnt = ROW_COUNT;
	
	
	
	
	--select 0 into updcnt;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_header
    (
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_edifee_bil_status, wms_oub_ordprfee_bil_status, wms_oub_baschgpo_bil_status, wms_oub_priority_bil_status, wms_oub_kmedipro_bil_status, wms_oub_odopln_bil_status, wms_oub_gen_req_id, wms_oub_gen_from, wms_oub_opfeboty_bil_status, wms_oub_exp_stk, wms_oub_consolidation_no, wms_oub_channel_type, wms_oub_seller_type, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_consgn_name, wms_oub_cancel, wms_oub_cancel_code, wms_oub_prt_full_fill, wms_oub_staxcbuy_bil_status, wms_oub_orprfbos_bil_status, wms_oub_txchrgsl_bil_status, wms_oub_shpchrsl_bil_status, wms_oub_reason_code, wms_oub_odoprll_bil_status, wms_oub_verte_order_no, wms_oub_markprch_sell_bil_status, wms_oub_trippln_id, wms_oub_whexchpd_sell_bil_status, wms_oub_wechbain_sell_bil_status, wms_oub_chbtnsin_sell_bil_status, wms_oub_markmior_sell_bil_status, wms_oub_hcoqumot_sell_bil_status, wms_oub_hdchotqt_status, wms_oub_hcdeotqt_status, wms_oub_br_ou, wms_oub_chporcn_sell_bil_status, wms_oub_chactinv_sell_bil_status, wms_oub_ffgvsmmo_sell_bil_status, wms_oub_cupkslch_sell_bil_status, wms_transport_activity, etlcreateddatetime
    )
    SELECT
        wms_oub_ou, wms_oub_loc_code, wms_oub_outbound_ord, wms_oub_prim_rf_dc_typ, wms_oub_prim_rf_dc_no, wms_oub_prim_rf_dc_date, wms_oub_orderdate, wms_oub_ob_status, wms_oub_order_type, wms_oub_order_priority, wms_oub_urgent_chk, wms_oub_cust_code, wms_oub_cust_type, wms_oub_end_cust_ref_doc, wms_oub_address_id, wms_oub_ord_src, wms_oub_amendno, wms_oub_refdoctype, wms_oub_refdocno, wms_oub_refdocdate, wms_oub_secrefdoctype1, wms_oub_secrefdoctype2, wms_oub_secrefdoctype3, wms_oub_secrefdocno1, wms_oub_secrefdocno2, wms_oub_secrefdocno3, wms_oub_secrefdocdate1, wms_oub_secrefdocdate2, wms_oub_secrefdocdate3, wms_oub_carriername, wms_oub_shipment_mode, wms_oub_shipment_type, wms_oub_cnsgn_code_shpto, wms_oub_ship_point_id, wms_oub_address1, wms_oub_address2, wms_oub_address3, wms_oub_unqaddress, wms_oub_postcode, wms_oub_country, wms_oub_state, wms_oub_city, wms_oub_phoneno, wms_oub_delivery_date, wms_oub_service_from, wms_oub_service_to, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_instructions, wms_oub_incoterms, wms_oub_inco_location, wms_oub_country_of_origin, wms_oub_port_of_shipment, wms_oub_destination_country, wms_oub_port_destination, wms_oub_created_by, wms_oub_created_date, wms_oub_modified_by, wms_oub_modified_date, wms_oub_timestamp, wms_oub_userdefined1, wms_oub_userdefined2, wms_oub_userdefined3, wms_oub_operation_status, wms_oub_contract_id, wms_oub_contract_amend_no, wms_oub_subservice_type, wms_oub_shp_name, wms_oub_shp_zone, wms_oub_shp_sub_zne, wms_oub_shp_region, wms_oub_pickup_from_date_time, wms_oub_pickup_to_date_time, wms_oub_transport_location, wms_oub_transport_service, wms_oub_edifee_bil_status, wms_oub_ordprfee_bil_status, wms_oub_baschgpo_bil_status, wms_oub_priority_bil_status, wms_oub_kmedipro_bil_status, wms_oub_odopln_bil_status, wms_oub_gen_req_id, wms_oub_gen_from, wms_oub_opfeboty_bil_status, wms_oub_exp_stk, wms_oub_consolidation_no, wms_oub_channel_type, wms_oub_seller_type, wms_oub_bill_to_name, wms_oub_bill_det_addr_line1, wms_oub_bill_det_addr_line2, wms_oub_bill_det_post_code, wms_oub_bill_det_country, wms_oub_bill_det_city, wms_oub_bill_det_state, wms_oub_bill_det_phone, wms_oub_bill_det_ship_addr, wms_oub_bill_det_pay_gate_auth_no, wms_oub_bill_det_auth_date, wms_oub_bill_det_pay_sts, wms_oub_consgn_name, wms_oub_cancel, wms_oub_cancel_code, wms_oub_prt_full_fill, wms_oub_staxcbuy_bil_status, wms_oub_orprfbos_bil_status, wms_oub_txchrgsl_bil_status, wms_oub_shpchrsl_bil_status, wms_oub_reason_code, wms_oub_odoprll_bil_status, wms_oub_verte_order_no, wms_oub_markprch_sell_bil_status, wms_oub_trippln_id, wms_oub_whexchpd_sell_bil_status, wms_oub_wechbain_sell_bil_status, wms_oub_chbtnsin_sell_bil_status, wms_oub_markmior_sell_bil_status, wms_oub_hcoqumot_sell_bil_status, wms_oub_hdchotqt_status, wms_oub_hcdeotqt_status, wms_oub_br_ou, wms_oub_chporcn_sell_bil_status, wms_oub_chactinv_sell_bil_status, wms_oub_ffgvsmmo_sell_bil_status, wms_oub_cupkslch_sell_bil_status, wms_transport_activity, etlcreateddatetime
    FROM stg.stg_wms_outbound_header;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outbounditemdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outbounditemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	 p_depsource VARCHAR(100);
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag ,h.depsource

	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN		

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_item_detail;

	UPDATE dwh.f_outboundItemDetail t
    SET 
	obh_hr_key       = oh.obh_hr_key,
    obd_itm_key              = COALESCE(l.itm_hdr_key,-1),
    obd_loc_key              = COALESCE(c.loc_key,-1),              
    oub_item_code            =  s.wms_oub_item_code,
    oub_itm_order_qty        =  s.wms_oub_itm_order_qty,
    oub_itm_sch_type         =  s.wms_oub_itm_sch_type,
    oub_itm_balqty           =  s.wms_oub_itm_balqty,
    oub_itm_issueqty         =  s.wms_oub_itm_issueqty,
    oub_itm_processqty       =  s.wms_oub_itm_processqty,
    oub_itm_masteruom        =  s.wms_oub_itm_masteruom,
    oub_itm_deliverydate     =  s.wms_oub_itm_deliverydate,
    oub_itm_plan_gd_iss_dt   =  s.wms_oub_itm_plan_gd_iss_dt,
    oub_itm_sub_rules        =  s.wms_oub_itm_sub_rules,
    oub_itm_pack_remarks     =  s.wms_oub_itm_pack_remarks,
    oub_itm_mas_qty          =  s.wms_oub_itm_mas_qty,
    oub_itm_order_item       =  s.wms_oub_itm_order_item,
    oub_itm_lotsl_batchno    =  s.wms_oub_itm_lotsl_batchno,
    oub_itm_cus_srno         =  s.wms_oub_itm_cus_srno,
    oub_itm_refdocno1        =  s.wms_oub_itm_refdocno1,
    oub_itm_refdocno2        =  s.wms_oub_itm_refdocno2,
    oub_itm_serialno         =  s.wms_oub_itm_serialno,
    oub_itm_thu_id           =  s.wms_oub_itm_thu_id,
    oub_itm_thu_srno         =  s.wms_oub_itm_thu_srno,
    oub_itm_inst             =  s.wms_oub_itm_inst,
    oub_itm_user_def_1       =  s.wms_oub_itm_user_def_1,
    oub_itm_user_def_2       =  s.wms_oub_itm_user_def_2,
    oub_itm_user_def_3       =  s.wms_oub_itm_user_def_3,
    oub_itm_stock_sts        =  s.wms_oub_itm_stock_sts,
    oub_itm_cust             =  s.wms_oub_itm_cust,
    oub_itm_coo_ml           =  s.wms_oub_itm_coo_ml,
    oub_itm_arribute1        =  s.wms_oub_itm_arribute1,
    oub_itm_arribute2        =  s.wms_oub_itm_arribute2,
    oub_itm_cancel           =  s.wms_oub_itm_cancel,
    oub_itm_cancel_code      =  s.wms_oub_itm_cancel_code,
    oub_itm_component        =  s.wms_oub_itm_component,
		etlactiveind 				    	= 1
		, etljobname 				    	= p_etljobname
		, envsourcecd 				  	= p_envsourcecd
		, datasourcecd 				  	= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_item_detail s
	INNER JOIN dwh.f_outboundheader oh
		ON s.wms_oub_itm_loc_code = oh.oub_loc_code 
		and s.wms_oub_outbound_ord =oh.oub_outbound_ord
		and s.wms_oub_itm_ou = oh.oub_ou
	LEFT JOIN dwh.d_itemheader L 		
		ON s.wms_oub_item_code 	     = L.itm_code 
        AND s.wms_oub_itm_ou      = L.itm_ou
	LEFT JOIN dwh.d_location C 		
		ON s.wms_oub_itm_loc_code  = C.loc_code 
        AND s.wms_oub_itm_ou        = C.loc_ou
    WHERE  
    t.oub_itm_loc_code          =  s.wms_oub_itm_loc_code
    AND t.oub_outbound_ord		 =  s.wms_oub_outbound_ord
    AND t.oub_itm_ou 			 =  s.wms_oub_itm_ou
    AND t.oub_itm_lineno           =  s.wms_oub_itm_lineno
	AND t.obh_hr_key    =            oh.obh_hr_key;
	
	GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
		DELETE FROM dwh.f_outboundItemDetail FH
		USING stg.stg_wms_outbound_item_detail OD
			WHERE 	FH.oub_itm_ou 		 	=  OD.wms_oub_itm_ou
			AND   	FH.oub_itm_loc_code   	=  OD.wms_oub_itm_loc_code
			AND 	FH.oub_outbound_ord	 	=  OD.wms_oub_outbound_ord
			AND 	FH.oub_itm_lineno    	=  OD.wms_oub_itm_lineno;
-- 		AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
	INSERT INTO dwh.f_outboundItemDetail
	(obh_hr_key				,			obd_itm_key    	,				obd_loc_key  ,
	 oub_itm_volume			, 			oub_itm_weight	,
     oub_itm_loc_code,               oub_itm_ou,         oub_outbound_ord,               oub_itm_lineno,          
     oub_item_code,                  oub_itm_order_qty,          oub_itm_sch_type,               oub_itm_balqty,          
     oub_itm_issueqty,               oub_itm_processqty,       oub_itm_masteruom,              oub_itm_deliverydate,       
     oub_itm_plan_gd_iss_dt,         oub_itm_sub_rules,         oub_itm_pack_remarks,           oub_itm_mas_qty,         
     oub_itm_order_item,             oub_itm_lotsl_batchno,         oub_itm_cus_srno,               oub_itm_refdocno1,          
     oub_itm_refdocno2,              oub_itm_serialno,           oub_itm_thu_id,                 oub_itm_thu_srno,          
     oub_itm_inst,                   oub_itm_user_def_1,          oub_itm_user_def_2,             oub_itm_user_def_3,      
     oub_itm_stock_sts,              oub_itm_cust,          oub_itm_coo_ml,                 oub_itm_arribute1,         
     oub_itm_arribute2,              oub_itm_cancel,         oub_itm_cancel_code,            oub_itm_component,        
     etlactiveind,			         etljobname,
     envsourcecd,                    datasourcecd,     
     etlcreatedatetime
	)
	
	SELECT 

 	   oh.obh_hr_key				, 			COALESCE(L.itm_hdr_key,-1)	,		COALESCE(c.loc_key,-1),
	   (L.itm_length*L.itm_breadth*L.itm_height) ,	L.itm_weight			,
      OD.wms_oub_itm_loc_code,                   OD.wms_oub_itm_ou,       OD.wms_oub_outbound_ord,                   OD.wms_oub_itm_lineno,  
      OD.wms_oub_item_code,                      OD.wms_oub_itm_order_qty,   OD.wms_oub_itm_sch_type,                   OD.wms_oub_itm_balqty,     
      OD.wms_oub_itm_issueqty,                   OD.wms_oub_itm_processqty,  OD.wms_oub_itm_masteruom,                  OD.wms_oub_itm_deliverydate, 
      OD.wms_oub_itm_plan_gd_iss_dt,             OD.wms_oub_itm_sub_rules,  OD.wms_oub_itm_pack_remarks,               OD.wms_oub_itm_mas_qty,     
      OD.wms_oub_itm_order_item,                 OD.wms_oub_itm_lotsl_batchno,   OD.wms_oub_itm_cus_srno,                   OD.wms_oub_itm_refdocno1,       
      OD.wms_oub_itm_refdocno2,                  OD.wms_oub_itm_serialno,        OD.wms_oub_itm_thu_id,                     OD.wms_oub_itm_thu_srno,          
      OD.wms_oub_itm_inst,                       OD.wms_oub_itm_user_def_1,          OD.wms_oub_itm_user_def_2,                 OD.wms_oub_itm_user_def_3,    
      OD.wms_oub_itm_stock_sts,                  OD.wms_oub_itm_cust,         OD.wms_oub_itm_coo_ml,                     OD.wms_oub_itm_arribute1,        
      OD.wms_oub_itm_arribute2,                  OD.wms_oub_itm_cancel,        OD.wms_oub_itm_cancel_code,                OD.wms_oub_itm_component,    
      1 AS etlactiveind,				          p_etljobname,
		p_envsourcecd							, p_datasourcecd,         
        NOW()
	FROM stg.stg_wms_outbound_item_detail OD
	INNER JOIN dwh.f_outboundheader oh
		ON OD.wms_oub_itm_ou = oh.oub_ou 
		and OD.wms_oub_itm_loc_code = oh.oub_loc_code
		and OD.wms_oub_outbound_ord =oh.oub_outbound_ord
    LEFT JOIN dwh.d_itemheader L 		
		ON OD.wms_oub_item_code		= L.itm_code 
        AND OD.wms_oub_itm_ou		= L.itm_ou
	LEFT JOIN dwh.d_location C 		
		ON OD.wms_oub_itm_loc_code  = C.loc_code 
        AND OD.wms_oub_itm_ou        = C.loc_ou
	LEFT JOIN dwh.f_outboundItemDetail FH 	
		ON FH.oub_itm_loc_code   =  OD.wms_oub_itm_loc_code
		AND FH.oub_outbound_ord	 =  OD.wms_oub_outbound_ord
		AND FH.oub_itm_ou 		 =  OD.wms_oub_itm_ou
		AND FH.oub_itm_lineno    =  OD.wms_oub_itm_lineno
		AND FH.obh_hr_key    	=  oh.obh_hr_key
    WHERE FH.oub_itm_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
/*	
	UPDATE dwh.f_outboundItemDetail od 
	SET obh_hr_key = oh.obh_hr_key,
		etlupdatedatetime 	= NOW()
	FROM dwh.f_outboundheader oh 
	WHERE od.oub_itm_ou = oh.oub_ou 
	and od.oub_itm_loc_code = oh.oub_loc_code 
	and od.oub_outbound_ord =oh.oub_outbound_ord 
	AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

	--GET DIAGNOSTICS updcnt = ROW_COUNT;
	select 0 into updcnt;
*/
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_item_detail
	(
		wms_oub_itm_loc_code,     wms_oub_itm_ou,     wms_oub_outbound_ord,     wms_oub_itm_lineno,     wms_oub_item_code,     wms_oub_itm_order_qty,     wms_oub_itm_sch_type,     wms_oub_itm_balqty,     wms_oub_itm_issueqty,     wms_oub_itm_processqty,     wms_oub_itm_masteruom,     wms_oub_itm_deliverydate,     wms_oub_itm_serfrom,     wms_oub_itm_serto,     wms_oub_itm_plan_gd_iss_dt,     wms_oub_itm_plan_dt_iss,     wms_oub_itm_sub_rules,     wms_oub_itm_pack_remarks,     wms_oub_itm_su,     wms_oub_itm_cust_itm_code,     wms_oub_itm_mas_qty,     wms_oub_itm_order_item,     wms_oub_itm_lotsl_batchno,     wms_oub_itm_cus_srno,     wms_oub_itm_refdocno1,     wms_oub_itm_refdocno2,     wms_oub_itm_serialno,     wms_oub_itm_thu_id,     wms_oub_itm_thu_srno,     wms_oub_itm_inst,     wms_oub_itm_uid_serial_no,     wms_oub_itm_tolerance,     wms_oub_itm_user_def_1,     wms_oub_itm_user_def_2,     wms_oub_itm_user_def_3,     wms_oub_itm_shelflife,     wms_oub_itm_stock_sts,     wms_oub_break_attribute,     wms_oub_country_of_origin,     wms_oub_itm_cust,     wms_oub_itm_inv_type,     wms_oub_itm_coo_ml,     wms_oub_itm_arribute1,     wms_oub_itm_arribute2,     wms_oub_itm_arribute3,     wms_oub_itm_arribute4,     wms_oub_itm_arribute5,     wms_oub_itm_prod_status,     wms_oub_itm_cancel,     wms_oub_itm_cancel_code,     wms_oub_opbopitp_bil_status,     wms_oub_gmvchrgs_sell_bil_status,     wms_oub_gmvchrgs_buy_bil_status,     wms_oub_itm_component,     wms_oub_shchdrop_buy_bil_status,     wms_oub_gmvcdrop_buy_bil_status,     wms_oub_gmvcdrop_sell_bil_status,     wms_oub_shchdrop_sell_bil_status,     wms_oub_itm_kit_lineno,     wms_oub_itm_ratio,     wms_oub_txchsdrs_sell_bil_status,     wms_oub_txchsdrb_buy_bil_status,     wms_oub_itm_wave_no,     wms_oub_ccmiorfe_sell_bil_status,     wms_oub_gmvchmus_sell_bil_status,     wms_oub_ccaufbos_sell_bil_status,     wms_oub_ffcgvsml_sell_bil_status,     wms_oub_markmior_sell_bil_status,     wms_oub_markaufe_sell_bil_status,     wms_oub_gmvchmus_buy_bil_status,     wms_oub_txcsemse_buy_bil_status,     wms_oub_itm_arribute6,     wms_oub_itm_arribute7,     wms_oub_itm_arribute8,     wms_oub_itm_arribute9,     wms_oub_itm_arribute10,     wms_oub_cupkslch_sell_bil_status      ,etlcreateddatetime
	)
	SELECT 
		wms_oub_itm_loc_code,     wms_oub_itm_ou,     wms_oub_outbound_ord,     wms_oub_itm_lineno,     wms_oub_item_code,     wms_oub_itm_order_qty,     wms_oub_itm_sch_type,     wms_oub_itm_balqty,     wms_oub_itm_issueqty,     wms_oub_itm_processqty,     wms_oub_itm_masteruom,     wms_oub_itm_deliverydate,     wms_oub_itm_serfrom,     wms_oub_itm_serto,     wms_oub_itm_plan_gd_iss_dt,     wms_oub_itm_plan_dt_iss,     wms_oub_itm_sub_rules,     wms_oub_itm_pack_remarks,     wms_oub_itm_su,     wms_oub_itm_cust_itm_code,     wms_oub_itm_mas_qty,     wms_oub_itm_order_item,     wms_oub_itm_lotsl_batchno,     wms_oub_itm_cus_srno,     wms_oub_itm_refdocno1,     wms_oub_itm_refdocno2,     wms_oub_itm_serialno,     wms_oub_itm_thu_id,     wms_oub_itm_thu_srno,     wms_oub_itm_inst,     wms_oub_itm_uid_serial_no,     wms_oub_itm_tolerance,     wms_oub_itm_user_def_1,     wms_oub_itm_user_def_2,     wms_oub_itm_user_def_3,     wms_oub_itm_shelflife,     wms_oub_itm_stock_sts,     wms_oub_break_attribute,     wms_oub_country_of_origin,     wms_oub_itm_cust,     wms_oub_itm_inv_type,     wms_oub_itm_coo_ml,     wms_oub_itm_arribute1,     wms_oub_itm_arribute2,     wms_oub_itm_arribute3,     wms_oub_itm_arribute4,     wms_oub_itm_arribute5,     wms_oub_itm_prod_status,     wms_oub_itm_cancel,     wms_oub_itm_cancel_code,     wms_oub_opbopitp_bil_status,     wms_oub_gmvchrgs_sell_bil_status,     wms_oub_gmvchrgs_buy_bil_status,     wms_oub_itm_component,     wms_oub_shchdrop_buy_bil_status,     wms_oub_gmvcdrop_buy_bil_status,     wms_oub_gmvcdrop_sell_bil_status,     wms_oub_shchdrop_sell_bil_status,     wms_oub_itm_kit_lineno,     wms_oub_itm_ratio,     wms_oub_txchsdrs_sell_bil_status,     wms_oub_txchsdrb_buy_bil_status,     wms_oub_itm_wave_no,     wms_oub_ccmiorfe_sell_bil_status,     wms_oub_gmvchmus_sell_bil_status,     wms_oub_ccaufbos_sell_bil_status,     wms_oub_ffcgvsml_sell_bil_status,     wms_oub_markmior_sell_bil_status,     wms_oub_markaufe_sell_bil_status,     wms_oub_gmvchmus_buy_bil_status,     wms_oub_txcsemse_buy_bil_status,     wms_oub_itm_arribute6,     wms_oub_itm_arribute7,     wms_oub_itm_arribute8,     wms_oub_itm_arribute9,     wms_oub_itm_arribute10,     wms_oub_cupkslch_sell_bil_status      ,etlcreateddatetime
	FROM stg.stg_wms_outbound_item_detail;
    END IF;
    
   ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
		select 0 into inscnt;
		select 0 into updcnt;
  
END;
$$;


ALTER PROCEDURE dwh.usp_f_outbounditemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outbounditemdetailhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outbounditemdetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN        

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_item_detail_h;

    UPDATE dwh.F_OutboundItemDetailHistory t
    SET
        obh_hr_his_key                =sb.obh_hr_his_key,
        obd_itm_key                   = COALESCE(l.itm_hdr_key,-1),
        obd_loc_key                   = COALESCE(c.loc_key,-1), 
        oub_item_code                 = s.wms_oub_item_code,
        oub_itm_order_qty             = s.wms_oub_itm_order_qty,
        oub_itm_sch_type              = s.wms_oub_itm_sch_type,
        oub_itm_balqty                = s.wms_oub_itm_balqty,
        oub_itm_issueqty              = s.wms_oub_itm_issueqty,
        oub_itm_processqty            = s.wms_oub_itm_processqty,
        oub_itm_masteruom             = s.wms_oub_itm_masteruom,
        oub_itm_deliverydate          = s.wms_oub_itm_deliverydate,
        oub_itm_serfrom               = s.wms_oub_itm_serfrom,
        oub_itm_serto                 = s.wms_oub_itm_serto,
        oub_itm_plan_gd_iss_dt        = s.wms_oub_itm_plan_gd_iss_dt,
        oub_itm_plan_dt_iss           = s.wms_oub_itm_plan_dt_iss,
        oub_itm_sub_rules             = s.wms_oub_itm_sub_rules,
        oub_itm_pack_remarks          = s.wms_oub_itm_pack_remarks,
        oub_itm_su                    = s.wms_oub_itm_su,
        oub_itm_uid_serial_no         = s.wms_oub_itm_uid_serial_no,
        oub_itm_cancel                = s.wms_oub_itm_cancel,
        oub_itm_cancel_code           = s.wms_oub_itm_cancel_code,
        oub_itm_wave_no               = s.wms_oub_itm_wave_no,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_outbound_item_detail_h s
     
        INNER JOIN dwh.F_OutboundHeaderHistory sb
    
       ON s.wms_oub_itm_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_itm_ou = sb.oub_ou
    and s.wms_oub_itm_amendno=sb.oub_amendno

    LEFT JOIN dwh.d_itemheader L        
        ON s.wms_oub_item_code       = L.itm_code 
        AND s.wms_oub_itm_ou      = L.itm_ou

    LEFT JOIN dwh.d_location C      
        ON s.wms_oub_itm_loc_code  = C.loc_code 
        AND s.wms_oub_itm_ou        = C.loc_ou

    WHERE t.oub_itm_loc_code = s.wms_oub_itm_loc_code
    AND t.oub_itm_ou = s.wms_oub_itm_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_itm_amendno = s.wms_oub_itm_amendno
    AND t.oub_itm_lineno = s.wms_oub_itm_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

-- 	DELETE FROM dwh.F_OutboundItemDetailHistory t
-- 	USING stg.stg_wms_outbound_item_detail_h s
-- 		WHERE t.oub_itm_loc_code = s.wms_oub_itm_loc_code
--     AND t.oub_itm_ou = s.wms_oub_itm_ou
--     AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--     AND t.oub_itm_amendno = s.wms_oub_itm_amendno
--     AND t.oub_itm_lineno = s.wms_oub_itm_lineno;
-- -- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	

    INSERT INTO dwh.F_OutboundItemDetailHistory
    (
        obh_hr_his_key ,obd_itm_key,obd_loc_key, oub_itm_loc_code, oub_itm_ou, oub_outbound_ord, oub_itm_amendno, oub_itm_lineno, oub_item_code, oub_itm_order_qty, oub_itm_sch_type, oub_itm_balqty, oub_itm_issueqty, oub_itm_processqty, oub_itm_masteruom, oub_itm_deliverydate, oub_itm_serfrom, oub_itm_serto, oub_itm_plan_gd_iss_dt, oub_itm_plan_dt_iss, oub_itm_sub_rules, oub_itm_pack_remarks, oub_itm_su, oub_itm_uid_serial_no, oub_itm_cancel, oub_itm_cancel_code, oub_itm_wave_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        sb.obh_hr_his_key, COALESCE(l.itm_hdr_key,-1),COALESCE(c.loc_key,-1),s.wms_oub_itm_loc_code, s.wms_oub_itm_ou, s.wms_oub_outbound_ord, s.wms_oub_itm_amendno, s.wms_oub_itm_lineno, s.wms_oub_item_code, s.wms_oub_itm_order_qty, s.wms_oub_itm_sch_type, s.wms_oub_itm_balqty, s.wms_oub_itm_issueqty, s.wms_oub_itm_processqty, s.wms_oub_itm_masteruom, s.wms_oub_itm_deliverydate, s.wms_oub_itm_serfrom, s.wms_oub_itm_serto, s.wms_oub_itm_plan_gd_iss_dt, s.wms_oub_itm_plan_dt_iss, s.wms_oub_itm_sub_rules, s.wms_oub_itm_pack_remarks, s.wms_oub_itm_su, s.wms_oub_itm_uid_serial_no, s.wms_oub_itm_cancel, s.wms_oub_itm_cancel_code, s.wms_oub_itm_wave_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_item_detail_h s
    
     INNER JOIN dwh.F_OutboundHeaderHistory sb
    
       ON s.wms_oub_itm_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_itm_ou = sb.oub_ou
    and s.wms_oub_itm_amendno=sb.oub_amendno

    LEFT JOIN dwh.d_itemheader L        
        ON s.wms_oub_item_code       = L.itm_code 
        AND s.wms_oub_itm_ou      = L.itm_ou

    LEFT JOIN dwh.d_location C      
        ON s.wms_oub_itm_loc_code  = C.loc_code 
        AND s.wms_oub_itm_ou        = C.loc_ou

    LEFT JOIN dwh.F_OutboundItemDetailHistory t
    ON s.wms_oub_itm_loc_code = t.oub_itm_loc_code
    AND s.wms_oub_itm_ou = t.oub_itm_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_itm_amendno = t.oub_itm_amendno
    AND s.wms_oub_itm_lineno = t.oub_itm_lineno
    WHERE t.oub_itm_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	UPDATE dwh.F_OutboundItemDetailHistory od 
	SET obh_hr_his_key = oh.obh_hr_his_key,
		etlupdatedatetime             = NOW()
	FROM dwh.F_OutboundHeaderHistory oh 
	WHERE od.oub_itm_ou = oh.oub_ou 
	and od.oub_itm_loc_code = oh.oub_loc_code 
	and od.oub_outbound_ord =oh.oub_outbound_ord 
	and od.oub_itm_amendno=oh.oub_amendno
	AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_item_detail_h
    (
        wms_oub_itm_loc_code, wms_oub_itm_ou, wms_oub_outbound_ord, wms_oub_itm_amendno, wms_oub_itm_lineno, wms_oub_item_code, wms_oub_itm_order_qty, wms_oub_itm_sch_type, wms_oub_itm_balqty, wms_oub_itm_issueqty, wms_oub_itm_processqty, wms_oub_itm_masteruom, wms_oub_itm_deliverydate, wms_oub_itm_serfrom, wms_oub_itm_serto, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_itm_sub_rules, wms_oub_itm_pack_remarks, wms_oub_itm_su, wms_oub_itm_uid_serial_no, wms_oub_itm_cancel, wms_oub_itm_cancel_code, wms_oub_itm_wave_no, etlcreateddatetime
    )
    SELECT
        wms_oub_itm_loc_code, wms_oub_itm_ou, wms_oub_outbound_ord, wms_oub_itm_amendno, wms_oub_itm_lineno, wms_oub_item_code, wms_oub_itm_order_qty, wms_oub_itm_sch_type, wms_oub_itm_balqty, wms_oub_itm_issueqty, wms_oub_itm_processqty, wms_oub_itm_masteruom, wms_oub_itm_deliverydate, wms_oub_itm_serfrom, wms_oub_itm_serto, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_itm_sub_rules, wms_oub_itm_pack_remarks, wms_oub_itm_su, wms_oub_itm_uid_serial_no, wms_oub_itm_cancel, wms_oub_itm_cancel_code, wms_oub_itm_wave_no, etlcreateddatetime
    FROM stg.stg_wms_outbound_item_detail_h;
    
    END IF;

     ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outbounditemdetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outbounditemdetailhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outbounditemdetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;
	p_intervaldays integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource, d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource, p_intervaldays
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN        

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_item_detail_h;

    UPDATE dwh.F_OutboundItemDetailHistory t
    SET
        obh_hr_his_key                = sb.obh_hr_his_key,
        obd_itm_key                   = COALESCE(l.itm_hdr_key,-1),
        obd_loc_key                   = COALESCE(c.loc_key,-1), 
        oub_item_code                 = s.wms_oub_item_code,
        oub_itm_order_qty             = s.wms_oub_itm_order_qty,
        oub_itm_sch_type              = s.wms_oub_itm_sch_type,
        oub_itm_balqty                = s.wms_oub_itm_balqty,
        oub_itm_issueqty              = s.wms_oub_itm_issueqty,
        oub_itm_processqty            = s.wms_oub_itm_processqty,
        oub_itm_masteruom             = s.wms_oub_itm_masteruom,
        oub_itm_deliverydate          = s.wms_oub_itm_deliverydate,
        oub_itm_serfrom               = s.wms_oub_itm_serfrom,
        oub_itm_serto                 = s.wms_oub_itm_serto,
        oub_itm_plan_gd_iss_dt        = s.wms_oub_itm_plan_gd_iss_dt,
        oub_itm_plan_dt_iss           = s.wms_oub_itm_plan_dt_iss,
        oub_itm_sub_rules             = s.wms_oub_itm_sub_rules,
        oub_itm_pack_remarks          = s.wms_oub_itm_pack_remarks,
        oub_itm_su                    = s.wms_oub_itm_su,
        oub_itm_uid_serial_no         = s.wms_oub_itm_uid_serial_no,
        oub_itm_cancel                = s.wms_oub_itm_cancel,
        oub_itm_cancel_code           = s.wms_oub_itm_cancel_code,
        oub_itm_wave_no               = s.wms_oub_itm_wave_no,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_outbound_item_detail_h s
	INNER JOIN dwh.F_OutboundHeaderHistory sb
		ON s.wms_oub_itm_loc_code = sb.oub_loc_code 
		and s.wms_oub_outbound_ord =sb.oub_outbound_ord
		and s.wms_oub_itm_ou = sb.oub_ou
		and s.wms_oub_itm_amendno=sb.oub_amendno
    LEFT JOIN dwh.d_itemheader L        
        ON s.wms_oub_item_code    = L.itm_code 
        AND s.wms_oub_itm_ou      = L.itm_ou
    LEFT JOIN dwh.d_location C      
        ON s.wms_oub_itm_loc_code  = C.loc_code 
        AND s.wms_oub_itm_ou        = C.loc_ou
    WHERE t.oub_itm_loc_code = s.wms_oub_itm_loc_code
    AND t.oub_itm_ou = s.wms_oub_itm_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_itm_amendno = s.wms_oub_itm_amendno
    AND t.oub_itm_lineno = s.wms_oub_itm_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

-- 	DELETE FROM dwh.F_OutboundItemDetailHistory t
-- 	USING stg.stg_wms_outbound_item_detail_h s
-- 		WHERE t.oub_itm_loc_code = s.wms_oub_itm_loc_code
--     AND t.oub_itm_ou = s.wms_oub_itm_ou
--     AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--     AND t.oub_itm_amendno = s.wms_oub_itm_amendno
--     AND t.oub_itm_lineno = s.wms_oub_itm_lineno;
-- -- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	

    INSERT INTO dwh.F_OutboundItemDetailHistory
    (
        obh_hr_his_key ,obd_itm_key,obd_loc_key, oub_itm_loc_code, oub_itm_ou, oub_outbound_ord, oub_itm_amendno, oub_itm_lineno, oub_item_code, oub_itm_order_qty, oub_itm_sch_type, oub_itm_balqty, oub_itm_issueqty, oub_itm_processqty, oub_itm_masteruom, oub_itm_deliverydate, oub_itm_serfrom, oub_itm_serto, oub_itm_plan_gd_iss_dt, oub_itm_plan_dt_iss, oub_itm_sub_rules, oub_itm_pack_remarks, oub_itm_su, oub_itm_uid_serial_no, oub_itm_cancel, oub_itm_cancel_code, oub_itm_wave_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        sb.obh_hr_his_key, COALESCE(l.itm_hdr_key,-1),COALESCE(c.loc_key,-1),s.wms_oub_itm_loc_code, s.wms_oub_itm_ou, s.wms_oub_outbound_ord, s.wms_oub_itm_amendno, s.wms_oub_itm_lineno, s.wms_oub_item_code, s.wms_oub_itm_order_qty, s.wms_oub_itm_sch_type, s.wms_oub_itm_balqty, s.wms_oub_itm_issueqty, s.wms_oub_itm_processqty, s.wms_oub_itm_masteruom, s.wms_oub_itm_deliverydate, s.wms_oub_itm_serfrom, s.wms_oub_itm_serto, s.wms_oub_itm_plan_gd_iss_dt, s.wms_oub_itm_plan_dt_iss, s.wms_oub_itm_sub_rules, s.wms_oub_itm_pack_remarks, s.wms_oub_itm_su, s.wms_oub_itm_uid_serial_no, s.wms_oub_itm_cancel, s.wms_oub_itm_cancel_code, s.wms_oub_itm_wave_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_item_detail_h s
     INNER JOIN dwh.F_OutboundHeaderHistory sb
       ON s.wms_oub_itm_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_itm_ou = sb.oub_ou
    and s.wms_oub_itm_amendno=sb.oub_amendno
    LEFT JOIN dwh.d_itemheader L        
        ON s.wms_oub_item_code       = L.itm_code 
        AND s.wms_oub_itm_ou      = L.itm_ou
    LEFT JOIN dwh.d_location C      
        ON s.wms_oub_itm_loc_code  = C.loc_code 
        AND s.wms_oub_itm_ou        = C.loc_ou
    LEFT JOIN dwh.F_OutboundItemDetailHistory t
    ON s.wms_oub_itm_loc_code = t.oub_itm_loc_code
    AND s.wms_oub_itm_ou = t.oub_itm_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_itm_amendno = t.oub_itm_amendno
    AND s.wms_oub_itm_lineno = t.oub_itm_lineno
    WHERE t.oub_itm_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	

--Updating etlactiveind for Deleted source data 

		UPDATE	dwh.F_OutboundItemDetailHistory t1
		SET		etlactiveind		=  0,
				etlupdatedatetime	= Now()::TIMESTAMP
		FROM	dwh.F_OutboundItemDetailHistory t
		LEFT JOIN stg.stg_wms_outbound_item_detail_h s
		ON		s.wms_oub_itm_loc_code	= t.oub_itm_loc_code
		AND		s.wms_oub_itm_ou 		= t.oub_itm_ou
		AND		s.wms_oub_outbound_ord	= t.oub_outbound_ord
		AND		s.wms_oub_itm_amendno	= t.oub_itm_amendno
		AND		s.wms_oub_itm_lineno	= t.oub_itm_lineno
		WHERE	t1.obd_idl_his_key		= t.obd_idl_his_key
		AND		COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_intervaldays)::DATE
		AND		s.wms_oub_itm_loc_code IS NULL;

--Updating etlactiveind for Deleted source data ends;
	
-- 	UPDATE dwh.F_OutboundItemDetailHistory od 
-- 	SET obh_hr_his_key = oh.obh_hr_his_key,
-- 		etlupdatedatetime             = NOW()
-- 	FROM dwh.F_OutboundHeaderHistory oh 
-- 	WHERE od.oub_itm_ou = oh.oub_ou 
-- 	and od.oub_itm_loc_code = oh.oub_loc_code 
-- 	and od.oub_outbound_ord =oh.oub_outbound_ord 
-- 	and od.oub_itm_amendno=oh.oub_amendno
-- 	AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_item_detail_h
    (
        wms_oub_itm_loc_code, wms_oub_itm_ou, wms_oub_outbound_ord, wms_oub_itm_amendno, wms_oub_itm_lineno, wms_oub_item_code, wms_oub_itm_order_qty, wms_oub_itm_sch_type, wms_oub_itm_balqty, wms_oub_itm_issueqty, wms_oub_itm_processqty, wms_oub_itm_masteruom, wms_oub_itm_deliverydate, wms_oub_itm_serfrom, wms_oub_itm_serto, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_itm_sub_rules, wms_oub_itm_pack_remarks, wms_oub_itm_su, wms_oub_itm_uid_serial_no, wms_oub_itm_cancel, wms_oub_itm_cancel_code, wms_oub_itm_wave_no, etlcreateddatetime
    )
    SELECT
        wms_oub_itm_loc_code, wms_oub_itm_ou, wms_oub_outbound_ord, wms_oub_itm_amendno, wms_oub_itm_lineno, wms_oub_item_code, wms_oub_itm_order_qty, wms_oub_itm_sch_type, wms_oub_itm_balqty, wms_oub_itm_issueqty, wms_oub_itm_processqty, wms_oub_itm_masteruom, wms_oub_itm_deliverydate, wms_oub_itm_serfrom, wms_oub_itm_serto, wms_oub_itm_plan_gd_iss_dt, wms_oub_itm_plan_dt_iss, wms_oub_itm_sub_rules, wms_oub_itm_pack_remarks, wms_oub_itm_su, wms_oub_itm_uid_serial_no, wms_oub_itm_cancel, wms_oub_itm_cancel_code, wms_oub_itm_wave_no, etlcreateddatetime
    FROM stg.stg_wms_outbound_item_detail_h;
    
    END IF;

     ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outbounditemdetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outbounditemdetailweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outbounditemdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	 p_depsource VARCHAR(100);
    p_rawstorageflag integer;
	p_interval integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag ,h.depsource, d.intervaldays

	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource,p_interval
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN		

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_item_detail;

	UPDATE dwh.f_outboundItemDetail t
    SET 
	obh_hr_key               = oh.obh_hr_key,
    obd_itm_key              = COALESCE(l.itm_hdr_key,-1),
    obd_loc_key              = COALESCE(c.loc_key,-1),              
    oub_item_code            =  s.wms_oub_item_code,
    oub_itm_order_qty        =  s.wms_oub_itm_order_qty,
    oub_itm_sch_type         =  s.wms_oub_itm_sch_type,
    oub_itm_balqty           =  s.wms_oub_itm_balqty,
    oub_itm_issueqty         =  s.wms_oub_itm_issueqty,
    oub_itm_processqty       =  s.wms_oub_itm_processqty,
    oub_itm_masteruom        =  s.wms_oub_itm_masteruom,
    oub_itm_deliverydate     =  s.wms_oub_itm_deliverydate,
    oub_itm_plan_gd_iss_dt   =  s.wms_oub_itm_plan_gd_iss_dt,
    oub_itm_sub_rules        =  s.wms_oub_itm_sub_rules,
    oub_itm_pack_remarks     =  s.wms_oub_itm_pack_remarks,
    oub_itm_mas_qty          =  s.wms_oub_itm_mas_qty,
    oub_itm_order_item       =  s.wms_oub_itm_order_item,
    oub_itm_lotsl_batchno    =  s.wms_oub_itm_lotsl_batchno,
    oub_itm_cus_srno         =  s.wms_oub_itm_cus_srno,
    oub_itm_refdocno1        =  s.wms_oub_itm_refdocno1,
    oub_itm_refdocno2        =  s.wms_oub_itm_refdocno2,
    oub_itm_serialno         =  s.wms_oub_itm_serialno,
    oub_itm_thu_id           =  s.wms_oub_itm_thu_id,
    oub_itm_thu_srno         =  s.wms_oub_itm_thu_srno,
    oub_itm_inst             =  s.wms_oub_itm_inst,
    oub_itm_user_def_1       =  s.wms_oub_itm_user_def_1,
    oub_itm_user_def_2       =  s.wms_oub_itm_user_def_2,
    oub_itm_user_def_3       =  s.wms_oub_itm_user_def_3,
    oub_itm_stock_sts        =  s.wms_oub_itm_stock_sts,
    oub_itm_cust             =  s.wms_oub_itm_cust,
    oub_itm_coo_ml           =  s.wms_oub_itm_coo_ml,
    oub_itm_arribute1        =  s.wms_oub_itm_arribute1,
    oub_itm_arribute2        =  s.wms_oub_itm_arribute2,
    oub_itm_cancel           =  s.wms_oub_itm_cancel,
    oub_itm_cancel_code      =  s.wms_oub_itm_cancel_code,
    oub_itm_component        =  s.wms_oub_itm_component,
		etlactiveind 				    	= 1
		, etljobname 				    	= p_etljobname
		, envsourcecd 				  	= p_envsourcecd
		, datasourcecd 				  	= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_item_detail s
	INNER JOIN dwh.f_outboundheader oh
		ON s.wms_oub_itm_loc_code = oh.oub_loc_code 
		and s.wms_oub_outbound_ord =oh.oub_outbound_ord
		and s.wms_oub_itm_ou = oh.oub_ou
	LEFT JOIN dwh.d_itemheader L 		
		ON s.wms_oub_item_code 	     = L.itm_code 
        AND s.wms_oub_itm_ou      = L.itm_ou
	LEFT JOIN dwh.d_location C 		
		ON s.wms_oub_itm_loc_code  = C.loc_code 
        AND s.wms_oub_itm_ou        = C.loc_ou
    WHERE  
    t.oub_itm_loc_code          =  s.wms_oub_itm_loc_code
    AND t.oub_outbound_ord		 =  s.wms_oub_outbound_ord
    AND t.oub_itm_ou 			 =  s.wms_oub_itm_ou
    AND t.oub_itm_lineno           =  s.wms_oub_itm_lineno
	AND t.obh_hr_key    =            oh.obh_hr_key;
	
	GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
		DELETE FROM dwh.f_outboundItemDetail FH
		USING stg.stg_wms_outbound_item_detail OD
			WHERE 	FH.oub_itm_ou 		 	=  OD.wms_oub_itm_ou
			AND   	FH.oub_itm_loc_code   	=  OD.wms_oub_itm_loc_code
			AND 	FH.oub_outbound_ord	 	=  OD.wms_oub_outbound_ord
			AND 	FH.oub_itm_lineno    	=  OD.wms_oub_itm_lineno;
-- 		AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
	INSERT INTO dwh.f_outboundItemDetail
	(obh_hr_key				,			obd_itm_key    	,				obd_loc_key  ,
	 oub_itm_volume			, 			oub_itm_weight	,
     oub_itm_loc_code,               oub_itm_ou,         oub_outbound_ord,               oub_itm_lineno,          
     oub_item_code,                  oub_itm_order_qty,          oub_itm_sch_type,               oub_itm_balqty,          
     oub_itm_issueqty,               oub_itm_processqty,       oub_itm_masteruom,              oub_itm_deliverydate,       
     oub_itm_plan_gd_iss_dt,         oub_itm_sub_rules,         oub_itm_pack_remarks,           oub_itm_mas_qty,         
     oub_itm_order_item,             oub_itm_lotsl_batchno,         oub_itm_cus_srno,               oub_itm_refdocno1,          
     oub_itm_refdocno2,              oub_itm_serialno,           oub_itm_thu_id,                 oub_itm_thu_srno,          
     oub_itm_inst,                   oub_itm_user_def_1,          oub_itm_user_def_2,             oub_itm_user_def_3,      
     oub_itm_stock_sts,              oub_itm_cust,          oub_itm_coo_ml,                 oub_itm_arribute1,         
     oub_itm_arribute2,              oub_itm_cancel,         oub_itm_cancel_code,            oub_itm_component,        
     etlactiveind,			         etljobname,
     envsourcecd,                    datasourcecd,     
     etlcreatedatetime
	)
	
	SELECT 

 	   oh.obh_hr_key				, 			COALESCE(L.itm_hdr_key,-1)	,		COALESCE(c.loc_key,-1),
	   (L.itm_length*L.itm_breadth*L.itm_height) ,	L.itm_weight			,
      OD.wms_oub_itm_loc_code,                   OD.wms_oub_itm_ou,       OD.wms_oub_outbound_ord,                   OD.wms_oub_itm_lineno,  
      OD.wms_oub_item_code,                      OD.wms_oub_itm_order_qty,   OD.wms_oub_itm_sch_type,                   OD.wms_oub_itm_balqty,     
      OD.wms_oub_itm_issueqty,                   OD.wms_oub_itm_processqty,  OD.wms_oub_itm_masteruom,                  OD.wms_oub_itm_deliverydate, 
      OD.wms_oub_itm_plan_gd_iss_dt,             OD.wms_oub_itm_sub_rules,  OD.wms_oub_itm_pack_remarks,               OD.wms_oub_itm_mas_qty,     
      OD.wms_oub_itm_order_item,                 OD.wms_oub_itm_lotsl_batchno,   OD.wms_oub_itm_cus_srno,                   OD.wms_oub_itm_refdocno1,       
      OD.wms_oub_itm_refdocno2,                  OD.wms_oub_itm_serialno,        OD.wms_oub_itm_thu_id,                     OD.wms_oub_itm_thu_srno,          
      OD.wms_oub_itm_inst,                       OD.wms_oub_itm_user_def_1,          OD.wms_oub_itm_user_def_2,                 OD.wms_oub_itm_user_def_3,    
      OD.wms_oub_itm_stock_sts,                  OD.wms_oub_itm_cust,         OD.wms_oub_itm_coo_ml,                     OD.wms_oub_itm_arribute1,        
      OD.wms_oub_itm_arribute2,                  OD.wms_oub_itm_cancel,        OD.wms_oub_itm_cancel_code,                OD.wms_oub_itm_component,    
      1 AS etlactiveind,				          p_etljobname,
		p_envsourcecd							, p_datasourcecd,         
        NOW()
	FROM stg.stg_wms_outbound_item_detail OD
	INNER JOIN dwh.f_outboundheader oh
		ON OD.wms_oub_itm_ou = oh.oub_ou 
		and OD.wms_oub_itm_loc_code = oh.oub_loc_code
		and OD.wms_oub_outbound_ord =oh.oub_outbound_ord
    LEFT JOIN dwh.d_itemheader L 		
		ON OD.wms_oub_item_code		= L.itm_code 
        AND OD.wms_oub_itm_ou		= L.itm_ou
	LEFT JOIN dwh.d_location C 		
		ON OD.wms_oub_itm_loc_code  = C.loc_code 
        AND OD.wms_oub_itm_ou        = C.loc_ou
	LEFT JOIN dwh.f_outboundItemDetail FH 	
		ON FH.oub_itm_loc_code   =  OD.wms_oub_itm_loc_code
		AND FH.oub_outbound_ord	 =  OD.wms_oub_outbound_ord
		AND FH.oub_itm_ou 		 =  OD.wms_oub_itm_ou
		AND FH.oub_itm_lineno    =  OD.wms_oub_itm_lineno
		AND FH.obh_hr_key    	=  oh.obh_hr_key
    WHERE FH.oub_itm_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	UPDATE dwh.f_outboundItemDetail t1
	set etlactiveind =  0,
	etlupdatedatetime = Now()::timestamp
	from dwh.f_outboundItemDetail t
	left join stg.stg_wms_outbound_item_detail s
	on t.oub_itm_loc_code          =  s.wms_oub_itm_loc_code
    AND t.oub_outbound_ord		 =  s.wms_oub_outbound_ord
    AND t.oub_itm_ou 			 =  s.wms_oub_itm_ou
    AND t.oub_itm_lineno           =  s.wms_oub_itm_lineno
	and t.obh_hr_key			  = t1.obh_hr_key	
	where COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
	and s.wms_oub_itm_ou is null;
	
	GET DIAGNOSTICS updcnt = ROW_COUNT;
/*	
	UPDATE dwh.f_outboundItemDetail od 
	SET obh_hr_key = oh.obh_hr_key,
		etlupdatedatetime 	= NOW()
	FROM dwh.f_outboundheader oh 
	WHERE od.oub_itm_ou = oh.oub_ou 
	and od.oub_itm_loc_code = oh.oub_loc_code 
	and od.oub_outbound_ord =oh.oub_outbound_ord 
	AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

	--GET DIAGNOSTICS updcnt = ROW_COUNT;
	select 0 into updcnt;
*/
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_item_detail
	(
		wms_oub_itm_loc_code,     wms_oub_itm_ou,     wms_oub_outbound_ord,     wms_oub_itm_lineno,     wms_oub_item_code,     wms_oub_itm_order_qty,     wms_oub_itm_sch_type,     wms_oub_itm_balqty,     wms_oub_itm_issueqty,     wms_oub_itm_processqty,     wms_oub_itm_masteruom,     wms_oub_itm_deliverydate,     wms_oub_itm_serfrom,     wms_oub_itm_serto,     wms_oub_itm_plan_gd_iss_dt,     wms_oub_itm_plan_dt_iss,     wms_oub_itm_sub_rules,     wms_oub_itm_pack_remarks,     wms_oub_itm_su,     wms_oub_itm_cust_itm_code,     wms_oub_itm_mas_qty,     wms_oub_itm_order_item,     wms_oub_itm_lotsl_batchno,     wms_oub_itm_cus_srno,     wms_oub_itm_refdocno1,     wms_oub_itm_refdocno2,     wms_oub_itm_serialno,     wms_oub_itm_thu_id,     wms_oub_itm_thu_srno,     wms_oub_itm_inst,     wms_oub_itm_uid_serial_no,     wms_oub_itm_tolerance,     wms_oub_itm_user_def_1,     wms_oub_itm_user_def_2,     wms_oub_itm_user_def_3,     wms_oub_itm_shelflife,     wms_oub_itm_stock_sts,     wms_oub_break_attribute,     wms_oub_country_of_origin,     wms_oub_itm_cust,     wms_oub_itm_inv_type,     wms_oub_itm_coo_ml,     wms_oub_itm_arribute1,     wms_oub_itm_arribute2,     wms_oub_itm_arribute3,     wms_oub_itm_arribute4,     wms_oub_itm_arribute5,     wms_oub_itm_prod_status,     wms_oub_itm_cancel,     wms_oub_itm_cancel_code,     wms_oub_opbopitp_bil_status,     wms_oub_gmvchrgs_sell_bil_status,     wms_oub_gmvchrgs_buy_bil_status,     wms_oub_itm_component,     wms_oub_shchdrop_buy_bil_status,     wms_oub_gmvcdrop_buy_bil_status,     wms_oub_gmvcdrop_sell_bil_status,     wms_oub_shchdrop_sell_bil_status,     wms_oub_itm_kit_lineno,     wms_oub_itm_ratio,     wms_oub_txchsdrs_sell_bil_status,     wms_oub_txchsdrb_buy_bil_status,     wms_oub_itm_wave_no,     wms_oub_ccmiorfe_sell_bil_status,     wms_oub_gmvchmus_sell_bil_status,     wms_oub_ccaufbos_sell_bil_status,     wms_oub_ffcgvsml_sell_bil_status,     wms_oub_markmior_sell_bil_status,     wms_oub_markaufe_sell_bil_status,     wms_oub_gmvchmus_buy_bil_status,     wms_oub_txcsemse_buy_bil_status,     wms_oub_itm_arribute6,     wms_oub_itm_arribute7,     wms_oub_itm_arribute8,     wms_oub_itm_arribute9,     wms_oub_itm_arribute10,     wms_oub_cupkslch_sell_bil_status      ,etlcreateddatetime
	)
	SELECT 
		wms_oub_itm_loc_code,     wms_oub_itm_ou,     wms_oub_outbound_ord,     wms_oub_itm_lineno,     wms_oub_item_code,     wms_oub_itm_order_qty,     wms_oub_itm_sch_type,     wms_oub_itm_balqty,     wms_oub_itm_issueqty,     wms_oub_itm_processqty,     wms_oub_itm_masteruom,     wms_oub_itm_deliverydate,     wms_oub_itm_serfrom,     wms_oub_itm_serto,     wms_oub_itm_plan_gd_iss_dt,     wms_oub_itm_plan_dt_iss,     wms_oub_itm_sub_rules,     wms_oub_itm_pack_remarks,     wms_oub_itm_su,     wms_oub_itm_cust_itm_code,     wms_oub_itm_mas_qty,     wms_oub_itm_order_item,     wms_oub_itm_lotsl_batchno,     wms_oub_itm_cus_srno,     wms_oub_itm_refdocno1,     wms_oub_itm_refdocno2,     wms_oub_itm_serialno,     wms_oub_itm_thu_id,     wms_oub_itm_thu_srno,     wms_oub_itm_inst,     wms_oub_itm_uid_serial_no,     wms_oub_itm_tolerance,     wms_oub_itm_user_def_1,     wms_oub_itm_user_def_2,     wms_oub_itm_user_def_3,     wms_oub_itm_shelflife,     wms_oub_itm_stock_sts,     wms_oub_break_attribute,     wms_oub_country_of_origin,     wms_oub_itm_cust,     wms_oub_itm_inv_type,     wms_oub_itm_coo_ml,     wms_oub_itm_arribute1,     wms_oub_itm_arribute2,     wms_oub_itm_arribute3,     wms_oub_itm_arribute4,     wms_oub_itm_arribute5,     wms_oub_itm_prod_status,     wms_oub_itm_cancel,     wms_oub_itm_cancel_code,     wms_oub_opbopitp_bil_status,     wms_oub_gmvchrgs_sell_bil_status,     wms_oub_gmvchrgs_buy_bil_status,     wms_oub_itm_component,     wms_oub_shchdrop_buy_bil_status,     wms_oub_gmvcdrop_buy_bil_status,     wms_oub_gmvcdrop_sell_bil_status,     wms_oub_shchdrop_sell_bil_status,     wms_oub_itm_kit_lineno,     wms_oub_itm_ratio,     wms_oub_txchsdrs_sell_bil_status,     wms_oub_txchsdrb_buy_bil_status,     wms_oub_itm_wave_no,     wms_oub_ccmiorfe_sell_bil_status,     wms_oub_gmvchmus_sell_bil_status,     wms_oub_ccaufbos_sell_bil_status,     wms_oub_ffcgvsml_sell_bil_status,     wms_oub_markmior_sell_bil_status,     wms_oub_markaufe_sell_bil_status,     wms_oub_gmvchmus_buy_bil_status,     wms_oub_txcsemse_buy_bil_status,     wms_oub_itm_arribute6,     wms_oub_itm_arribute7,     wms_oub_itm_arribute8,     wms_oub_itm_arribute9,     wms_oub_itm_arribute10,     wms_oub_cupkslch_sell_bil_status      ,etlcreateddatetime
	FROM stg.stg_wms_outbound_item_detail;
    END IF;
    
   ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
		select 0 into inscnt;
		select 0 into updcnt;
  
END;
$$;


ALTER PROCEDURE dwh.usp_f_outbounditemdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundlotsrldetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundlotsrldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	 p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag ,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag ,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_lot_ser_dtl;


    UPDATE dwh.F_OutboundLotSrlDetail t
    SET
	     obh_hr_key   = oh.obh_hr_key,
         oub_loc_key                          = COALESCE(l.loc_key,-1),
        oub_itm_key                        = COALESCE(c.itm_hdr_key,-1),
        oub_item_code              = s.wms_oub_item_code,
        oub_item_lineno            = s.wms_oub_item_lineno,
        oub_lotsl_order_qty        = s.wms_oub_lotsl_order_qty,
        oub_lotsl_batchno          = s.wms_oub_lotsl_batchno,
        oub_lotsl_serialno         = s.wms_oub_lotsl_serialno,
        oub_lotsl_masteruom        = s.wms_oub_lotsl_masteruom,
        oub_refdocno1              = s.wms_oub_refdocno1,
        oub_refdocno2              = s.wms_oub_refdocno2,
        oub_thu_id                 = s.wms_oub_thu_id,
        oub_thu_srno               = s.wms_oub_thu_srno,
        oub_cus_srno               = s.wms_oub_cus_srno,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl s
	
	INNER JOIN dwh.f_outboundheader oh
	on  s.wms_oub_lotsl_loc_code = oh.oub_loc_code  
	and s.wms_oub_outbound_ord =oh.oub_outbound_ord 
	and s.wms_oub_lotsl_ou = oh.oub_ou
	 
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou

    WHERE t.oub_lotsl_loc_code = s.wms_oub_lotsl_loc_code
    AND t.oub_lotsl_ou = s.wms_oub_lotsl_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_lotsl_lineno = s.wms_oub_lotsl_lineno
	AND  t.obh_hr_key   = oh.obh_hr_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

/*
	DELETE FROM dwh.F_OutboundLotSrlDetail t
	USING stg.stg_wms_outbound_lot_ser_dtl s
		WHERE s.wms_oub_lotsl_loc_code = t.oub_lotsl_loc_code
    	AND s.wms_oub_lotsl_ou = t.oub_lotsl_ou
    	AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    	AND s.wms_oub_lotsl_lineno = t.oub_lotsl_lineno;
-- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	
*/
    INSERT INTO dwh.F_OutboundLotSrlDetail
    (
        obh_hr_key, oub_loc_key , oub_itm_key ,oub_lotsl_loc_code, oub_lotsl_ou, oub_outbound_ord, oub_lotsl_lineno, oub_item_code, oub_item_lineno, oub_lotsl_order_qty, oub_lotsl_batchno, oub_lotsl_serialno, oub_lotsl_masteruom, oub_refdocno1, oub_refdocno2, oub_thu_id, oub_thu_srno, oub_cus_srno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        oh.obh_hr_key, COALESCE(l.loc_key,-1), COALESCE(c.itm_hdr_key,-1),s.wms_oub_lotsl_loc_code, s.wms_oub_lotsl_ou, s.wms_oub_outbound_ord, s.wms_oub_lotsl_lineno, s.wms_oub_item_code, s.wms_oub_item_lineno, s.wms_oub_lotsl_order_qty, s.wms_oub_lotsl_batchno, s.wms_oub_lotsl_serialno, s.wms_oub_lotsl_masteruom, s.wms_oub_refdocno1, s.wms_oub_refdocno2, s.wms_oub_thu_id, s.wms_oub_thu_srno, s.wms_oub_cus_srno, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl s
   	INNER JOIN dwh.f_outboundheader oh
	on s.wms_oub_lotsl_ou = oh.oub_ou
	and s.wms_oub_lotsl_loc_code = oh.oub_loc_code
	and s.wms_oub_outbound_ord =oh.oub_outbound_ord 
	 
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou

    LEFT JOIN dwh.F_OutboundLotSrlDetail t
    ON s.wms_oub_lotsl_loc_code = t.oub_lotsl_loc_code
    AND s.wms_oub_lotsl_ou = t.oub_lotsl_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_lotsl_lineno = t.oub_lotsl_lineno
	AND  t.obh_hr_key   = oh.obh_hr_key
    WHERE t.oub_lotsl_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
/*	
	UPDATE dwh.F_OutboundLotSrlDetail od 
	SET obh_hr_key = oh.obh_hr_key,
		etlupdatedatetime          = NOW()
	FROM dwh.f_outboundheader oh 
	WHERE od.oub_lotsl_ou = oh.oub_ou
	AND od.oub_lotsl_loc_code = oh.oub_loc_code  
	and od.oub_outbound_ord =oh.oub_outbound_ord 
	AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
		
    select 0 into updcnt;
*/
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_lot_ser_dtl
    (
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    )
    SELECT
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    FROM stg.stg_wms_outbound_lot_ser_dtl;
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
       

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundlotsrldetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundlotsrldetailhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundlotsrldetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) = NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_lot_ser_dtl_h;

    UPDATE dwh.F_OutboundLotSrlDetailHistory t
    SET
        obh_hr_his_key             =sb.obh_hr_his_key,
        oub_loc_key                = COALESCE(l.loc_key,-1),
        oub_itm_key                = COALESCE(c.itm_hdr_key,-1),
        oub_item_code              = s.wms_oub_item_code,
        oub_item_lineno            = s.wms_oub_item_lineno,
        oub_lotsl_order_qty        = s.wms_oub_lotsl_order_qty,
        oub_lotsl_batchno          = s.wms_oub_lotsl_batchno,
        oub_lotsl_serialno         = s.wms_oub_lotsl_serialno,
        oub_lotsl_masteruom        = s.wms_oub_lotsl_masteruom,
        oub_refdocno1              = s.wms_oub_refdocno1,
        oub_refdocno2              = s.wms_oub_refdocno2,
        oub_thu_id                 = s.wms_oub_thu_id,
        oub_thu_srno               = s.wms_oub_thu_srno,
        oub_cus_srno               = s.wms_oub_cus_srno,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl_h s

    INNER JOIN dwh.F_OutboundHeaderHistory sb
    
       ON s.wms_oub_lotsl_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_lotsl_ou = sb.oub_ou
    and s.wms_oub_lotsl_amendno=sb.oub_amendno

    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou

    WHERE t.oub_lotsl_loc_code = s.wms_oub_lotsl_loc_code
    AND t.oub_lotsl_ou = s.wms_oub_lotsl_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_lotsl_lineno = s.wms_oub_lotsl_lineno
    AND t.oub_lotsl_amendno = s.wms_oub_lotsl_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

-- 	DELETE FROM dwh.f_outboundlotsrldetailhistory t
-- 	USING stg.stg_wms_outbound_lot_ser_dtl_h s
-- 		WHERE t.oub_lotsl_loc_code = s.wms_oub_lotsl_loc_code
--     AND t.oub_lotsl_ou = s.wms_oub_lotsl_ou
--     AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--     AND t.oub_lotsl_lineno = s.wms_oub_lotsl_lineno
--     AND t.oub_lotsl_amendno = s.wms_oub_lotsl_amendno;
-- -- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	

    INSERT INTO dwh.F_OutboundLotSrlDetailHistory
    (
       obh_hr_his_key,  oub_loc_key, oub_itm_key,oub_lotsl_loc_code, oub_lotsl_ou, oub_outbound_ord, oub_lotsl_lineno, oub_lotsl_amendno, oub_item_code, oub_item_lineno, oub_lotsl_order_qty, oub_lotsl_batchno, oub_lotsl_serialno, oub_lotsl_masteruom, oub_refdocno1, oub_refdocno2, oub_thu_id, oub_thu_srno, oub_cus_srno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       sb.obh_hr_his_key, COALESCE(l.loc_key,-1),COALESCE(c.itm_hdr_key,-1),s.wms_oub_lotsl_loc_code, s.wms_oub_lotsl_ou, s.wms_oub_outbound_ord, s.wms_oub_lotsl_lineno, s.wms_oub_lotsl_amendno, s.wms_oub_item_code, s.wms_oub_item_lineno, s.wms_oub_lotsl_order_qty, s.wms_oub_lotsl_batchno, s.wms_oub_lotsl_serialno, s.wms_oub_lotsl_masteruom, s.wms_oub_refdocno1, s.wms_oub_refdocno2, s.wms_oub_thu_id, s.wms_oub_thu_srno, s.wms_oub_cus_srno, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl_h s
    INNER JOIN dwh.F_OutboundHeaderHistory sb
    
       ON s.wms_oub_lotsl_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_lotsl_ou = sb.oub_ou
    and s.wms_oub_lotsl_amendno=sb.oub_amendno

    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou

    LEFT JOIN dwh.F_OutboundLotSrlDetailHistory t
    ON s.wms_oub_lotsl_loc_code = t.oub_lotsl_loc_code
    AND s.wms_oub_lotsl_ou = t.oub_lotsl_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_lotsl_lineno = t.oub_lotsl_lineno
    AND s.wms_oub_lotsl_amendno = t.oub_lotsl_amendno
    WHERE t.oub_lotsl_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

-- 	update dwh.F_OutboundLotSrlDetailHistory a
-- 	set obh_hr_his_key		=	b.obh_hr_his_key,
-- 	 	etlupdatedatetime	=	now()
-- 	from dwh.F_OutboundHeaderHistory b
-- 	where b.oub_ou			=	a.oub_lotsl_ou
-- 	and b.oub_loc_code		=	a.oub_lotsl_loc_code
-- 	and b.oub_outbound_ord	=	a.oub_outbound_ord
-- 	and b.oub_amendno		=	a.oub_lotsl_amendno
-- 	and COALESCE(b.oub_modified_date,b.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_lot_ser_dtl_h
    (
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_lotsl_amendno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    )
    SELECT
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_lotsl_amendno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    FROM stg.stg_wms_outbound_lot_ser_dtl_h;
    
    END IF;
    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundlotsrldetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundlotsrldetailhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundlotsrldetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;
	p_intervaldays integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource, d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource, p_intervaldays
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) = NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_lot_ser_dtl_h;

    UPDATE dwh.F_OutboundLotSrlDetailHistory t
    SET
        obh_hr_his_key             = sb.obh_hr_his_key,
        oub_loc_key                = COALESCE(l.loc_key,-1),
        oub_itm_key                = COALESCE(c.itm_hdr_key,-1),
        oub_item_code              = s.wms_oub_item_code,
        oub_item_lineno            = s.wms_oub_item_lineno,
        oub_lotsl_order_qty        = s.wms_oub_lotsl_order_qty,
        oub_lotsl_batchno          = s.wms_oub_lotsl_batchno,
        oub_lotsl_serialno         = s.wms_oub_lotsl_serialno,
        oub_lotsl_masteruom        = s.wms_oub_lotsl_masteruom,
        oub_refdocno1              = s.wms_oub_refdocno1,
        oub_refdocno2              = s.wms_oub_refdocno2,
        oub_thu_id                 = s.wms_oub_thu_id,
        oub_thu_srno               = s.wms_oub_thu_srno,
        oub_cus_srno               = s.wms_oub_cus_srno,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl_h s
    INNER JOIN dwh.F_OutboundHeaderHistory sb
       	ON s.wms_oub_lotsl_loc_code = sb.oub_loc_code 
		and s.wms_oub_outbound_ord =sb.oub_outbound_ord
		and s.wms_oub_lotsl_ou = sb.oub_ou
		and s.wms_oub_lotsl_amendno=sb.oub_amendno
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou
    LEFT JOIN dwh.d_itemheader C        
    	ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou
    WHERE t.oub_lotsl_loc_code = s.wms_oub_lotsl_loc_code
		AND t.oub_lotsl_ou = s.wms_oub_lotsl_ou
		AND t.oub_outbound_ord = s.wms_oub_outbound_ord
		AND t.oub_lotsl_lineno = s.wms_oub_lotsl_lineno
		AND t.oub_lotsl_amendno = s.wms_oub_lotsl_amendno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

-- 	DELETE FROM dwh.f_outboundlotsrldetailhistory t
-- 	USING stg.stg_wms_outbound_lot_ser_dtl_h s
-- 		WHERE t.oub_lotsl_loc_code = s.wms_oub_lotsl_loc_code
--     AND t.oub_lotsl_ou = s.wms_oub_lotsl_ou
--     AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--     AND t.oub_lotsl_lineno = s.wms_oub_lotsl_lineno
--     AND t.oub_lotsl_amendno = s.wms_oub_lotsl_amendno;
-- -- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	

    INSERT INTO dwh.F_OutboundLotSrlDetailHistory
    (
       obh_hr_his_key,  oub_loc_key, oub_itm_key,oub_lotsl_loc_code, oub_lotsl_ou, oub_outbound_ord, oub_lotsl_lineno, oub_lotsl_amendno, oub_item_code, oub_item_lineno, oub_lotsl_order_qty, oub_lotsl_batchno, oub_lotsl_serialno, oub_lotsl_masteruom, oub_refdocno1, oub_refdocno2, oub_thu_id, oub_thu_srno, oub_cus_srno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       sb.obh_hr_his_key, COALESCE(l.loc_key,-1),COALESCE(c.itm_hdr_key,-1),s.wms_oub_lotsl_loc_code, s.wms_oub_lotsl_ou, s.wms_oub_outbound_ord, s.wms_oub_lotsl_lineno, s.wms_oub_lotsl_amendno, s.wms_oub_item_code, s.wms_oub_item_lineno, s.wms_oub_lotsl_order_qty, s.wms_oub_lotsl_batchno, s.wms_oub_lotsl_serialno, s.wms_oub_lotsl_masteruom, s.wms_oub_refdocno1, s.wms_oub_refdocno2, s.wms_oub_thu_id, s.wms_oub_thu_srno, s.wms_oub_cus_srno, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl_h s
    INNER JOIN dwh.F_OutboundHeaderHistory sb
       ON s.wms_oub_lotsl_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_lotsl_ou = sb.oub_ou
    and s.wms_oub_lotsl_amendno=sb.oub_amendno
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou
    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou
    LEFT JOIN dwh.F_OutboundLotSrlDetailHistory t
    ON s.wms_oub_lotsl_loc_code = t.oub_lotsl_loc_code
    AND s.wms_oub_lotsl_ou = t.oub_lotsl_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_lotsl_lineno = t.oub_lotsl_lineno
    AND s.wms_oub_lotsl_amendno = t.oub_lotsl_amendno
    WHERE t.oub_lotsl_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
--Updating etlactiveind for Deleted source data 

		UPDATE	dwh.F_OutboundLotSrlDetailHistory t1
		SET		etlactiveind		=  0,
				etlupdatedatetime	= Now()::TIMESTAMP
		FROM	dwh.F_OutboundLotSrlDetailHistory t
		LEFT JOIN stg.stg_wms_outbound_lot_ser_dtl_h s
		ON		t.oub_lotsl_loc_code 	= s.wms_oub_lotsl_loc_code
		AND		t.oub_lotsl_ou			= s.wms_oub_lotsl_ou
		AND		t.oub_outbound_ord		= s.wms_oub_outbound_ord
		AND		t.oub_lotsl_lineno		= s.wms_oub_lotsl_lineno
		AND		t.oub_lotsl_amendno		= s.wms_oub_lotsl_amendno
		WHERE	t.oub_lotsl_loc_his_key	= t1.oub_lotsl_loc_his_key
		AND		COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_intervaldays)::DATE
		AND		s.wms_oub_lotsl_loc_code IS NULL;

--Updating etlactiveind for Deleted source data ends;

-- 	update dwh.F_OutboundLotSrlDetailHistory a
-- 	set obh_hr_his_key		=	b.obh_hr_his_key,
-- 	 	etlupdatedatetime	=	now()
-- 	from dwh.F_OutboundHeaderHistory b
-- 	where b.oub_ou			=	a.oub_lotsl_ou
-- 	and b.oub_loc_code		=	a.oub_lotsl_loc_code
-- 	and b.oub_outbound_ord	=	a.oub_outbound_ord
-- 	and b.oub_amendno		=	a.oub_lotsl_amendno
-- 	and COALESCE(b.oub_modified_date,b.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_lot_ser_dtl_h
    (
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_lotsl_amendno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    )
    SELECT
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_lotsl_amendno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    FROM stg.stg_wms_outbound_lot_ser_dtl_h;
    
    END IF;
    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundlotsrldetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundlotsrldetailweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundlotsrldetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	 p_depsource VARCHAR(100);

    p_rawstorageflag integer;
	p_interval integer;
	

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag ,h.depsource, d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag ,p_depsource, p_interval
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_lot_ser_dtl;

    UPDATE dwh.F_OutboundLotSrlDetail t
    SET
	     obh_hr_key   			   = oh.obh_hr_key,
         oub_loc_key               = COALESCE(l.loc_key,-1),
        oub_itm_key                = COALESCE(c.itm_hdr_key,-1),
        oub_item_code              = s.wms_oub_item_code,
        oub_item_lineno            = s.wms_oub_item_lineno,
        oub_lotsl_order_qty        = s.wms_oub_lotsl_order_qty,
        oub_lotsl_batchno          = s.wms_oub_lotsl_batchno,
        oub_lotsl_serialno         = s.wms_oub_lotsl_serialno,
        oub_lotsl_masteruom        = s.wms_oub_lotsl_masteruom,
        oub_refdocno1              = s.wms_oub_refdocno1,
        oub_refdocno2              = s.wms_oub_refdocno2,
        oub_thu_id                 = s.wms_oub_thu_id,
        oub_thu_srno               = s.wms_oub_thu_srno,
        oub_cus_srno               = s.wms_oub_cus_srno,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl s
	
	INNER JOIN dwh.f_outboundheader oh
	on  s.wms_oub_lotsl_loc_code = oh.oub_loc_code  
	and s.wms_oub_outbound_ord =oh.oub_outbound_ord 
	and s.wms_oub_lotsl_ou = oh.oub_ou
	 
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou

    WHERE t.oub_lotsl_loc_code = s.wms_oub_lotsl_loc_code
    AND t.oub_lotsl_ou = s.wms_oub_lotsl_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_lotsl_lineno = s.wms_oub_lotsl_lineno
	AND  t.obh_hr_key   = oh.obh_hr_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

/*
	DELETE FROM dwh.F_OutboundLotSrlDetail t
	USING stg.stg_wms_outbound_lot_ser_dtl s
		WHERE s.wms_oub_lotsl_loc_code = t.oub_lotsl_loc_code
    	AND s.wms_oub_lotsl_ou = t.oub_lotsl_ou
    	AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    	AND s.wms_oub_lotsl_lineno = t.oub_lotsl_lineno;
-- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	
*/
    INSERT INTO dwh.F_OutboundLotSrlDetail
    (
        obh_hr_key, oub_loc_key , oub_itm_key ,oub_lotsl_loc_code, oub_lotsl_ou, oub_outbound_ord, oub_lotsl_lineno, oub_item_code, oub_item_lineno, oub_lotsl_order_qty, oub_lotsl_batchno, oub_lotsl_serialno, oub_lotsl_masteruom, oub_refdocno1, oub_refdocno2, oub_thu_id, oub_thu_srno, oub_cus_srno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        oh.obh_hr_key, COALESCE(l.loc_key,-1), COALESCE(c.itm_hdr_key,-1),s.wms_oub_lotsl_loc_code, s.wms_oub_lotsl_ou, s.wms_oub_outbound_ord, s.wms_oub_lotsl_lineno, s.wms_oub_item_code, s.wms_oub_item_lineno, s.wms_oub_lotsl_order_qty, s.wms_oub_lotsl_batchno, s.wms_oub_lotsl_serialno, s.wms_oub_lotsl_masteruom, s.wms_oub_refdocno1, s.wms_oub_refdocno2, s.wms_oub_thu_id, s.wms_oub_thu_srno, s.wms_oub_cus_srno, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_lot_ser_dtl s
   	INNER JOIN dwh.f_outboundheader oh
	on s.wms_oub_lotsl_ou = oh.oub_ou
	and s.wms_oub_lotsl_loc_code = oh.oub_loc_code
	and s.wms_oub_outbound_ord =oh.oub_outbound_ord 
	 
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_lotsl_loc_code     = L.loc_code 
        AND s.wms_oub_lotsl_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_item_code       = C.itm_code 
    AND s.wms_oub_lotsl_ou             = C.itm_ou

    LEFT JOIN dwh.F_OutboundLotSrlDetail t
    ON s.wms_oub_lotsl_loc_code = t.oub_lotsl_loc_code
    AND s.wms_oub_lotsl_ou = t.oub_lotsl_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_lotsl_lineno = t.oub_lotsl_lineno
	AND  t.obh_hr_key   = oh.obh_hr_key
    WHERE t.oub_lotsl_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	UPDATE dwh.F_OutboundLotSrlDetail t1
	set etlactiveind =  0,
	etlupdatedatetime = Now()::timestamp
	from dwh.F_OutboundLotSrlDetail t
	left join stg.stg_wms_outbound_lot_ser_dtl s
	on t.oub_lotsl_loc_code = s.wms_oub_lotsl_loc_code
    AND t.oub_lotsl_ou = s.wms_oub_lotsl_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_lotsl_lineno = s.wms_oub_lotsl_lineno
	AND t.obh_hr_key= t1.t.obh_hr_key
	where COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
	and s.wms_oub_lotsl_ou is null;
	
	--GET DIAGNOSTICS updcnt = ROW_COUNT;
/*	
	UPDATE dwh.F_OutboundLotSrlDetail od 
	SET obh_hr_key = oh.obh_hr_key,
		etlupdatedatetime          = NOW()
	FROM dwh.f_outboundheader oh 
	WHERE od.oub_lotsl_ou = oh.oub_ou
	AND od.oub_lotsl_loc_code = oh.oub_loc_code  
	and od.oub_outbound_ord =oh.oub_outbound_ord 
	AND COALESCE(oh.oub_modified_date,oh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
		
    select 0 into updcnt;
*/
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_lot_ser_dtl
    (
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    )
    SELECT
        wms_oub_lotsl_loc_code, wms_oub_lotsl_ou, wms_oub_outbound_ord, wms_oub_lotsl_lineno, wms_oub_item_code, wms_oub_item_lineno, wms_oub_lotsl_order_qty, wms_oub_lotsl_batchno, wms_oub_lotsl_serialno, wms_oub_lotsl_masteruom, wms_oub_refdocno1, wms_oub_refdocno2, wms_oub_thu_id, wms_oub_thu_srno, wms_oub_cus_srno, etlcreateddatetime
    FROM stg.stg_wms_outbound_lot_ser_dtl;
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
       

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundlotsrldetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundschdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundschdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer; 
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag ,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag ,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
	
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_sch_dtl;

	UPDATE dwh.f_outboundSchDetail t
    SET  
		obh_hr_key                        =  sb.obh_hr_key,
    	oub_loc_key					        = COALESCE(l.loc_key,-1),
    	oub_itm_key                        = COALESCE(c.itm_hdr_key,-1),
		oub_sch_item_code                   =   s.wms_oub_sch_item_code,
		oub_sch_order_qty                   =   s.wms_oub_sch_order_qty,
		oub_sch_masteruom                   =   s.wms_oub_sch_masteruom,
		oub_sch_deliverydate                =   s.wms_oub_sch_deliverydate,
		oub_sch_serfrom                     =   s.wms_oub_sch_serfrom,
		oub_sch_serto                       =   s.wms_oub_sch_serto,
		oub_sch_plan_gd_iss_dt              =   s.wms_oub_sch_plan_gd_iss_dt,
		oub_sch_plan_gd_iss_time            =   s.wms_oub_sch_plan_gd_iss_time,
		oub_sch_operation_status            =   s.wms_oub_sch_operation_status,
		oub_sch_picked_qty                 	=   s.wms_oub_sch_picked_qty,
		oub_sch_packed_qty                 	=   s.wms_oub_sch_packed_qty,
		oub_sch_masteruomqty_ml            	=   s.wms_oub_sch_masteruomqty_ml,
		oub_sch_orderuom_ml                	=   s.wms_oub_sch_orderuom_ml,
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_sch_dtl s
	INNER JOIN dwh.f_outboundheader sb
		ON s.wms_oub_sch_loc_code = sb.oub_loc_code 
		and s.wms_oub_outbound_ord =sb.oub_outbound_ord
		and s.wms_oub_sch_ou = sb.oub_ou
	LEFT JOIN dwh.d_location L 		
		ON s.wms_oub_sch_loc_code 	= L.loc_code 
        AND s.wms_oub_sch_ou        = L.loc_ou
    LEFT JOIN dwh.d_itemheader C 		
		ON s.wms_oub_sch_item_code 	     = C.itm_code 
    	AND s.wms_oub_sch_ou             = C.itm_ou
    WHERE	t.oub_sch_loc_code        =   s.wms_oub_sch_loc_code
		AND	  t.oub_sch_ou            =   s.wms_oub_sch_ou
		AND	  t.oub_outbound_ord      =   s.wms_oub_outbound_ord
		AND	  t.oub_sch_lineno        =   s.wms_oub_sch_lineno
		AND	  t.oub_item_lineno       =   s.wms_oub_item_lineno
		AND	  t.obh_hr_key  =  sb.obh_hr_key;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
	

/*
	DELETE from dwh.f_outboundSchDetail FH
	USING stg.stg_wms_outbound_sch_dtl OH
		where FH.oub_sch_loc_code		=  OH.wms_oub_sch_loc_code
		AND	  FH.oub_sch_ou				=  OH.wms_oub_sch_ou
		AND	  FH.oub_outbound_ord		=  OH.wms_oub_outbound_ord
		AND	  FH.oub_sch_lineno			=  OH.wms_oub_sch_lineno
		AND	  FH.oub_item_lineno		=  OH.wms_oub_item_lineno;
-- 		AND	  FH.obh_hr_key				=  sb.obh_hr_key;
-- 	and COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/		
	INSERT INTO dwh.f_outboundSchDetail
	(   obh_hr_key, oub_loc_key,
		oub_itm_key,
		oub_sch_loc_code,        oub_sch_ou,         oub_outbound_ord,  oub_sch_lineno,  oub_sch_item_code,  
	 oub_item_lineno,  oub_sch_order_qty,   oub_sch_masteruom,              oub_sch_deliverydate,  oub_sch_serfrom,  
	 oub_sch_serto,  oub_sch_plan_gd_iss_dt,  oub_sch_plan_gd_iss_time,   oub_sch_operation_status,  oub_sch_picked_qty,  
	 oub_sch_packed_qty,  oub_sch_masteruomqty_ml,  oub_sch_orderuom_ml,
       etlactiveind,			     etljobname
		, envsourcecd,                     datasourcecd,                 etlcreatedatetime
	)
	
	SELECT 

       sb.obh_hr_key, COALESCE(l.loc_key,-1), COALESCE(c.itm_hdr_key,-1),OH.wms_oub_sch_loc_code,  OH.wms_oub_sch_ou,  OH.wms_oub_outbound_ord,  OH.wms_oub_sch_lineno,  OH.wms_oub_sch_item_code,  OH.wms_oub_item_lineno,  OH.wms_oub_sch_order_qty,  OH.wms_oub_sch_masteruom,  OH.wms_oub_sch_deliverydate,  OH.wms_oub_sch_serfrom,  OH.wms_oub_sch_serto,  OH.wms_oub_sch_plan_gd_iss_dt,  OH.wms_oub_sch_plan_gd_iss_time,  OH.wms_oub_sch_operation_status,  OH.wms_oub_sch_picked_qty,  OH.wms_oub_sch_packed_qty,  OH.wms_oub_sch_masteruomqty_ml,  OH.wms_oub_sch_orderuom_ml,       1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,                      NOW()
    FROM stg.stg_wms_outbound_sch_dtl OH
	INNER JOIN dwh.f_outboundheader sb
		ON OH.wms_oub_sch_ou		 	= sb.oub_ou 
		and  OH.wms_oub_sch_loc_code	= sb.oub_loc_code
		and OH.wms_oub_outbound_ord 	= sb.oub_outbound_ord
	LEFT JOIN dwh.d_location L 		
		ON OH.wms_oub_sch_loc_code 		= L.loc_code 
    	AND OH.wms_oub_sch_ou       	= L.loc_ou
    LEFT JOIN dwh.d_itemheader C 		
		ON OH.wms_oub_sch_item_code		= C.itm_code 
    	AND OH.wms_oub_sch_ou			= C.itm_ou
	LEFT JOIN dwh.f_outboundSchDetail FH 	
		ON FH.oub_sch_loc_code			=  OH.wms_oub_sch_loc_code
		AND	  FH.oub_sch_ou				=  OH.wms_oub_sch_ou
		AND	  FH.oub_outbound_ord		=  OH.wms_oub_outbound_ord
		AND	  FH.oub_sch_lineno			=  OH.wms_oub_sch_lineno
		AND	  FH.oub_item_lineno		=  OH.wms_oub_item_lineno
		AND	  FH.obh_hr_key				=  sb.obh_hr_key
		WHERE FH.oub_sch_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
/*	
    select 0 into updcnt;
	
	
	 UPDATE dwh.f_outboundSchDetail dtl
	 SET 	obh_hr_key          =   fh.obh_hr_key,
	 		etlupdatedatetime 	= 	NOW()	
	 FROM	 dwh.f_outboundheader fh
	 WHERE 	dtl.oub_sch_ou		 	= fh.oub_ou 
	 AND  	dtl.oub_sch_loc_code	= fh.oub_loc_code
	 AND  	dtl.oub_outbound_ord 	= fh.oub_outbound_ord
	 AND    COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	
*/	 
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_sch_dtl

	(
	     wms_oub_sch_loc_code,  wms_oub_sch_ou,  wms_oub_outbound_ord,  wms_oub_sch_lineno,  wms_oub_sch_item_code,  wms_oub_item_lineno,  wms_oub_sch_order_qty,  wms_oub_sch_masteruom,  wms_oub_sch_deliverydate,  wms_oub_sch_serfrom,  wms_oub_sch_serto,  wms_oub_sch_plan_gd_iss_dt,  wms_oub_sch_plan_gd_iss_time,  wms_oub_sch_operation_status,  wms_oub_sch_picked_qty,  wms_oub_sch_packed_qty,  wms_oub_sch_masteruomqty_ml,  wms_oub_sch_orderuom_ml,	             etlcreateddatetime
	)
	SELECT 
				wms_oub_sch_loc_code,  wms_oub_sch_ou,  wms_oub_outbound_ord,  wms_oub_sch_lineno,  wms_oub_sch_item_code,  wms_oub_item_lineno,  wms_oub_sch_order_qty,  wms_oub_sch_masteruom,  wms_oub_sch_deliverydate,  wms_oub_sch_serfrom,  wms_oub_sch_serto,  wms_oub_sch_plan_gd_iss_dt,  wms_oub_sch_plan_gd_iss_time,  wms_oub_sch_operation_status,  wms_oub_sch_picked_qty,  wms_oub_sch_packed_qty,  wms_oub_sch_masteruomqty_ml,  wms_oub_sch_orderuom_ml,           etlcreateddatetime
	FROM stg.stg_wms_outbound_sch_dtl;
    END IF;
	
    
    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
       
     EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
       
    
 
   
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundschdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundschdetailhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundschdetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
			
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_sch_dtl_h;

    UPDATE dwh.F_OutboundSchDetailHistory t
    SET
 
        obh_hr_his_key                  =sb.obh_hr_his_key,
        oub_loc_key                     = COALESCE(l.loc_key,-1),
        oub_itm_key                     = COALESCE(c.itm_hdr_key,-1),
        oub_sch_item_code               = s.wms_oub_sch_item_code,
        oub_sch_order_qty               = s.wms_oub_sch_order_qty,
        oub_sch_masteruom               = s.wms_oub_sch_masteruom,
        oub_sch_deliverydate            = s.wms_oub_sch_deliverydate,
        oub_sch_serfrom                 = s.wms_oub_sch_serfrom,
        oub_sch_serto                   = s.wms_oub_sch_serto,
        oub_sch_plan_gd_iss_dt          = s.wms_oub_sch_plan_gd_iss_dt,
        oub_sch_plan_gd_iss_time        = s.wms_oub_sch_plan_gd_iss_time,
        oub_sch_operation_status        = s.wms_oub_sch_operation_status,
        oub_sch_picked_qty              = s.wms_oub_sch_picked_qty,
        oub_sch_packed_qty              = s.wms_oub_sch_packed_qty,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_wms_outbound_sch_dtl_h s

    INNER JOIN dwh.F_OutboundHeaderHistory sb
    
       ON s.wms_oub_sch_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_sch_ou = sb.oub_ou
	and s.wms_oub_sch_amendno=sb.oub_amendno

    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_sch_loc_code   = L.loc_code 
        AND s.wms_oub_sch_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_sch_item_code       = C.itm_code 
    AND s.wms_oub_sch_ou             = C.itm_ou

    WHERE t.oub_sch_loc_code = s.wms_oub_sch_loc_code
    AND t.oub_sch_ou = s.wms_oub_sch_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_sch_amendno = s.wms_oub_sch_amendno
    AND t.oub_sch_lineno = s.wms_oub_sch_lineno
    AND t.oub_item_lineno = s.wms_oub_item_lineno;

      GET DIAGNOSTICS updcnt = ROW_COUNT;
	
-- DELETE from dwh.F_OutboundSchDetailHistory t
-- 	USING stg.stg_wms_outbound_sch_dtl_h s
-- 		where t.oub_sch_loc_code = s.wms_oub_sch_loc_code
--     AND t.oub_sch_ou = s.wms_oub_sch_ou
--     AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--     AND t.oub_sch_amendno = s.wms_oub_sch_amendno
--     AND t.oub_sch_lineno = s.wms_oub_sch_lineno
--     AND t.oub_item_lineno = s.wms_oub_item_lineno;
-- -- 	and COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
 
    INSERT INTO dwh.F_OutboundSchDetailHistory
    (
       obh_hr_his_key,oub_loc_key,oub_itm_key, oub_sch_loc_code, oub_sch_ou, oub_outbound_ord, oub_sch_amendno, oub_sch_lineno, oub_sch_item_code, oub_item_lineno, oub_sch_order_qty, oub_sch_masteruom, oub_sch_deliverydate, oub_sch_serfrom, oub_sch_serto, oub_sch_plan_gd_iss_dt, oub_sch_plan_gd_iss_time, oub_sch_operation_status, oub_sch_picked_qty, oub_sch_packed_qty, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       sb.obh_hr_his_key,COALESCE(l.loc_key,-1),COALESCE(c.itm_hdr_key,-1), s.wms_oub_sch_loc_code, s.wms_oub_sch_ou, s.wms_oub_outbound_ord, s.wms_oub_sch_amendno, s.wms_oub_sch_lineno, s.wms_oub_sch_item_code, s.wms_oub_item_lineno, s.wms_oub_sch_order_qty, s.wms_oub_sch_masteruom, s.wms_oub_sch_deliverydate, s.wms_oub_sch_serfrom, s.wms_oub_sch_serto, s.wms_oub_sch_plan_gd_iss_dt, s.wms_oub_sch_plan_gd_iss_time, s.wms_oub_sch_operation_status, s.wms_oub_sch_picked_qty, s.wms_oub_sch_packed_qty, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_sch_dtl_h s

    INNER JOIN dwh.F_OutboundHeaderHistory sb
    
       ON s.wms_oub_sch_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_sch_ou = sb.oub_ou
	and s.wms_oub_sch_amendno=sb.oub_amendno

    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_sch_loc_code   = L.loc_code 
        AND s.wms_oub_sch_ou        = L.loc_ou

    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_sch_item_code       = C.itm_code 
    AND s.wms_oub_sch_ou             = C.itm_ou

    LEFT JOIN dwh.F_OutboundSchDetailHistory t
    ON s.wms_oub_sch_loc_code = t.oub_sch_loc_code
    AND s.wms_oub_sch_ou = t.oub_sch_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_sch_amendno = t.oub_sch_amendno
    AND s.wms_oub_sch_lineno = t.oub_sch_lineno
    AND s.wms_oub_item_lineno = t.oub_item_lineno
    WHERE t.oub_sch_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

-- 		update dwh.F_OutboundSchDetailHistory a
-- 		SET 	obh_hr_his_key 		=	b.obh_hr_his_key,
-- 		 		etlupdatedatetime	=	now()
-- 		FROM dwh.F_OutboundHeaderHistory b
-- 		where b.oub_ou			=	a.oub_sch_ou
-- 		AND b.oub_loc_code		=	a.oub_sch_loc_code
-- 		and b.oub_outbound_ord	=	a.oub_outbound_ord
-- 		and b.oub_amendno		=	a.oub_sch_amendno
-- 		and COALESCE(b.oub_modified_date,b.oub_created_date)::DATE>=(CURRENT_DATE - INTERVAL '90 days')::DATE;
		
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_sch_dtl_h
    (
        wms_oub_sch_loc_code, wms_oub_sch_ou, wms_oub_outbound_ord, wms_oub_sch_amendno, wms_oub_sch_lineno, wms_oub_sch_item_code, wms_oub_item_lineno, wms_oub_sch_order_qty, wms_oub_sch_masteruom, wms_oub_sch_deliverydate, wms_oub_sch_serfrom, wms_oub_sch_serto, wms_oub_sch_plan_gd_iss_dt, wms_oub_sch_plan_gd_iss_time, wms_oub_sch_operation_status, wms_oub_sch_picked_qty, wms_oub_sch_packed_qty, etlcreateddatetime
    )
    SELECT
        wms_oub_sch_loc_code, wms_oub_sch_ou, wms_oub_outbound_ord, wms_oub_sch_amendno, wms_oub_sch_lineno, wms_oub_sch_item_code, wms_oub_item_lineno, wms_oub_sch_order_qty, wms_oub_sch_masteruom, wms_oub_sch_deliverydate, wms_oub_sch_serfrom, wms_oub_sch_serto, wms_oub_sch_plan_gd_iss_dt, wms_oub_sch_plan_gd_iss_time, wms_oub_sch_operation_status, wms_oub_sch_picked_qty, wms_oub_sch_packed_qty, etlcreateddatetime
    FROM stg.stg_wms_outbound_sch_dtl_h;
    
    END IF;
	
	 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundschdetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundschdetailhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundschdetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
	p_intervaldays integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource, d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource, p_intervaldays
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
			
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_outbound_sch_dtl_h;

    UPDATE dwh.F_OutboundSchDetailHistory t
    SET 
        obh_hr_his_key                  = sb.obh_hr_his_key,
        oub_loc_key                     = COALESCE(l.loc_key,-1),
        oub_itm_key                     = COALESCE(c.itm_hdr_key,-1),
        oub_sch_item_code               = s.wms_oub_sch_item_code,
        oub_sch_order_qty               = s.wms_oub_sch_order_qty,
        oub_sch_masteruom               = s.wms_oub_sch_masteruom,
        oub_sch_deliverydate            = s.wms_oub_sch_deliverydate,
        oub_sch_serfrom                 = s.wms_oub_sch_serfrom,
        oub_sch_serto                   = s.wms_oub_sch_serto,
        oub_sch_plan_gd_iss_dt          = s.wms_oub_sch_plan_gd_iss_dt,
        oub_sch_plan_gd_iss_time        = s.wms_oub_sch_plan_gd_iss_time,
        oub_sch_operation_status        = s.wms_oub_sch_operation_status,
        oub_sch_picked_qty              = s.wms_oub_sch_picked_qty,
        oub_sch_packed_qty              = s.wms_oub_sch_packed_qty,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_wms_outbound_sch_dtl_h s
    INNER JOIN dwh.F_OutboundHeaderHistory sb
        ON s.wms_oub_sch_loc_code = sb.oub_loc_code 
		and s.wms_oub_outbound_ord =sb.oub_outbound_ord
		and s.wms_oub_sch_ou = sb.oub_ou
		and s.wms_oub_sch_amendno=sb.oub_amendno
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_sch_loc_code   = L.loc_code 
        AND s.wms_oub_sch_ou        = L.loc_ou
    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_sch_item_code       = C.itm_code 
    AND s.wms_oub_sch_ou             = C.itm_ou
    WHERE t.oub_sch_loc_code = s.wms_oub_sch_loc_code
    AND t.oub_sch_ou = s.wms_oub_sch_ou
    AND t.oub_outbound_ord = s.wms_oub_outbound_ord
    AND t.oub_sch_amendno = s.wms_oub_sch_amendno
    AND t.oub_sch_lineno = s.wms_oub_sch_lineno
    AND t.oub_item_lineno = s.wms_oub_item_lineno;

      GET DIAGNOSTICS updcnt = ROW_COUNT;
	
-- DELETE from dwh.F_OutboundSchDetailHistory t
-- 	USING stg.stg_wms_outbound_sch_dtl_h s
-- 		where t.oub_sch_loc_code = s.wms_oub_sch_loc_code
--     AND t.oub_sch_ou = s.wms_oub_sch_ou
--     AND t.oub_outbound_ord = s.wms_oub_outbound_ord
--     AND t.oub_sch_amendno = s.wms_oub_sch_amendno
--     AND t.oub_sch_lineno = s.wms_oub_sch_lineno
--     AND t.oub_item_lineno = s.wms_oub_item_lineno;
-- -- 	and COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
 
    INSERT INTO dwh.F_OutboundSchDetailHistory
    (
       obh_hr_his_key,oub_loc_key,oub_itm_key, oub_sch_loc_code, oub_sch_ou, oub_outbound_ord, oub_sch_amendno, oub_sch_lineno, oub_sch_item_code, oub_item_lineno, oub_sch_order_qty, oub_sch_masteruom, oub_sch_deliverydate, oub_sch_serfrom, oub_sch_serto, oub_sch_plan_gd_iss_dt, oub_sch_plan_gd_iss_time, oub_sch_operation_status, oub_sch_picked_qty, oub_sch_packed_qty, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       sb.obh_hr_his_key,COALESCE(l.loc_key,-1),COALESCE(c.itm_hdr_key,-1), s.wms_oub_sch_loc_code, s.wms_oub_sch_ou, s.wms_oub_outbound_ord, s.wms_oub_sch_amendno, s.wms_oub_sch_lineno, s.wms_oub_sch_item_code, s.wms_oub_item_lineno, s.wms_oub_sch_order_qty, s.wms_oub_sch_masteruom, s.wms_oub_sch_deliverydate, s.wms_oub_sch_serfrom, s.wms_oub_sch_serto, s.wms_oub_sch_plan_gd_iss_dt, s.wms_oub_sch_plan_gd_iss_time, s.wms_oub_sch_operation_status, s.wms_oub_sch_picked_qty, s.wms_oub_sch_packed_qty, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_outbound_sch_dtl_h s

    INNER JOIN dwh.F_OutboundHeaderHistory sb
    ON s.wms_oub_sch_loc_code = sb.oub_loc_code 
    and s.wms_oub_outbound_ord =sb.oub_outbound_ord
    and s.wms_oub_sch_ou = sb.oub_ou
	and s.wms_oub_sch_amendno=sb.oub_amendno
    LEFT JOIN dwh.d_location L      
        ON s.wms_oub_sch_loc_code   = L.loc_code 
        AND s.wms_oub_sch_ou        = L.loc_ou
    LEFT JOIN dwh.d_itemheader C        
    ON s.wms_oub_sch_item_code       = C.itm_code 
    AND s.wms_oub_sch_ou             = C.itm_ou
    LEFT JOIN dwh.F_OutboundSchDetailHistory t
    ON s.wms_oub_sch_loc_code = t.oub_sch_loc_code
    AND s.wms_oub_sch_ou = t.oub_sch_ou
    AND s.wms_oub_outbound_ord = t.oub_outbound_ord
    AND s.wms_oub_sch_amendno = t.oub_sch_amendno
    AND s.wms_oub_sch_lineno = t.oub_sch_lineno
    AND s.wms_oub_item_lineno = t.oub_item_lineno
    WHERE t.oub_sch_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

--Updating etlactiveind for Deleted source data 

		UPDATE	dwh.F_OutboundSchDetailHistory t1
		SET		etlactiveind		=  0,
				etlupdatedatetime	= Now()::TIMESTAMP
		FROM	dwh.F_OutboundSchDetailHistory t
		LEFT JOIN stg.stg_wms_outbound_sch_dtl_h s
		ON		t.oub_sch_loc_code		= s.wms_oub_sch_loc_code
		AND 	t.oub_sch_ou			= s.wms_oub_sch_ou
		AND 	t.oub_outbound_ord		= s.wms_oub_outbound_ord
		AND 	t.oub_sch_amendno		= s.wms_oub_sch_amendno
		AND 	t.oub_sch_lineno		= s.wms_oub_sch_lineno
		AND 	t.oub_item_lineno		= s.wms_oub_item_lineno
		WHERE	t.obd_sdl_his_key		= t1.obd_sdl_his_key
		AND		COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_intervaldays)::DATE
		AND		s.wms_oub_sch_loc_code IS NULL;

--Updating etlactiveind for Deleted source data ends;

-- 		update dwh.F_OutboundSchDetailHistory a
-- 		SET 	obh_hr_his_key 		=	b.obh_hr_his_key,
-- 		 		etlupdatedatetime	=	now()
-- 		FROM dwh.F_OutboundHeaderHistory b
-- 		where b.oub_ou			=	a.oub_sch_ou
-- 		AND b.oub_loc_code		=	a.oub_sch_loc_code
-- 		and b.oub_outbound_ord	=	a.oub_outbound_ord
-- 		and b.oub_amendno		=	a.oub_sch_amendno
-- 		and COALESCE(b.oub_modified_date,b.oub_created_date)::DATE>=(CURRENT_DATE - INTERVAL '90 days')::DATE;
		
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_outbound_sch_dtl_h
    (
        wms_oub_sch_loc_code, wms_oub_sch_ou, wms_oub_outbound_ord, wms_oub_sch_amendno, wms_oub_sch_lineno, wms_oub_sch_item_code, wms_oub_item_lineno, wms_oub_sch_order_qty, wms_oub_sch_masteruom, wms_oub_sch_deliverydate, wms_oub_sch_serfrom, wms_oub_sch_serto, wms_oub_sch_plan_gd_iss_dt, wms_oub_sch_plan_gd_iss_time, wms_oub_sch_operation_status, wms_oub_sch_picked_qty, wms_oub_sch_packed_qty, etlcreateddatetime
    )
    SELECT
        wms_oub_sch_loc_code, wms_oub_sch_ou, wms_oub_outbound_ord, wms_oub_sch_amendno, wms_oub_sch_lineno, wms_oub_sch_item_code, wms_oub_item_lineno, wms_oub_sch_order_qty, wms_oub_sch_masteruom, wms_oub_sch_deliverydate, wms_oub_sch_serfrom, wms_oub_sch_serto, wms_oub_sch_plan_gd_iss_dt, wms_oub_sch_plan_gd_iss_time, wms_oub_sch_operation_status, wms_oub_sch_picked_qty, wms_oub_sch_packed_qty, etlcreateddatetime
    FROM stg.stg_wms_outbound_sch_dtl_h;
    
    END IF;
	
	 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundschdetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundschdetailweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundschdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer; 
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
    p_interval integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename,h.rawstorageflag,h.depsource,d.intervaldays
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag ,p_depsource,p_interval
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
	
  IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_sch_dtl;

	UPDATE dwh.f_outboundSchDetail t
    SET  
		obh_hr_key                        =  sb.obh_hr_key,
    	oub_loc_key					        = COALESCE(l.loc_key,-1),
    	oub_itm_key                        = COALESCE(c.itm_hdr_key,-1),
		oub_sch_item_code                   =   s.wms_oub_sch_item_code,
		oub_sch_order_qty                   =   s.wms_oub_sch_order_qty,
		oub_sch_masteruom                   =   s.wms_oub_sch_masteruom,
		oub_sch_deliverydate                =   s.wms_oub_sch_deliverydate,
		oub_sch_serfrom                     =   s.wms_oub_sch_serfrom,
		oub_sch_serto                       =   s.wms_oub_sch_serto,
		oub_sch_plan_gd_iss_dt              =   s.wms_oub_sch_plan_gd_iss_dt,
		oub_sch_plan_gd_iss_time            =   s.wms_oub_sch_plan_gd_iss_time,
		oub_sch_operation_status            =   s.wms_oub_sch_operation_status,
		oub_sch_picked_qty                 	=   s.wms_oub_sch_picked_qty,
		oub_sch_packed_qty                 	=   s.wms_oub_sch_packed_qty,
		oub_sch_masteruomqty_ml            	=   s.wms_oub_sch_masteruomqty_ml,
		oub_sch_orderuom_ml                	=   s.wms_oub_sch_orderuom_ml,
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_sch_dtl s
	INNER JOIN dwh.f_outboundheader sb
		ON s.wms_oub_sch_loc_code = sb.oub_loc_code 
		and s.wms_oub_outbound_ord =sb.oub_outbound_ord
		and s.wms_oub_sch_ou = sb.oub_ou
	LEFT JOIN dwh.d_location L 		
		ON s.wms_oub_sch_loc_code 	= L.loc_code 
        AND s.wms_oub_sch_ou        = L.loc_ou
    LEFT JOIN dwh.d_itemheader C 		
		ON s.wms_oub_sch_item_code 	     = C.itm_code 
    	AND s.wms_oub_sch_ou             = C.itm_ou
    WHERE	t.oub_sch_loc_code        =   s.wms_oub_sch_loc_code
		AND	  t.oub_sch_ou            =   s.wms_oub_sch_ou
		AND	  t.oub_outbound_ord      =   s.wms_oub_outbound_ord
		AND	  t.oub_sch_lineno        =   s.wms_oub_sch_lineno
		AND	  t.oub_item_lineno       =   s.wms_oub_item_lineno
		AND	  t.obh_hr_key  =  sb.obh_hr_key;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;
	

/*
	DELETE from dwh.f_outboundSchDetail FH
	USING stg.stg_wms_outbound_sch_dtl OH
		where FH.oub_sch_loc_code		=  OH.wms_oub_sch_loc_code
		AND	  FH.oub_sch_ou				=  OH.wms_oub_sch_ou
		AND	  FH.oub_outbound_ord		=  OH.wms_oub_outbound_ord
		AND	  FH.oub_sch_lineno			=  OH.wms_oub_sch_lineno
		AND	  FH.oub_item_lineno		=  OH.wms_oub_item_lineno;
-- 		AND	  FH.obh_hr_key				=  sb.obh_hr_key;
-- 	and COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/		
	INSERT INTO dwh.f_outboundSchDetail
	(   obh_hr_key, oub_loc_key,
		oub_itm_key,
		oub_sch_loc_code,        oub_sch_ou,         oub_outbound_ord,  oub_sch_lineno,  oub_sch_item_code,  
	 oub_item_lineno,  oub_sch_order_qty,   oub_sch_masteruom,              oub_sch_deliverydate,  oub_sch_serfrom,  
	 oub_sch_serto,  oub_sch_plan_gd_iss_dt,  oub_sch_plan_gd_iss_time,   oub_sch_operation_status,  oub_sch_picked_qty,  
	 oub_sch_packed_qty,  oub_sch_masteruomqty_ml,  oub_sch_orderuom_ml,
       etlactiveind,			     etljobname
		, envsourcecd,                     datasourcecd,                 etlcreatedatetime
	)
	
	SELECT 

       sb.obh_hr_key, COALESCE(l.loc_key,-1), COALESCE(c.itm_hdr_key,-1),OH.wms_oub_sch_loc_code,  OH.wms_oub_sch_ou,  OH.wms_oub_outbound_ord,  OH.wms_oub_sch_lineno,  OH.wms_oub_sch_item_code,  OH.wms_oub_item_lineno,  OH.wms_oub_sch_order_qty,  OH.wms_oub_sch_masteruom,  OH.wms_oub_sch_deliverydate,  OH.wms_oub_sch_serfrom,  OH.wms_oub_sch_serto,  OH.wms_oub_sch_plan_gd_iss_dt,  OH.wms_oub_sch_plan_gd_iss_time,  OH.wms_oub_sch_operation_status,  OH.wms_oub_sch_picked_qty,  OH.wms_oub_sch_packed_qty,  OH.wms_oub_sch_masteruomqty_ml,  OH.wms_oub_sch_orderuom_ml,       1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,                      NOW()
    FROM stg.stg_wms_outbound_sch_dtl OH
	INNER JOIN dwh.f_outboundheader sb
		ON OH.wms_oub_sch_ou		 	= sb.oub_ou 
		and  OH.wms_oub_sch_loc_code	= sb.oub_loc_code
		and OH.wms_oub_outbound_ord 	= sb.oub_outbound_ord
	LEFT JOIN dwh.d_location L 		
		ON OH.wms_oub_sch_loc_code 		= L.loc_code 
    	AND OH.wms_oub_sch_ou       	= L.loc_ou
    LEFT JOIN dwh.d_itemheader C 		
		ON OH.wms_oub_sch_item_code		= C.itm_code 
    	AND OH.wms_oub_sch_ou			= C.itm_ou
	LEFT JOIN dwh.f_outboundSchDetail FH 	
		ON FH.oub_sch_loc_code			=  OH.wms_oub_sch_loc_code
		AND	  FH.oub_sch_ou				=  OH.wms_oub_sch_ou
		AND	  FH.oub_outbound_ord		=  OH.wms_oub_outbound_ord
		AND	  FH.oub_sch_lineno			=  OH.wms_oub_sch_lineno
		AND	  FH.oub_item_lineno		=  OH.wms_oub_item_lineno
		AND	  FH.obh_hr_key				=  sb.obh_hr_key
		WHERE FH.oub_sch_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
/*	
    select 0 into updcnt;
	
	
	 UPDATE dwh.f_outboundSchDetail dtl
	 SET 	obh_hr_key          =   fh.obh_hr_key,
	 		etlupdatedatetime 	= 	NOW()	
	 FROM	 dwh.f_outboundheader fh
	 WHERE 	dtl.oub_sch_ou		 	= fh.oub_ou 
	 AND  	dtl.oub_sch_loc_code	= fh.oub_loc_code
	 AND  	dtl.oub_outbound_ord 	= fh.oub_outbound_ord
	 AND    COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	
*/	 
  

  UPDATE dwh.f_outboundschdetail t1
     SET etlactiveind =  0,
     etlupdatedatetime = Now()::timestamp
     FROM dwh.f_outboundschdetail t
     LEFT join stg.stg_wms_outbound_sch_dtl s
     ON t.oub_sch_loc_code        =   s.wms_oub_sch_loc_code
        AND   t.oub_sch_ou            =   s.wms_oub_sch_ou
        AND   t.oub_outbound_ord      =   s.wms_oub_outbound_ord
        AND   t.oub_sch_lineno        =   s.wms_oub_sch_lineno
        AND   t.oub_item_lineno       =   s.wms_oub_item_lineno
     WHERE t.obd_sdl_key = t1.obd_sdl_key
     AND   COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
     AND  s.wms_oub_sch_loc_code is null;


    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_sch_dtl

	(
	     wms_oub_sch_loc_code,  wms_oub_sch_ou,  wms_oub_outbound_ord,  wms_oub_sch_lineno,  wms_oub_sch_item_code,  wms_oub_item_lineno,  wms_oub_sch_order_qty,  wms_oub_sch_masteruom,  wms_oub_sch_deliverydate,  wms_oub_sch_serfrom,  wms_oub_sch_serto,  wms_oub_sch_plan_gd_iss_dt,  wms_oub_sch_plan_gd_iss_time,  wms_oub_sch_operation_status,  wms_oub_sch_picked_qty,  wms_oub_sch_packed_qty,  wms_oub_sch_masteruomqty_ml,  wms_oub_sch_orderuom_ml,	             etlcreateddatetime
	)
	SELECT 
				wms_oub_sch_loc_code,  wms_oub_sch_ou,  wms_oub_outbound_ord,  wms_oub_sch_lineno,  wms_oub_sch_item_code,  wms_oub_item_lineno,  wms_oub_sch_order_qty,  wms_oub_sch_masteruom,  wms_oub_sch_deliverydate,  wms_oub_sch_serfrom,  wms_oub_sch_serto,  wms_oub_sch_plan_gd_iss_dt,  wms_oub_sch_plan_gd_iss_time,  wms_oub_sch_operation_status,  wms_oub_sch_picked_qty,  wms_oub_sch_packed_qty,  wms_oub_sch_masteruomqty_ml,  wms_oub_sch_orderuom_ml,           etlcreateddatetime
	FROM stg.stg_wms_outbound_sch_dtl;
    END IF;
	
    
    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
       
     EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;  
       
    
 
   
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundschdetailweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundvasheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundvasheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
 IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND COALESCE(lastupdateddate,createddate):: DATE >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_vas_hdr;

	UPDATE dwh.f_outboundvasheader t
    SET  
	    obh_hr_key  = ob.obh_hr_key,
    	oub_loc_key					    = COALESCE(l.loc_key,-1),
		oub_vas_id                      =   s.wms_oub_vas_id,
		oub_instructions                =   s.wms_oub_instructions,
		oub_sequence                    =   s.wms_oub_sequence,
		oub_created_by                  =   s.wms_oub_created_by,
		oub_modified_by                 =   s.wms_oub_modified_by,
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_vas_hdr s
	
	INNER JOIN dwh.f_outboundheader ob
	
	   ON s.wms_oub_loc_code = ob.oub_loc_code 
	and s.wms_oub_outbound_ord =ob.oub_outbound_ord
	and s.wms_oub_ou = ob.oub_ou
	LEFT JOIN dwh.d_location L 		
		ON s.wms_oub_loc_code 	= L.loc_code 
        AND s.wms_oub_ou          = L.loc_ou
    WHERE t.oub_loc_code    =   s.wms_oub_loc_code
		AND t.oub_ou    =      s.wms_oub_ou
		AND t.oub_outbound_ord    =  s.wms_oub_outbound_ord
		AND t.oub_lineno    = s.wms_oub_lineno
		AND	    t.obh_hr_key  = ob.obh_hr_key;

/*
		DELETE FROM dwh.f_outboundvasheader FH
	    USING stg.stg_wms_outbound_vas_hdr OH
		WHERE FH.oub_ou              =      OH.wms_oub_ou
		AND FH.oub_loc_code       =      OH.wms_oub_loc_code
		AND FH.oub_outbound_ord    =      OH.wms_oub_outbound_ord
		AND FH.oub_lineno          =      OH.wms_oub_lineno;
-- 		and COALESCE(ob.oub_modified_date,ob.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    GET DIAGNOSTICS updcnt = ROW_COUNT;
--	select 0 into updcnt;

	INSERT INTO dwh.f_outboundvasheader
	(   obh_hr_key, oub_loc_key,oub_loc_code,               
		oub_ou,                     oub_outbound_ord,           
		oub_lineno,                 oub_vas_id,                 
		oub_instructions ,          oub_sequence ,              
		oub_created_by,     oub_modified_by,  etlactiveind					,
	  	etljobname				, envsourcecd, 
		datasourcecd			, etlcreatedatetime )
	
	SELECT 
       ob.obh_hr_key ,COALESCE(l.loc_key,-1), 
        OH.wms_oub_loc_code,
		OH.wms_oub_ou,	OH.wms_oub_outbound_ord,
		OH.wms_oub_lineno,	OH.wms_oub_vas_id,
		OH.wms_oub_instructions,	OH.wms_oub_sequence,
		OH.wms_oub_created_by,	OH.wms_oub_modified_by,   
		1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,          NOW()     
	FROM stg.stg_wms_outbound_vas_hdr OH
	INNER JOIN dwh.f_outboundheader ob
		ON OH.wms_oub_ou = ob.oub_ou 
		and OH.wms_oub_loc_code = ob.oub_loc_code
		and OH.wms_oub_outbound_ord =ob.oub_outbound_ord
	LEFT JOIN dwh.d_location L 		
		ON OH.wms_oub_loc_code 	= L.loc_code 
        AND OH.wms_oub_ou          = L.loc_ou
	LEFT JOIN dwh.f_outboundvasheader FH 	
		ON FH.oub_loc_code        =      OH.wms_oub_loc_code
		AND FH.oub_ou              =      OH.wms_oub_ou
		AND FH.oub_outbound_ord    =      OH.wms_oub_outbound_ord
		AND FH.oub_lineno          =      OH.wms_oub_lineno
		AND	 FH.obh_hr_key  = ob.obh_hr_key
		WHERE FH.oub_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_vas_hdr
	(	wms_oub_loc_code,
     wms_oub_ou,
     wms_oub_outbound_ord,
     wms_oub_lineno,
     wms_oub_vas_id,
     wms_oub_instructions,
     wms_oub_sequence,
     wms_oub_created_by,
     wms_oub_modified_by,
	 etlcreateddatetime	)
	SELECT  
		wms_oub_loc_code,	wms_oub_ou,
		wms_oub_outbound_ord,	wms_oub_lineno,
		wms_oub_vas_id,	wms_oub_instructions,
		wms_oub_sequence,	wms_oub_created_by,
		wms_oub_modified_by,          etlcreateddatetime
	FROM stg.stg_wms_outbound_vas_hdr;
    END IF;
ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    
     EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;

    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);

       select 0 into inscnt;
       select 0 into updcnt;   
  
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundvasheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_outboundvasheaderweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_outboundvasheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;
	p_interval integer;

BEGIN
	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource, d.intervaldays
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource,p_interval
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
		
		
		
 IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND COALESCE(lastupdateddate,createddate):: DATE >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_wms_outbound_vas_hdr;

	UPDATE dwh.f_outboundvasheader t
    SET  
	    obh_hr_key  = ob.obh_hr_key,
    	oub_loc_key					    = COALESCE(l.loc_key,-1),
		oub_vas_id                      =   s.wms_oub_vas_id,
		oub_instructions                =   s.wms_oub_instructions,
		oub_sequence                    =   s.wms_oub_sequence,
		oub_created_by                  =   s.wms_oub_created_by,
		oub_modified_by                 =   s.wms_oub_modified_by,
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_outbound_vas_hdr s
	
	INNER JOIN dwh.f_outboundheader ob
	
	   ON s.wms_oub_loc_code = ob.oub_loc_code 
	and s.wms_oub_outbound_ord =ob.oub_outbound_ord
	and s.wms_oub_ou = ob.oub_ou
	LEFT JOIN dwh.d_location L 		
		ON s.wms_oub_loc_code 	= L.loc_code 
        AND s.wms_oub_ou          = L.loc_ou
    WHERE t.oub_loc_code    =   s.wms_oub_loc_code
		AND t.oub_ou    =      s.wms_oub_ou
		AND t.oub_outbound_ord    =  s.wms_oub_outbound_ord
		AND t.oub_lineno    = s.wms_oub_lineno
		AND	    t.obh_hr_key  = ob.obh_hr_key;

/*
		DELETE FROM dwh.f_outboundvasheader FH
	    USING stg.stg_wms_outbound_vas_hdr OH
		WHERE FH.oub_ou              =      OH.wms_oub_ou
		AND FH.oub_loc_code       =      OH.wms_oub_loc_code
		AND FH.oub_outbound_ord    =      OH.wms_oub_outbound_ord
		AND FH.oub_lineno          =      OH.wms_oub_lineno;
-- 		and COALESCE(ob.oub_modified_date,ob.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;
*/
    GET DIAGNOSTICS updcnt = ROW_COUNT;
--	select 0 into updcnt;

	INSERT INTO dwh.f_outboundvasheader
	(   obh_hr_key, oub_loc_key,oub_loc_code,               
		oub_ou,                     oub_outbound_ord,           
		oub_lineno,                 oub_vas_id,                 
		oub_instructions ,          oub_sequence ,              
		oub_created_by,     oub_modified_by,  etlactiveind					,
	  	etljobname				, envsourcecd, 
		datasourcecd			, etlcreatedatetime )
	
	SELECT 
       ob.obh_hr_key ,COALESCE(l.loc_key,-1), 
        OH.wms_oub_loc_code,
		OH.wms_oub_ou,	OH.wms_oub_outbound_ord,
		OH.wms_oub_lineno,	OH.wms_oub_vas_id,
		OH.wms_oub_instructions,	OH.wms_oub_sequence,
		OH.wms_oub_created_by,	OH.wms_oub_modified_by,   
		1 AS etlactiveind,				       p_etljobname,
		p_envsourcecd							, p_datasourcecd,          NOW()     
	FROM stg.stg_wms_outbound_vas_hdr OH
	INNER JOIN dwh.f_outboundheader ob
		ON OH.wms_oub_ou = ob.oub_ou 
		and OH.wms_oub_loc_code = ob.oub_loc_code
		and OH.wms_oub_outbound_ord =ob.oub_outbound_ord
	LEFT JOIN dwh.d_location L 		
		ON OH.wms_oub_loc_code 	= L.loc_code 
        AND OH.wms_oub_ou          = L.loc_ou
	LEFT JOIN dwh.f_outboundvasheader FH 	
		ON FH.oub_loc_code        =      OH.wms_oub_loc_code
		AND FH.oub_ou              =      OH.wms_oub_ou
		AND FH.oub_outbound_ord    =      OH.wms_oub_outbound_ord
		AND FH.oub_lineno          =      OH.wms_oub_lineno
		AND	 FH.obh_hr_key  = ob.obh_hr_key
		WHERE FH.oub_loc_code IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
	update dwh.f_outboundvasheader t1
	set etlactiveind =  0,
	etlupdatedatetime = Now()::timestamp
	from dwh.f_outboundvasheader t
	left join stg.stg_wms_outbound_vas_hdr s
	ON t.oub_loc_code    =   s.wms_oub_loc_code
	AND t.oub_ou    =      s.wms_oub_ou
	AND t.oub_outbound_ord    =  s.wms_oub_outbound_ord
	AND t.oub_lineno    = s.wms_oub_lineno
	AND	    t.obh_hr_key  = t1.obh_hr_key
	WHERE COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_interval)::DATE
	AND s.wms_oub_ou is null;
	
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_outbound_vas_hdr
	(	wms_oub_loc_code,
     wms_oub_ou,
     wms_oub_outbound_ord,
     wms_oub_lineno,
     wms_oub_vas_id,
     wms_oub_instructions,
     wms_oub_sequence,
     wms_oub_created_by,
     wms_oub_modified_by,
	 etlcreateddatetime	)
	SELECT  
		wms_oub_loc_code,	wms_oub_ou,
		wms_oub_outbound_ord,	wms_oub_lineno,
		wms_oub_vas_id,	wms_oub_instructions,
		wms_oub_sequence,	wms_oub_created_by,
		wms_oub_modified_by,          etlcreateddatetime
	FROM stg.stg_wms_outbound_vas_hdr;
    END IF;
ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    
     EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;

    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);

       select 0 into inscnt;
       select 0 into updcnt;   
  
END;
$$;


ALTER PROCEDURE dwh.usp_f_outboundvasheaderweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packexecheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packexecheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_exec_hdr;

    UPDATE dwh.F_PackExecHeader t
    SET
		pack_loc_key                = COALESCE(l.loc_key,-1),
        pack_exec_date              = s.wms_pack_exec_date,
        pack_exec_status            = s.wms_pack_exec_status,
        pack_pln_no                 = s.wms_pack_pln_no,
        pack_employee               = s.wms_pack_employee,
        pack_packing_bay            = s.wms_pack_packing_bay,
        pack_pre_pack_bay           = s.wms_pack_pre_pack_bay,
        pack_created_by             = s.wms_pack_created_by,
        pack_created_date           = s.wms_pack_created_date,
        pack_modified_by            = s.wms_pack_modified_by,
        pack_modified_date          = s.wms_pack_modified_date,
        pack_timestamp              = s.wms_pack_timestamp,
        pack_exec_start_date        = s.wms_pack_exec_start_date,
        pack_exec_end_date          = s.wms_pack_exec_end_date,
        pack_exe_urgent             = s.wms_pack_exe_urgent,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_wms_pack_exec_hdr s

    LEFT JOIN dwh.d_location l      
        ON  s.wms_pack_loc_code          = l.loc_code 
        AND s.wms_pack_exec_ou                 = l.loc_ou
    WHERE t.pack_loc_code = s.wms_pack_loc_code
    AND t.pack_exec_no = s.wms_pack_exec_no
    AND t.pack_exec_ou = s.wms_pack_exec_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackExecHeader
    (
       pack_loc_key, pack_loc_code, pack_exec_no, pack_exec_ou, pack_exec_date, pack_exec_status, pack_pln_no, pack_employee, pack_packing_bay, pack_pre_pack_bay, pack_created_by, pack_created_date, pack_modified_by, pack_modified_date, pack_timestamp, pack_exec_start_date, pack_exec_end_date, pack_exe_urgent, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(l.loc_key,-1), s.wms_pack_loc_code, s.wms_pack_exec_no, s.wms_pack_exec_ou, s.wms_pack_exec_date, s.wms_pack_exec_status, s.wms_pack_pln_no, s.wms_pack_employee, s.wms_pack_packing_bay, s.wms_pack_pre_pack_bay, s.wms_pack_created_by, s.wms_pack_created_date, s.wms_pack_modified_by, s.wms_pack_modified_date, s.wms_pack_timestamp, s.wms_pack_exec_start_date, s.wms_pack_exec_end_date, s.wms_pack_exe_urgent, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pack_exec_hdr s

    LEFT JOIN dwh.d_location l      
        ON  s.wms_pack_loc_code          = l.loc_code 
        AND s.wms_pack_exec_ou                 = l.loc_ou
        
    LEFT JOIN dwh.F_PackExecHeader t
    ON s.wms_pack_loc_code = t.pack_loc_code
    AND s.wms_pack_exec_no = t.pack_exec_no
    AND s.wms_pack_exec_ou = t.pack_exec_ou
    WHERE t.pack_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_exec_hdr
    (
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_exec_date, wms_pack_exec_status, wms_pack_pln_no, wms_pack_employee, wms_pack_packing_bay, wms_pack_pre_pack_bay, wms_pack_created_by, wms_pack_created_date, wms_pack_modified_by, wms_pack_modified_date, wms_pack_timestamp, wms_pack_userdefined1, wms_pack_userdefined2, wms_pack_userdefined3, wms_pack_billing_status, wms_pack_bill_value, wms_pack_exec_start_date, wms_pack_exec_end_date, wms_pack_exe_urgent, wms_pack_vnpakchr_bil_status, etlcreateddatetime
    )
    SELECT
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_exec_date, wms_pack_exec_status, wms_pack_pln_no, wms_pack_employee, wms_pack_packing_bay, wms_pack_pre_pack_bay, wms_pack_created_by, wms_pack_created_date, wms_pack_modified_by, wms_pack_modified_date, wms_pack_timestamp, wms_pack_userdefined1, wms_pack_userdefined2, wms_pack_userdefined3, wms_pack_billing_status, wms_pack_bill_value, wms_pack_exec_start_date, wms_pack_exec_end_date, wms_pack_exe_urgent, wms_pack_vnpakchr_bil_status, etlcreateddatetime
    FROM stg.stg_wms_pack_exec_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packexecheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packexecthudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packexecthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
     p_depsource VARCHAR(100);
BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag ,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
		
    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) = NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_exec_thu_dtl;

      UPDATE dwh.F_PackExecTHUDetail t
      SET 
          pack_exec_hdr_key                	= fh.pack_exe_hdr_key,
          pack_exec_loc_key             	= COALESCE(l.loc_key,-1),
		  pack_exec_thu_hdr_key 			= fd.pack_exec_thu_hdr_key,
          pack_exec_thu_key             	= COALESCE(dt.thu_key,-1),
          pack_thu_lineno                   = s.wms_pack_thu_lineno,
		  pack_thu_ser_no					= s.wms_pack_thu_ser_no,
          pack_picklist_no                  = s.wms_pack_picklist_no,
          pack_so_no                        = s.wms_pack_so_no,
          pack_so_line_no                   = s.wms_pack_so_line_no,
          pack_so_sch_lineno                = s.wms_pack_so_sch_lineno,
          pack_thu_item_code                = s.wms_pack_thu_item_code,
          pack_thu_item_qty                 = s.wms_pack_thu_item_qty,
          pack_thu_pack_qty                 = s.wms_pack_thu_pack_qty,
          pack_thu_item_batch_no            = s.wms_pack_thu_item_batch_no,
          pack_thu_item_sr_no               = s.wms_pack_thu_item_sr_no,
          pack_lot_no                       = s.wms_pack_lot_no,
          pack_uid1_ser_no                  = s.wms_pack_uid1_ser_no,
          pack_uid_ser_no                   = s.wms_pack_uid_ser_no,
          pack_allocated_qty                = s.wms_pack_allocated_qty,
          pack_planned_qty                  = s.wms_pack_planned_qty,
          pack_tolerance_qty                = s.wms_pack_tolerance_qty,
          pack_packed_from_uid_serno        = s.wms_pack_packed_from_uid_serno,
          pack_factory_pack                 = s.wms_pack_factory_pack,
          pack_source_thu_ser_no            = s.wms_pack_source_thu_ser_no,
          pack_reason_code                  = s.wms_pack_reason_code,
          etlactiveind                      = 1,
          etljobname                        = p_etljobname,
          envsourcecd                       = p_envsourcecd,
          datasourcecd                      = p_datasourcecd,
          etlupdatedatetime                 = NOW()
    FROM stg.stg_wms_pack_exec_thu_dtl s
	
    INNER JOIN dwh.F_PackExecHeader fh
	ON 		s.wms_pack_exec_ou 				=   fh.pack_exec_ou
	AND   	s.wms_pack_loc_code 			=   fh.pack_loc_code
	AND     s.wms_pack_exec_no 				=   fh.pack_exec_no
	
	INNER JOIN dwh.f_packexecthuheader fd
	ON		s.wms_pack_exec_ou				=   fd.pack_exec_ou                       
	AND		s.wms_pack_loc_code				=	fd.pack_exec_loc_code		
	AND		s.wms_pack_exec_no				=	fd.pack_exec_no  		
	AND 	s.wms_pack_thu_id				=	fd.pack_exec_thu_id
	AND 	s.wms_pack_thu_ser_no			=	fd.pack_exec_thu_sr_no
  LEFT JOIN dwh.d_location L      
    ON 		s.wms_pack_loc_code       	= L.loc_code 
    AND 	s.wms_pack_exec_ou       	= L.loc_ou
  LEFT JOIN dwh.d_thu dt       
    ON 		s.wms_pack_thu_id         	= dt.thu_id 
    AND 	s.wms_pack_exec_ou       	= dt.thu_ou
	
   	WHERE   t.pack_exec_ou               = s.wms_pack_exec_ou
	AND		t.pack_loc_code              = s.wms_pack_loc_code
	AND		t.pack_exec_no               = s.wms_pack_exec_no
	AND 	t.pack_thu_id                = s.wms_pack_thu_id
	AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
	AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no;
  	

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackExecTHUDetail
    (
       pack_exec_hdr_key, pack_exec_loc_key,pack_exec_thu_hdr_key,pack_exec_thu_key, pack_exec_no,pack_loc_code,pack_exec_ou,pack_thu_id, pack_thu_lineno, pack_thu_ser_no,pack_picklist_no, pack_so_no, pack_so_line_no, pack_so_sch_lineno, pack_thu_item_code, pack_thu_item_qty, pack_thu_pack_qty, pack_thu_item_batch_no, pack_thu_item_sr_no, pack_lot_no, pack_uid1_ser_no, pack_uid_ser_no, pack_allocated_qty, pack_planned_qty, pack_tolerance_qty, pack_packed_from_uid_serno, pack_factory_pack, pack_source_thu_ser_no, pack_reason_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
    fh.pack_exe_hdr_key, COALESCE(l.loc_key,-1),fd.pack_exec_thu_hdr_key,COALESCE(dt.thu_key,-1), s.wms_pack_exec_no ,s.wms_pack_loc_code ,s.wms_pack_exec_ou,s.wms_pack_thu_id ,s.wms_pack_thu_lineno, s.wms_pack_thu_ser_no,s.wms_pack_picklist_no, s.wms_pack_so_no, s.wms_pack_so_line_no, s.wms_pack_so_sch_lineno, s.wms_pack_thu_item_code, s.wms_pack_thu_item_qty, s.wms_pack_thu_pack_qty, s.wms_pack_thu_item_batch_no, s.wms_pack_thu_item_sr_no, s.wms_pack_lot_no, s.wms_pack_uid1_ser_no, s.wms_pack_uid_ser_no, s.wms_pack_allocated_qty, s.wms_pack_planned_qty, s.wms_pack_tolerance_qty, s.wms_pack_packed_from_uid_serno, s.wms_pack_factory_pack, s.wms_pack_source_thu_ser_no, s.wms_pack_reason_code, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pack_exec_thu_dtl s

    INNER JOIN dwh.F_PackExecHeader fh
	ON 		s.wms_pack_exec_ou 				=   fh.pack_exec_ou
	AND   	s.wms_pack_loc_code 			=   fh.pack_loc_code
	AND     s.wms_pack_exec_no 				=   fh.pack_exec_no
	
	INNER JOIN dwh.f_packexecthuheader fd
	ON		s.wms_pack_exec_ou				=   fd.pack_exec_ou                       
	AND		s.wms_pack_loc_code				=	fd.pack_exec_loc_code		
	AND		s.wms_pack_exec_no				=	fd.pack_exec_no  		
	AND 	s.wms_pack_thu_id				=	fd.pack_exec_thu_id
	AND 	s.wms_pack_thu_ser_no			=	fd.pack_exec_thu_sr_no
     
	LEFT JOIN dwh.d_location L      
            ON s.wms_pack_loc_code           = L.loc_code 
            AND s.wms_pack_exec_ou           = L.loc_ou
    LEFT JOIN dwh.d_thu dt      
            ON s.wms_pack_thu_id             = dt.thu_id 
            AND s.wms_pack_exec_ou           = dt.thu_ou
			
   LEFT JOIN dwh.F_PackExecTHUDetail t
    ON   	t.pack_exec_ou               = s.wms_pack_exec_ou
	AND		t.pack_loc_code              = s.wms_pack_loc_code
	AND		t.pack_exec_no               = s.wms_pack_exec_no
	AND 	t.pack_thu_id                = s.wms_pack_thu_id
	AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
	AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no
    WHERE t.pack_exec_ou IS NULL;
	
    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_exec_thu_dtl
    (
        wms_pack_thu_lineno, wms_pack_picklist_no, wms_pack_so_no, wms_pack_so_line_no, wms_pack_so_sch_lineno, wms_pack_thu_item_code, wms_pack_thu_item_qty, wms_pack_thu_pack_qty, wms_pack_thu_item_batch_no, wms_pack_thu_item_sr_no, wms_pack_lot_no, wms_pack_uid1_ser_no, wms_pack_uid_ser_no, wms_pack_allocated_qty, wms_pack_planned_qty, wms_pack_tolerance_qty, wms_pack_uid_cons, wms_pack_packed_from_uid_serno, wms_pack_factory_pack, wms_pack_source_thu_ser_no, wms_pack_reason_code, etlcreateddatetime
    )
    SELECT
        wms_pack_thu_lineno, wms_pack_picklist_no, wms_pack_so_no, wms_pack_so_line_no, wms_pack_so_sch_lineno, wms_pack_thu_item_code, wms_pack_thu_item_qty, wms_pack_thu_pack_qty, wms_pack_thu_item_batch_no, wms_pack_thu_item_sr_no, wms_pack_lot_no, wms_pack_uid1_ser_no, wms_pack_uid_ser_no, wms_pack_allocated_qty, wms_pack_planned_qty, wms_pack_tolerance_qty, wms_pack_uid_cons, wms_pack_packed_from_uid_serno, wms_pack_factory_pack, wms_pack_source_thu_ser_no, wms_pack_reason_code, etlcreateddatetime
    FROM stg.stg_wms_pack_exec_thu_dtl;
    
    END IF;
	
	 ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packexecthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packexecthudetailhistory(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packexecthudetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_exec_thu_dtl_hist;

    UPDATE dwh.F_PackExecTHUDetailHistory t
    SET
		pack_exec_hdr_key                 = COALESCE(fh.pack_exe_hdr_key,-1),        
        pack_exec_loc_key                 = COALESCE(l.loc_key,-1),
        pack_exec_thu_key                 = COALESCE(dt.thu_key,-1),
        pack_thu_lineno                   = s.wms_pack_thu_lineno,
        pack_picklist_no                  = s.wms_pack_picklist_no,
        pack_so_no                        = s.wms_pack_so_no,
        pack_so_line_no                   = s.wms_pack_so_line_no,
        pack_so_sch_lineno                = s.wms_pack_so_sch_lineno,
        pack_thu_item_code                = s.wms_pack_thu_item_code,
        pack_thu_item_qty                 = s.wms_pack_thu_item_qty,
        pack_thu_pack_qty                 = s.wms_pack_thu_pack_qty,
        pack_thu_item_batch_no            = s.wms_pack_thu_item_batch_no,
        pack_thu_item_sr_no               = s.wms_pack_thu_item_sr_no,
        pack_lot_no                       = s.wms_pack_lot_no,
        pack_thu_ser_no                   = s.wms_pack_thu_ser_no,
        pack_uid_ser_no                   = s.wms_pack_uid_ser_no,
        pack_allocated_qty                = s.wms_pack_allocated_qty,
        pack_planned_qty                  = s.wms_pack_planned_qty,
        pack_tolerance_qty                = s.wms_pack_tolerance_qty,
        pack_packed_from_uid_serno        = s.wms_pack_packed_from_uid_serno,
        pack_factory_pack                 = s.wms_pack_factory_pack,
        pack_source_thu_ser_no            = s.wms_pack_source_thu_ser_no,
        pack_reason_code                  = s.wms_pack_reason_code,
        pack_created_by                   = s.wms_pack_created_by,
        pack_created_date                 = s.wms_pack_created_date,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_wms_pack_exec_thu_dtl_hist s

    LEFT JOIN dwh.F_PackExecHeader fh
	ON 		s.wms_pack_exec_ou 				=   fh.pack_exec_ou
	AND   	s.wms_pack_loc_code 			=   fh.pack_loc_code
	AND     s.wms_pack_exec_no 				=   fh.pack_exec_no
	
    LEFT JOIN dwh.d_location L      
            ON s.wms_pack_loc_code           = L.loc_code 
            AND s.wms_pack_exec_ou           = L.loc_ou
    LEFT JOIN dwh.d_thu dt      
            ON s.wms_pack_thu_id             = dt.thu_id 
            AND s.wms_pack_exec_ou           = dt.thu_ou
			
   WHERE    t.pack_exec_ou               = s.wms_pack_exec_ou
	AND		t.pack_loc_code              = s.wms_pack_loc_code
	AND		t.pack_exec_no               = s.wms_pack_exec_no
	AND 	t.pack_thu_id                = s.wms_pack_thu_id
	AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
	AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
	DELETE FROM dwh.F_PackExecTHUDetailHistory t
	USING stg.stg_wms_pack_exec_thu_dtl_hist s
		WHERE  t.pack_exec_ou               = s.wms_pack_exec_ou
	AND		t.pack_loc_code              = s.wms_pack_loc_code
	AND		t.pack_exec_no               = s.wms_pack_exec_no
	AND 	t.pack_thu_id                = s.wms_pack_thu_id
	AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
	AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no;

-- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	
*/
    INSERT INTO dwh.F_PackExecTHUDetailHistory
    (
      pack_exec_hdr_key,pack_exec_loc_key,pack_exec_thu_key, pack_loc_code, pack_exec_no, pack_exec_ou, pack_thu_id, pack_thu_lineno, pack_picklist_no, pack_so_no, pack_so_line_no, pack_so_sch_lineno, pack_thu_item_code, pack_thu_item_qty, pack_thu_pack_qty, pack_thu_item_batch_no, pack_thu_item_sr_no, pack_lot_no, pack_thu_ser_no, pack_uid_ser_no, pack_allocated_qty, pack_planned_qty, pack_tolerance_qty, pack_packed_from_uid_serno, pack_factory_pack, pack_source_thu_ser_no, pack_reason_code, pack_created_by, pack_created_date, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(fh.pack_exe_hdr_key,-1),COALESCE(l.loc_key,-1),COALESCE(dt.thu_key,-1),s.wms_pack_loc_code, s.wms_pack_exec_no, s.wms_pack_exec_ou, s.wms_pack_thu_id, s.wms_pack_thu_lineno, s.wms_pack_picklist_no, s.wms_pack_so_no, s.wms_pack_so_line_no, s.wms_pack_so_sch_lineno, s.wms_pack_thu_item_code, s.wms_pack_thu_item_qty, s.wms_pack_thu_pack_qty, s.wms_pack_thu_item_batch_no, s.wms_pack_thu_item_sr_no, s.wms_pack_lot_no, s.wms_pack_thu_ser_no, s.wms_pack_uid_ser_no, s.wms_pack_allocated_qty, s.wms_pack_planned_qty, s.wms_pack_tolerance_qty, s.wms_pack_packed_from_uid_serno, s.wms_pack_factory_pack, s.wms_pack_source_thu_ser_no, s.wms_pack_reason_code, s.wms_pack_created_by, s.wms_pack_created_date, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pack_exec_thu_dtl_hist s

    Left JOIN dwh.F_PackExecHeader fh
	ON 		s.wms_pack_exec_ou 				=   fh.pack_exec_ou
	AND   	s.wms_pack_loc_code 			=   fh.pack_loc_code
	AND     s.wms_pack_exec_no 				=   fh.pack_exec_no
	
	LEFT JOIN dwh.d_location L      
            ON s.wms_pack_loc_code           = L.loc_code 
            AND s.wms_pack_exec_ou           = L.loc_ou
    LEFT JOIN dwh.d_thu dt      
            ON s.wms_pack_thu_id             = dt.thu_id 
            AND s.wms_pack_exec_ou           = dt.thu_ou
	LEFT JOIN dwh.F_PackExecTHUDetailHistory t
		ON   	t.pack_exec_ou               = s.wms_pack_exec_ou
		AND		t.pack_loc_code              = s.wms_pack_loc_code
		AND		t.pack_exec_no               = s.wms_pack_exec_no
		AND 	t.pack_thu_id                = s.wms_pack_thu_id
		AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
		AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no
	WHERE 	t.pack_exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
/*
    UPDATE	dwh.F_PackExecTHUDetailHistory s
    SET		pack_exec_hdr_key	= fh.pack_exe_hdr_key,
	 		etlupdatedatetime	= NOW()
    FROM	dwh.F_PackExecHeader fh  
    WHERE	s.pack_exec_ou 		=   fh.pack_exec_ou
	AND   	s.pack_loc_code 	=   fh.pack_loc_code
	AND     s.pack_exec_no 		=   fh.pack_exec_no
    AND		COALESCE(s.pack_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

    select 0 into updcnt;
*/	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_exec_thu_dtl_hist
    (
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_thu_id, wms_pack_thu_lineno, wms_pack_picklist_no, wms_pack_so_no, wms_pack_so_line_no, wms_pack_so_sch_lineno, wms_pack_thu_item_code, wms_pack_thu_item_qty, wms_pack_thu_pack_qty, wms_pack_thu_item_batch_no, wms_pack_thu_item_sr_no, wms_pack_lot_no, wms_pack_thu_ser_no, wms_pack_uid1_ser_no, wms_pack_uid_ser_no, wms_pack_allocated_qty, wms_pack_planned_qty, wms_pack_tolerance_qty, wms_pack_uid_cons, wms_pack_packed_from_uid_serno, wms_pack_factory_pack, wms_pack_source_thu_ser_no, wms_pack_reason_code, wms_pack_created_by, wms_pack_created_date, etlcreateddatetime
    )
    SELECT
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_thu_id, wms_pack_thu_lineno, wms_pack_picklist_no, wms_pack_so_no, wms_pack_so_line_no, wms_pack_so_sch_lineno, wms_pack_thu_item_code, wms_pack_thu_item_qty, wms_pack_thu_pack_qty, wms_pack_thu_item_batch_no, wms_pack_thu_item_sr_no, wms_pack_lot_no, wms_pack_thu_ser_no, wms_pack_uid1_ser_no, wms_pack_uid_ser_no, wms_pack_allocated_qty, wms_pack_planned_qty, wms_pack_tolerance_qty, wms_pack_uid_cons, wms_pack_packed_from_uid_serno, wms_pack_factory_pack, wms_pack_source_thu_ser_no, wms_pack_reason_code, wms_pack_created_by, wms_pack_created_date, etlcreateddatetime
    FROM stg.stg_wms_pack_exec_thu_dtl_hist;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packexecthudetailhistory(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packexecthudetailhistoryweekly(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packexecthudetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
	p_intervaldays integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, d.intervaldays
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_intervaldays
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_exec_thu_dtl_hist;

    UPDATE dwh.F_PackExecTHUDetailHistory t
    SET
		pack_exec_hdr_key                 = COALESCE(fh.pack_exe_hdr_key,-1),        
        pack_exec_loc_key                 = COALESCE(l.loc_key,-1),
        pack_exec_thu_key                 = COALESCE(dt.thu_key,-1),
        pack_thu_lineno                   = s.wms_pack_thu_lineno,
        pack_picklist_no                  = s.wms_pack_picklist_no,
        pack_so_no                        = s.wms_pack_so_no,
        pack_so_line_no                   = s.wms_pack_so_line_no,
        pack_so_sch_lineno                = s.wms_pack_so_sch_lineno,
        pack_thu_item_code                = s.wms_pack_thu_item_code,
        pack_thu_item_qty                 = s.wms_pack_thu_item_qty,
        pack_thu_pack_qty                 = s.wms_pack_thu_pack_qty,
        pack_thu_item_batch_no            = s.wms_pack_thu_item_batch_no,
        pack_thu_item_sr_no               = s.wms_pack_thu_item_sr_no,
        pack_lot_no                       = s.wms_pack_lot_no,
        pack_thu_ser_no                   = s.wms_pack_thu_ser_no,
        pack_uid_ser_no                   = s.wms_pack_uid_ser_no,
        pack_allocated_qty                = s.wms_pack_allocated_qty,
        pack_planned_qty                  = s.wms_pack_planned_qty,
        pack_tolerance_qty                = s.wms_pack_tolerance_qty,
        pack_packed_from_uid_serno        = s.wms_pack_packed_from_uid_serno,
        pack_factory_pack                 = s.wms_pack_factory_pack,
        pack_source_thu_ser_no            = s.wms_pack_source_thu_ser_no,
        pack_reason_code                  = s.wms_pack_reason_code,
        pack_created_by                   = s.wms_pack_created_by,
        pack_created_date                 = s.wms_pack_created_date,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_wms_pack_exec_thu_dtl_hist s
    LEFT JOIN dwh.F_PackExecHeader fh
	ON 		s.wms_pack_exec_ou 				=   fh.pack_exec_ou
	AND   	s.wms_pack_loc_code 			=   fh.pack_loc_code
	AND     s.wms_pack_exec_no 				=   fh.pack_exec_no
    LEFT JOIN dwh.d_location L      
            ON s.wms_pack_loc_code           = L.loc_code 
            AND s.wms_pack_exec_ou           = L.loc_ou
    LEFT JOIN dwh.d_thu dt      
            ON s.wms_pack_thu_id             = dt.thu_id 
            AND s.wms_pack_exec_ou           = dt.thu_ou
   WHERE    t.pack_exec_ou               = s.wms_pack_exec_ou
	AND		t.pack_loc_code              = s.wms_pack_loc_code
	AND		t.pack_exec_no               = s.wms_pack_exec_no
	AND 	t.pack_thu_id                = s.wms_pack_thu_id
	AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
	AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;
/*
	DELETE FROM dwh.F_PackExecTHUDetailHistory t
	USING stg.stg_wms_pack_exec_thu_dtl_hist s
		WHERE  t.pack_exec_ou               = s.wms_pack_exec_ou
	AND		t.pack_loc_code              = s.wms_pack_loc_code
	AND		t.pack_exec_no               = s.wms_pack_exec_no
	AND 	t.pack_thu_id                = s.wms_pack_thu_id
	AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
	AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no;

-- 	AND 	COALESCE(fh.oub_modified_date,fh.oub_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;	
*/
    INSERT INTO dwh.F_PackExecTHUDetailHistory
    (
      pack_exec_hdr_key,pack_exec_loc_key,pack_exec_thu_key, pack_loc_code, pack_exec_no, pack_exec_ou, pack_thu_id, pack_thu_lineno, pack_picklist_no, pack_so_no, pack_so_line_no, pack_so_sch_lineno, pack_thu_item_code, pack_thu_item_qty, pack_thu_pack_qty, pack_thu_item_batch_no, pack_thu_item_sr_no, pack_lot_no, pack_thu_ser_no, pack_uid_ser_no, pack_allocated_qty, pack_planned_qty, pack_tolerance_qty, pack_packed_from_uid_serno, pack_factory_pack, pack_source_thu_ser_no, pack_reason_code, pack_created_by, pack_created_date, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(fh.pack_exe_hdr_key,-1),COALESCE(l.loc_key,-1),COALESCE(dt.thu_key,-1),s.wms_pack_loc_code, s.wms_pack_exec_no, s.wms_pack_exec_ou, s.wms_pack_thu_id, s.wms_pack_thu_lineno, s.wms_pack_picklist_no, s.wms_pack_so_no, s.wms_pack_so_line_no, s.wms_pack_so_sch_lineno, s.wms_pack_thu_item_code, s.wms_pack_thu_item_qty, s.wms_pack_thu_pack_qty, s.wms_pack_thu_item_batch_no, s.wms_pack_thu_item_sr_no, s.wms_pack_lot_no, s.wms_pack_thu_ser_no, s.wms_pack_uid_ser_no, s.wms_pack_allocated_qty, s.wms_pack_planned_qty, s.wms_pack_tolerance_qty, s.wms_pack_packed_from_uid_serno, s.wms_pack_factory_pack, s.wms_pack_source_thu_ser_no, s.wms_pack_reason_code, s.wms_pack_created_by, s.wms_pack_created_date, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pack_exec_thu_dtl_hist s

    Left JOIN dwh.F_PackExecHeader fh
	ON 		s.wms_pack_exec_ou 				=   fh.pack_exec_ou
	AND   	s.wms_pack_loc_code 			=   fh.pack_loc_code
	AND     s.wms_pack_exec_no 				=   fh.pack_exec_no
	
	LEFT JOIN dwh.d_location L      
            ON s.wms_pack_loc_code           = L.loc_code 
            AND s.wms_pack_exec_ou           = L.loc_ou
    LEFT JOIN dwh.d_thu dt      
            ON s.wms_pack_thu_id             = dt.thu_id 
            AND s.wms_pack_exec_ou           = dt.thu_ou
	LEFT JOIN dwh.F_PackExecTHUDetailHistory t
		ON   	t.pack_exec_ou               = s.wms_pack_exec_ou
		AND		t.pack_loc_code              = s.wms_pack_loc_code
		AND		t.pack_exec_no               = s.wms_pack_exec_no
		AND 	t.pack_thu_id                = s.wms_pack_thu_id
		AND 	t.pack_thu_lineno 			 = s.wms_pack_thu_lineno
		AND 	t.pack_thu_ser_no		 	 = s.wms_pack_thu_ser_no
	WHERE 	t.pack_exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
	
--Updating etlactiveind for Deleted source data 

		UPDATE	dwh.F_PackExecTHUDetailHistory t1
		SET		etlactiveind		=  0,
				etlupdatedatetime	= Now()::TIMESTAMP
		FROM	dwh.F_PackExecTHUDetailHistory t
		LEFT JOIN stg.stg_wms_pack_exec_thu_dtl_hist s
		ON		t.pack_exec_ou        			= s.wms_pack_exec_ou
		AND		t.pack_loc_code       			= s.wms_pack_loc_code
		AND		t.pack_exec_no        			= s.wms_pack_exec_no
		AND 	t.pack_thu_id         			= s.wms_pack_thu_id
		AND 	t.pack_thu_lineno 				= s.wms_pack_thu_lineno
		AND 	t.pack_thu_ser_no				= s.wms_pack_thu_ser_no
		WHERE	t.pack_exec_thu_dtl_hst_key		= t1.pack_exec_thu_dtl_hst_key
		AND		COALESCE(t.etlupdatedatetime,t.etlcreatedatetime)::date >= (CURRENT_DATE - INTERVAL '1 days' * p_intervaldays)::DATE
		AND		s.wms_pack_exec_ou IS NULL;

--Updating etlactiveind for Deleted source data ends;

/*
    UPDATE	dwh.F_PackExecTHUDetailHistory s
    SET		pack_exec_hdr_key	= fh.pack_exe_hdr_key,
	 		etlupdatedatetime	= NOW()
    FROM	dwh.F_PackExecHeader fh  
    WHERE	s.pack_exec_ou 		=   fh.pack_exec_ou
	AND   	s.pack_loc_code 	=   fh.pack_loc_code
	AND     s.pack_exec_no 		=   fh.pack_exec_no
    AND		COALESCE(s.pack_created_date)::DATE >= (CURRENT_DATE - INTERVAL '90 days')::DATE;

    select 0 into updcnt;
*/	
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_exec_thu_dtl_hist
    (
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_thu_id, wms_pack_thu_lineno, wms_pack_picklist_no, wms_pack_so_no, wms_pack_so_line_no, wms_pack_so_sch_lineno, wms_pack_thu_item_code, wms_pack_thu_item_qty, wms_pack_thu_pack_qty, wms_pack_thu_item_batch_no, wms_pack_thu_item_sr_no, wms_pack_lot_no, wms_pack_thu_ser_no, wms_pack_uid1_ser_no, wms_pack_uid_ser_no, wms_pack_allocated_qty, wms_pack_planned_qty, wms_pack_tolerance_qty, wms_pack_uid_cons, wms_pack_packed_from_uid_serno, wms_pack_factory_pack, wms_pack_source_thu_ser_no, wms_pack_reason_code, wms_pack_created_by, wms_pack_created_date, etlcreateddatetime
    )
    SELECT
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_thu_id, wms_pack_thu_lineno, wms_pack_picklist_no, wms_pack_so_no, wms_pack_so_line_no, wms_pack_so_sch_lineno, wms_pack_thu_item_code, wms_pack_thu_item_qty, wms_pack_thu_pack_qty, wms_pack_thu_item_batch_no, wms_pack_thu_item_sr_no, wms_pack_lot_no, wms_pack_thu_ser_no, wms_pack_uid1_ser_no, wms_pack_uid_ser_no, wms_pack_allocated_qty, wms_pack_planned_qty, wms_pack_tolerance_qty, wms_pack_uid_cons, wms_pack_packed_from_uid_serno, wms_pack_factory_pack, wms_pack_source_thu_ser_no, wms_pack_reason_code, wms_pack_created_by, wms_pack_created_date, etlcreateddatetime
    FROM stg.stg_wms_pack_exec_thu_dtl_hist;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packexecthudetailhistoryweekly(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packexecthuheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packexecthuheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
	 p_depsource VARCHAR(100);

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) = NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_exec_thu_hdr;

    UPDATE dwh.F_PackExecTHUHeader t
    SET
        pack_exec_hdr_key                 = fh.pack_exe_hdr_key,
        pack_exec_loc_key             	  =  COALESCE(l.loc_key,-1),
        pack_exec_thu_key                 = COALESCE(dt.thu_key,-1),
        pack_exec_uom_key                 = COALESCE(u.uom_key,-1),
        pack_exec_thu_class               = s.wms_pack_thu_class,
        pack_exec_thu_qty                 = s.wms_pack_thu_qty,
        pack_exec_thu_weight              = s.wms_pack_thu_weight,
        pack_exec_thu_weight_uom          = s.wms_pack_thu_weight_uom,
        pack_exec_thu_su_chk              = s.wms_pack_thu_su_chk,
        pack_exec_uid1_ser_no             = s.wms_pack_uid1_ser_no,
        pack_exec_thuspace                = s.wms_pack_thuspace,
        pack_exec_length                  = s.wms_pack_length,
        pack_exec_breadth                 = s.wms_pack_breadth,
        pack_exec_height                  = s.wms_pack_height,
        pack_exec_uom                     = s.wms_pack_uom,
        pack_exec_volumeuom               = s.wms_pack_volumeuom,
        pack_exec_volume                  = s.wms_pack_volume,
        pack_exec_itm_serno_pkplan        = s.wms_pack_itm_serno_pkplan,
        pack_exec_itemslno                = s.wms_pack_itemslno,
        pack_exec_thu_id2                 = s.wms_pack_thu_id2,
        pack_exec_thu_sr_no2              = s.wms_pack_thu_sr_no2,
        etlactiveind                 	  = 1,
        etljobname                   	  = p_etljobname,
        envsourcecd                  	  = p_envsourcecd,
        datasourcecd                 	  = p_datasourcecd,
        etlupdatedatetime            	  = NOW()
    FROM stg.stg_wms_pack_exec_thu_hdr s
	
	INNER JOIN dwh.F_PackExecHeader fh
	ON   s.wms_pack_exec_ou 	=   fh.pack_exec_ou
	AND  s.wms_pack_loc_code	=   fh.pack_loc_code
  	AND  s.wms_pack_exec_no		=   fh.pack_exec_no
	
    LEFT JOIN dwh.d_location L      
     ON  s.wms_pack_exec_ou           = L.loc_ou  
     AND s.wms_pack_loc_code          = L.loc_code
			
    LEFT JOIN dwh.d_thu dt      
      ON s.wms_pack_thu_id             = dt.thu_id 
      AND s.wms_pack_exec_ou           = dt.thu_ou			
			
    LEFT JOIN dwh.d_uom u       
     ON s.wms_pack_exec_ou       	= u.mas_ouinstance
     AND s.wms_pack_uom      		= u.mas_uomcode

    WHERE 	t.pack_exec_ou 			= s.wms_pack_exec_ou
	AND		t.pack_exec_loc_code 	= s.wms_pack_loc_code
    AND 	t.pack_exec_no 			= s.wms_pack_exec_no
    AND 	t.pack_exec_thu_id 		= s.wms_pack_thu_id
    AND 	t.pack_exec_thu_sr_no 	= s.wms_pack_thu_sr_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackExecTHUHeader
    (
        pack_exec_hdr_key ,pack_exec_loc_key ,pack_exec_thu_key ,pack_exec_uom_key,  pack_exec_loc_code, pack_exec_no, pack_exec_ou, pack_exec_thu_id, pack_exec_thu_class, pack_exec_thu_sr_no, pack_exec_thu_qty, pack_exec_thu_weight, pack_exec_thu_weight_uom, pack_exec_thu_su_chk, pack_exec_uid1_ser_no, pack_exec_thuspace, pack_exec_length, pack_exec_breadth, pack_exec_height, pack_exec_uom, pack_exec_volumeuom, pack_exec_volume, pack_exec_itm_serno_pkplan, pack_exec_itemslno, pack_exec_thu_id2, pack_exec_thu_sr_no2, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
    fh.pack_exe_hdr_key, COALESCE(l.loc_key,-1),COALESCE(dt.thu_key,-1),COALESCE(u.uom_key,-1),s.wms_pack_loc_code, s.wms_pack_exec_no, s.wms_pack_exec_ou, s.wms_pack_thu_id, s.wms_pack_thu_class, s.wms_pack_thu_sr_no, s.wms_pack_thu_qty, s.wms_pack_thu_weight, s.wms_pack_thu_weight_uom, s.wms_pack_thu_su_chk, s.wms_pack_uid1_ser_no, s.wms_pack_thuspace, s.wms_pack_length, s.wms_pack_breadth, s.wms_pack_height, s.wms_pack_uom, s.wms_pack_volumeuom, s.wms_pack_volume, s.wms_pack_itm_serno_pkplan, s.wms_pack_itemslno, s.wms_pack_thu_id2, s.wms_pack_thu_sr_no2, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pack_exec_thu_hdr s
	
	INNER JOIN dwh.F_PackExecHeader fh
	ON   s.wms_pack_exec_ou 	=   fh.pack_exec_ou
	AND  s.wms_pack_loc_code	=   fh.pack_loc_code
  	AND  s.wms_pack_exec_no		=   fh.pack_exec_no

    LEFT JOIN dwh.d_location L      
     ON  s.wms_pack_exec_ou           = L.loc_ou  
     AND s.wms_pack_loc_code          = L.loc_code
	
    LEFT JOIN dwh.d_thu dt      
    ON s.wms_pack_thu_id             = dt.thu_id 
    AND s.wms_pack_exec_ou           = dt.thu_ou
	
    LEFT JOIN dwh.d_uom u       
    ON s.wms_pack_exec_ou       	= u.mas_ouinstance
    AND s.wms_pack_uom      		= u.mas_uomcode 
    
    LEFT JOIN dwh.F_PackExecTHUHeader t
    ON 		t.pack_exec_ou 			= s.wms_pack_exec_ou
	AND		t.pack_exec_loc_code 	= s.wms_pack_loc_code
    AND 	t.pack_exec_no 			= s.wms_pack_exec_no
    AND 	t.pack_exec_thu_id 		= s.wms_pack_thu_id
    AND 	t.pack_exec_thu_sr_no 	= s.wms_pack_thu_sr_no
	
    WHERE t.pack_exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_exec_thu_hdr
    (
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_thu_id, wms_pack_thu_class, wms_pack_thu_sr_no, wms_pack_thu_account, wms_pack_thu_consumable, wms_pack_thu_qty, wms_pack_thu_weight, wms_pack_thu_weight_uom, wms_pack_thu_su, wms_pack_thu_su_chk, wms_pack_uid1_ser_no, wms_pack_thuspace, wms_pack_length, wms_pack_breadth, wms_pack_height, wms_pack_uom, wms_pack_volumeuom, wms_pack_volume, wms_pack_itm_serno_pkplan, wms_pack_itemslno, wms_pack_thu_id2, wms_pack_thu_sr_no2, wms_packing_combination, wms_thu_max_pack_qty, etlcreateddatetime
    )
    SELECT
        wms_pack_loc_code, wms_pack_exec_no, wms_pack_exec_ou, wms_pack_thu_id, wms_pack_thu_class, wms_pack_thu_sr_no, wms_pack_thu_account, wms_pack_thu_consumable, wms_pack_thu_qty, wms_pack_thu_weight, wms_pack_thu_weight_uom, wms_pack_thu_su, wms_pack_thu_su_chk, wms_pack_uid1_ser_no, wms_pack_thuspace, wms_pack_length, wms_pack_breadth, wms_pack_height, wms_pack_uom, wms_pack_volumeuom, wms_pack_volume, wms_pack_itm_serno_pkplan, wms_pack_itemslno, wms_pack_thu_id2, wms_pack_thu_sr_no2, wms_packing_combination, wms_thu_max_pack_qty, etlcreateddatetime
    FROM stg.stg_wms_pack_exec_thu_hdr;
    
    END IF;
	
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packexecthuheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_hdr;

    UPDATE dwh.F_PackHeader t
    SET
        pack_location               = s.wms_pack_location,
        pack_ou                     = s.wms_pack_ou,
        pack_pack_rule              = s.wms_pack_pack_rule,
        pack_single_step            = s.wms_pack_single_step,
        pack_by_customer            = s.wms_pack_by_customer,
        pack_by_item                = s.wms_pack_by_item,
        pack_by_pick_numb           = s.wms_pack_by_pick_numb,
        pack_storage_pickbay        = s.wms_pack_storage_pickbay,
        pack_load_balancing         = s.wms_pack_load_balancing,
        pack_item_type              = s.wms_pack_item_type,
        pack_timestamp              = s.wms_pack_timestamp,
        pack_created_by             = s.wms_pack_created_by,
        pack_created_date           = s.wms_pack_created_date,
        pack_modified_by            = s.wms_pack_modified_by,
        pack_modified_date          = s.wms_pack_modified_date,
        pack_step                   = s.wms_pack_step,
        pack_short_pick             = s.wms_pack_short_pick,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_wms_pack_hdr s
    WHERE t.pack_location = s.wms_pack_location
    AND t.pack_ou = s.wms_pack_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackHeader
    (
        pack_location, pack_ou, pack_pack_rule, pack_single_step, pack_by_customer, pack_by_item, pack_by_pick_numb, pack_storage_pickbay, pack_load_balancing, pack_item_type, pack_timestamp, pack_created_by, pack_created_date, pack_modified_by, pack_modified_date, pack_step, pack_short_pick, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.wms_pack_location, s.wms_pack_ou, s.wms_pack_pack_rule, s.wms_pack_single_step, s.wms_pack_by_customer, s.wms_pack_by_item, s.wms_pack_by_pick_numb, s.wms_pack_storage_pickbay, s.wms_pack_load_balancing, s.wms_pack_item_type, s.wms_pack_timestamp, s.wms_pack_created_by, s.wms_pack_created_date, s.wms_pack_modified_by, s.wms_pack_modified_date, s.wms_pack_step, s.wms_pack_short_pick, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pack_hdr s
    LEFT JOIN dwh.F_PackHeader t
    ON s.wms_pack_location = t.pack_location
    AND s.wms_pack_ou = t.pack_ou
    WHERE t.pack_location IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_hdr
    (
        wms_pack_location, wms_pack_ou, wms_pack_pack_rule, wms_pack_single_step, wms_pack_two_step, wms_pack_by_customer, wms_pack_by_item, wms_pack_by_pick_numb, wms_pack_storage_pickbay, wms_pack_load_balancing, wms_pack_item_type, wms_pack_timestamp, wms_pack_created_by, wms_pack_created_date, wms_pack_modified_by, wms_pack_modified_date, wms_pack_userdefined1, wms_pack_userdefined2, wms_pack_userdefined3, wms_pack_step, wms_pack_short_pick, etlcreateddatetime
    )
    SELECT
        wms_pack_location, wms_pack_ou, wms_pack_pack_rule, wms_pack_single_step, wms_pack_two_step, wms_pack_by_customer, wms_pack_by_item, wms_pack_by_pick_numb, wms_pack_storage_pickbay, wms_pack_load_balancing, wms_pack_item_type, wms_pack_timestamp, wms_pack_created_by, wms_pack_created_date, wms_pack_modified_by, wms_pack_modified_date, wms_pack_userdefined1, wms_pack_userdefined2, wms_pack_userdefined3, wms_pack_step, wms_pack_short_pick, etlcreateddatetime
    FROM stg.stg_wms_pack_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packitemserialdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packitemserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_item_sr_dtl;

    UPDATE dwh.F_PackItemSerialDetail t
    SET
		pack_itm_sl_dtl_loc_key = COALESCE(l.loc_key,-1),
		pack_itm_sl_dtl_itm_hdr_key = COALESCE(i.itm_hdr_key,-1),
		pack_itm_sl_dtl_thu_key = COALESCE(th.thu_key,-1),
        item_sl_loc_code        = s.wms_item_sl_loc_code,
        item_sl_exec_no         = s.wms_item_sl_exec_no,
        item_sl_ou              = s.wms_item_sl_ou,
        item_sl_line_no         = s.wms_item_sl_line_no,
        item_sl_thuid           = s.wms_item_sl_thuid,
        item_sl_itm             = s.wms_item_sl_itm,
        item_sl_serno           = s.wms_item_sl_serno,
        item_thu_serno          = s.wms_item_thu_serno,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_wms_pack_item_sr_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_item_sl_loc_code 	 = l.loc_code 
        AND s.wms_item_sl_ou         = l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_item_sl_itm	 	 = i.itm_code
		AND s.wms_item_sl_ou		 = i.itm_ou
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_item_sl_thuid		 = th.thu_id 
		AND s.wms_item_sl_ou 		 = th.thu_ou
    WHERE t.item_sl_loc_code        = s.wms_item_sl_loc_code
     AND  t.item_sl_exec_no         = s.wms_item_sl_exec_no
     AND  t.item_sl_ou              = s.wms_item_sl_ou
     AND  t.item_sl_line_no         = s.wms_item_sl_line_no
     AND  t.item_sl_thuid           = s.wms_item_sl_thuid
     AND  COALESCE(t.item_sl_itm,'') = COALESCE(s.wms_item_sl_itm,'')  
     AND  t.item_sl_serno           = s.wms_item_sl_serno
     AND  t.item_thu_serno          = s.wms_item_thu_serno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackItemSerialDetail
    (
		pack_itm_sl_dtl_loc_key,	pack_itm_sl_dtl_itm_hdr_key,	pack_itm_sl_dtl_thu_key,
        item_sl_loc_code, 			item_sl_exec_no, 				item_sl_ou, 				item_sl_line_no, 		item_sl_thuid, 
		item_sl_itm, 				item_sl_serno, 					item_thu_serno, 			etlactiveind, 			etljobname, 
		envsourcecd, 				datasourcecd, 					etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),		COALESCE(i.itm_hdr_key,-1),		COALESCE(th.thu_key,-1),
        s.wms_item_sl_loc_code, 	s.wms_item_sl_exec_no, 			s.wms_item_sl_ou, 			s.wms_item_sl_line_no, 	s.wms_item_sl_thuid, 
		s.wms_item_sl_itm, 			s.wms_item_sl_serno, 			s.wms_item_thu_serno, 		1, 						p_etljobname, 
		p_envsourcecd, 				p_datasourcecd, 				NOW()
    FROM stg.stg_wms_pack_item_sr_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_item_sl_loc_code 	 = l.loc_code 
        AND s.wms_item_sl_ou         = l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_item_sl_itm	 	 = i.itm_code
		AND s.wms_item_sl_ou		 = i.itm_ou
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_item_sl_thuid		 = th.thu_id 
		AND s.wms_item_sl_ou 		 = th.thu_ou
    LEFT JOIN dwh.F_PackItemSerialDetail t
        ON   s.wms_item_sl_loc_code = t.item_sl_loc_code  
        AND  s.wms_item_sl_exec_no  = t.item_sl_exec_no    
        AND  s.wms_item_sl_ou       = t.item_sl_ou              
        AND  s.wms_item_sl_line_no  = t.item_sl_line_no    
        AND  s.wms_item_sl_thuid    = t.item_sl_thuid        
        AND  COALESCE(s.wms_item_sl_itm,'')      = COALESCE(t.item_sl_itm,'')      
        AND  s.wms_item_sl_serno    = t.item_sl_serno        
        AND  s.wms_item_thu_serno   = t.item_thu_serno      
    WHERE t.item_sl_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_item_sr_dtl
    (
        wms_item_sl_loc_code, 	wms_item_sl_exec_no, 		wms_item_sl_ou, 		wms_item_sl_line_no, 	wms_item_sl_thuid, 
		wms_item_sl_itm, 		wms_item_sl_serno, 			wms_item_thu_serno, 	etlcreateddatetime
    )
    SELECT
        wms_item_sl_loc_code, 	wms_item_sl_exec_no, 		wms_item_sl_ou, 		wms_item_sl_line_no, 	wms_item_sl_thuid, 
		wms_item_sl_itm, 		wms_item_sl_serno, 			wms_item_thu_serno, 	etlcreateddatetime
    FROM stg.stg_wms_pack_item_sr_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packitemserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packplandetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource		VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_plan_dtl;

    UPDATE dwh.F_PackPlanDetail t
    SET
        pack_pln_hdr_key                  = fh.pack_pln_hdr_key,
		pack_pln_dtl_loc_key			  = COALESCE(l.loc_key,-1),
		pack_pln_dtl_itm_hdr_key		  = COALESCE(i.itm_hdr_key,-1),
		pack_pln_dtl_thu_key			  = COALESCE(th.thu_key,-1),
        pack_picklist_no                  = s.wms_pack_picklist_no,
        pack_so_no                        = s.wms_pack_so_no,
        pack_so_line_no                   = s.wms_pack_so_line_no,
        pack_so_sch_lineno                = s.wms_pack_so_sch_lineno,
        pack_item_code                    = s.wms_pack_item_code,
        pack_item_batch_no                = s.wms_pack_item_batch_no,
        pack_item_sr_no                   = s.wms_pack_item_sr_no,
        pack_so_qty                       = s.wms_pack_so_qty,
        pack_uid_sr_no                    = s.wms_pack_uid_sr_no,
        pack_thu_sr_no                    = s.wms_pack_thu_sr_no,
        pack_pre_packing_bay              = s.wms_pack_pre_packing_bay,
        pack_lot_no                       = s.wms_pack_lot_no,
        pack_su                           = s.wms_pack_su,
        pack_su_type                      = s.wms_pack_su_type,
        pack_thu_id                       = s.wms_pack_thu_id,
        pack_plan_qty                     = s.wms_pack_plan_qty,
        pack_allocated_qty                = s.wms_pack_allocated_qty,
        pack_tolerance_qty                = s.wms_pack_tolerance_qty,
        pack_customer_serial_no           = s.wms_pack_customer_serial_no,
        pack_warranty_serial_no           = s.wms_pack_warranty_serial_no,
        pack_packed_from_uid_serno        = s.wms_pack_packed_from_uid_serno,
        pack_source_thu_ser_no            = s.wms_pack_source_thu_ser_no,
        pack_item_attribute1              = s.wms_pack_item_attribute1,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_wms_pack_plan_dtl s
    INNER JOIN dwh.f_packplanheader fh 		
		ON  s.wms_pack_loc_code 	 = fh.pack_loc_code 
        AND s.wms_pack_pln_no        = fh.pack_pln_no
        AND s.wms_pack_pln_ou        = fh.pack_pln_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pack_loc_code 	 = l.loc_code 
        AND s.wms_pack_pln_ou        = l.loc_ou
    LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_pack_item_code	 = i.itm_code
		AND s.wms_pack_pln_ou		 = i.itm_ou
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_pack_thu_id		 = th.thu_id 
		AND s.wms_pack_pln_ou 		 = th.thu_ou  
    WHERE t.pack_loc_code = s.wms_pack_loc_code
    AND   t.pack_pln_no   = s.wms_pack_pln_no
    AND   t.pack_pln_ou   = s.wms_pack_pln_ou
    AND   t.pack_lineno   = s.wms_pack_lineno;
	
    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackPlanDetail
    (
		pack_pln_hdr_key,           pack_pln_dtl_loc_key,		    pack_pln_dtl_itm_hdr_key,	pack_pln_dtl_thu_key,
        pack_loc_code, 				pack_pln_no, 					pack_pln_ou, 				pack_lineno, 				pack_picklist_no, 
		pack_so_no, 				pack_so_line_no, 				pack_so_sch_lineno, 		pack_item_code, 			pack_item_batch_no, 
		pack_item_sr_no, 			pack_so_qty, 					pack_uid_sr_no, 			pack_thu_sr_no, 			pack_pre_packing_bay, 
		pack_lot_no, 				pack_su, 						pack_su_type, 				pack_thu_id, 				pack_plan_qty, 
		pack_allocated_qty, 		pack_tolerance_qty, 			pack_customer_serial_no, 	pack_warranty_serial_no, 	pack_packed_from_uid_serno, 
		pack_source_thu_ser_no, 	pack_item_attribute1, 			etlactiveind, 				etljobname, 				envsourcecd, 
		datasourcecd, 				etlcreatedatetime
    )

    SELECT
		fh.pack_pln_hdr_key,            COALESCE(l.loc_key,-1),			COALESCE(i.itm_hdr_key,-1),		COALESCE(th.thu_key,-1),
        s.wms_pack_loc_code, 			s.wms_pack_pln_no, 				s.wms_pack_pln_ou, 				s.wms_pack_lineno, 				s.wms_pack_picklist_no, 
		s.wms_pack_so_no, 				s.wms_pack_so_line_no, 			s.wms_pack_so_sch_lineno, 		s.wms_pack_item_code, 			s.wms_pack_item_batch_no, 
		s.wms_pack_item_sr_no, 			s.wms_pack_so_qty, 				s.wms_pack_uid_sr_no, 			s.wms_pack_thu_sr_no, 			s.wms_pack_pre_packing_bay, 
		s.wms_pack_lot_no, 				s.wms_pack_su, 					s.wms_pack_su_type, 			s.wms_pack_thu_id, 				s.wms_pack_plan_qty, 
		s.wms_pack_allocated_qty, 		s.wms_pack_tolerance_qty, 		s.wms_pack_customer_serial_no, 	s.wms_pack_warranty_serial_no, 	s.wms_pack_packed_from_uid_serno, 
		s.wms_pack_source_thu_ser_no, 	s.wms_pack_item_attribute1, 	1, 								p_etljobname, 					p_envsourcecd, 
		p_datasourcecd, NOW()
    FROM stg.stg_wms_pack_plan_dtl s
    INNER JOIN dwh.f_packplanheader fh 		
		ON  s.wms_pack_pln_ou        = fh.pack_pln_ou
        AND s.wms_pack_loc_code 	 = fh.pack_loc_code 
        AND s.wms_pack_pln_no        = fh.pack_pln_no
        
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pack_pln_ou        = l.loc_ou
        AND s.wms_pack_loc_code 	 = l.loc_code 
         
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_pack_pln_ou		 = i.itm_ou
        AND s.wms_pack_item_code	 = i.itm_code
		 
	LEFT JOIN dwh.d_thu th 		
		ON  s.wms_pack_pln_ou 		 = th.thu_ou
        AND s.wms_pack_thu_id		 = th.thu_id 
		  
    LEFT JOIN dwh.F_PackPlanDetail t
    ON  s.wms_pack_pln_ou 	 = t.pack_pln_ou
    AND s.wms_pack_loc_code  = t.pack_loc_code
    AND s.wms_pack_pln_no 	 = t.pack_pln_no
    AND s.wms_pack_lineno 	 = t.pack_lineno
    WHERE t.pack_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    	IF p_rawstorageflag = 1
    THEN
	
    INSERT INTO raw.raw_wms_pack_plan_dtl
    (
        wms_pack_loc_code, 			    wms_pack_pln_no, 			wms_pack_pln_ou, 			wms_pack_lineno, 				wms_pack_picklist_no, 
		wms_pack_so_no, 				wms_pack_so_line_no, 		wms_pack_so_sch_lineno, 	wms_pack_item_code, 			wms_pack_item_batch_no, 
		wms_pack_item_sr_no, 			wms_pack_so_qty, 			wms_pack_uid_sr_no, 		wms_pack_thu_sr_no, 			wms_pack_pre_packing_bay, 
		wms_pack_lot_no, 				wms_pack_su, 				wms_pack_su_type, 			wms_pack_thu_id, 				wms_pack_plan_qty, 
		wms_pack_allocated_qty, 		wms_pack_tolerance_qty, 	wms_pack_cons, 				wms_pack_customer_serial_no, 	wms_pack_warranty_serial_no, 
		wms_pack_packed_from_uid_serno, wms_pack_source_thu_ser_no, wms_pack_box_thu_id, 		wms_pack_box_no, 				wms_pack_reason_code, 
		wms_pack_item_attribute1, 		wms_pack_item_attribute2, 	wms_pack_item_attribute3, 	wms_pack_item_attribute4, 		wms_pack_item_attribute5, 
		wms_pack_item_attribute6, 		wms_pack_item_attribute7, 	wms_pack_item_attribute8, 	wms_pack_item_attribute9, 		wms_pack_item_attribute10, 
		etlcreateddatetime
    )
    SELECT
        wms_pack_loc_code, 				wms_pack_pln_no, 			wms_pack_pln_ou, 			wms_pack_lineno, 				wms_pack_picklist_no, 
		wms_pack_so_no, 				wms_pack_so_line_no, 		wms_pack_so_sch_lineno, 	wms_pack_item_code, 			wms_pack_item_batch_no, 
		wms_pack_item_sr_no, 			wms_pack_so_qty, 			wms_pack_uid_sr_no, 		wms_pack_thu_sr_no, 			wms_pack_pre_packing_bay, 
		wms_pack_lot_no, 				wms_pack_su, 				wms_pack_su_type, 			wms_pack_thu_id, 				wms_pack_plan_qty, 
		wms_pack_allocated_qty, 		wms_pack_tolerance_qty, 	wms_pack_cons, 				wms_pack_customer_serial_no, 	wms_pack_warranty_serial_no, 
		wms_pack_packed_from_uid_serno, wms_pack_source_thu_ser_no, wms_pack_box_thu_id, 		wms_pack_box_no, 				wms_pack_reason_code, 
		wms_pack_item_attribute1, 		wms_pack_item_attribute2, 	wms_pack_item_attribute3, 	wms_pack_item_attribute4, 		wms_pack_item_attribute5, 
		wms_pack_item_attribute6, 		wms_pack_item_attribute7, 	wms_pack_item_attribute8, 	wms_pack_item_attribute9, 		wms_pack_item_attribute10, 
		etlcreateddatetime
    FROM stg.stg_wms_pack_plan_dtl;
    END IF;
	
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;
	
    EXCEPTION WHEN others THEN
     get stacked diagnostics
          p_errorid   = returned_sqlstate,
          p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packplanheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packplanheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_plan_hdr;

    UPDATE dwh.F_PackPlanHeader t
    SET
		pack_pln_hdr_loc_key	  = COALESCE(l.loc_key,-1),
		pack_pln_hdr_date_key	  = COALESCE(d.datekey,-1),
		pack_pln_hdr_emp_hdr_key  = COALESCE(e.emp_hdr_key,-1),
        pack_pln_date             = s.wms_pack_pln_date,
        pack_pln_status           = s.wms_pack_pln_status,
        pack_employee             = s.wms_pack_employee,
        pack_packing_bay          = s.wms_pack_packing_bay,
        pack_source_stage         = s.wms_pack_source_stage,
        pack_source_docno         = s.wms_pack_source_docno,
        pack_created_by           = s.wms_pack_created_by,
        pack_created_date         = s.wms_pack_created_date,
        pack_modified_by          = s.wms_pack_modified_by,
        pack_modified_date        = s.wms_pack_modified_date,
        pack_timestamp            = s.wms_pack_timestamp,
        pack_userdefined1         = s.wms_pack_userdefined1,
        pack_userdefined2         = s.wms_pack_userdefined2,
        pack_userdefined3         = s.wms_pack_userdefined3,
        pack_pln_urgent           = s.wms_pack_pln_urgent,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_wms_pack_plan_hdr s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pack_loc_code 	 = l.loc_code 
        AND s.wms_pack_pln_ou        = l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON  s.wms_pack_pln_date::date= d.dateactual
	LEFT JOIN dwh.d_employeeheader e 		
		ON 	s.wms_pack_employee      = e.emp_employee_code 
        AND s.wms_pack_pln_ou        = e.emp_ou
    WHERE 	t.pack_loc_code 		 = s.wms_pack_loc_code
    AND 	t.pack_pln_no            = s.wms_pack_pln_no
    AND 	t.pack_pln_ou            = s.wms_pack_pln_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackPlanHeader
    (
		pack_pln_hdr_loc_key,		pack_pln_hdr_date_key,			pack_pln_hdr_emp_hdr_key,
        pack_loc_code, 				pack_pln_no, 					pack_pln_ou, 					pack_pln_date, 			pack_pln_status, 
		pack_employee, 				pack_packing_bay, 				pack_source_stage, 				pack_source_docno, 		pack_created_by, 
		pack_created_date, 			pack_modified_by, 				pack_modified_date, 			pack_timestamp, 		pack_userdefined1, 
		pack_userdefined2, 			pack_userdefined3, 				pack_pln_urgent, 				etlactiveind, 			etljobname, 
		envsourcecd, 				datasourcecd, 					etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),		COALESCE(d.datekey,-1),		 	COALESCE(e.emp_hdr_key,-1),
        s.wms_pack_loc_code, 		s.wms_pack_pln_no, 				s.wms_pack_pln_ou, 				s.wms_pack_pln_date, 			s.wms_pack_pln_status, 
		s.wms_pack_employee, 		s.wms_pack_packing_bay, 		s.wms_pack_source_stage, 		s.wms_pack_source_docno, 		s.wms_pack_created_by, 
		s.wms_pack_created_date, 	s.wms_pack_modified_by, 		s.wms_pack_modified_date, 		s.wms_pack_timestamp, 			s.wms_pack_userdefined1, 
		s.wms_pack_userdefined2, 	s.wms_pack_userdefined3, 		s.wms_pack_pln_urgent, 			1, 								p_etljobname, 
		p_envsourcecd, 				p_datasourcecd, 				NOW()
    FROM stg.stg_wms_pack_plan_hdr s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pack_loc_code 	 = l.loc_code 
        AND s.wms_pack_pln_ou        = l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON  s.wms_pack_pln_date::date= d.dateactual
	LEFT JOIN dwh.d_employeeheader e 		
		ON 	s.wms_pack_employee      = e.emp_employee_code 
        AND s.wms_pack_pln_ou        = e.emp_ou
    LEFT JOIN dwh.F_PackPlanHeader t
    ON 		s.wms_pack_loc_code 	 = t.pack_loc_code
    AND 	s.wms_pack_pln_no 		 = t.pack_pln_no
    AND 	s.wms_pack_pln_ou 		 = t.pack_pln_ou
    WHERE 	t.pack_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_plan_hdr
    (
        wms_pack_loc_code, 		wms_pack_pln_no, 		wms_pack_pln_ou, 			wms_pack_pln_date, 			wms_pack_pln_status, 
		wms_pack_packed_as, 	wms_pack_employee, 		wms_pack_packing_bay, 		wms_pack_source_stage, 		wms_pack_source_docno, 
		wms_pack_created_by, 	wms_pack_created_date, 	wms_pack_modified_by, 		wms_pack_modified_date, 	wms_pack_timestamp, 
		wms_pack_userdefined1, 	wms_pack_userdefined2, 	wms_pack_userdefined3, 		wms_pack_pln_urgent, 		etlcreateddatetime
    )
    SELECT
        wms_pack_loc_code, 		wms_pack_pln_no, 		wms_pack_pln_ou, 			wms_pack_pln_date, 			wms_pack_pln_status, 
		wms_pack_packed_as, 	wms_pack_employee, 		wms_pack_packing_bay, 		wms_pack_source_stage, 		wms_pack_source_docno, 
		wms_pack_created_by, 	wms_pack_created_date, 	wms_pack_modified_by, 		wms_pack_modified_date, 	wms_pack_timestamp, 
		wms_pack_userdefined1, 	wms_pack_userdefined2, 	wms_pack_userdefined3, 		wms_pack_pln_urgent, 		etlcreateddatetime
    FROM stg.stg_wms_pack_plan_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packplanheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_packstoragedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_packstoragedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pack_storage_dtl;

    UPDATE dwh.F_PackStorageDetail t
    SET
		pack_storage_dtl_loc_key = COALESCE(l.loc_key,-1),
        pack_storage_zone        = s.wms_pack_storage_zone,
        pack_pack_zone           = s.wms_pack_pack_zone,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_wms_pack_storage_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pack_location 	 = l.loc_code 
        AND s.wms_pack_ou            = l.loc_ou
    WHERE 	t.pack_location 	= s.wms_pack_location
    AND 	t.pack_ou 			= s.wms_pack_ou
    AND 	t.pack_lineno 		= s.wms_pack_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PackStorageDetail
    (
		pack_storage_dtl_loc_key,
        pack_location, 		pack_ou, 		pack_lineno, 	pack_storage_zone, 	pack_pack_zone, 
		etlactiveind, 		etljobname, 	envsourcecd, 	datasourcecd, 		etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),
        s.wms_pack_location, 	s.wms_pack_ou, 		s.wms_pack_lineno, 		s.wms_pack_storage_zone, 	s.wms_pack_pack_zone, 
		1, p_etljobname, 		p_envsourcecd, 		p_datasourcecd, 		NOW()
    FROM stg.stg_wms_pack_storage_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pack_location 	 = l.loc_code 
        AND s.wms_pack_ou            = l.loc_ou
    LEFT JOIN dwh.F_PackStorageDetail t
    ON 	s.wms_pack_location = t.pack_location
    AND s.wms_pack_ou 		= t.pack_ou
    AND s.wms_pack_lineno 	= t.pack_lineno
    WHERE t.pack_location IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pack_storage_dtl
    (
        wms_pack_location, 		wms_pack_ou, 		 wms_pack_lineno, 		wms_pack_storage_zone, 	wms_pack_pack_zone, 
		wms_pack_service_type, 	wms_pack_order_type, etlcreateddatetime
    )
    SELECT
        wms_pack_location, 		wms_pack_ou, 		 wms_pack_lineno, 	    wms_pack_storage_zone,  wms_pack_pack_zone, 
		wms_pack_service_type, 	wms_pack_order_type, etlcreateddatetime
    FROM stg.stg_wms_pack_storage_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_packstoragedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pcsgateinfodetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pcsgateinfodetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_pcsit_gateinfo_dtl;

    UPDATE dwh.F_PCSGateInfoDetail t
    SET
        datekey					= COALESCE(d.datekey,-1),
		orderno                	= s.orderno,
        Gateno                 	= s.Gateno,
        ewayno                 	= s.ewayno,
        ewaydate               	= s.ewaydate,
        awbno                  	= s.awbno,
        Drivername             	= s.Drivername,
        contactno              	= s.contactno,
        vehno                  	= s.vehno,
        driverlicenseno        	= s.driverlicenseno,
        transporter            	= s.transporter,
        isnno                  	= s.isnno,
        createdby              	= s.createdby,
        createddate            	= s.createddate,
        etlactiveind           	= 1,
        etljobname             	= p_etljobname,
        envsourcecd            	= p_envsourcecd,
        datasourcecd           	= p_datasourcecd,
        etlupdatedatetime      	= NOW()
    FROM stg.stg_pcsit_gateinfo_dtl s
	LEFT JOIN dwh.d_date d
		ON CAST(s.ewaydate AS DATE)	= d.dateactual
    WHERE  t.id                 	= s.id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PCSGateInfoDetail
    (
        datekey, id, orderno, Gateno, ewayno, ewaydate, awbno, Drivername, contactno, vehno, driverlicenseno, transporter, isnno, createdby, createddate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(d.datekey,-1), s.id, s.orderno, s.Gateno, s.ewayno, s.ewaydate, s.awbno, s.Drivername, s.contactno, s.vehno, s.driverlicenseno, s.transporter, s.isnno, s.createdby, s.createddate, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_pcsit_gateinfo_dtl s
	LEFT JOIN dwh.d_date d
		ON CAST(s.ewaydate AS DATE)	= d.dateactual	
    LEFT JOIN dwh.F_PCSGateInfoDetail t
		ON t.id						= s.id
    WHERE t.id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_pcsit_gateinfo_dtl
    (
        id, orderno, Gateno, ewayno, ewaydate, awbno, Drivername, contactno, vehno, driverlicenseno, transporter, isnno, createdby, createddate, etlcreateddatetime
    )
    SELECT
        id, orderno, Gateno, ewayno, ewaydate, awbno, Drivername, contactno, vehno, driverlicenseno, transporter, isnno, createdby, createddate, etlcreateddatetime
    FROM stg.stg_pcsit_gateinfo_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_pcsgateinfodetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pcsputawayplanlist(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pcsputawayplanlist(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_pcs_putaway_planlist;

    UPDATE dwh.F_PCSPutawayplanlist t
    SET
        plan_no                  	= s.wms_plan_no,
		putaway_emp_code        	= s.wms_putaway_emp_code,
		putaway_euip_code       	= s.wms_putaway_euip_code,
		putaway_loc_code        	= s.wms_putaway_loc_code,
		emp_user                 	= s.wms_emp_user,
        created_date             	= s.wms_created_date,
        seq_no                   	= s.wms_seq_no,
        etlactiveind             	= 1,
        etljobname               	= p_etljobname,
        envsourcecd              	= p_envsourcecd,
        datasourcecd             	= p_datasourcecd,
        etlupdatedatetime        	= NOW()
    FROM stg.stg_pcs_putaway_planlist s
    WHERE   plan_no                 = s.wms_plan_no
		AND	putaway_emp_code        = s.wms_putaway_emp_code
		AND putaway_euip_code       = s.wms_putaway_euip_code
		AND putaway_loc_code        = s.wms_putaway_loc_code
		AND emp_user                = s.wms_emp_user
        AND created_date            = s.wms_created_date
        AND seq_no                  = s.wms_seq_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PCSPutawayplanlist
    (
        putaway_emp_code, emp_user, plan_no, putaway_euip_code, putaway_loc_code, created_date, seq_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.wms_putaway_emp_code, s.wms_emp_user, s.wms_plan_no, s.wms_putaway_euip_code, s.wms_putaway_loc_code, s.wms_created_date, s.wms_seq_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_pcs_putaway_planlist s
    LEFT JOIN dwh.F_PCSPutawayplanlist t
		ON  t.plan_no                = s.wms_plan_no
		AND	t.putaway_emp_code       = s.wms_putaway_emp_code
		AND t.putaway_euip_code      = s.wms_putaway_euip_code
		AND t.putaway_loc_code       = s.wms_putaway_loc_code
		AND t.emp_user               = s.wms_emp_user
        AND t.created_date           = s.wms_created_date
        AND t.seq_no                 = s.wms_seq_no	
    WHERE  t.putaway_emp_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_pcs_putaway_planlist
    (
        wms_putaway_emp_code, wms_emp_user, wms_plan_no, wms_putaway_euip_code, wms_putaway_loc_code, wms_created_date, wms_seq_no, etlcreateddatetime
    )
    SELECT
        wms_putaway_emp_code, wms_emp_user, wms_plan_no, wms_putaway_euip_code, wms_putaway_loc_code, wms_created_date, wms_seq_no, etlcreateddatetime
    FROM stg.stg_pcs_putaway_planlist;
    
    END IF;
    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_pcsputawayplanlist(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pickempequipmapdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pickempequipmapdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pick_emp_equip_map_dtl;

    UPDATE dwh.F_PickEmpEquipMapDetail t
    SET
        pick_emp_eqp_dtl_key_loc_key = COALESCE(l.loc_key,-1),
		pick_emp_eqp_dtl_key_emp_hdr_key = COALESCE(e.emp_hdr_key,-1),
		pick_emp_eqp_dtl_key_eqp_key = COALESCE(eq.eqp_key,-1),
		pick_emp_eqp_dtl_key_zone_key = COALESCE(z.zone_key,-1),
        pick_shift_code        = s.wms_pick_shift_code,
        pick_emp_code          = s.wms_pick_emp_code,
        pick_euip_code         = s.wms_pick_euip_code,
        pick_area              = s.wms_pick_area,
        pick_zone              = s.wms_pick_zone,
        pick_bin_level         = s.wms_pick_bin_level,
        etlactiveind           = 1,
        etljobname             = p_etljobname,
        envsourcecd            = p_envsourcecd,
        datasourcecd           = p_datasourcecd,
        etlupdatedatetime      = NOW()
    FROM stg.stg_wms_pick_emp_equip_map_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pick_loc_code   = l.loc_code 
        AND s.wms_pick_ou         = l.loc_ou
	LEFT JOIN dwh.d_employeeheader e 			
		ON  s.wms_pick_emp_code	 = e.emp_employee_code
		AND s.wms_pick_ou		 = e.emp_ou
	LEFT JOIN dwh.d_equipment eq 		
		ON  s.wms_pick_euip_code = eq.eqp_equipment_id
		AND s.wms_pick_ou 		 = eq.eqp_ou
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pick_zone		 = z.zone_code 
		AND s.wms_pick_ou 		 = z.zone_ou
    WHERE 	t.pick_loc_code = s.wms_pick_loc_code
    AND 	t.pick_ou       = s.wms_pick_ou
    AND 	t.pick_lineno   = s.wms_pick_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PickEmpEquipMapDetail
    (
        pick_emp_eqp_dtl_key_loc_key,pick_emp_eqp_dtl_key_emp_hdr_key,pick_emp_eqp_dtl_key_eqp_key,pick_emp_eqp_dtl_key_zone_key,
        pick_loc_code, pick_ou, pick_lineno, pick_shift_code, pick_emp_code, 
		pick_euip_code, pick_area, pick_zone, pick_bin_level, etlactiveind, 
		etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1),COALESCE(e.emp_hdr_key,-1),COALESCE(eq.eqp_key,-1),COALESCE(z.zone_key,-1),
        s.wms_pick_loc_code, s.wms_pick_ou, s.wms_pick_lineno, s.wms_pick_shift_code, s.wms_pick_emp_code, 
		s.wms_pick_euip_code, s.wms_pick_area, s.wms_pick_zone, s.wms_pick_bin_level, 1
		, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pick_emp_equip_map_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pick_loc_code   = l.loc_code 
        AND s.wms_pick_ou         = l.loc_ou
	LEFT JOIN dwh.d_employeeheader e 			
		ON  s.wms_pick_emp_code	 = e.emp_employee_code
		AND s.wms_pick_ou		 = e.emp_ou
	LEFT JOIN dwh.d_equipment eq 		
		ON  s.wms_pick_euip_code = eq.eqp_equipment_id
		AND s.wms_pick_ou 		 = eq.eqp_ou
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pick_zone		 = z.zone_code 
		AND s.wms_pick_ou 		 = z.zone_ou
    LEFT JOIN dwh.F_PickEmpEquipMapDetail t
    ON   s.wms_pick_loc_code = t.pick_loc_code
    AND  s.wms_pick_ou       = t.pick_ou
    AND  s.wms_pick_lineno   = t.pick_lineno
    WHERE t.pick_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pick_emp_equip_map_dtl
    (
        wms_pick_loc_code, wms_pick_ou, wms_pick_lineno, wms_pick_shift_code, wms_pick_emp_code, 
		wms_pick_euip_code, wms_pick_area, wms_pick_zone, wms_pick_bin_level, etlcreateddatetime
    )
    SELECT
        wms_pick_loc_code, wms_pick_ou, wms_pick_lineno, wms_pick_shift_code, wms_pick_emp_code, 
		wms_pick_euip_code, wms_pick_area, wms_pick_zone, wms_pick_bin_level, etlcreateddatetime
    FROM stg.stg_wms_pick_emp_equip_map_dtl;
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_pickempequipmapdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pickingdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pickingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
	

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pick_exec_dtl;

    UPDATE dwh.F_PickingDetail t
    SET

		pick_hdr_key					= h.pick_hdr_key,
		pick_itm_key                    = COALESCE(it.itm_hdr_key,-1),
		pick_loc_key					= COALESCE(l.loc_key,-1),
		pick_wave_no                    = s.wms_pick_wave_no,
        pick_so_no                      = s.wms_pick_so_no,
        pick_so_line_no                 = s.wms_pick_so_line_no,
        pick_sch_lineno                 = s.wms_pick_sch_lineno,
        pick_so_qty                     = s.wms_pick_so_qty,
        pick_item_code                  = s.wms_pick_item_code,
        pick_item_batch_no              = s.wms_pick_item_batch_no,
        pick_item_sr_no                 = s.wms_pick_item_sr_no,
        pick_uid_sr_no                  = s.wms_pick_uid_sr_no,
        pick_qty                        = s.wms_pick_qty,
        pick_zone                       = s.wms_pick_zone,
        pick_bin                        = s.wms_pick_bin,
        pick_bin_qty                    = s.wms_pick_bin_qty,
        pick_plan_line_no               = s.wms_pick_plan_line_no,
        pick_reason_code                = s.wms_pick_reason_code,
        pick_allc_line_no               = s.wms_pick_allc_line_no,
        pick_lot_no                     = s.wms_pick_lot_no,
        pick_su                         = s.wms_pick_su,
        pick_su_serial_no               = s.wms_pick_su_serial_no,
        pick_su_type                    = s.wms_pick_su_type,
        pick_thu_id                     = s.wms_pick_thu_id,
        pick_allocated_qty              = s.wms_pick_allocated_qty,
        pick_thu_serial_no              = s.wms_pick_thu_serial_no,
        pick_urgent_cb                  = s.wms_pick_urgent_cb,
        pick_exec_thu_wt                = s.wms_pick_exec_thu_wt,
        pick_exec_thu_wt_uom            = s.wms_pick_exec_thu_wt_uom,
        pick_length                     = s.wms_pick_length,
        pick_breadth                    = s.wms_pick_breadth,
        pick_height                     = s.wms_pick_height,
        pick_uom                        = s.wms_pick_uom,
        pick_volumeuom                  = s.wms_pick_volumeuom,
        pick_volume                     = s.wms_pick_volume,
        pick_weightuom                  = s.wms_pick_weightuom,
        pick_thuweight                  = s.wms_pick_thuweight,
        pick_customerserialno           = s.wms_pick_customerserialno,
        pick_warrantyserialno           = s.wms_pick_warrantyserialno,
        pick_counted_blnceqty           = s.wms_pick_counted_blnceqty,
        pick_staging_id                 = s.wms_pick_staging_id,
        pick_source_thu_id              = s.wms_pick_source_thu_id,
        pick_source_thu_serial_no       = s.wms_pick_source_thu_serial_no,
        pick_cross_dk_staging_id        = s.wms_pick_cross_dk_staging_id,
        pick_stock_status               = s.wms_pick_stock_status,
        pick_outbound_no                = s.wms_pick_outbound_no,
        pick_customer_code              = s.wms_pick_customer_code,
        pick_customer_item_code         = s.wms_pick_customer_item_code,
        gift_card_serial_no             = s.wms_gift_card_serial_no,
        warranty_serial_no              = s.wms_warranty_serial_no,
        pick_ser_flag                   = s.wms_pick_ser_flag,
        pick_ser_date                   = s.wms_pick_ser_date,
        pick_su2                        = s.wms_pick_su2,
        pick_uom1                       = s.wms_pick_uom1,
        pick_su_serial_no2              = s.wms_pick_su_serial_no2,
        pick_system_date                = s.wms_pick_system_date,
        pick_exec_ml_start_date         = s.wms_pick_exec_ml_start_date,
        pick_exec_ml_end_date           = s.wms_pick_exec_ml_end_date,
        pick_targetlocation             = s.wms_pick_targetlocation,
        pick_item_attribute1            = s.wms_pick_item_attribute1,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
	
    FROM stg.stg_wms_pick_exec_dtl s
	INNER JOIN dwh.f_pickingheader h
	ON		h.pick_loc_code				= s.wms_pick_loc_code
	AND		h.pick_exec_no				= s.wms_pick_exec_no
	and 	h.pick_exec_ou				= s.wms_pick_exec_ou
	LEFT JOIN dwh.d_location l
	ON 		s.wms_pick_loc_code			= l.loc_code
	AND		s.wms_pick_exec_ou 			= l.loc_ou

	
	LEFT JOIN dwh.d_itemheader it 			
			ON s.wms_pick_item_code 			= it.itm_code
			AND s.wms_pick_exec_ou        		= it.itm_ou
    WHERE 	t.pick_loc_code				= s.wms_pick_loc_code
    AND 	t.pick_exec_no				= s.wms_pick_exec_no
    AND 	t.pick_exec_ou				= s.wms_pick_exec_ou
    AND 	t.pick_lineno				= s.wms_pick_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PickingDetail
    (	pick_hdr_key				, pick_itm_key				,   
        pick_loc_key				, pick_loc_code				, pick_exec_no				, pick_exec_ou		, 
		pick_lineno					, pick_wave_no				, pick_so_no				, pick_so_line_no	, 
		pick_sch_lineno				, pick_so_qty				, pick_item_code			, pick_item_batch_no, 
		pick_item_sr_no				, pick_uid_sr_no			, pick_qty					, pick_zone			, 
		pick_bin					, pick_bin_qty				, pick_plan_line_no			, pick_reason_code	,
		pick_allc_line_no			, pick_lot_no				, pick_su					, pick_su_serial_no	, 
		pick_su_type				, pick_thu_id				, pick_allocated_qty		, pick_thu_serial_no,
		pick_urgent_cb				, pick_exec_thu_wt			, pick_exec_thu_wt_uom		, pick_length		,
		pick_breadth				, pick_height				, pick_uom					, pick_volumeuom	, 
		pick_volume					, pick_weightuom			, pick_thuweight			, pick_customerserialno,
		pick_warrantyserialno		, pick_counted_blnceqty		, pick_staging_id			, pick_source_thu_id,
		pick_source_thu_serial_no	, pick_cross_dk_staging_id	, pick_stock_status			, pick_outbound_no	,
		pick_customer_code			, pick_customer_item_code	, gift_card_serial_no		, warranty_serial_no,
		pick_ser_flag				, pick_ser_date				, pick_su2					, pick_uom1		,
		pick_su_serial_no2			, pick_system_date			, pick_exec_ml_start_date	, pick_exec_ml_end_date,
		pick_targetlocation			, pick_item_attribute1		,
		etlactiveind				, etljobname				, envsourcecd				, datasourcecd		, 
		etlcreatedatetime
    )

    SELECT
		h.pick_hdr_key					, COALESCE(it.itm_hdr_key,-1)	,
        COALESCE(l.loc_key,-1)			, s.wms_pick_loc_code			, s.wms_pick_exec_no			, s.wms_pick_exec_ou			, 
		s.wms_pick_lineno				, s.wms_pick_wave_no			, s.wms_pick_so_no				, s.wms_pick_so_line_no			, 
		s.wms_pick_sch_lineno			, s.wms_pick_so_qty				, s.wms_pick_item_code			, s.wms_pick_item_batch_no		, 
		s.wms_pick_item_sr_no			, s.wms_pick_uid_sr_no			, s.wms_pick_qty				, s.wms_pick_zone				, 
		s.wms_pick_bin					, s.wms_pick_bin_qty			, s.wms_pick_plan_line_no		, s.wms_pick_reason_code		, 
		s.wms_pick_allc_line_no			, s.wms_pick_lot_no				, s.wms_pick_su					, s.wms_pick_su_serial_no		,
		s.wms_pick_su_type				, s.wms_pick_thu_id				, s.wms_pick_allocated_qty		, s.wms_pick_thu_serial_no		,
		s.wms_pick_urgent_cb			, s.wms_pick_exec_thu_wt		, s.wms_pick_exec_thu_wt_uom	, s.wms_pick_length				,
		s.wms_pick_breadth				, s.wms_pick_height				, s.wms_pick_uom				, s.wms_pick_volumeuom			, 
		s.wms_pick_volume				, s.wms_pick_weightuom			, s.wms_pick_thuweight			, s.wms_pick_customerserialno	, 
		s.wms_pick_warrantyserialno		, s.wms_pick_counted_blnceqty	, s.wms_pick_staging_id			, s.wms_pick_source_thu_id		,
		s.wms_pick_source_thu_serial_no	, s.wms_pick_cross_dk_staging_id, s.wms_pick_stock_status		, s.wms_pick_outbound_no		, 
		s.wms_pick_customer_code		, s.wms_pick_customer_item_code	, s.wms_gift_card_serial_no		, s.wms_warranty_serial_no		, 
		s.wms_pick_ser_flag				, s.wms_pick_ser_date			, s.wms_pick_su2				, s.wms_pick_uom1				,
		s.wms_pick_su_serial_no2		, s.wms_pick_system_date		, s.wms_pick_exec_ml_start_date	, s.wms_pick_exec_ml_end_date	, 
		s.wms_pick_targetlocation		, s.wms_pick_item_attribute1	,
				1						, p_etljobname					, p_envsourcecd					, p_datasourcecd				,
			NOW()
    FROM	stg.stg_wms_pick_exec_dtl s
	INNER JOIN dwh.f_pickingheader h
	ON		h.pick_loc_code				= s.wms_pick_loc_code
	AND		h.pick_exec_no				= s.wms_pick_exec_no
	AND 	h.pick_exec_ou				= s.wms_pick_exec_ou
	LEFT JOIN dwh.d_location l
	ON 		s.wms_pick_loc_code			= l.loc_code
	AND		s.wms_pick_exec_ou 			= l.loc_ou

	
	LEFT JOIN dwh.d_itemheader it 			
			ON s.wms_pick_item_code 			= it.itm_code
			AND s.wms_pick_exec_ou        		= it.itm_ou
    LEFT JOIN dwh.F_PickingDetail t
    ON		s.wms_pick_loc_code			= t.pick_loc_code
    AND 	s.wms_pick_exec_no			= t.pick_exec_no
    AND 	s.wms_pick_exec_ou			= t.pick_exec_ou
    AND 	s.wms_pick_lineno			= t.pick_lineno
    WHERE 	t.pick_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pick_exec_dtl
		(
        wms_pick_loc_code			, wms_pick_exec_no				, wms_pick_exec_ou				, wms_pick_lineno		, 
		wms_pick_wave_no			, wms_pick_so_no				, wms_pick_so_line_no			, wms_pick_sch_lineno	,
		wms_pick_so_qty				, wms_pick_item_code			, wms_pick_item_batch_no		, wms_pick_item_sr_no	, 
		wms_pick_uid_sr_no			, wms_pick_qty					, wms_pick_zone					, wms_pick_bin			,
		wms_pick_bin_qty			, wms_pick_plan_line_no			, wms_pick_reason_code			, wms_pick_allc_line_no	,
		wms_pick_lot_no				, wms_pick_su					, wms_pick_su_serial_no			, wms_pick_su_type		,
		wms_pick_thu_id				, wms_pick_allocated_qty		, wms_pick_thu_serial_no		, wms_pick_tolerance_qty,
		wms_pick_cons				, wms_pick_urgent_cb			, wms_pick_exec_thu_wt			, wms_pick_exec_thu_wt_uom, 
		wms_pick_thuspace			, wms_pick_length				, wms_pick_breadth				, wms_pick_height		,
		wms_pick_uom				, wms_pick_volumeuom			, wms_pick_volume				, wms_pick_weightuom	,
		wms_pick_thuweight			, wms_pick_customerserialno		, wms_pick_warrantyserialno		, wms_pick_shelflife	,
		wms_pick_counted_blnceqty	, wms_pick_staging_id			, wms_pick_source_thu_id		, wms_pick_source_thu_serial_no,
		wms_pick_cross_dk_staging_id, wms_pick_stock_status			, wms_pick_box_thu_id			, wms_pick_box_no		,
		wms_pick_outbound_no		, wms_pick_customer_code		, wms_pick_customer_item_code	, wms_gift_card_serial_no,
		wms_warranty_serial_no		, wms_pick_exchange_uid			, wms_pick_ser_flag				, wms_pick_ser_date		,
		wms_pick_su2				, wms_pick_uom1					, wms_picked_uom				, wms_pick_su_serial_no2,
		wms_pick_system_date		, wms_pick_exec_ml_start_date	, wms_pick_exec_ml_end_date		, wms_pick_conso_pln_no	,
		wms_pick_multisu_reflineno	, wms_pick_targetlocation		, wms_pick_target_serno			, wms_pick_item_attribute1, 
		wms_pick_item_attribute2	, wms_pick_item_attribute3		, wms_pick_item_attribute4		, wms_pick_item_attribute5,
		wms_pick_item_attribute6	, wms_pick_item_attribute7		, wms_pick_item_attribute8		, wms_pick_item_attribute9, 
		wms_pick_item_attribute10	, wms_pick_exec_consol_reflineno, wms_pick_rev_qty				, etlcreateddatetime
		)
	
    SELECT
        wms_pick_loc_code			, wms_pick_exec_no				, wms_pick_exec_ou				, wms_pick_lineno		, 
		wms_pick_wave_no			, wms_pick_so_no				, wms_pick_so_line_no			, wms_pick_sch_lineno	,
		wms_pick_so_qty				, wms_pick_item_code			, wms_pick_item_batch_no		, wms_pick_item_sr_no	, 
		wms_pick_uid_sr_no			, wms_pick_qty					, wms_pick_zone					, wms_pick_bin			,
		wms_pick_bin_qty			, wms_pick_plan_line_no			, wms_pick_reason_code			, wms_pick_allc_line_no	,
		wms_pick_lot_no				, wms_pick_su					, wms_pick_su_serial_no			, wms_pick_su_type		,
		wms_pick_thu_id				, wms_pick_allocated_qty		, wms_pick_thu_serial_no		, wms_pick_tolerance_qty,
		wms_pick_cons				, wms_pick_urgent_cb			, wms_pick_exec_thu_wt			, wms_pick_exec_thu_wt_uom, 
		wms_pick_thuspace			, wms_pick_length				, wms_pick_breadth				, wms_pick_height		,
		wms_pick_uom				, wms_pick_volumeuom			, wms_pick_volume				, wms_pick_weightuom	,
		wms_pick_thuweight			, wms_pick_customerserialno		, wms_pick_warrantyserialno		, wms_pick_shelflife	,
		wms_pick_counted_blnceqty	, wms_pick_staging_id			, wms_pick_source_thu_id		, wms_pick_source_thu_serial_no,
		wms_pick_cross_dk_staging_id, wms_pick_stock_status			, wms_pick_box_thu_id			, wms_pick_box_no		,
		wms_pick_outbound_no		, wms_pick_customer_code		, wms_pick_customer_item_code	, wms_gift_card_serial_no,
		wms_warranty_serial_no		, wms_pick_exchange_uid			, wms_pick_ser_flag				, wms_pick_ser_date		,
		wms_pick_su2				, wms_pick_uom1					, wms_picked_uom				, wms_pick_su_serial_no2,
		wms_pick_system_date		, wms_pick_exec_ml_start_date	, wms_pick_exec_ml_end_date		, wms_pick_conso_pln_no	,
		wms_pick_multisu_reflineno	, wms_pick_targetlocation		, wms_pick_target_serno			, wms_pick_item_attribute1, 
		wms_pick_item_attribute2	, wms_pick_item_attribute3		, wms_pick_item_attribute4		, wms_pick_item_attribute5,
		wms_pick_item_attribute6	, wms_pick_item_attribute7		, wms_pick_item_attribute8		, wms_pick_item_attribute9, 
		wms_pick_item_attribute10	, wms_pick_exec_consol_reflineno, wms_pick_rev_qty				, etlcreateddatetime
		FROM stg.stg_wms_pick_exec_dtl;
    END IF;
		
		
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;
	
 
    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	 
END;
$$;


ALTER PROCEDURE dwh.usp_f_pickingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pickingheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pickingheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pick_exec_hdr;

    UPDATE dwh.F_PickingHeader t
    SET
		pick_loc_key				= COALESCE(l.loc_key,-1),
        pick_exec_date              = s.wms_pick_exec_date,
        pick_exec_status            = s.wms_pick_exec_status,
        pick_pln_no                 = s.wms_pick_pln_no,
        pick_employee               = s.wms_pick_employee,
        pick_mhe                    = s.wms_pick_mhe,
        pick_staging_id             = s.wms_pick_staging_id,
        pick_exec_start_date        = s.wms_pick_exec_start_date,
        pick_exec_end_date          = s.wms_pick_exec_end_date,
        pick_created_by             = s.wms_pick_created_by,
        pick_created_date           = s.wms_pick_created_date,
        pick_modified_by            = s.wms_pick_modified_by,
        pick_modified_date          = s.wms_pick_modified_date,
        pick_timestamp              = s.wms_pick_timestamp,
        pick_steps                  = s.wms_pick_steps,
        pk_exe_urgent_cb            = s.wms_pk_exe_urgent_cb,
        pick_gen_from               = s.wms_pick_gen_from,
        pick_pln_type               = s.wms_pick_pln_type,
        pick_zone_pickby            = s.wms_pick_zone_pickby,
        pick_reset_flg              = s.wms_pick_reset_flg,
        pick_system_date            = s.wms_pick_system_date,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_wms_pick_exec_hdr s
    LEFT JOIN dwh.d_location L      
		ON	s.wms_pick_loc_code		=	L.loc_code 
		AND	s.wms_pick_exec_ou		=	L.loc_ou
    WHERE t.pick_loc_code = s.wms_pick_loc_code
    AND t.pick_exec_no = s.wms_pick_exec_no
    AND t.pick_exec_ou = s.wms_pick_exec_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PickingHeader
    (
		pick_loc_key		,
        pick_loc_code		, pick_exec_no		, pick_exec_ou		, 
		pick_exec_date		, pick_exec_status	, pick_pln_no		, 
		pick_employee		, pick_mhe			, pick_staging_id	,
		pick_exec_start_date, pick_exec_end_date, pick_created_by	, 
		pick_created_date	, pick_modified_by	, pick_modified_date, 
		pick_timestamp		, pick_steps		, pk_exe_urgent_cb	, 
		pick_gen_from		, pick_pln_type		, pick_zone_pickby	, 
		pick_reset_flg		, pick_system_date	, 
		etlactiveind		, etljobname		, envsourcecd		,
		datasourcecd		, etlcreatedatetime
    )

    SELECT
		COALESCE(l.loc_key,-1),
        s.wms_pick_loc_code			, s.wms_pick_exec_no		, s.wms_pick_exec_ou		,
		s.wms_pick_exec_date		, s.wms_pick_exec_status	, s.wms_pick_pln_no			,
		s.wms_pick_employee			, s.wms_pick_mhe			, s.wms_pick_staging_id		,
		s.wms_pick_exec_start_date	, s.wms_pick_exec_end_date	, s.wms_pick_created_by		, 
		s.wms_pick_created_date		, s.wms_pick_modified_by	, s.wms_pick_modified_date	,
		s.wms_pick_timestamp		, s.wms_pick_steps			, s.wms_pk_exe_urgent_cb	,
		s.wms_pick_gen_from			, s.wms_pick_pln_type		, s.wms_pick_zone_pickby	, 
		s.wms_pick_reset_flg		, s.wms_pick_system_date	,
				1					, p_etljobname				, p_envsourcecd				, 
		p_datasourcecd				, NOW()
    FROM stg.stg_wms_pick_exec_hdr s
    LEFT JOIN dwh.d_location L      
		ON	s.wms_pick_loc_code		=	L.loc_code 
		AND	s.wms_pick_exec_ou		=	L.loc_ou
    LEFT JOIN dwh.F_PickingHeader t
    ON s.wms_pick_loc_code = t.pick_loc_code
    AND s.wms_pick_exec_no = t.pick_exec_no
    AND s.wms_pick_exec_ou = t.pick_exec_ou
    WHERE t.pick_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pick_exec_hdr
    (
        wms_pick_loc_code		, wms_pick_exec_no			, wms_pick_exec_ou		, 
		wms_pick_exec_date		, wms_pick_exec_status		, wms_pick_pln_no		, 
		wms_pick_employee		, wms_pick_mhe				, wms_pick_staging_id	, 
		wms_pick_exec_start_date, wms_pick_exec_end_date	, wms_pick_created_by	, 
		wms_pick_created_date	, wms_pick_modified_by		, wms_pick_modified_date, 
		wms_pick_timestamp		, wms_pick_userdefined1		, wms_pick_userdefined2	, 
		wms_pick_userdefined3	, wms_pick_billing_status	, wms_pick_bill_value	, 
		wms_pick_steps			, wms_pk_exe_urgent_cb		, wms_pick_gen_from		, 
		wms_pick_pln_type		, wms_pick_zone_pickby		, wms_pick_reset_flg	, 
		wms_pick_system_date	, etlcreateddatetime
    )
    SELECT
        wms_pick_loc_code		, wms_pick_exec_no			, wms_pick_exec_ou		, 
		wms_pick_exec_date		, wms_pick_exec_status		, wms_pick_pln_no		, 
		wms_pick_employee		, wms_pick_mhe				, wms_pick_staging_id	, 
		wms_pick_exec_start_date, wms_pick_exec_end_date	, wms_pick_created_by	, 
		wms_pick_created_date	, wms_pick_modified_by		, wms_pick_modified_date, 
		wms_pick_timestamp		, wms_pick_userdefined1		, wms_pick_userdefined2	, 
		wms_pick_userdefined3	, wms_pick_billing_status	, wms_pick_bill_value	, 
		wms_pick_steps			, wms_pk_exe_urgent_cb		, wms_pick_gen_from		, 
		wms_pick_pln_type		, wms_pick_zone_pickby		, wms_pick_reset_flg	, 
		wms_pick_system_date	, etlcreateddatetime
	FROM stg.stg_wms_pick_exec_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_pickingheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pickplandetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pickplandetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname	VARCHAR(100);
    p_envsourcecd	VARCHAR(50);
    p_datasourcecd	VARCHAR(50);
    p_batchid		integer;
    p_taskname		VARCHAR(100);
    p_packagename 	VARCHAR(100);
    p_errorid		integer;
    p_errordesc		character varying;
    p_errorline		integer;
	p_depsource		VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pick_plan_dtl;

    UPDATE dwh.F_PickPlanDetails t
    SET
		pick_pln_hdr_key				= hdr.pick_pln_hdr_key,
		pick_pln_loc_key				= COALESCE(l.loc_key,-1),
		pick_pln_item_key				= COALESCE(i.itm_hdr_key,-1),
		pick_pln_thu_key				= COALESCE(h.thu_key,-1),
        pick_wave_no                     = s.wms_pick_wave_no,
        pick_so_no                       = s.wms_pick_so_no,
        pick_so_line_no                  = s.wms_pick_so_line_no,
        pick_sch_lineno                  = s.wms_pick_sch_lineno,
        pick_item_code                   = s.wms_pick_item_code,
        pick_so_qty                      = s.wms_pick_so_qty,
        pick_item_batch_no               = s.wms_pick_item_batch_no,
        pick_item_sr_no                  = s.wms_pick_item_sr_no,
        pick_uid_sr_no                   = s.wms_pick_uid_sr_no,
        pick_qty                         = s.wms_pick_qty,
        pick_zone                        = s.wms_pick_zone,
        pick_bin                         = s.wms_pick_bin,
        pick_bin_qty                     = s.wms_pick_bin_qty,
        pick_su                          = s.wms_pick_su,
        pick_su_serial_no                = s.wms_pick_su_serial_no,
        pick_lot_no                      = s.wms_pick_lot_no,
        pick_allc_line_no                = s.wms_pick_allc_line_no,
        pick_su_type                     = s.wms_pick_su_type,
        pick_thu_id                      = s.wms_pick_thu_id,
        pick_rqs_confirm                 = s.wms_pick_rqs_confirm,
        pick_allocated_qty               = s.wms_pick_allocated_qty,
        pick_thu_serial_no               = s.wms_pick_thu_serial_no,
        pick_pln_urgent                  = s.wms_pick_pln_urgent,
        pick_length                      = s.wms_pick_length,
        pick_breadth                     = s.wms_pick_breadth,
        pick_height                      = s.wms_pick_height,
        pick_uom                         = s.wms_pick_uom,
        pick_volumeuom                   = s.wms_pick_volumeuom,
        pick_volume                      = s.wms_pick_volume,
        pick_weightuom                   = s.wms_pick_weightuom,
        pick_thuweight                   = s.wms_pick_thuweight,
        pick_customerserialno            = s.wms_pick_customerserialno,
        pick_warrantyserialno            = s.wms_pick_warrantyserialno,
        pick_staging_id                  = s.wms_pick_staging_id,
        pick_source_thu_id               = s.wms_pick_source_thu_id,
        pick_source_thu_serial_no        = s.wms_pick_source_thu_serial_no,
        pick_cross_dk_staging_id         = s.wms_pick_cross_dk_staging_id,
        pick_stock_status                = s.wms_pick_stock_status,
        pick_outbound_no                 = s.wms_pick_outbound_no,
        pick_customer_code               = s.wms_pick_customer_code,
        pick_customer_item_code          = s.wms_pick_customer_item_code,
        warranty_serial_no               = s.wms_warranty_serial_no,
        gift_card_serial_no              = s.wms_gift_card_serial_no,
        pick_conso_pln_no                = s.wms_pick_conso_pln_no,
        pick_line_complete_flag          = s.wms_pick_line_complete_flag,
        pick_item_attribute1             = s.wms_pick_item_attribute1,
        pick_item_attribute3             = s.wms_pick_item_attribute3,
        pick_item_attribute7             = s.wms_pick_item_attribute7,
        pick_line_status                 = s.wms_pick_line_status,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_wms_pick_plan_dtl s
	INNER JOIN dwh.f_pickPlanHeader hdr
	ON 		hdr.pick_loc_code		= s.wms_pick_loc_code
	AND 	hdr.pick_pln_no			= s.wms_pick_pln_no
	AND 	hdr.pick_pln_ou			= s.wms_pick_pln_ou
	LEFT JOIN  dwh.d_location l
	ON		s.wms_pick_loc_code		= l.loc_code
	AND		s.wms_pick_pln_ou		= l.loc_ou
	left join dwh.d_itemheader i 
	ON		s.wms_pick_item_code	= i.itm_code
	AND		s.wms_pick_pln_ou		= i.itm_ou
	left join dwh.d_thu h
	ON		s.wms_pick_thu_id		= h.thu_id
	AND		s.wms_pick_pln_ou		= h.thu_ou
    WHERE 	t.pick_loc_code			= s.wms_pick_loc_code
    AND		t.pick_pln_no			= s.wms_pick_pln_no
    AND		t.pick_pln_ou			= s.wms_pick_pln_ou
    AND		t.pick_lineno			= s.wms_pick_lineno;
	

	GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PickPlanDetails
    (
	pick_pln_hdr_key	,
	pick_pln_loc_key 	, pick_pln_item_key 	, pick_pln_thu_key			, pick_loc_code	,
	pick_pln_no			, pick_pln_ou			, pick_lineno				, pick_wave_no	,
	pick_so_no			, pick_so_line_no		, pick_sch_lineno			, pick_item_code,
	pick_so_qty			, pick_item_batch_no	, pick_item_sr_no			, pick_uid_sr_no,
	pick_qty			, pick_zone				, pick_bin					, pick_bin_qty	,
	pick_su				, pick_su_serial_no		, pick_lot_no				, pick_allc_line_no	,
	pick_su_type		, pick_thu_id			, pick_rqs_confirm			, pick_allocated_qty,
	pick_thu_serial_no	, pick_pln_urgent		, pick_length				, pick_breadth	,
	pick_height			, pick_uom				, pick_volumeuom			, pick_volume	,
	pick_weightuom		, pick_thuweight		, pick_customerserialno		, pick_warrantyserialno		,
	pick_staging_id		, pick_source_thu_id	, pick_source_thu_serial_no	, pick_cross_dk_staging_id	,
	pick_stock_status	, pick_outbound_no		, pick_customer_code		, pick_customer_item_code	,
	warranty_serial_no	, gift_card_serial_no	, pick_conso_pln_no			, pick_line_complete_flag	,
	pick_item_attribute1, pick_item_attribute3	, pick_item_attribute7		, pick_line_status	,
	etlactiveind		, etljobname			, envsourcecd				, datasourcecd		,
	etlcreatedatetime
    )

    SELECT
	hdr.pick_pln_hdr_key,
    COALESCE(l.loc_key,-1)		, COALESCE(i.itm_hdr_key,-1), COALESCE(h.thu_key,-1)			,s.wms_pick_loc_code		, 
	s.wms_pick_pln_no			, s.wms_pick_pln_ou			, s.wms_pick_lineno					, s.wms_pick_wave_no		, 
	s.wms_pick_so_no			, s.wms_pick_so_line_no		, s.wms_pick_sch_lineno				, s.wms_pick_item_code		, 
	s.wms_pick_so_qty			, s.wms_pick_item_batch_no	, s.wms_pick_item_sr_no				, s.wms_pick_uid_sr_no		, 
	s.wms_pick_qty				, s.wms_pick_zone			, s.wms_pick_bin					, s.wms_pick_bin_qty		, 
	s.wms_pick_su				, s.wms_pick_su_serial_no	, s.wms_pick_lot_no					, s.wms_pick_allc_line_no	,
	s.wms_pick_su_type			, s.wms_pick_thu_id			, s.wms_pick_rqs_confirm			, s.wms_pick_allocated_qty	, 
	s.wms_pick_thu_serial_no	, s.wms_pick_pln_urgent		, s.wms_pick_length					, s.wms_pick_breadth		, 
	s.wms_pick_height			, s.wms_pick_uom			, s.wms_pick_volumeuom				, s.wms_pick_volume			,
	s.wms_pick_weightuom		, s.wms_pick_thuweight		, s.wms_pick_customerserialno		, s.wms_pick_warrantyserialno	,
	s.wms_pick_staging_id		, s.wms_pick_source_thu_id	, s.wms_pick_source_thu_serial_no	, s.wms_pick_cross_dk_staging_id,
	s.wms_pick_stock_status		, s.wms_pick_outbound_no	, s.wms_pick_customer_code			, s.wms_pick_customer_item_code	,
	s.wms_warranty_serial_no	, s.wms_gift_card_serial_no	, s.wms_pick_conso_pln_no			, s.wms_pick_line_complete_flag	,
	s.wms_pick_item_attribute1	, s.wms_pick_item_attribute3, s.wms_pick_item_attribute7		, s.wms_pick_line_status	,
				1				, p_etljobname				, p_envsourcecd						, p_datasourcecd			,
			NOW()
    FROM stg.stg_wms_pick_plan_dtl s
	INNER JOIN dwh.f_pickPlanHeader hdr
	ON 		hdr.pick_loc_code		= s.wms_pick_loc_code
	AND 	hdr.pick_pln_no			= s.wms_pick_pln_no
	AND 	hdr.pick_pln_ou			= s.wms_pick_pln_ou
	LEFT JOIN  dwh.d_location l
	ON 		s.wms_pick_loc_code		= l.loc_code
	AND 	s.wms_pick_pln_ou		= l.loc_ou
	left join dwh.d_itemheader i 
	ON 		s.wms_pick_item_code	= i.itm_code
	AND 	s.wms_pick_pln_ou		= i.itm_ou
	left join dwh.d_thu h
	ON 		s.wms_pick_thu_id		= h.thu_id
	AND 	s.wms_pick_pln_ou		= h.thu_ou
    LEFT JOIN dwh.F_PickPlanDetails t
    ON		s.wms_pick_loc_code		= t.pick_loc_code
    AND		s.wms_pick_pln_no		= t.pick_pln_no
    AND		s.wms_pick_pln_ou		= t.pick_pln_ou
    AND		s.wms_pick_lineno		= t.pick_lineno
    WHERE 	t.pick_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pick_plan_dtl
    (
        wms_pick_loc_code				, wms_pick_pln_no				, wms_pick_pln_ou			, wms_pick_lineno			, 
		wms_pick_wave_no				, wms_pick_so_no				, wms_pick_so_line_no		, wms_pick_sch_lineno		, 
		wms_pick_item_code				, wms_pick_so_qty				, wms_pick_item_batch_no	, wms_pick_item_sr_no		, 
		wms_pick_uid_sr_no				, wms_pick_qty					, wms_pick_zone				, wms_pick_bin				, 
		wms_pick_bin_qty				, wms_pick_su					, wms_pick_su_serial_no		, wms_pick_lot_no			, 
		wms_pick_allc_line_no			, wms_pick_su_type				, wms_pick_thu_id			, wms_pick_rqs_confirm		,
		wms_pick_allocated_qty			, wms_pick_thu_serial_no		, wms_pick_tolerance_qty	, wms_pick_cons				, 
		wms_pick_pln_urgent				, wms_pick_thuspace				, wms_pick_length			, wms_pick_breadth			, 
		wms_pick_height					, wms_pick_uom					, wms_pick_volumeuom		, wms_pick_volume			,
		wms_pick_weightuom				, wms_pick_thuweight			, wms_pick_customerserialno, wms_pick_warrantyserialno	, 
		wms_pick_shelflife				, wms_pick_counted_blnceqty		, wms_pick_staging_id		, wms_pick_source_thu_id	, 
		wms_pick_source_thu_serial_no	, wms_pick_cross_dk_staging_id	, wms_pick_stock_status		, wms_pick_box_thu_id		, 
		wms_pick_box_no					, wms_pick_outbound_no			, wms_pick_customer_code	, wms_pick_customer_item_code, 
		wms_warranty_serial_no			, wms_gift_card_serial_no		, wms_pick_uom1				, wms_pick_su2				, 
		wms_pick_su_serial_no2			, wms_pp_chporcn_sell_bil_status, wms_pick_conso_pln_no		, wms_pick_line_complete_flag,
		wms_pick_multisu_reflineno		, wms_pick_orderuom				, wms_pick_masteruomqty		, wms_pick_orderqty			,
		wms_pick_item_attribute1		, wms_pick_item_attribute2		, wms_pick_item_attribute3	, wms_pick_item_attribute4	, 
		wms_pick_item_attribute5		, wms_pick_item_attribute6		, wms_pick_item_attribute7	, wms_pick_item_attribute8	,
		wms_pick_item_attribute9		, wms_pick_item_attribute10		, wms_pick_zone_su			, wms_pick_shrt_flag		, 
		wms_pick_line_status			, etlcreateddatetime
    )
    SELECT
        wms_pick_loc_code				, wms_pick_pln_no				, wms_pick_pln_ou			, wms_pick_lineno			, 
		wms_pick_wave_no				, wms_pick_so_no				, wms_pick_so_line_no		, wms_pick_sch_lineno		, 
		wms_pick_item_code				, wms_pick_so_qty				, wms_pick_item_batch_no	, wms_pick_item_sr_no		, 
		wms_pick_uid_sr_no				, wms_pick_qty					, wms_pick_zone				, wms_pick_bin				, 
		wms_pick_bin_qty				, wms_pick_su					, wms_pick_su_serial_no		, wms_pick_lot_no			, 
		wms_pick_allc_line_no			, wms_pick_su_type				, wms_pick_thu_id			, wms_pick_rqs_confirm		,
		wms_pick_allocated_qty			, wms_pick_thu_serial_no		, wms_pick_tolerance_qty	, wms_pick_cons				, 
		wms_pick_pln_urgent				, wms_pick_thuspace				, wms_pick_length			, wms_pick_breadth			, 
		wms_pick_height					, wms_pick_uom					, wms_pick_volumeuom		, wms_pick_volume			,
		wms_pick_weightuom				, wms_pick_thuweight			, wms_pick_customerserialno, wms_pick_warrantyserialno	, 
		wms_pick_shelflife				, wms_pick_counted_blnceqty		, wms_pick_staging_id		, wms_pick_source_thu_id	, 
		wms_pick_source_thu_serial_no	, wms_pick_cross_dk_staging_id	, wms_pick_stock_status		, wms_pick_box_thu_id		, 
		wms_pick_box_no					, wms_pick_outbound_no			, wms_pick_customer_code	, wms_pick_customer_item_code, 
		wms_warranty_serial_no			, wms_gift_card_serial_no		, wms_pick_uom1				, wms_pick_su2				, 
		wms_pick_su_serial_no2			, wms_pp_chporcn_sell_bil_status, wms_pick_conso_pln_no		, wms_pick_line_complete_flag,
		wms_pick_multisu_reflineno		, wms_pick_orderuom				, wms_pick_masteruomqty		, wms_pick_orderqty			,
		wms_pick_item_attribute1		, wms_pick_item_attribute2		, wms_pick_item_attribute3	, wms_pick_item_attribute4	, 
		wms_pick_item_attribute5		, wms_pick_item_attribute6		, wms_pick_item_attribute7	, wms_pick_item_attribute8	,
		wms_pick_item_attribute9		, wms_pick_item_attribute10		, wms_pick_zone_su			, wms_pick_shrt_flag		, 
		wms_pick_line_status			, etlcreateddatetime
	FROM stg.stg_wms_pick_plan_dtl;
    END IF;
	
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;

  
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       SELECT 0 INTO inscnt;
       SELECT 0 INTO updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_pickplandetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pickplanheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pickplanheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pick_plan_hdr;

    UPDATE dwh.F_PickPlanHeader t
    SET
		pick_pln_loc_key			= COALESCE(l.loc_key,-1),
        pick_pln_date                 = s.wms_pick_pln_date,
        pick_pln_status               = s.wms_pick_pln_status,
        pick_employee                 = s.wms_pick_employee,
        pick_mhe                      = s.wms_pick_mhe,
        pick_staging_id               = s.wms_pick_staging_id,
        pick_created_by               = s.wms_pick_created_by,
        pick_created_date             = s.wms_pick_created_date,
        pick_modified_by              = s.wms_pick_modified_by,
        pick_modified_date            = s.wms_pick_modified_date,
        pick_timestamp                = s.wms_pick_timestamp,
        pick_output_pln               = s.wms_pick_output_pln,
        pick_steps                    = s.wms_pick_steps,
        pick_pln_urgent               = s.wms_pick_pln_urgent,
        pick_second_pln_no            = s.wms_pick_second_pln_no,
        pick_completed_flag           = s.wms_pick_completed_flag,
        pick_pln_type                 = s.wms_pick_pln_type,
        pick_zone_pickby              = s.wms_pick_zone_pickby,
        pick_conso_pln_no             = s.wms_pick_conso_pln_no,
        consolidated_pick_flg         = s.wms_consolidated_pick_flg,
        pick_consol_auto_cmplt        = s.wms_pick_consol_auto_cmplt,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_pick_plan_hdr s	
	LEFT JOIN dwh.d_location l
	ON 	s.wms_pick_loc_code =	l.loc_code
	AND	s.wms_pick_pln_ou  =	l.loc_ou
	WHERE t.pick_loc_code = s.wms_pick_loc_code
    AND t.pick_pln_no = s.wms_pick_pln_no
    AND t.pick_pln_ou = s.wms_pick_pln_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PickPlanHeader
    (
        pick_pln_loc_key	,pick_loc_code		, pick_pln_no			, pick_pln_ou			,
		pick_pln_date		, pick_pln_status	, pick_employee			, pick_mhe				,
		pick_staging_id		, pick_created_by	, pick_created_date		, pick_modified_by		, 
		pick_modified_date	, pick_timestamp	, pick_output_pln		, pick_steps			, 
		pick_pln_urgent		, pick_second_pln_no, pick_completed_flag	, pick_pln_type			, 
		pick_zone_pickby	, pick_conso_pln_no	, consolidated_pick_flg	, pick_consol_auto_cmplt,
		etlactiveind		, etljobname		, envsourcecd			, datasourcecd			, 
		etlcreatedatetime
    )

    SELECT
         COALESCE(l.loc_key,-1)		, s.wms_pick_loc_code		, s.wms_pick_pln_no				, s.wms_pick_pln_ou		, 
		 s.wms_pick_pln_date		, s.wms_pick_pln_status		, s.wms_pick_employee			, s.wms_pick_mhe		,
		 s.wms_pick_staging_id		, s.wms_pick_created_by		, s.wms_pick_created_date		, s.wms_pick_modified_by,
		 s.wms_pick_modified_date	, s.wms_pick_timestamp		, s.wms_pick_output_pln			, s.wms_pick_steps		, 
		 s.wms_pick_pln_urgent		, s.wms_pick_second_pln_no	, s.wms_pick_completed_flag		, s.wms_pick_pln_type	,
		 s.wms_pick_zone_pickby		, s.wms_pick_conso_pln_no	, s.wms_consolidated_pick_flg	, s.wms_pick_consol_auto_cmplt ,
			 		1				, p_etljobname				, p_envsourcecd					, p_datasourcecd		,
		 		NOW()
    FROM stg.stg_wms_pick_plan_hdr s
	LEFT JOIN dwh.d_location l
	ON 	s.wms_pick_loc_code =	l.loc_code
	AND	s.wms_pick_pln_ou  =	l.loc_ou
    LEFT JOIN dwh.F_PickPlanHeader t
    ON s.wms_pick_loc_code = t.pick_loc_code
    AND s.wms_pick_pln_no = t.pick_pln_no
    AND s.wms_pick_pln_ou = t.pick_pln_ou
    WHERE t.pick_loc_code IS NULL;
	
	

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pick_plan_hdr
    (
        wms_pick_loc_code			, wms_pick_pln_no		, wms_pick_pln_ou			, wms_pick_pln_date		,
		wms_pick_pln_status			, wms_pick_employee		, wms_pick_mhe				, wms_pick_staging_id	, 
		wms_pick_source_stage		, wms_pick_source_docno	, wms_pick_created_by		, wms_pick_created_date	,
		wms_pick_modified_by		, wms_pick_modified_date, wms_pick_timestamp		, wms_pick_userdefined1	, 
		wms_pick_userdefined2		, wms_pick_userdefined3	, wms_pick_output_pln		, wms_pick_steps		,
		wms_pick_pln_urgent			, wms_pick_second_pln_no, wms_pick_completed_flag	, wms_pick_pln_type		, 
		wms_pick_zone_pickby		, wms_pick_conso_pln_no	, wms_consolidated_pick_flg	, wms_pick_loose_flg	,
		wms_pick_consol_auto_cmplt	, etlcreateddatetime
    )
    SELECT
        wms_pick_loc_code			, wms_pick_pln_no		, wms_pick_pln_ou			, wms_pick_pln_date		,
		wms_pick_pln_status			, wms_pick_employee		, wms_pick_mhe				, wms_pick_staging_id	, 
		wms_pick_source_stage		, wms_pick_source_docno	, wms_pick_created_by		, wms_pick_created_date	,
		wms_pick_modified_by		, wms_pick_modified_date, wms_pick_timestamp		, wms_pick_userdefined1	, 
		wms_pick_userdefined2		, wms_pick_userdefined3	, wms_pick_output_pln		, wms_pick_steps		,
		wms_pick_pln_urgent			, wms_pick_second_pln_no, wms_pick_completed_flag	, wms_pick_pln_type		, 
		wms_pick_zone_pickby		, wms_pick_conso_pln_no	, wms_consolidated_pick_flg	, wms_pick_loose_flg	,
		wms_pick_consol_auto_cmplt	, etlcreateddatetime
	FROM stg.stg_wms_pick_plan_hdr;
    END IF;

    EXCEPTION
        WHEN others THEN
        get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;

$$;


ALTER PROCEDURE dwh.usp_f_pickplanheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pickrulesheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pickrulesheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_pick_rules_hdr;

    UPDATE dwh.f_pickRulesHeader t
    SET
        pick_loc_key               = COALESCE(l.loc_key,-1),
        pick_schedule              = s.wms_pick_schedule,
        pick_outputlist            = s.wms_pick_outputlist,
        pick_eqp_assign            = s.wms_pick_eqp_assign,
        pick_emp_assign            = s.wms_pick_emp_assign,
        pick_timestamp             = s.wms_pick_timestamp,
        pick_created_by            = s.wms_pick_created_by,
        pick_created_date          = s.wms_pick_created_date,
        pick_modified_by           = s.wms_pick_modified_by,
        pick_modified_date         = s.wms_pick_modified_date,
        pick_countback_func        = s.wms_pick_countback_func,
        pick_auto_deconsol         = s.wms_pick_auto_deconsol,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_pick_rules_hdr s
	LEFT JOIN dwh.d_location L 		
	ON  s.wms_pick_loc_code	 			= L.loc_code 
    AND s.wms_pick_ou	        		= L.loc_ou
    WHERE t.pick_loc_code = s.wms_pick_loc_code
    AND   t.pick_ou = s.wms_pick_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_pickRulesHeader
    (
        pick_loc_key,pick_loc_code, pick_ou, pick_schedule, pick_outputlist, pick_eqp_assign, pick_emp_assign, pick_timestamp, pick_created_by, pick_created_date, pick_modified_by, pick_modified_date, pick_countback_func, pick_auto_deconsol, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1),s.wms_pick_loc_code, s.wms_pick_ou, s.wms_pick_schedule, s.wms_pick_outputlist, s.wms_pick_eqp_assign, s.wms_pick_emp_assign, s.wms_pick_timestamp, s.wms_pick_created_by, s.wms_pick_created_date, s.wms_pick_modified_by, s.wms_pick_modified_date, s.wms_pick_countback_func, s.wms_pick_auto_deconsol, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_pick_rules_hdr s
	LEFT JOIN dwh.d_location L 		
	ON  s.wms_pick_loc_code	 			= L.loc_code 
    AND s.wms_pick_ou	        		= L.loc_ou
    LEFT JOIN dwh.f_pickRulesHeader t
    ON s.wms_pick_loc_code = t.pick_loc_code
    AND s.wms_pick_ou = t.pick_ou
    WHERE t.pick_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_pick_rules_hdr
    (
        wms_pick_loc_code, wms_pick_ou, wms_pick_schedule, wms_pick_outputlist, wms_pick_eqp_assign, wms_pick_emp_assign, wms_pick_timestamp, wms_pick_created_by, wms_pick_created_date, wms_pick_modified_by, wms_pick_modified_date, wms_pick_userdefined1, wms_pick_userdefined2, wms_pick_userdefined3, wms_pick_countback_func, wms_pick_auto_deconsol, etlcreateddatetime
    )
    SELECT
        wms_pick_loc_code, wms_pick_ou, wms_pick_schedule, wms_pick_outputlist, wms_pick_eqp_assign, wms_pick_emp_assign, wms_pick_timestamp, wms_pick_created_by, wms_pick_created_date, wms_pick_modified_by, wms_pick_modified_date, wms_pick_userdefined1, wms_pick_userdefined2, wms_pick_userdefined3, wms_pick_countback_func, wms_pick_auto_deconsol, etlcreateddatetime
    FROM stg.stg_wms_pick_rules_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_pickrulesheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_planningdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_planningdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag ,p_depsource

    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

           IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_plpd_planning_details;

    UPDATE dwh.F_PlanningDetail t
    SET

        plph_hdr_key                   = oh.plph_hdr_key,
        plpd_cust_key                  = COALESCE(c.customer_key,-1),
        plpd_doc_id                    = s.plpd_doc_id,
        plpd_doc_type                  = s.plpd_doc_type,
        plpd_from_location             = s.plpd_from_location,
        plpd_to_location               = s.plpd_to_location,
        plpd_leg_no                    = s.plpd_leg_no,
        plpd_leg_behaviour             = s.plpd_leg_behaviour,
        plpd_execution_plan            = s.plpd_execution_plan,
        plpd_planning_cutoftime        = s.plpd_planning_cutoftime,
        plpd_created_by                = s.plpd_created_by,
        plpd_created_date              = s.plpd_created_date,
        plpd_last_modified_by          = s.plpd_last_modified_by,
        plpd_last_modified_date        = s.plpd_last_modified_date,
        plpd_failure_reason            = s.plpd_failure_reason,
        plpd_customercode              = s.plpd_customercode,
        plpd_customer_name             = s.plpd_customer_name,
        plpd_trip_id                   = s.plpd_trip_id,
        plpd_trip_status               = s.plpd_trip_status,
        plpd_thu                       = s.plpd_thu,
        plpd_qty                       = s.plpd_qty,
        plpd_balance_qty               = s.plpd_balance_qty,
        plpd_planned_qty               = s.plpd_planned_qty,
        plpd_ship_from_desc            = s.plpd_ship_from_desc,
        plpd_from_postcode             = s.plpd_from_postcode,
        plpd_from_suburb               = s.plpd_from_suburb,
        plpd_to_desc                   = s.plpd_to_desc,
        plpd_to_postcode               = s.plpd_to_postcode,
        plpd_to_suburb                 = s.plpd_to_suburb,
        plpd_pickup_date               = s.plpd_pickup_date,
        plpd_pickup_timeslot           = s.plpd_pickup_timeslot,
        plpd_delivery_date             = s.plpd_delivery_date,
        plpd_delivery_timeslot         = s.plpd_delivery_timeslot,
        plpd_volume                    = s.plpd_volume,
        plpd_palletspace               = s.plpd_palletspace,
        plpd_grossweight               = s.plpd_grossweight,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_tms_plpd_planning_details s

    INNER JOIN dwh.f_planningheader oh

    ON 
        s.plpd_ouinstance = oh.plph_ouinstance
        AND s.plpd_plan_run_no =oh.plph_plan_run_no

LEFT JOIN dwh.d_customer C      
        ON s.plpd_customercode  = C.customer_id 
        AND s.plpd_ouinstance        = C.customer_ou

    WHERE t.plpd_ouinstance = s.plpd_ouinstance
    AND t.plpd_plan_run_no = s.plpd_plan_run_no
    AND t.plpd_plan_unique_id = s.plpd_plan_unique_id
     AND    t.plph_hdr_key   =  oh.plph_hdr_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PlanningDetail
    (
        plph_hdr_key, plpd_cust_key, plpd_ouinstance, plpd_plan_run_no, plpd_doc_id, plpd_doc_type, plpd_from_location, plpd_to_location, plpd_leg_no, plpd_leg_behaviour, plpd_execution_plan, plpd_planning_cutoftime, plpd_created_by, plpd_created_date, plpd_last_modified_by, plpd_last_modified_date, plpd_failure_reason, plpd_customercode, plpd_customer_name, plpd_trip_id, plpd_trip_status, plpd_thu, plpd_qty, plpd_balance_qty, plpd_planned_qty, plpd_ship_from_desc, plpd_from_postcode, plpd_from_suburb, plpd_to_desc, plpd_to_postcode, plpd_to_suburb, plpd_pickup_date, plpd_pickup_timeslot, plpd_delivery_date, plpd_delivery_timeslot, plpd_volume, plpd_palletspace, plpd_grossweight, plpd_plan_unique_id, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       oh.plph_hdr_key, COALESCE(c.customer_key,-1), s.plpd_ouinstance, s.plpd_plan_run_no, s.plpd_doc_id, s.plpd_doc_type, s.plpd_from_location, s.plpd_to_location, s.plpd_leg_no, s.plpd_leg_behaviour, s.plpd_execution_plan, s.plpd_planning_cutoftime, s.plpd_created_by, s.plpd_created_date, s.plpd_last_modified_by, s.plpd_last_modified_date, s.plpd_failure_reason, s.plpd_customercode, s.plpd_customer_name, s.plpd_trip_id, s.plpd_trip_status, s.plpd_thu, s.plpd_qty, s.plpd_balance_qty, s.plpd_planned_qty, s.plpd_ship_from_desc, s.plpd_from_postcode, s.plpd_from_suburb, s.plpd_to_desc, s.plpd_to_postcode, s.plpd_to_suburb, s.plpd_pickup_date, s.plpd_pickup_timeslot, s.plpd_delivery_date, s.plpd_delivery_timeslot, s.plpd_volume, s.plpd_palletspace, s.plpd_grossweight, s.plpd_plan_unique_id, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_plpd_planning_details s

      INNER JOIN dwh.f_planningheader oh

    ON 
        s.plpd_ouinstance = oh.plph_ouinstance
        AND s.plpd_plan_run_no =oh.plph_plan_run_no

        
LEFT JOIN dwh.d_customer C      
        ON s.plpd_customercode  = C.customer_id 
        AND s.plpd_ouinstance        = C.customer_ou

    LEFT JOIN dwh.F_PlanningDetail t
    ON s.plpd_ouinstance = t.plpd_ouinstance
    AND s.plpd_plan_run_no = t.plpd_plan_run_no
    AND s.plpd_plan_unique_id = t.plpd_plan_unique_id
    AND    t.plph_hdr_key   =  oh.plph_hdr_key

    WHERE t.plpd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_plpd_planning_details
    (
        plpd_ouinstance, plpd_plan_run_no, plpd_doc_id, plpd_doc_type, plpd_from_location, plpd_to_location, plpd_leg_no, plpd_leg_behaviour, plpd_execution_plan, plpd_planning_sel_profile, plpd_planning_cutoftime, plpd_created_by, plpd_created_date, plpd_last_modified_by, plpd_last_modified_date, plpd_timestamp, plpd_failure_reason, plpd_customercode, plpd_customer_name, plpd_trip_id, plpd_trip_status, plpd_thu, plpd_qty, plpd_balance_qty, plpd_planned_qty, plpd_ship_from_desc, plpd_from_postcode, plpd_from_suburb, plpd_to_desc, plpd_to_postcode, plpd_to_suburb, plpd_pickup_date, plpd_pickup_timeslot, plpd_delivery_date, plpd_delivery_timeslot, plpd_volume, plpd_palletspace, plpd_grossweight, plpd_special_instruction, plpd_plan_unique_id, etlcreateddatetime
    )
    SELECT
        plpd_ouinstance, plpd_plan_run_no, plpd_doc_id, plpd_doc_type, plpd_from_location, plpd_to_location, plpd_leg_no, plpd_leg_behaviour, plpd_execution_plan, plpd_planning_sel_profile, plpd_planning_cutoftime, plpd_created_by, plpd_created_date, plpd_last_modified_by, plpd_last_modified_date, plpd_timestamp, plpd_failure_reason, plpd_customercode, plpd_customer_name, plpd_trip_id, plpd_trip_status, plpd_thu, plpd_qty, plpd_balance_qty, plpd_planned_qty, plpd_ship_from_desc, plpd_from_postcode, plpd_from_suburb, plpd_to_desc, plpd_to_postcode, plpd_to_suburb, plpd_pickup_date, plpd_pickup_timeslot, plpd_delivery_date, plpd_delivery_timeslot, plpd_volume, plpd_palletspace, plpd_grossweight, plpd_special_instruction, plpd_plan_unique_id, etlcreateddatetime
    FROM stg.stg_tms_plpd_planning_details;
    END IF;

      ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_planningdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_planningheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_planningheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_plph_planning_hdr;

    UPDATE dwh.F_PlanningHeader t
    SET
        plph_loc_key                   =   COALESCE(l.loc_key,-1),
        plph_status                     = s.plph_status,
        plph_description                = s.plph_description,
        plph_planning_profile_no        = s.plph_planning_profile_no,
        plph_plan_location_no           = s.plph_plan_location_no,
        plph_created_by                 = s.plph_created_by,
        plph_created_date               = s.plph_created_date,
        plph_last_modified_by           = s.plph_last_modified_by,
        plph_last_modified_date         = s.plph_last_modified_date,
        plph_plan_mode                  = s.plph_plan_mode,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_tms_plph_planning_hdr s

    LEFT JOIN dwh.d_location L      
        ON s.plph_plan_location_no   = L.loc_code 
        and s.plph_ouinstance = L.loc_ou
      

    WHERE t.plph_ouinstance = s.plph_ouinstance
    AND t.plph_plan_run_no = s.plph_plan_run_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PlanningHeader
    (
       plph_loc_key, plph_ouinstance, plph_plan_run_no, plph_status, plph_description, plph_planning_profile_no, plph_plan_location_no, plph_created_by, plph_created_date, plph_last_modified_by, plph_last_modified_date, plph_plan_mode, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(l.loc_key,-1), s.plph_ouinstance, s.plph_plan_run_no, s.plph_status, s.plph_description, s.plph_planning_profile_no, s.plph_plan_location_no, s.plph_created_by, s.plph_created_date, s.plph_last_modified_by, s.plph_last_modified_date, s.plph_plan_mode, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_plph_planning_hdr s

      LEFT JOIN dwh.d_location L      
        ON s.plph_plan_location_no   = L.loc_code 
        and s.plph_ouinstance = L.loc_ou
      

    LEFT JOIN dwh.F_PlanningHeader t
    ON s.plph_ouinstance = t.plph_ouinstance
    AND s.plph_plan_run_no = t.plph_plan_run_no
    WHERE t.plph_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_plph_planning_hdr
    (
        plph_ouinstance, plph_plan_run_no, plph_status, plph_description, plph_planning_profile_no, plph_plan_location_no, plph_from_location, plph_to_location, plph_created_by, plph_created_date, plph_last_modified_by, plph_last_modified_date, plph_timestamp, plph_plan_mode, etlcreateddatetime
    )
    SELECT
        plph_ouinstance, plph_plan_run_no, plph_status, plph_description, plph_planning_profile_no, plph_plan_location_no, plph_from_location, plph_to_location, plph_created_by, plph_created_date, plph_last_modified_by, plph_last_modified_date, plph_timestamp, plph_plan_mode, etlcreateddatetime
    FROM stg.stg_tms_plph_planning_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_planningheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_pogritemdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_pogritemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	 p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
	
    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN	

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_gr_po_item_dtl;

    UPDATE dwh.F_POGRItemDetail t
    SET
		gr_pln_key =  oh.gr_pln_key,
        gr_po_loc_key    = COALESCE(l.loc_key,-1),
        gr_loc_code                     = s.wms_gr_loc_code,
        gr_pln_no                       = s.wms_gr_pln_no,
        gr_pln_ou                       = s.wms_gr_pln_ou,
        gr_lineno                       = s.wms_gr_lineno,
        gr_po_no                        = s.wms_gr_po_no,
        gr_po_sno                       = s.wms_gr_po_sno,
        gr_item                         = s.wms_gr_item,
        gr_item_desc                    = s.wms_gr_item_desc,
        gr_qty                          = s.wms_gr_qty,
        gr_mas_uom                      = s.wms_gr_mas_uom,
        gr_asn_line_no                  = s.wms_gr_asn_line_no,
        gr_asn_srl_no                   = s.wms_gr_asn_srl_no,
        gr_asn_cust_sl_no               = s.wms_gr_asn_cust_sl_no,
        gr_asn_ref_doc_no1              = s.wms_gr_asn_ref_doc_no1,
        gr_asn_outboundorder_qty        = s.wms_gr_asn_outboundorder_qty,
        gr_asn_remarks                  = s.wms_gr_asn_remarks,
        gr_fully_executed               = s.wms_gr_fully_executed,
        gr_asn_stock_status             = s.wms_gr_asn_stock_status,
        gr_product_status               = s.wms_gr_product_status,
        gr_coo                          = s.wms_gr_coo,
        gr_item_attribute1              = s.wms_gr_item_attribute1,
        gr_item_attribute2              = s.wms_gr_item_attribute2,
        gr_item_attribute3              = s.wms_gr_item_attribute3,
        gr_item_attribute7              = s.wms_gr_item_attribute7,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_wms_gr_po_item_dtl s
    INNER JOIN dwh.f_grplandetail oh
	
     ON  s.wms_gr_loc_code = oh.gr_loc_code   
     and s.wms_gr_pln_no =  oh.gr_pln_no
     and s.wms_gr_pln_ou = oh.gr_pln_ou 

      LEFT JOIN dwh.d_location L        
        ON s.wms_gr_loc_code     = L.loc_code 
        AND s.wms_gr_pln_ou        = L.loc_ou

    WHERE t.gr_loc_code = s.wms_gr_loc_code
    AND t.gr_pln_no = s.wms_gr_pln_no
    AND t.gr_pln_ou = s.wms_gr_pln_ou
    AND t.gr_lineno = s.wms_gr_lineno
    AND t.gr_pln_key =  oh.gr_pln_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_POGRItemDetail
    (
       gr_pln_key,gr_po_loc_key ,gr_loc_code, gr_pln_no, gr_pln_ou, gr_lineno, gr_po_no, gr_po_sno, gr_item, gr_item_desc, gr_qty, gr_mas_uom, gr_asn_line_no, gr_asn_srl_no, gr_asn_cust_sl_no, gr_asn_ref_doc_no1, gr_asn_outboundorder_qty, gr_asn_remarks, gr_fully_executed, gr_asn_stock_status, gr_product_status, gr_coo, gr_item_attribute1, gr_item_attribute2, gr_item_attribute3, gr_item_attribute7, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       oh.gr_pln_key,COALESCE(l.loc_key,-1),s.wms_gr_loc_code, s.wms_gr_pln_no, s.wms_gr_pln_ou, s.wms_gr_lineno, s.wms_gr_po_no, s.wms_gr_po_sno, s.wms_gr_item, s.wms_gr_item_desc, s.wms_gr_qty, s.wms_gr_mas_uom, s.wms_gr_asn_line_no, s.wms_gr_asn_srl_no, s.wms_gr_asn_cust_sl_no, s.wms_gr_asn_ref_doc_no1, s.wms_gr_asn_outboundorder_qty, s.wms_gr_asn_remarks, s.wms_gr_fully_executed, s.wms_gr_asn_stock_status, s.wms_gr_product_status, s.wms_gr_coo, s.wms_gr_item_attribute1, s.wms_gr_item_attribute2, s.wms_gr_item_attribute3, s.wms_gr_item_attribute7, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_gr_po_item_dtl s
	INNER JOIN dwh.f_grplandetail oh
	
     ON  s.wms_gr_loc_code = oh.gr_loc_code   
     and s.wms_gr_pln_no =  oh.gr_pln_no
     and s.wms_gr_pln_ou = oh.gr_pln_ou 

     LEFT JOIN dwh.d_location L        
        ON s.wms_gr_loc_code     = L.loc_code 
        AND s.wms_gr_pln_ou        = L.loc_ou

    LEFT JOIN dwh.F_POGRItemDetail t
	
	
    ON   t.gr_loc_code   = s.wms_gr_loc_code
    AND  t.gr_pln_no  = s.wms_gr_pln_no
    AND  t.gr_pln_ou  = s.wms_gr_pln_ou
    AND  t.gr_lineno  = s.wms_gr_lineno
	    AND t.gr_pln_key =  oh.gr_pln_key

    WHERE t.gr_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_gr_po_item_dtl
    (
        wms_gr_loc_code, wms_gr_pln_no, wms_gr_pln_ou, wms_gr_lineno, wms_gr_po_no, wms_gr_po_sno, wms_gr_item, wms_gr_item_desc, wms_gr_qty, wms_gr_mas_uom, wms_gr_asn_line_no, wms_gr_asn_srl_no, wms_gr_asn_uid, wms_gr_asn_cust_sl_no, wms_gr_asn_ref_doc_no1, wms_gr_asn_consignee, wms_gr_asn_outboundorder_no, wms_gr_asn_outboundorder_qty, wms_gr_asn_outboundorder_lineno, wms_gr_asn_bestbeforedate, wms_gr_asn_remarks, wms_gr_fully_executed, wms_gr_asn_stock_status, wms_gr_inv_type, wms_gr_product_status, wms_gr_coo, wms_gr_item_attribute1, wms_gr_item_attribute2, wms_gr_item_attribute3, wms_gr_item_attribute4, wms_gr_item_attribute5, wms_gr_item_attribute6, wms_gr_item_attribute7, wms_gr_item_attribute8, wms_gr_item_attribute9, wms_gr_item_attribute10, etlcreateddatetime
    )
    SELECT
        wms_gr_loc_code, wms_gr_pln_no, wms_gr_pln_ou, wms_gr_lineno, wms_gr_po_no, wms_gr_po_sno, wms_gr_item, wms_gr_item_desc, wms_gr_qty, wms_gr_mas_uom, wms_gr_asn_line_no, wms_gr_asn_srl_no, wms_gr_asn_uid, wms_gr_asn_cust_sl_no, wms_gr_asn_ref_doc_no1, wms_gr_asn_consignee, wms_gr_asn_outboundorder_no, wms_gr_asn_outboundorder_qty, wms_gr_asn_outboundorder_lineno, wms_gr_asn_bestbeforedate, wms_gr_asn_remarks, wms_gr_fully_executed, wms_gr_asn_stock_status, wms_gr_inv_type, wms_gr_product_status, wms_gr_coo, wms_gr_item_attribute1, wms_gr_item_attribute2, wms_gr_item_attribute3, wms_gr_item_attribute4, wms_gr_item_attribute5, wms_gr_item_attribute6, wms_gr_item_attribute7, wms_gr_item_attribute8, wms_gr_item_attribute9, wms_gr_item_attribute10, etlcreateddatetime
    FROM stg.stg_wms_gr_po_item_dtl;
    END IF;
	ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_pogritemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_poprcoverage(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_poprcoverage(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;	
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_po_poprq_poprcovg_detail;

	UPDATE dwh.f_poprcoverage t
    SET 
		 
		  poprq_pocovqty                = s.poprq_pocovqty
        , poprq_createdby               = s.poprq_createdby
        , poprq_createddate             = s.poprq_createddate
        , poprq_lastmodifiedby          = s.poprq_lastmodifiedby
        , poprq_grrecvdqty              = s.poprq_grrecvdqty
        , poprq_lastmodifieddate        = s.poprq_lastmodifieddate
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_po_poprq_poprcovg_detail s  	
    WHERE   	t.poprq_poou            = s.poprq_poou
            AND t.poprq_pono            = s.poprq_pono
            AND t.poprq_poamendmentno   = s.poprq_poamendmentno
            AND t.poprq_polineno        = s.poprq_polineno
            AND t.poprq_scheduleno      = s.poprq_scheduleno
            AND t.poprq_prno            = s.poprq_prno
            AND t.poprq_posubscheduleno = s.poprq_posubscheduleno
            AND t.poprq_prlineno        = s.poprq_prlineno
            AND t.poprq_prou            = s.poprq_prou
            AND t.poprq_pr_shdno        = s.poprq_pr_shdno
            AND t.poprq_pr_subsceduleno = s.poprq_pr_subsceduleno;
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_poprcoverage
	(
				
          poprq_poou			, poprq_pono				, poprq_poamendmentno	 	, poprq_polineno		, poprq_scheduleno
        , poprq_prno			, poprq_posubscheduleno		, poprq_prlineno		 	, poprq_prou			, poprq_pr_shdno
        , poprq_pocovqty		, poprq_createdby			, poprq_pr_subsceduleno	 	, poprq_createddate		, poprq_lastmodifiedby
        , poprq_grrecvdqty		, poprq_lastmodifieddate
        , etlactiveind			, etljobname                , envsourcecd				, datasourcecd			, etlcreatedatetime
	)
	
	SELECT DISTINCT 
		
          s.poprq_poou			, s.poprq_pono				, s.poprq_poamendmentno	 	, s.poprq_polineno		, s.poprq_scheduleno
        , s.poprq_prno			, s.poprq_posubscheduleno	, s.poprq_prlineno		 	, s.poprq_prou			, s.poprq_pr_shdno
        , s.poprq_pocovqty		, s.poprq_createdby			, s.poprq_pr_subsceduleno	, s.poprq_createddate	, s.poprq_lastmodifiedby
        , s.poprq_grrecvdqty	, s.poprq_lastmodifieddate
        , 1 AS etlactiveind		    , p_etljobname                  , p_envsourcecd					, p_datasourcecd			, NOW()
	FROM stg.stg_po_poprq_poprcovg_detail s
	LEFT JOIN dwh.f_poprcoverage t  	
		    ON  t.poprq_poou            = s.poprq_poou
            AND t.poprq_pono            = s.poprq_pono
            AND t.poprq_poamendmentno   = s.poprq_poamendmentno
            AND t.poprq_polineno        = s.poprq_polineno
            AND t.poprq_scheduleno      = s.poprq_scheduleno
            AND t.poprq_prno            = s.poprq_prno
            AND t.poprq_posubscheduleno = s.poprq_posubscheduleno
            AND t.poprq_prlineno        = s.poprq_prlineno
            AND t.poprq_prou            = s.poprq_prou
            AND t.poprq_pr_shdno        = s.poprq_pr_shdno
            AND t.poprq_pr_subsceduleno = s.poprq_pr_subsceduleno
    WHERE t.poprq_poou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_po_poprq_poprcovg_detail
	(
		poprq_poou, 		poprq_pono, 				poprq_poamendmentno, 		poprq_polineno, 		poprq_scheduleno, 
		poprq_prno, 		poprq_posubscheduleno, 		poprq_prlineno, 			poprq_prou, 			poprq_pr_shdno, 
		poprq_pocovqty, 	poprq_createdby, 			poprq_pr_subsceduleno, 		poprq_createddate, 		poprq_lastmodifiedby, 
		poprq_grrecvdqty, 	poprq_lastmodifieddate, 	etlcreateddatetime
	)
	SELECT 
		poprq_poou, 		poprq_pono, 				poprq_poamendmentno, 		poprq_polineno, 		poprq_scheduleno, 
		poprq_prno, 		poprq_posubscheduleno, 		poprq_prlineno, 			poprq_prou, 			poprq_pr_shdno, 
		poprq_pocovqty, 	poprq_createdby, 			poprq_pr_subsceduleno, 		poprq_createddate, 		poprq_lastmodifiedby, 
		poprq_grrecvdqty, 	poprq_lastmodifieddate, 	etlcreateddatetime
	FROM stg.stg_po_poprq_poprcovg_detail;
    END IF;	
	
    EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
        
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt; 	
END;
$$;


ALTER PROCEDURE dwh.usp_f_poprcoverage(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_purchasedetails(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_purchasedetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON  d.sourceid      = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt FROM stg.stg_po_poitm_item_detail;

	UPDATE dwh.f_purchasedetails t
    SET 
		 po_hr_key					= fh.po_hr_key
		,po_dtl_loc_key				= COALESCE(l.loc_key,-1)
		,po_dtl_wh_key			    = COALESCE(wh.wh_key,-1)
		,po_dtl_cust_key			= COALESCE(c.customer_key,-1)
		,po_dtl_uom_key				= COALESCE(u.uom_key,-1)
		,itemcode                   = s.poitm_itemcode
		,variant                    = s.poitm_variant
		,order_quantity             = s.poitm_order_quantity
		,pobalancequantity          = s.poitm_pobalancequantity
		,puom                       = s.poitm_puom
		,po_cost                    = s.poitm_po_cost
		,costper                    = s.poitm_costper
		,shiptoou                   = s.poitm_shiptoou
		,tcdtotalamount             = s.poitm_tcdtotalamount
		,warehousecode              = s.poitm_warehousecode
		,itemvalue                  = s.poitm_itemvalue
		,polinestatus               = s.poitm_polinestatus
		,createdby                  = s.poitm_createdby
		,createddate                = s.poitm_createddate
		,lastmodifiedby             = s.poitm_lastmodifiedby
		,lastmodifieddate           = s.poitm_lastmodifieddate
		,itemdescription            = s.poitm_itemdescription
		,schedtype                  = s.poitm_schedtype
		,needdate                   = s.poitm_needdate
		,accunit                    = s.poitm_accunit
		,adhocitemclass             = s.poitm_adhocitemclass
		,refdocno                   = s.poitm_refdocno
		,refdoclineno               = s.poitm_refdoclineno
		,comments                   = s.poitm_comments
		,customercode               = s.poitm_customercode
		,proposalid                 = s.poitm_proposalid
		,attrvalue                  = s.poitm_attrvalue
		,grrecdqty                  = s.poitm_grrecdqty
		,graccpdqty                 = s.poitm_graccpdqty
		,grmovdqty                  = s.poitm_grmovdqty
		,matched_qty                = s.poitm_matched_qty
		,matched_amt                = s.poitm_matched_amt
		,billed_qty                 = s.poitm_billed_qty
		,billed_amt                 = s.poitm_billed_amt
		,adhocplng                  = s.poitm_adhocplng
		,location                   = s.poitm_location
		,availableqty               = s.poitm_availableqty
		, etlactiveind 			    = 1
		, etljobname 				= p_etljobname
		, envsourcecd 				= p_envsourcecd
		, datasourcecd 				= p_datasourcecd
		, etlupdatedatetime 		= NOW()	
    FROM stg.stg_po_poitm_item_detail s
	INNER JOIN 	dwh.f_purchaseheader fh 
		ON  s.poitm_poou 				= fh.poou 
		AND s.poitm_pono 			    = fh.pono 
		AND s.poitm_poamendmentno 		= fh.poamendmentno     
	LEFT JOIN dwh.d_location L 		
		ON  s.poitm_location 			= L.loc_code 
        AND s.poitm_poou        		= L.loc_ou
	LEFT JOIN dwh.d_warehouse wh 			
		ON  s.poitm_warehousecode 		= wh.wh_code
        AND s.poitm_poou        		= wh.wh_ou
	LEFT JOIN dwh.d_customer c 		
		ON  s.poitm_customercode  		= c.customer_id 
        AND s.poitm_poou        		= c.customer_ou
	LEFT JOIN dwh.d_uom u 		
		ON  s.poitm_puom  		        = u.mas_uomcode 
        AND s.poitm_poou        		= u.mas_ouinstance	
    WHERE   t.poou 						= s.poitm_poou 
		AND t.pono 			    		= s.poitm_pono 
		AND t.poamendmentno 			= s.poitm_poamendmentno
		AND t.polineno	= s.poitm_polineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_purchasedetails
	(
		  po_hr_key				    , po_dtl_loc_key			, po_dtl_wh_key		        , po_dtl_cust_key			, po_dtl_uom_key, 		
		  poou,			            pono,				        poamendmentno,			    polineno,			        itemcode,
		  variant,		            order_quantity,	            pobalancequantity,		    puom,				        po_cost,
		  costper,		            shiptoou,			        tcdtotalamount,			    warehousecode,		        itemvalue,
		  polinestatus,	            createdby,		            createddate,			    lastmodifiedby,		        lastmodifieddate,
		  itemdescription,          schedtype,		            needdate,				    accunit,			        adhocitemclass,
	      refdocno,		            refdoclineno,	            comments,				    customercode,		        proposalid,
		  attrvalue,		        grrecdqty,		            graccpdqty,				    grmovdqty,			        matched_qty,
		  matched_amt,	            billed_qty,		            billed_amt,				    adhocplng,			        location,
		  availableqty,

		  etlactiveind				, etljobname				, envsourcecd				, datasourcecd	            , etlcreatedatetime
	)
	
	SELECT 
		fh.po_hr_key			 , COALESCE(l.loc_key,-1)	,COALESCE(wh.wh_key,-1)         ,COALESCE(c.customer_key,-1)	,COALESCE(u.uom_key,-1), 
        s.poitm_poou,			 s.poitm_pono,				s.poitm_poamendmentno,			s.poitm_polineno,			s.poitm_itemcode,
		s.poitm_variant,		 s.poitm_order_quantity,	s.poitm_pobalancequantity,		s.poitm_puom,				s.poitm_po_cost,
		s.poitm_costper,		 s.poitm_shiptoou,			s.poitm_tcdtotalamount,			s.poitm_warehousecode,		s.poitm_itemvalue,
		s.poitm_polinestatus,	 s.poitm_createdby,		    s.poitm_createddate,			s.poitm_lastmodifiedby,		s.poitm_lastmodifieddate,
		s.poitm_itemdescription, s.poitm_schedtype,		    s.poitm_needdate,				s.poitm_accunit,			s.poitm_adhocitemclass,
		s.poitm_refdocno,		 s.poitm_refdoclineno,	    s.poitm_comments,				s.poitm_customercode,		s.poitm_proposalid,
		s.poitm_attrvalue,		 s.poitm_grrecdqty,		    s.poitm_graccpdqty,				s.poitm_grmovdqty,			s.poitm_matched_qty,
		s.poitm_matched_amt,	 s.poitm_billed_qty,		s.poitm_billed_amt,				s.poitm_adhocplng,			s.poitm_location,
		s.poitm_availableqty,
        1 AS etlactiveind		 , p_etljobname				, p_envsourcecd				, p_datasourcecd	            , NOW()
	FROM stg.stg_po_poitm_item_detail s
	INNER JOIN dwh.f_purchaseheader fh 
		ON  s.poitm_poou 				= fh.poou 
		AND s.poitm_pono 			    = fh.pono 
		AND s.poitm_poamendmentno 		= fh.poamendmentno
	LEFT JOIN dwh.d_location L 		
		ON  s.poitm_location 			= L.loc_code 
        AND s.poitm_poou        		= L.loc_ou
	LEFT JOIN dwh.d_warehouse wh 			
		ON  s.poitm_warehousecode 		= wh.wh_code
        AND s.poitm_poou        		= wh.wh_ou
	LEFT JOIN dwh.d_customer c 		
		ON  s.poitm_customercode  		= c.customer_id 
        AND s.poitm_poou        		= c.customer_ou
	LEFT JOIN dwh.d_uom u 		
		ON  s.poitm_puom  		        = u.mas_uomcode 
        AND s.poitm_poou        		= u.mas_ouinstance		
	LEFT JOIN dwh.f_purchasedetails fd  	
		ON  s.poitm_poou 				= fd.poou 
		AND s.poitm_pono 			    = fd.pono 
		AND s.poitm_poamendmentno		= fd.poamendmentno
		AND s.poitm_polineno			= fd.polineno
    WHERE fd.pono IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_po_poitm_item_detail
	(
		poitm_poou, poitm_pono, poitm_poamendmentno, poitm_polineno, poitm_itemcode, 
		poitm_variant, poitm_order_quantity, poitm_pobalancequantity, poitm_puom, 
		poitm_po_cost, poitm_costper, poitm_shiptoou, poitm_tcdtotalamount, poitm_warehousecode,
		poitm_itemvalue, poitm_polinestatus, poitm_createdby, poitm_createddate, 
		poitm_lastmodifiedby, poitm_lastmodifieddate, poitm_itemdescription, poitm_schedtype, 
		poitm_needdate, poitm_accunit, poitm_drawingrevno, poitm_adhocitemclass, poitm_refdocno, 
		poitm_refdoclineno, poitm_comments, poitm_bugetid, poitm_customercode, poitm_proposalid, 
		poitm_dropshipid, poitm_attrvalue, poitm_contactperson, poitm_grrecdqty, poitm_graccpdqty, 
		poitm_grreturnedqty, poitm_grrejdqty, poitm_grmovdqty, poitm_qtnlineno, poitm_despatchqty, 
		poitm_matched_qty, poitm_matched_amt, poitm_billed_qty, poitm_billed_amt, poitm_drgno, 
		poitm_project, poitm_project_ou, poitm_ms_app_flag, poitm_retained_amt, poitm_retention_amt, 
		poitm_ret_remarks, poitm_wbs_id, poitm_solineno, poitm_adhocplng, poitm_location, poitm_availableqty, 
		etlcreateddatetime
	
	)
	SELECT 
		poitm_poou, poitm_pono, poitm_poamendmentno, poitm_polineno, poitm_itemcode, 
		poitm_variant, poitm_order_quantity, poitm_pobalancequantity, poitm_puom, 
		poitm_po_cost, poitm_costper, poitm_shiptoou, poitm_tcdtotalamount, poitm_warehousecode,
		poitm_itemvalue, poitm_polinestatus, poitm_createdby, poitm_createddate, 
		poitm_lastmodifiedby, poitm_lastmodifieddate, poitm_itemdescription, poitm_schedtype, 
		poitm_needdate, poitm_accunit, poitm_drawingrevno, poitm_adhocitemclass, poitm_refdocno, 
		poitm_refdoclineno, poitm_comments, poitm_bugetid, poitm_customercode, poitm_proposalid, 
		poitm_dropshipid, poitm_attrvalue, poitm_contactperson, poitm_grrecdqty, poitm_graccpdqty, 
		poitm_grreturnedqty, poitm_grrejdqty, poitm_grmovdqty, poitm_qtnlineno, poitm_despatchqty, 
		poitm_matched_qty, poitm_matched_amt, poitm_billed_qty, poitm_billed_amt, poitm_drgno, 
		poitm_project, poitm_project_ou, poitm_ms_app_flag, poitm_retained_amt, poitm_retention_amt, 
		poitm_ret_remarks, poitm_wbs_id, poitm_solineno, poitm_adhocplng, poitm_location, poitm_availableqty, 
		etlcreateddatetime
	FROM stg.stg_po_poitm_item_detail;
    END IF;	
	
    ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_purchasedetails(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_purchaseheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_purchaseheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_po_pomas_pur_order_hdr;

	UPDATE dwh.f_purchaseheader t
    SET 
         po_loc_key                   = COALESCE(l.loc_key,-1)
        ,po_date_key                  = COALESCE(d.datekey,-1)
        ,po_cur_key                  = COALESCE(c.curr_key,-1)
        ,po_supp_key                  = COALESCE(v.vendor_key,-1)
		,podate =  s.pomas_podate
		,poauthdate =  s.pomas_poauthdate
		,podocstatus =  s.pomas_podocstatus
		,potype =  s.pomas_potype
		,loitoorder =  s.pomas_loitoorder
		,loi =  s.pomas_loi
		,hold =  s.pomas_hold
		,orgsource =  s.pomas_orgsource
		,suppliercode =  s.pomas_suppliercode
		,contactperson =  s.pomas_contactperson
		,pocurrency =  s.pomas_pocurrency
		,exchangerate =  s.pomas_exchangerate
		,pobasicvalue =  s.pomas_pobasicvalue
		,tcdtotalrate =  s.pomas_tcdtotalrate
		,poaddlncharge =  s.pomas_poaddlncharge
		,folder =  s.pomas_folder
		,remarks =  s.pomas_remarks
		,createdby =  s.pomas_createdby
		,holdreason =  s.pomas_holdreason
		,createddate =  s.pomas_createddate
		,lastmodifiedby =  s.pomas_lastmodifiedby
		,lastmodifieddate =  s.pomas_lastmodifieddate
		,ptimestamp =  s.pomas_timestamp
		,avgvatrate =  s.pomas_avgvatrate
		,vatinclusive =  s.pomas_vatinclusive
		,filename =  s.pomas_filename
		,tax_status =  s.pomas_tax_status
		,tcal_total_amount =  s.pomas_tcal_total_amount
		,tcal_excl_amount =  s.pomas_tcal_excl_amount
		,qpoflag =  s.pomas_qpoflag
		,wfstatus =  s.pomas_wfstatus
		,imports =  s.pomas_imports
		,shipfrm =  s.pomas_shipfrm
		,numseries =  s.pomas_numseries
		,amd_srccomp =  s.pomas_amd_srccomp
		,poamendmentdate =  s.pomas_poamendmentdate
		,gen_from =  s.gen_from
		,location =  s.pomas_location
		,poitm_location =  s.poitm_location
		,contract =  s.pomas_contract
		,party_tax_region =  s.pomas_party_tax_region
		,party_regd_no =  s.pomas_party_regd_no
		,own_tax_region =  s.pomas_own_tax_region
		,mail_sent =  s.pomas_mail_sent
		,auth_remarks =  s.pomas_auth_remarks
		,reason_return =  s.pomas_reason_return
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_po_pomas_pur_order_hdr s
	LEFT JOIN dwh.d_location L 		
		ON s.pomas_location 	= L.loc_code 
        AND s.pomas_poou        = L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON s.pomas_podate::date = D.dateactual
	LEFT JOIN dwh.d_currency C 		
		ON s.pomas_pocurrency  = C.iso_curr_code 
	LEFT JOIN dwh.d_vendor V 		
		ON s.pomas_suppliercode  = V.vendor_id 
        AND s.pomas_poou        = V.vendor_ou	
    WHERE t.poou =  s.pomas_poou
      AND t.pono =  s.pomas_pono
      AND t.poamendmentno =  s.pomas_poamendmentno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_purchaseheader
	(
		po_loc_key,				po_date_key,			po_cur_key,			po_supp_key, 
        poou,					pono,					poamendmentno,		podate,
		poauthdate,				podocstatus,			potype,				loitoorder,
		loi,					hold,					orgsource,			suppliercode,
		contactperson,			pocurrency,				exchangerate,		pobasicvalue,
		tcdtotalrate,			poaddlncharge,			folder,				remarks,
		createdby,				holdreason,				createddate,		lastmodifiedby,
		lastmodifieddate,		ptimestamp,				avgvatrate,			vatinclusive,
		filename,				tax_status,				tcal_total_amount,	tcal_excl_amount,
		qpoflag,				wfstatus,				imports,			shipfrm,
		numseries,				amd_srccomp,			poamendmentdate,	gen_from,
		location,				poitm_location,			contract,			party_tax_region,
		party_regd_no,			own_tax_region,			mail_sent,			auth_remarks,
		reason_return,          etlactiveind,		    etljobname,         envsourcecd,							 
        datasourcecd,			etlcreatedatetime
	)
	
	SELECT 
	   	COALESCE(L.loc_key,-1),			D.datekey,						COALESCE(C.curr_key,-1),	    COALESCE(V.vendor_key,-1),		
        s.pomas_poou,					s.pomas_pono,					s.pomas_poamendmentno,		s.pomas_podate,
		s.pomas_poauthdate,				s.pomas_podocstatus,			s.pomas_potype,				s.pomas_loitoorder,
		s.pomas_loi,					s.pomas_hold,					s.pomas_orgsource,			s.pomas_suppliercode,
		s.pomas_contactperson,			s.pomas_pocurrency,				s.pomas_exchangerate,		s.pomas_pobasicvalue,
		s.pomas_tcdtotalrate,			s.pomas_poaddlncharge,			s.pomas_folder,				s.pomas_remarks,
		s.pomas_createdby,				s.pomas_holdreason,				s.pomas_createddate,		s.pomas_lastmodifiedby,
		s.pomas_lastmodifieddate,		s.pomas_timestamp,				s.pomas_avgvatrate,			s.pomas_vatinclusive,
		s.pomas_filename,				s.pomas_tax_status,				s.pomas_tcal_total_amount,	s.pomas_tcal_excl_amount,
		s.pomas_qpoflag,				s.pomas_wfstatus,				s.pomas_imports,			s.pomas_shipfrm,
		s.pomas_numseries,				s.pomas_amd_srccomp,			s.pomas_poamendmentdate,	s.gen_from,
		s.pomas_location,				s.poitm_location,				s.pomas_contract,			s.pomas_party_tax_region,
		s.pomas_party_regd_no,			s.pomas_own_tax_region,			s.pomas_mail_sent,			s.pomas_auth_remarks,
		s.pomas_reason_return,          1 AS etlactiveind,				p_etljobname,               p_envsourcecd,							
        p_datasourcecd,					NOW()
	FROM stg.stg_po_pomas_pur_order_hdr s
	LEFT JOIN dwh.d_location L 		
		ON s.pomas_location 	    = L.loc_code 
        AND s.pomas_poou           = L.loc_ou
	LEFT JOIN dwh.d_date D 			
		ON s.pomas_podate::date 	= D.dateactual
	LEFT JOIN dwh.d_currency C 		
		ON s.pomas_pocurrency	    = C.iso_curr_code 
	LEFT JOIN dwh.d_vendor V 		
		ON s.pomas_suppliercode 	= V.vendor_id 
        AND s.pomas_poou           = V.vendor_ou
	LEFT JOIN dwh.f_purchaseheader FH 	
		ON FH.poou =  s.pomas_poou
      AND FH.pono =  s.pomas_pono
      AND FH.poamendmentno =  s.pomas_poamendmentno
    WHERE FH.pono IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_po_pomas_pur_order_hdr
	(
		pomas_poou, pomas_pono, pomas_poamendmentno, pomas_podate, pomas_poauthdate, 
		pomas_podocstatus, pomas_potype, pomas_loitoorder, pomas_loi, pomas_hold, 
		pomas_orgsource, pomas_requoteno, pomas_suppliercode, pomas_contactperson, 
		pomas_buyercode, pomas_pocurrency, pomas_exchangerate, pomas_pobasicvalue, 
		pomas_tcdtotalrate, pomas_poaddlncharge, pomas_folder, pomas_remarks, 
		pomas_createdby, pomas_holdreason, pomas_createddate, pomas_lastmodifiedby, 
		pomas_lastmodifieddate, pomas_timestamp, pomas_avgvatrate, pomas_vatinclusive, 
		pomas_pcstatus, pomas_filename, pomas_tax_status, pomas_tcal_total_amount, 
		pomas_tcal_excl_amount, pomas_qpoflag, pomas_wfstatus, pomas_imports, pomas_shipfrm, 
		pomas_numseries, pomas_refdocno, pomas_refdocou, pomas_ms_app_flag, pomas_retentionperc, 
		pomas_ret_postol, pomas_ret_negtol, pomas_so_no, pomas_so_ou, pomas_so_amendno, 
		pomas_amd_srccomp, pomas_poamendmentdate, gen_from, pomas_clientcode, pomas_budgetdescription, 
		pomas_location, poitm_location, pomas_contract, pomas_party_tax_region, pomas_party_regd_no, 
		pomas_own_tax_region, pomas_mail_sent, pomas_cls_code, pomas_scls_code, pomas_auth_remarks, 
		pomas_reason_return, etlcreateddatetime
	
	)
	SELECT 
		pomas_poou, pomas_pono, pomas_poamendmentno, pomas_podate, pomas_poauthdate, 
		pomas_podocstatus, pomas_potype, pomas_loitoorder, pomas_loi, pomas_hold, 
		pomas_orgsource, pomas_requoteno, pomas_suppliercode, pomas_contactperson, 
		pomas_buyercode, pomas_pocurrency, pomas_exchangerate, pomas_pobasicvalue, 
		pomas_tcdtotalrate, pomas_poaddlncharge, pomas_folder, pomas_remarks, 
		pomas_createdby, pomas_holdreason, pomas_createddate, pomas_lastmodifiedby, 
		pomas_lastmodifieddate, pomas_timestamp, pomas_avgvatrate, pomas_vatinclusive, 
		pomas_pcstatus, pomas_filename, pomas_tax_status, pomas_tcal_total_amount, 
		pomas_tcal_excl_amount, pomas_qpoflag, pomas_wfstatus, pomas_imports, pomas_shipfrm, 
		pomas_numseries, pomas_refdocno, pomas_refdocou, pomas_ms_app_flag, pomas_retentionperc, 
		pomas_ret_postol, pomas_ret_negtol, pomas_so_no, pomas_so_ou, pomas_so_amendno, 
		pomas_amd_srccomp, pomas_poamendmentdate, gen_from, pomas_clientcode, pomas_budgetdescription, 
		pomas_location, poitm_location, pomas_contract, pomas_party_tax_region, pomas_party_regd_no, 
		pomas_own_tax_region, pomas_mail_sent, pomas_cls_code, pomas_scls_code, pomas_auth_remarks, 
		pomas_reason_return, etlcreateddatetime
	FROM stg.stg_po_pomas_pur_order_hdr;
    END IF;
    
    EXCEPTION  
       WHEN others THEN       
       
    get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_purchaseheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_purchasereceiptheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_purchasereceiptheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_rct_purchase_hdr;

	UPDATE dwh.f_purchasereceiptheader t
    SET 
         
        rcgh_date_key                 = COALESCE(d.datekey,-1),
        rcgh_num_type_no    	 =  	s.rcgh_num_type_no,      
          rcgh_wh_no    	     =   	s.rcgh_wh_no,
          rcgh_ref_doc_no     	 =   	s.rcgh_ref_doc_no,
          rcgh_ref_doc_type     = 	  	s.rcgh_ref_doc_type,
          rcgh_po_no     =   			s.rcgh_po_no,
          rcgh_receipt_date     =   	s.rcgh_receipt_date,
          rcgh_purchase_point     =  	s.rcgh_purchase_point,
          rcgh_posting_fb     =   		s.rcgh_posting_fb,
          rcgh_status     =   			s.rcgh_status,
          rcgh_created_date     =  		s.rcgh_created_date,
          rcgh_modified_by     =   		s.rcgh_modified_by,
          rcgh_modified_date     =   	s.rcgh_modified_date,
          rcgh_timestamp       =   		s.rcgh_timestamp,
          
		etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_rct_purchase_hdr s
	LEFT JOIN dwh.d_date D 			
		ON s.rcgh_receipt_date::date = D.dateactual
    WHERE   t.rcgh_ouinstid     =   s.rcgh_ouinstid
		AND t.rcgh_receipt_no     =   s.rcgh_receipt_no;
		
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_purchasereceiptheader
	(
	  rcgh_date_key, rcgh_ouinstid,   rcgh_receipt_no,   rcgh_num_type_no,   rcgh_wh_no,   rcgh_ref_doc_no,   rcgh_ref_doc_type,   rcgh_po_no,   rcgh_receipt_date,   rcgh_purchase_point,   rcgh_posting_fb,   rcgh_status,    rcgh_created_date,   rcgh_modified_by,   rcgh_modified_date,   rcgh_timestamp,  			 etlactiveind					, etljobname
		, envsourcecd							, datasourcecd							, etlcreatedatetime
	)
	
	SELECT 
	   	  D.datekey	,	   AH.rcgh_ouinstid   ,AH.rcgh_receipt_no,     AH.rcgh_num_type_no,   AH.rcgh_wh_no,   AH.rcgh_ref_doc_no,   AH.rcgh_ref_doc_type,   AH.rcgh_po_no,   AH.rcgh_receipt_date,   AH.rcgh_purchase_point,   AH.rcgh_posting_fb,   AH.rcgh_status,    AH.rcgh_created_date,   AH.rcgh_modified_by,   AH.rcgh_modified_date,   AH.rcgh_timestamp,   1 AS etlactiveind				, p_etljobname
		, p_envsourcecd							, p_datasourcecd						, NOW()
	FROM stg.stg_rct_purchase_hdr AH
	
	LEFT JOIN dwh.d_date D 			
		ON AH.rcgh_receipt_date::date 	= D.dateactual
	
	LEFT JOIN dwh.f_purchasereceiptheader FH 	
		ON  FH.rcgh_ouinstid     =   AH.rcgh_ouinstid 
		AND FH.rcgh_receipt_no     =   AH.rcgh_receipt_no 

    WHERE FH.rcgh_receipt_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_rct_purchase_hdr
	(
		rcgh_ouinstid,   rcgh_receipt_no,   rcgh_num_type_no,   rcgh_wh_no,   rcgh_ref_doc_no,   rcgh_ref_doc_type,   rcgh_po_no,   rcgh_receipt_date,   rcgh_purchase_point,   rcgh_posting_fb,   rcgh_status,   rcgh_reason_code,   rcgh_created_by,   rcgh_created_date,   rcgh_modified_by,   rcgh_modified_date,   rcgh_timestamp,   process_flag,  etlcreateddatetime
	
	)
	SELECT 
		rcgh_ouinstid,   rcgh_receipt_no,   rcgh_num_type_no,   rcgh_wh_no,   rcgh_ref_doc_no,   rcgh_ref_doc_type,   rcgh_po_no,   rcgh_receipt_date,   rcgh_purchase_point,   rcgh_posting_fb,   rcgh_status,   rcgh_reason_code,   rcgh_created_by,   rcgh_created_date,   rcgh_modified_by,   rcgh_modified_date,   rcgh_timestamp,   process_flag, etlcreateddatetime
	FROM stg.stg_rct_purchase_hdr;
    END IF;
    
   EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_purchasereceiptheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_purchasereqdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_purchasereqdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON  d.sourceid      = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt FROM stg.stg_prq_prqit_item_detail;

	UPDATE dwh.F_PurchaseReqDetail t
    SET 
		  preqm_hr_key					= fh.preqm_hr_key
		, preqm_dtl_loc_key				= COALESCE(l.loc_key,-1)
		, preqm_dtl_customer_key		= COALESCE(c.customer_key,-1)
		, preqm_dtl_vendor_key			= COALESCE(v.vendor_key,-1)
		, preqm_dtl_wh_key				= COALESCE(w.wh_key,-1)
        , preqm_dtl_uom_key			    = COALESCE(u.uom_key,-1)
		, prqit_itemcode                = s.prqit_itemcode
		, prqit_variant                 = s.prqit_variant
		, prqit_itemdescription         = s.prqit_itemdescription
		, prqit_reqdqty                 = s.prqit_reqdqty
		, prqit_puom                    = s.prqit_puom
		, prqit_cost                    = s.prqit_cost
		, prqit_costper                 = s.prqit_costper
		, prqit_needdate                = s.prqit_needdate
		, prqit_pr_del_type             = s.prqit_pr_del_type
		, prqit_warehousecode           = s.prqit_warehousecode
		, prqit_prposalid               = s.prqit_prposalid
		, prqit_authqty                 = s.prqit_authqty
		, prqit_customercode            = s.prqit_customercode
		, prqit_balqty                  = s.prqit_balqty
		, prqit_prlinestatus            = s.prqit_prlinestatus
		, prqit_supplier_code           = s.prqit_supplier_code
		, prqit_pref_supplier_code      = s.prqit_pref_supplier_code
		, prqit_referencetype           = s.prqit_referencetype
		, prqit_ref_doc                 = s.prqit_ref_doc
		, prqit_refdoclineno            = s.prqit_refdoclineno
		, prqit_adhocitemclass          = s.prqit_adhocitemclass
		, prqit_attrvalue               = s.prqit_attrvalue
		, prqit_createdby               = s.prqit_createdby
		, prqit_createddate             = s.prqit_createddate
		, prqit_lastmodifiedby          = s.prqit_lastmodifiedby
		, prqit_lastmodifieddate        = s.prqit_lastmodifieddate
		, prqit_availableqty            = s.prqit_availableqty
		, prqit_location                = s.prqit_location
		, prqit_comments                = s.prqit_comments
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_prq_prqit_item_detail s
	INNER JOIN 	dwh.f_purchasereqheader fh 
		ON  s.prqit_prou 				= fh.preqm_prou 
		AND s.prqit_prno 			    = fh.preqm_prno 
	LEFT JOIN dwh.d_location l 		
		ON  s.prqit_location 			= l.loc_code 
        AND s.prqit_prou        		= l.loc_ou
	LEFT JOIN dwh.d_customer c 			
		ON  s.prqit_customercode 		= c.customer_id
        AND s.prqit_prou        		= c.customer_ou
	LEFT JOIN dwh.d_vendor v 		
		ON  s.prqit_pref_supplier_code  = v.vendor_id 
        AND s.prqit_prou        		= v.vendor_ou
    LEFT JOIN dwh.d_warehouse w 		
		ON  s.prqit_warehousecode  		= w.wh_code 
        AND s.prqit_prou        		= w.wh_ou    
	LEFT JOIN dwh.d_uom u 		
		ON  s.prqit_puom  		        = u.mas_uomcode 
        AND s.prqit_prou        		= u.mas_ouinstance	
    WHERE   t.prqit_prou 				= s.prqit_prou
		AND	t.prqit_prno 				= s.prqit_prno
		AND	t.preqm_hr_key				= fh.preqm_hr_key;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.F_PurchaseReqDetail
	(
		  preqm_hr_key				, preqm_dtl_loc_key		, preqm_dtl_customer_key	, preqm_dtl_vendor_key		, preqm_dtl_wh_key 	        , preqm_dtl_uom_key
        , prqit_prou				, prqit_prno			, prqit_lineno			    , prqit_itemcode			, prqit_variant
        , prqit_itemdescription		, prqit_reqdqty			, prqit_puom			    , prqit_cost				, prqit_costper
        , prqit_needdate			, prqit_pr_del_type		, prqit_warehousecode	    , prqit_prposalid			, prqit_authqty
        , prqit_customercode		, prqit_balqty			, prqit_prlinestatus	    , prqit_supplier_code		, prqit_pref_supplier_code
        , prqit_referencetype		, prqit_ref_doc			, prqit_refdoclineno	    , prqit_adhocitemclass		, prqit_attrvalue
        , prqit_createdby			, prqit_createddate		, prqit_lastmodifiedby	    , prqit_lastmodifieddate	, prqit_availableqty
        , prqit_location			, prqit_comments
		, etlactiveind				, etljobname			, envsourcecd				, datasourcecd	            , etlcreatedatetime
	)
	
	SELECT 
		  fh.preqm_hr_key			, COALESCE(l.loc_key,-1)	, COALESCE(c.customer_key,-1)   , COALESCE(v.vendor_key,-1)	, COALESCE(w.wh_key,-1) 		, COALESCE(u.uom_key,-1)
        , s.prqit_prou				, s.prqit_prno				, s.prqit_lineno			    , s.prqit_itemcode			, s.prqit_variant
		, s.prqit_itemdescription	, s.prqit_reqdqty			, s.prqit_puom				    , s.prqit_cost				, s.prqit_costper
		, s.prqit_needdate			, s.prqit_pr_del_type		, s.prqit_warehousecode		    , s.prqit_prposalid			, s.prqit_authqty
		, s.prqit_customercode		, s.prqit_balqty			, s.prqit_prlinestatus		    , s.prqit_supplier_code		, s.prqit_pref_supplier_code
		, s.prqit_referencetype		, s.prqit_ref_doc			, s.prqit_refdoclineno		    , s.prqit_adhocitemclass	, s.prqit_attrvalue
		, s.prqit_createdby			, s.prqit_createddate		, s.prqit_lastmodifiedby	    , s.prqit_lastmodifieddate	, s.prqit_availableqty
		, s.prqit_location			, s.prqit_comments
		, 1 AS etlactiveind			, p_etljobname				, p_envsourcecd				    , p_datasourcecd	        , NOW()
	FROM stg.stg_prq_prqit_item_detail s
	INNER JOIN 	dwh.f_purchasereqheader fh 
		ON  s.prqit_prou 				= fh.preqm_prou 
		AND s.prqit_prno 			    = fh.preqm_prno 
	LEFT JOIN dwh.d_location l 		
		ON  s.prqit_location 			= l.loc_code 
        AND s.prqit_prou        		= l.loc_ou
	LEFT JOIN dwh.d_customer c 			
		ON  s.prqit_customercode 		= c.customer_id
        AND s.prqit_prou        		= c.customer_ou
	LEFT JOIN dwh.d_vendor v 		
		ON  s.prqit_pref_supplier_code  	= v.vendor_id 
        AND s.prqit_prou        		= v.vendor_ou
    LEFT JOIN dwh.d_warehouse w 		
		ON  s.prqit_warehousecode  		= w.wh_code 
        AND s.prqit_prou        		= w.wh_ou    
	LEFT JOIN dwh.d_uom u 		
		ON  s.prqit_puom  		        = u.mas_uomcode 
        AND s.prqit_prou        		= u.mas_ouinstance		
	LEFT JOIN dwh.F_PurchaseReqDetail fd  	
		ON  fh.preqm_prou 				= fd.prqit_prou 
		AND fh.preqm_prno 			    = fd.prqit_prno 
		AND fh.preqm_hr_key				= fd.preqm_hr_key
    WHERE fd.prqit_prno IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_prq_prqit_item_detail
	(
		prqit_prou, 			prqit_prno, 				prqit_lineno, 			prqit_itemcode, 		prqit_variant, 
        prqit_itemdescription, 	prqit_reqdqty, 				prqit_puom, 			prqit_cost, 			prqit_costper, 
        prqit_needdate, 		prqit_pr_del_type, 			prqit_warehousecode, 	prqit_budgetid, 		prqit_prposalid, 
        prqit_dropshipid, 		prqit_authqty, 				prqit_customercode, 	prqit_balqty, 			prqit_prlinestatus, 
        prqit_supplier_code, 	prqit_pref_supplier_code, 	prqit_drg_revision_no, 	prqit_referencetype, 	prqit_ref_doc, 
        prqit_refdoclineno, 	prqit_adhocitemclass, 		prqit_remarks, 			prqit_attrvalue, 		prqit_createdby, 
        prqit_createddate, 		prqit_lastmodifiedby, 		prqit_lastmodifieddate, prqit_drgno, 			prqit_wbs, 
        prqit_availableqty, 	prqit_location, 			prqit_comments, 		etlcreateddatetime
	
	)
	SELECT 
		prqit_prou, 			prqit_prno, 				prqit_lineno, 			prqit_itemcode, 		prqit_variant, 
        prqit_itemdescription, 	prqit_reqdqty, 				prqit_puom, 			prqit_cost, 			prqit_costper, 
        prqit_needdate, 		prqit_pr_del_type, 			prqit_warehousecode, 	prqit_budgetid, 		prqit_prposalid, 
        prqit_dropshipid, 		prqit_authqty, 				prqit_customercode, 	prqit_balqty, 			prqit_prlinestatus, 
        prqit_supplier_code, 	prqit_pref_supplier_code, 	prqit_drg_revision_no, 	prqit_referencetype, 	prqit_ref_doc, 
        prqit_refdoclineno, 	prqit_adhocitemclass, 		prqit_remarks, 			prqit_attrvalue, 		prqit_createdby, 
        prqit_createddate, 		prqit_lastmodifiedby, 		prqit_lastmodifieddate, prqit_drgno, 			prqit_wbs, 
        prqit_availableqty, 	prqit_location, 			prqit_comments, 		etlcreateddatetime
	FROM stg.stg_prq_prqit_item_detail;
    END IF;	
	
    ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_purchasereqdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_purchasereqheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_purchasereqheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid integer;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid integer;
	p_errordesc character varying;
	p_errorline integer;
    
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_prq_preqm_pur_reqst_hdr;

	UPDATE dwh.f_purchasereqheader t
    SET 
          preqm_hr_curr_key             = COALESCE(c.curr_key,-1)
        , preqm_prtype                  = s.preqm_prtype
		, preqm_prmode                  = s.preqm_prmode
		, preqm_folder                  = s.preqm_folder
		, preqm_orgsource               = s.preqm_orgsource
		, preqm_prdate                  = s.preqm_prdate
		, preqm_authdate                = s.preqm_authdate
		, preqm_status                  = s.preqm_status
		, preqm_ou_po                   = s.preqm_ou_po
		, preqm_ou_gr                   = s.preqm_ou_gr
		, preqm_currency                = s.preqm_currency
		, preqm_prvalue                 = s.preqm_prvalue
		, preqm_remarks                 = s.preqm_remarks
		, preqm_reasoncode              = s.preqm_reasoncode
		, preqm_requesterid             = s.preqm_requesterid
		, preqm_hold                    = s.preqm_hold
		, preqm_createdby               = s.preqm_createdby
		, preqm_createddate             = s.preqm_createddate
		, preqm_lastmodifiedby          = s.preqm_lastmodifiedby
		, preqm_lastmodifieddate        = s.preqm_lastmodifieddate
		, preqm_timestamp_value         = s.preqm_timestamp_value
		, preqm_req_name                = s.preqm_req_name
		, preqm_exchange_rate           = s.preqm_exchange_rate
		, preqm_num_series              = s.preqm_num_series
		, preqm_mobile_flag             = s.preqm_mobile_flag
		, preqm_auth_remarks            = s.preqm_auth_remarks
		, preqm_adhocplng               = s.preqm_adhocplng
		, preqm_requested_For           = s.preqm_requested_For
		, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_prq_preqm_pur_reqst_hdr s
	LEFT JOIN dwh.d_currency c 		
		ON  s.preqm_currency            = c.iso_curr_code 
    WHERE   t.preqm_prou 				= s.preqm_prou
		AND t.preqm_prno 				= s.preqm_prno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_purchasereqheader
	(
		  	preqm_hr_curr_key,
        preqm_prou				, preqm_prno				, preqm_prtype			, preqm_prmode			, preqm_folder
		, preqm_orgsource			, preqm_prdate				, preqm_authdate		, preqm_status			, preqm_ou_po
		, preqm_ou_gr				, preqm_currency			, preqm_prvalue			, preqm_remarks			, preqm_reasoncode
		, preqm_requesterid			, preqm_hold				, preqm_createdby		, preqm_createddate		, preqm_lastmodifiedby
		, preqm_lastmodifieddate	, preqm_timestamp_value		, preqm_req_name		, preqm_exchange_rate	, preqm_num_series
		, preqm_mobile_flag			, preqm_auth_remarks		, preqm_adhocplng		, preqm_requested_For
        , etlactiveind				, etljobname                , envsourcecd			, datasourcecd			, etlcreatedatetime
	)
	
	SELECT 
	   	COALESCE(c.curr_key,-1),
        s.preqm_prou				, s.preqm_prno				, s.preqm_prtype		, s.preqm_prmode			, s.preqm_folder
		, s.preqm_orgsource			, s.preqm_prdate			, s.preqm_authdate		, s.preqm_status			, s.preqm_ou_po
		, s.preqm_ou_gr				, s.preqm_currency			, s.preqm_prvalue		, s.preqm_remarks			, s.preqm_reasoncode
		, s.preqm_requesterid		, s.preqm_hold				, s.preqm_createdby		, s.preqm_createddate		, s.preqm_lastmodifiedby
		, s.preqm_lastmodifieddate	, s.preqm_timestamp_value	, s.preqm_req_name		, s.preqm_exchange_rate		, s.preqm_num_series
		, s.preqm_mobile_flag		, s.preqm_auth_remarks		, s.preqm_adhocplng		, s.preqm_requested_For
        , 1 AS etlactiveind			, p_etljobname              , p_envsourcecd			, p_datasourcecd			, NOW()
	FROM stg.stg_prq_preqm_pur_reqst_hdr s
	LEFT JOIN dwh.d_currency c 		
		ON  s.preqm_currency            = c.iso_curr_code 
	LEFT JOIN dwh.f_purchasereqheader t 	
		ON  t.preqm_prou 				= s.preqm_prou
		AND t.preqm_prno 				= s.preqm_prno
    WHERE t.preqm_prou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_prq_preqm_pur_reqst_hdr
	(
		preqm_prou, 			preqm_prno, 			preqm_prtype, 			preqm_prmode, 		preqm_folder, 
		preqm_orgsource, 		preqm_prdate, 			preqm_authdate, 		preqm_status, 		preqm_ou_po, 
		preqm_ou_gr, 			preqm_currency, 		preqm_prvalue, 			preqm_pcstatus, 	preqm_remarks, 
		preqm_reasoncode, 		preqm_requesterid, 		preqm_hold, 			preqm_createdby, 	preqm_createddate, 
		preqm_lastmodifiedby, 	preqm_lastmodifieddate, preqm_timestamp_value, 	preqm_req_name, 	wf_status, 
		preqm_exchange_rate, 	preqm_wf_docid, 		preqm_num_series, 		preqm_prjcode, 		preqm_prjou, 
		preqm_mobile_flag, 		preqm_auth_remarks, 	preqm_adhocplng, 		preqm_clientcode, 	preqm_budgetdescription, 
		preqm_requested_for, 	preqm_createdfrm, 		preqm_cls_code, 		preqm_scls_code, 	preqm_reason_return, 
		etlcreateddatetime
	
	)
	SELECT 
		preqm_prou, 			preqm_prno, 			preqm_prtype, 			preqm_prmode, 		preqm_folder, 
		preqm_orgsource, 		preqm_prdate, 			preqm_authdate, 		preqm_status, 		preqm_ou_po, 
		preqm_ou_gr, 			preqm_currency, 		preqm_prvalue, 			preqm_pcstatus, 	preqm_remarks, 
		preqm_reasoncode, 		preqm_requesterid, 		preqm_hold, 			preqm_createdby, 	preqm_createddate, 
		preqm_lastmodifiedby, 	preqm_lastmodifieddate, preqm_timestamp_value, 	preqm_req_name, 	wf_status, 
		preqm_exchange_rate, 	preqm_wf_docid, 		preqm_num_series, 		preqm_prjcode, 		preqm_prjou, 
		preqm_mobile_flag, 		preqm_auth_remarks, 	preqm_adhocplng, 		preqm_clientcode, 	preqm_budgetdescription, 
		preqm_requested_for, 	preqm_createdfrm, 		preqm_cls_code, 		preqm_scls_code, 	preqm_reason_return, 
		etlcreateddatetime
	FROM stg.stg_prq_preqm_pur_reqst_hdr;
    END IF;
    
    EXCEPTION  
       WHEN others THEN       
       
      get stacked diagnostics
        p_errorid   = returned_sqlstate,
        p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,
                                p_batchid,p_taskname,'sp_ExceptionHandling',
                                p_errorid,p_errordesc,null);
    
        
       select 0 into inscnt;
       select 0 into updcnt;   
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_purchasereqheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawaybincapacity(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawaybincapacity(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;	
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
    
    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_putaway_bin_capacity_dtl;

	UPDATE dwh.F_PutawayBinCapacity t
    SET 
		  pway_pln_dtl_key			    = fh.pway_pln_dtl_key,
		  pway_bin_cap_loc_key			= COALESCE(l.loc_key,-1)
		, pway_bin_cap_itm_hdr_key		= COALESCE(i.itm_hdr_key,-1)
		, pway_item_ln_no               = s.wms_pway_item_ln_no 
		, pway_item               		= s.wms_pway_item 
		, pway_bin                  	= s.wms_pway_bin 
		, pway_occu_capacity            = s.wms_pway_occu_capacity 
    	, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_putaway_bin_capacity_dtl s
    INNER JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_pln_ou        	= l.loc_ou
	LEFT JOIN dwh.d_itemheader i 		
		ON 	s.wms_pway_item  			= i.itm_code 
        AND s.wms_pway_pln_ou        	= i.itm_ou	
    WHERE  	s.wms_pway_pln_no 				= t.pway_pln_no
		AND	s.wms_pway_pln_ou 				= t.pway_pln_ou
        AND s.wms_pway_loc_code             = t.pway_loc_code
		AND	s.wms_pway_lineno 				= t.pway_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.F_PutawayBinCapacity
	(
			pway_pln_dtl_key,           pway_bin_cap_loc_key		, pway_bin_cap_itm_hdr_key			
            , pway_loc_code				, pway_pln_no					, pway_pln_ou				, pway_lineno
			, pway_item_ln_no			, pway_item						, pway_bin					, pway_occu_capacity
			, etlactiveind				, etljobname					, envsourcecd				, datasourcecd	            
			, etlcreatedatetime
	)
	
	SELECT 
		   fh.pway_pln_dtl_key,             COALESCE(l.loc_key,-1)	        , COALESCE(i.itm_hdr_key,-1)                     		
		   , wms_pway_loc_code				, wms_pway_pln_no				, wms_pway_pln_ou			, wms_pway_lineno
		   , wms_pway_item_ln_no			, wms_pway_item					, wms_pway_bin				, wms_pway_occu_capacity
		   , 1 AS etlactiveind			    , p_etljobname				    , p_envsourcecd				, p_datasourcecd	                
		   , NOW()
	FROM stg.stg_wms_putaway_bin_capacity_dtl s
    INNER JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_pln_ou        	= l.loc_ou
	LEFT JOIN dwh.d_itemheader i 		
		ON 	s.wms_pway_item  			= i.itm_code 
        AND s.wms_pway_pln_ou        	= i.itm_ou		
	LEFT JOIN dwh.f_putawaybincapacity t  	
		ON  t.pway_loc_code 			= s.wms_pway_loc_code
		AND	t.pway_pln_no 				= s.wms_pway_pln_no
		AND	t.pway_pln_ou 				= s.wms_pway_pln_ou
		AND t.pway_lineno              = s.wms_pway_lineno
    WHERE t.pway_pln_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_putaway_bin_capacity_dtl
	(
		wms_pway_loc_code, 			wms_pway_pln_no, 			wms_pway_pln_ou, 		wms_pway_lineno, 
		wms_pway_item_ln_no, 		wms_pway_item, 				wms_pway_bin, 			wms_pway_occu_capacity, 
		etlcreateddatetime
	
	)
	SELECT 
		wms_pway_loc_code, 			wms_pway_pln_no, 			wms_pway_pln_ou, 		wms_pway_lineno, 
		wms_pway_item_ln_no, 		wms_pway_item, 				wms_pway_bin, 			wms_pway_occu_capacity, 
		etlcreateddatetime
	FROM stg.stg_wms_putaway_bin_capacity_dtl;
    END IF;	
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawaybincapacity(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawayempequipmap(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawayempequipmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;	

    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
    
    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_putaway_emp_equip_map_dtl;

	UPDATE dwh.f_putawayempequipmap t
    SET 
		  pway_eqp_map_loc_key			= COALESCE(l.loc_key,-1)
		, pway_eqp_map_zone_key			= COALESCE(z.zone_key,-1)
		, pway_eqp_map_eqp_key		    = COALESCE(q.eqp_key,-1)
		, pway_eqp_map_emp_hdr_key		= COALESCE(e.emp_hdr_key,-1)
		, putaway_shift_code            = s.wms_putaway_shift_code
		, putaway_emp_code 	            = s.wms_putaway_emp_code
		, putaway_euip_code             = s.wms_putaway_euip_code
		, putaway_area 		            = s.wms_putaway_area
		, putaway_zone 		            = s.wms_putaway_zone 
    	, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_putaway_emp_equip_map_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_putaway_loc_code 		= l.loc_code 
        AND s.wms_putaway_ou        	= l.loc_ou
	LEFT JOIN dwh.d_zone z 			
		ON  s.wms_putaway_zone 	        = z.zone_code
        AND s.wms_putaway_ou        	= z.zone_ou
	LEFT JOIN dwh.d_equipment q 		
		ON  s.wms_putaway_euip_code  	= q.eqp_equipment_id 
        AND s.wms_putaway_ou        	= q.eqp_ou
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_putaway_emp_code  	= e.emp_employee_code 
        AND s.wms_putaway_ou        	= e.emp_ou	
    WHERE   t.putaway_loc_code 			= s.wms_putaway_loc_code
		AND	t.putaway_ou 				= s.wms_putaway_ou
		AND	t.putaway_lineno 			= s.wms_putaway_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_putawayempequipmap
	(
           pway_eqp_map_loc_key	    ,pway_eqp_map_zone_key	,pway_eqp_map_eqp_key	    ,pway_eqp_map_emp_hdr_key 		
            ,putaway_loc_code			,putaway_ou				,putaway_lineno				,putaway_shift_code
		    ,putaway_emp_code			,putaway_euip_code		,putaway_area				,putaway_zone
            ,etlactiveind			    ,etljobname			    ,envsourcecd				,datasourcecd	            
            ,etlcreatedatetime
	)
	
	SELECT 
           COALESCE(l.loc_key,-1)	        , COALESCE(z.zone_key,-1)	    ,COALESCE(q.eqp_key,-1)	        ,COALESCE(e.emp_hdr_key,-1)		
		   , s.wms_putaway_loc_code			, s.wms_putaway_ou				, s.wms_putaway_lineno			, s.wms_putaway_shift_code
		   , s.wms_putaway_emp_code			, s.wms_putaway_euip_code		, s.wms_putaway_area			, s.wms_putaway_zone
           , 1 AS etlactiveind			    , p_etljobname				    , p_envsourcecd				    , p_datasourcecd	                
           , NOW()
	FROM stg.stg_wms_putaway_emp_equip_map_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_putaway_loc_code 		= l.loc_code 
        AND s.wms_putaway_ou        	= l.loc_ou
	LEFT JOIN dwh.d_zone z 			
		ON  s.wms_putaway_zone 	        = z.zone_code
        AND s.wms_putaway_ou        	= z.zone_ou
		AND s.wms_putaway_loc_code		= z.zone_loc_code
	LEFT JOIN dwh.d_equipment q 		
		ON  s.wms_putaway_euip_code  	= q.eqp_equipment_id 
        AND s.wms_putaway_ou        	= q.eqp_ou
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_putaway_emp_code  	= e.emp_employee_code 
        AND s.wms_putaway_ou        	= e.emp_ou	
	LEFT JOIN dwh.f_putawayempequipmap t  	
		ON  t.putaway_loc_code 			= s.wms_putaway_loc_code
		AND	t.putaway_ou 				= s.wms_putaway_ou
		AND	t.putaway_lineno 			= s.wms_putaway_lineno
    WHERE t.putaway_ou IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_putaway_emp_equip_map_dtl
	(
		wms_putaway_loc_code, 			wms_putaway_ou, 			wms_putaway_lineno, 		wms_putaway_shift_code, 
		wms_putaway_emp_code, 			wms_putaway_euip_code, 		wms_putaway_area, 			wms_putaway_zone, 
		etlcreateddatetime
	)
	SELECT 
		wms_putaway_loc_code, 			wms_putaway_ou, 			wms_putaway_lineno, 		wms_putaway_shift_code, 
		wms_putaway_emp_code, 			wms_putaway_euip_code, 		wms_putaway_area, 			wms_putaway_zone, 
		etlcreateddatetime
	FROM stg.stg_wms_putaway_emp_equip_map_dtl;
    END IF;	
    
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawayempequipmap(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawayexecdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawayexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;	
     p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;
        
    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
    
    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_putaway_exec_dtl;

	UPDATE dwh.f_putawayexecdetail t
    SET 
		  pway_pln_dtl_key			    = fh.pway_pln_dtl_key,
		  pway_exe_dtl_loc_key			= COALESCE(l.loc_key,-1)
		, pway_exe_dtl_eqp_key			= COALESCE(d.eqp_key,-1)
		, pway_exe_dtl_stg_mas_key		= COALESCE(g.stg_mas_key,-1)
		, pway_exe_dtl_emp_hdr_key		= COALESCE(e.emp_hdr_key,-1)
		, pway_pln_no                   = s.wms_pway_pln_no
		, pway_pln_ou                   = s.wms_pway_pln_ou
		, pway_exec_status              = s.wms_pway_exec_status
		, pway_stag_id                  = s.wms_pway_stag_id
		, pway_mhe_id                   = s.wms_pway_mhe_id
		, pway_employee_id              = s.wms_pway_employee_id
		, pway_exec_start_date          = s.wms_pway_exec_start_date
		, pway_exec_end_date            = s.wms_pway_exec_end_date
		, pway_completed                = s.wms_pway_completed
		, pway_created_by               = s.wms_pway_created_by
		, pway_created_date             = s.wms_pway_created_date
		, pway_modified_by              = s.wms_pway_modified_by
		, pway_modified_date            = s.wms_pway_modified_date
		, pway_timestamp                = s.wms_pway_timestamp
		, pway_type                     = s.wms_pway_type
		, pway_by_flag                  = s.wms_pway_by_flag
		, pway_gen_from                 = s.wms_pway_gen_from
    	, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_putaway_exec_dtl s
    LEFT JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_pln_ou        	= l.loc_ou
	LEFT JOIN dwh.d_equipment d 			
		ON  s.wms_pway_mhe_id 	        = d.eqp_equipment_id
        AND s.wms_pway_pln_ou        	= d.eqp_ou
	LEFT JOIN dwh.d_stage g 		
		ON  s.wms_pway_stag_id  		= g.stg_mas_id 
        AND s.wms_pway_pln_ou        	= g.stg_mas_ou
		AND s.wms_pway_loc_code			= g.stg_mas_loc
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_pway_employee_id  	= e.emp_employee_code 
        AND s.wms_pway_pln_ou        	= e.emp_ou	
    WHERE   t.pway_loc_code 			= s.wms_pway_loc_code
		AND	t.pway_exec_no 				= s.wms_pway_exec_no
		AND	t.pway_exec_ou 				= s.wms_pway_exec_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_putawayexecdetail
	(
		pway_pln_dtl_key,           pway_exe_dtl_loc_key	    , pway_exe_dtl_eqp_key	    , pway_exe_dtl_stg_mas_key	, pway_exe_dtl_emp_hdr_key 		
        , pway_loc_code				, pway_exec_no				, pway_exec_ou				, pway_pln_no			, pway_pln_ou
		, pway_exec_status			, pway_stag_id				, pway_mhe_id				, pway_employee_id		, pway_exec_start_date
		, pway_exec_end_date		, pway_completed			, pway_created_by			, pway_created_date		, pway_modified_by
		, pway_modified_date		, pway_timestamp			, pway_type					, pway_by_flag			, pway_gen_from
        , etlactiveind			    , etljobname			    , envsourcecd				, datasourcecd	        , etlcreatedatetime
	)
	
	SELECT 
		fh.pway_pln_dtl_key,                COALESCE(l.loc_key,-1)	            , COALESCE(d.eqp_key,-1)	        , COALESCE(g.stg_mas_key,-1)	    , COALESCE(e.emp_hdr_key,-1) 		
		, s.wms_pway_loc_code				, s.wms_pway_exec_no				, s.wms_pway_exec_ou				, s.wms_pway_pln_no				, s.wms_pway_pln_ou
		, s.wms_pway_exec_status			, s.wms_pway_stag_id				, s.wms_pway_mhe_id					, s.wms_pway_employee_id		, s.wms_pway_exec_start_date
		, s.wms_pway_exec_end_date			, s.wms_pway_completed				, s.wms_pway_created_by				, s.wms_pway_created_date		, s.wms_pway_modified_by
		, s.wms_pway_modified_date			, s.wms_pway_timestamp				, s.wms_pway_type					, s.wms_pway_by_flag			, s.wms_pway_gen_from
        , 1 AS etlactiveind			        , p_etljobname				        , p_envsourcecd				        , p_datasourcecd	            , NOW()
	FROM stg.stg_wms_putaway_exec_dtl s
    LEFT JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_pln_ou        	= l.loc_ou
	LEFT JOIN dwh.d_equipment d 			
		ON  s.wms_pway_mhe_id 	        = d.eqp_equipment_id
        AND s.wms_pway_pln_ou        	= d.eqp_ou
	LEFT JOIN dwh.d_stage g 		
		ON  s.wms_pway_stag_id  		= g.stg_mas_id 
        AND s.wms_pway_pln_ou        	= g.stg_mas_ou
		AND s.wms_pway_loc_code			= g.stg_mas_loc
	LEFT JOIN dwh.d_employeeheader e 		
		ON  s.wms_pway_employee_id  	= e.emp_employee_code 
        AND s.wms_pway_pln_ou        	= e.emp_ou		
	LEFT JOIN dwh.f_putawayexecdetail t  	
		ON  t.pway_loc_code 			= s.wms_pway_loc_code
		AND	t.pway_exec_no 			= s.wms_pway_exec_no
		AND	t.pway_exec_ou 			= s.wms_pway_exec_ou
    WHERE t.pway_exec_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_putaway_exec_dtl
	(
		wms_pway_loc_code, 				wms_pway_exec_no, 				wms_pway_exec_ou, 				wms_pway_pln_no, 				wms_pway_pln_ou, 
		wms_pway_exec_status, 			wms_pway_stag_id, 				wms_pway_mhe_id, 				wms_pway_employee_id, 			wms_pway_exec_start_date, 
		wms_pway_exec_end_date, 		wms_pway_completed, 			wms_pway_created_by, 			wms_pway_created_date, 			wms_pway_modified_by, 
		wms_pway_modified_date, 		wms_pway_timestamp, 			wms_pway_userdefined1, 			wms_pway_userdefined2, 			wms_pway_userdefined3, 
		wms_pway_billing_status, 		wms_pway_bill_value, 			wms_pway_hdlpway_bil_status, 	wms_pway_lbchprhr_bil_status, 	wms_pway_pwaytchr_bil_status, 
		wms_pway_hdlchcar_bil_status, 	wms_pway_type, 					wms_pway_by_flag, 				wms_pway_gen_from, 				etlcreateddatetime	
	
	)
	SELECT 
		wms_pway_loc_code, 		        wms_pway_exec_no, 				wms_pway_exec_ou, 				wms_pway_pln_no, 				wms_pway_pln_ou, 
		wms_pway_exec_status, 			wms_pway_stag_id, 				wms_pway_mhe_id, 				wms_pway_employee_id, 			wms_pway_exec_start_date, 
		wms_pway_exec_end_date, 		wms_pway_completed, 			wms_pway_created_by, 			wms_pway_created_date, 			wms_pway_modified_by, 
		wms_pway_modified_date, 		wms_pway_timestamp, 			wms_pway_userdefined1, 			wms_pway_userdefined2, 			wms_pway_userdefined3, 
		wms_pway_billing_status, 		wms_pway_bill_value, 			wms_pway_hdlpway_bil_status, 	wms_pway_lbchprhr_bil_status, 	wms_pway_pwaytchr_bil_status, 
		wms_pway_hdlchcar_bil_status, 	wms_pway_type, 					wms_pway_by_flag, 				wms_pway_gen_from, 				etlcreateddatetime
	FROM stg.stg_wms_putaway_exec_dtl;
    END IF;	
    
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawayexecdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawayexecserialdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawayexecserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
    
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_put_exec_serial_dtl;

    UPDATE dwh.F_PutawayExecserialDetail t
    SET
        pway_exe_dtl_key			    =fh.pway_exe_dtl_key,
        pway_exec_serial_dtl_loc_key   = COALESCE(l.loc_key,-1),
		pway_exec_serial_dtl_zone_key  = COALESCE(z.zone_key,-1),
        pway_itm_lineno                = s.wms_pway_itm_lineno,
        pway_zone                      = s.wms_pway_zone,
        pway_bin                       = s.wms_pway_bin,
        pway_serialno                  = s.wms_pway_serialno,
        pway_lotno                     = s.wms_pway_lotno,
        pway_cust_sno                  = s.wms_pway_cust_sno,
        pway_3pl_sno                   = s.wms_pway_3pl_sno,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_put_exec_serial_dtl s
    INNER JOIN 	dwh.f_putawayexecdetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_exec_no 	= fh.pway_exec_no 
			AND s.wms_pway_exec_ou 	= fh.pway_exec_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 	   = l.loc_code 
		AND s.wms_pway_exec_ou 		   = l.loc_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pway_zone 	   	   = z.zone_code 
		AND s.wms_pway_exec_ou 		   = z.zone_ou 
		AND s.wms_pway_loc_code		   = z.zone_loc_code
    WHERE 	t.pway_loc_code 		   = s.wms_pway_loc_code
    AND 	t.pway_exec_no             = s.wms_pway_exec_no
    AND 	t.pway_exec_ou             = s.wms_pway_exec_ou
    AND 	t.pway_lineno              = s.wms_pway_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PutawayExecserialDetail
    (
		pway_exe_dtl_key,pway_exec_serial_dtl_loc_key, pway_exec_serial_dtl_zone_key,
        pway_loc_code, pway_exec_no, pway_exec_ou, pway_lineno, pway_itm_lineno, pway_zone, pway_bin, pway_serialno, pway_lotno, pway_cust_sno, pway_3pl_sno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		fh.pway_exe_dtl_key,COALESCE(l.loc_key,-1), COALESCE(z.zone_key,-1),
        s.wms_pway_loc_code, s.wms_pway_exec_no, s.wms_pway_exec_ou, s.wms_pway_lineno, 
        s.wms_pway_itm_lineno, s.wms_pway_zone, s.wms_pway_bin, s.wms_pway_serialno, 
        s.wms_pway_lotno, s.wms_pway_cust_sno, s.wms_pway_3pl_sno
        , 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_put_exec_serial_dtl s
    INNER JOIN 	dwh.f_putawayexecdetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_exec_no 	= fh.pway_exec_no 
			AND s.wms_pway_exec_ou 	= fh.pway_exec_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 	   = l.loc_code 
		AND s.wms_pway_exec_ou 		   = l.loc_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pway_zone 	   	   = z.zone_code 
		AND s.wms_pway_exec_ou 		   = z.zone_ou 
		AND s.wms_pway_loc_code		   = z.zone_loc_code
    LEFT JOIN dwh.F_PutawayExecserialDetail t
    ON 		s.wms_pway_loc_code 	   = t.pway_loc_code
    AND 	s.wms_pway_exec_no 		   = t.pway_exec_no
    AND 	s.wms_pway_exec_ou 		   = t.pway_exec_ou
    AND 	s.wms_pway_lineno 		   = t.pway_lineno
    WHERE t.pway_exec_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_put_exec_serial_dtl
    (
        wms_pway_loc_code, wms_pway_exec_no, wms_pway_exec_ou, wms_pway_lineno, wms_pway_itm_lineno, wms_pway_zone, wms_pway_bin, wms_pway_serialno, wms_pway_lotno, wms_pway_staging, wms_pway_cust_sno, wms_pway_3pl_sno, wms_pway_warranty_sno, etlcreateddatetime
    )
    SELECT
        wms_pway_loc_code, wms_pway_exec_no, wms_pway_exec_ou, wms_pway_lineno, wms_pway_itm_lineno, wms_pway_zone, wms_pway_bin, wms_pway_serialno, wms_pway_lotno, wms_pway_staging, wms_pway_cust_sno, wms_pway_3pl_sno, wms_pway_warranty_sno, etlcreateddatetime
    FROM stg.stg_wms_put_exec_serial_dtl;
    END IF;
    ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawayexecserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawayitemdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawayitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag,h.depsource
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON  d.sourceid      = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_put_exec_item_dtl;

	UPDATE dwh.f_putawayitemdetail t
    SET 
		  pway_exe_dtl_key			    = fh.pway_exe_dtl_key,
		  pway_itm_dtl_loc_key			= COALESCE(l.loc_key,-1)
		, pway_itm_dtl_itm_hdr_key		= COALESCE(i.itm_hdr_key,-1)
		, pway_itm_dtl_zone_key		    = COALESCE(z.zone_key,-1)
		, pway_po_no                    = s.wms_pway_po_no
		, pway_po_sr_no                 = s.wms_pway_po_sr_no
		, pway_uid                      = s.wms_pway_uid
		, pway_item                     = s.wms_pway_item
		, pway_zone                     = s.wms_pway_zone
		, pway_rqs_conformation         = s.wms_pway_rqs_conformation
		, pway_allocated_qty            = s.wms_pway_allocated_qty
		, pway_allocated_bin            = s.wms_pway_allocated_bin
		, pway_actual_bin               = s.wms_pway_actual_bin
		, pway_actual_bin_qty           = s.wms_pway_actual_bin_qty
		, pway_gr_no                    = s.wms_pway_gr_no
		, pway_gr_lineno                = s.wms_pway_gr_lineno
		, pway_gr_lot_no                = s.wms_pway_gr_lot_no
		, pway_su_type                  = s.wms_pway_su_type
		, pway_su_serial_no             = s.wms_pway_su_serial_no
		, pway_su                       = s.wms_pway_su
		, pway_from_staging_id          = s.wms_pway_from_staging_id
		, pway_reason                   = s.wms_pway_reason
		, pway_supp_batch_no            = s.wms_pway_supp_batch_no
		, pway_thu_serial_no            = s.wms_pway_thu_serial_no
		, pway_cross_dock               = s.wms_pway_cross_dock
		, pway_actual_staging           = s.wms_pway_actual_staging
		, pway_allocated_staging        = s.wms_pway_allocated_staging
		, pway_target_thu_serial_no     = s.wms_pway_target_thu_serial_no
		, pway_stock_status             = s.wms_pway_stock_status
		, pway_staging                  = s.wms_pway_staging	
    	, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_put_exec_item_dtl s
    INNER JOIN 	dwh.f_putawayexecdetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_exec_no 	= fh.pway_exec_no 
			AND s.wms_pway_exec_ou 	= fh.pway_exec_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_exec_ou        	= l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_pway_item             = i.itm_code
        AND s.wms_pway_exec_ou        	= i.itm_ou
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pway_zone 			= z.zone_code 
        AND s.wms_pway_exec_ou        	= z.zone_ou
		AND s.wms_pway_loc_code 		= z.zone_loc_code
    WHERE   t.pway_loc_code 			= s.wms_pway_loc_code
		AND	t.pway_exec_no 				= s.wms_pway_exec_no
		AND	t.pway_exec_ou 				= s.wms_pway_exec_ou
        AND	t.pway_exec_lineno 			= s.wms_pway_exec_lineno;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.f_putawayitemdetail
	(
		pway_exe_dtl_key,       pway_itm_dtl_loc_key	, pway_itm_dtl_itm_hdr_key	, pway_itm_dtl_zone_key	
        , pway_loc_code			, pway_exec_no			    , pway_exec_ou			, pway_exec_lineno
		, pway_po_no			, pway_po_sr_no			    , pway_uid				, pway_item
		, pway_zone				, pway_rqs_conformation	    , pway_allocated_qty	, pway_allocated_bin
		, pway_actual_bin		, pway_actual_bin_qty	    , pway_gr_no			, pway_gr_lineno
		, pway_gr_lot_no		, pway_su_type			    , pway_su_serial_no		, pway_su
		, pway_from_staging_id	, pway_reason			    , pway_supp_batch_no	, pway_thu_serial_no
		, pway_cross_dock		, pway_actual_staging	    , pway_allocated_staging, pway_target_thu_serial_no
		, pway_stock_status		, pway_staging              , etlactiveind			, etljobname			
        , envsourcecd			, datasourcecd	            , etlcreatedatetime
	)
	
	SELECT 
		fh.pway_exe_dtl_key,            COALESCE(l.loc_key,-1)	        , COALESCE(i.itm_hdr_key,-1)	,COALESCE(z.zone_key,-1)	        		
		, s.wms_pway_loc_code			, s.wms_pway_exec_no			, s.wms_pway_exec_ou			, s.wms_pway_exec_lineno
		, s.wms_pway_po_no				, s.wms_pway_po_sr_no			, s.wms_pway_uid				, s.wms_pway_item
		, s.wms_pway_zone				, s.wms_pway_rqs_conformation	, s.wms_pway_allocated_qty		, s.wms_pway_allocated_bin
		, s.wms_pway_actual_bin			, s.wms_pway_actual_bin_qty		, s.wms_pway_gr_no				, s.wms_pway_gr_lineno
		, s.wms_pway_gr_lot_no			, s.wms_pway_su_type			, s.wms_pway_su_serial_no		, s.wms_pway_su
		, s.wms_pway_from_staging_id	, s.wms_pway_reason				, s.wms_pway_supp_batch_no		, s.wms_pway_thu_serial_no
		, s.wms_pway_cross_dock			, s.wms_pway_actual_staging		, s.wms_pway_allocated_staging	, s.wms_pway_target_thu_serial_no
		, s.wms_pway_stock_status		, s.wms_pway_staging            , 1 AS etlactiveind			    , p_etljobname				    
        , p_envsourcecd				        , p_datasourcecd	        , NOW()
	FROM stg.stg_wms_put_exec_item_dtl s
    INNER JOIN 	dwh.f_putawayexecdetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_exec_no 	= fh.pway_exec_no 
			AND s.wms_pway_exec_ou 	= fh.pway_exec_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_exec_ou        	= l.loc_ou
	LEFT JOIN dwh.d_itemheader i 			
		ON  s.wms_pway_item             = i.itm_code
        AND s.wms_pway_exec_ou        	= i.itm_ou
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pway_zone 			= z.zone_code 
        AND s.wms_pway_exec_ou        	= z.zone_ou
		AND s.wms_pway_loc_code 		= z.zone_loc_code
	LEFT JOIN dwh.f_putawayitemdetail t  	
		ON  t.pway_loc_code 			    = s.wms_pway_loc_code
		AND	t.pway_exec_no 				= s.wms_pway_exec_no
		AND	t.pway_exec_ou 				= s.wms_pway_exec_ou
        AND	t.pway_exec_lineno 			= s.wms_pway_exec_lineno
    WHERE t.pway_exec_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_put_exec_item_dtl
	(
		wms_pway_loc_code, 			wms_pway_exec_no, 			wms_pway_exec_ou, 			wms_pway_exec_lineno, 			wms_pway_po_no, 
		wms_pway_po_sr_no, 			wms_pway_uid, 				wms_pway_item, 				wms_pway_zone, 					wms_pway_rqs_conformation, 
		wms_pway_allocated_qty, 	wms_pway_allocated_bin, 	wms_pway_actual_bin, 		wms_pway_actual_bin_qty, 		wms_pway_gr_no, 
		wms_pway_gr_lineno, 		wms_pway_gr_lot_no, 		wms_pway_su_type, 			wms_pway_su_serial_no, 			wms_pway_su, 
		wms_pway_from_staging_id, 	wms_pway_reason, 			wms_pway_supp_batch_no, 	wms_pway_thu_serial_no, 		wms_pway_target_thu_id, 
		wms_pway_cross_dock, 		wms_pway_actual_staging, 	wms_pway_allocated_staging, wms_pway_target_thu_serial_no, 	wms_pway_stock_status, 
		wms_pway_staging, 			wms_pway_su2, 				wms_pway_su_serial_no2, 	wms_put_su1_conv_flg, 			wms_put_su2_conv_flg, 
		etlcreateddatetime
	
	)
	SELECT 
		wms_pway_loc_code, 			wms_pway_exec_no, 			wms_pway_exec_ou, 			wms_pway_exec_lineno, 			wms_pway_po_no, 
		wms_pway_po_sr_no, 			wms_pway_uid, 				wms_pway_item, 				wms_pway_zone, 					wms_pway_rqs_conformation, 
		wms_pway_allocated_qty, 	wms_pway_allocated_bin, 	wms_pway_actual_bin, 		wms_pway_actual_bin_qty, 		wms_pway_gr_no, 
		wms_pway_gr_lineno, 		wms_pway_gr_lot_no, 		wms_pway_su_type, 			wms_pway_su_serial_no, 			wms_pway_su, 
		wms_pway_from_staging_id, 	wms_pway_reason, 			wms_pway_supp_batch_no, 	wms_pway_thu_serial_no, 		wms_pway_target_thu_id, 
		wms_pway_cross_dock, 		wms_pway_actual_staging, 	wms_pway_allocated_staging, wms_pway_target_thu_serial_no, 	wms_pway_stock_status, 
		wms_pway_staging, 			wms_pway_su2, 				wms_pway_su_serial_no2, 	wms_put_su1_conv_flg, 			wms_put_su2_conv_flg, 
		etlcreateddatetime
	FROM stg.stg_wms_put_exec_item_dtl;
    END IF;	
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawayitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawayplandetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawayplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	p_etljobname VARCHAR(100);
	p_envsourcecd VARCHAR(50);
	p_datasourcecd VARCHAR(50);
    p_batchid INTEGER;
	p_taskname VARCHAR(100);
	p_packagename  VARCHAR(100);
    p_errorid INTEGER;
	p_errordesc character varying;
	p_errorline INTEGER;	
    p_rawstorageflag integer;

BEGIN

	SELECT d.jobname,h.envsourcecode,h.datasourcecode,d.latestbatchid,d.targetprocedurename, h.rawstorageflag
	INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
	FROM ods.controldetail d 
	INNER JOIN ods.controlheader h
		ON d.sourceid = h.sourceid
	WHERE 	d.sourceid 		= p_sourceId 
		AND d.dataflowflag 	= p_dataflowflag
		AND d.targetobject 	= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_putaway_plan_dtl;

	UPDATE dwh.F_PutawayPlanDetail t
    SET 
		 
		  pway_pln_dtl_loc_key			= COALESCE(l.loc_key,-1)
		, pway_pln_dtl_date_key			= COALESCE(d.datekey,-1)
		, pway_pln_dtl_stg_mas_key		= COALESCE(g.stg_mas_key,-1)
		, pway_pln_dtl_emp_hdr_key		= COALESCE(e.emp_hdr_key,-1)
		, pway_pln_date                 = s.wms_pway_pln_date 
		, pway_pln_status               = s.wms_pway_pln_status 
		, pway_stag_id                  = s.wms_pway_stag_id 
		, pway_mhe_id                   = s.wms_pway_mhe_id 
		, pway_employee_id              = s.wms_pway_employee_id 
		, pway_source_stage             = s.wms_pway_source_stage 
		, pway_source_docno             = s.wms_pway_source_docno 
		, pway_created_by               = s.wms_pway_created_by 
		, pway_created_date             = s.wms_pway_created_date 
		, pway_modified_by              = s.wms_pway_modified_by 
		, pway_modified_date            = s.wms_pway_modified_date 
		, pway_timestamp                = s.wms_pway_timestamp 
		, pway_output_pln               = s.wms_pway_output_pln 
		, pway_type                     = s.wms_pway_type 
		, pway_comp_flag                = s.wms_pway_comp_flag 
		, pway_first_pln_no             = s.wms_pway_first_pln_no 
		, pway_by_flag                  = s.wms_pway_by_flag 
    	, etlactiveind 					= 1
		, etljobname 					= p_etljobname
		, envsourcecd 					= p_envsourcecd
		, datasourcecd 					= p_datasourcecd
		, etlupdatedatetime 			= NOW()	
    FROM stg.stg_wms_putaway_plan_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_pln_ou        	= l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON s.wms_pway_pln_date::date 	= d.dateactual
	LEFT JOIN dwh.d_stage g 		
		ON s.wms_pway_stag_id  			= g.stg_mas_id 
        AND s.wms_pway_pln_ou        	= g.stg_mas_ou
        AND s.wms_pway_loc_code         = g.stg_mas_loc
	LEFT JOIN dwh.d_employeeheader e 		
		ON s.wms_pway_employee_id  		= e.emp_employee_code 
        AND s.wms_pway_pln_ou        	= e.emp_ou	
    WHERE   t.pway_loc_code 			= s.wms_pway_loc_code
		AND	t.pway_pln_no 				= s.wms_pway_pln_no
		AND	t.pway_pln_ou 				= s.wms_pway_pln_ou;
    
    
    GET DIAGNOSTICS updcnt = ROW_COUNT;

	INSERT INTO dwh.F_PutawayPlanDetail
	(
		    pway_pln_dtl_loc_key	, pway_pln_dtl_date_key	, pway_pln_dtl_stg_mas_key	, pway_pln_dtl_emp_hdr_key 		
            , pway_loc_code    		, pway_pln_no      		, pway_pln_ou      			, pway_pln_date    			, pway_pln_status  
            , pway_stag_id     		, pway_mhe_id      		, pway_employee_id 			, pway_source_stage			, pway_source_docno
            , pway_created_by  		, pway_created_date		, pway_modified_by 			, pway_modified_date		, pway_timestamp   
            , pway_output_pln  		, pway_type        		, pway_comp_flag   			, pway_first_pln_no			, pway_by_flag,
            etlactiveind			, etljobname			, envsourcecd				, datasourcecd	            , etlcreatedatetime
	)
	
	SELECT 
		   COALESCE(l.loc_key,-1)	        , d.datekey	                    ,COALESCE(g.stg_mas_key,-1)	        ,COALESCE(e.emp_hdr_key,-1) 		
		   , s.wms_pway_loc_code    		, s.wms_pway_pln_no      		, s.wms_pway_pln_ou      			, s.wms_pway_pln_date    			, s.wms_pway_pln_status  
           , s.wms_pway_stag_id     		, s.wms_pway_mhe_id      		, s.wms_pway_employee_id 			, s.wms_pway_source_stage			, s.wms_pway_source_docno
           , s.wms_pway_created_by  		, s.wms_pway_created_date		, s.wms_pway_modified_by 			, s.wms_pway_modified_date			, s.wms_pway_timestamp   
           , s.wms_pway_output_pln  		, s.wms_pway_type        		, s.wms_pway_comp_flag   			, s.wms_pway_first_pln_no			, s.wms_pway_by_flag,
           1 AS etlactiveind			    , p_etljobname				    , p_envsourcecd				        , p_datasourcecd	                , NOW()
	FROM stg.stg_wms_putaway_plan_dtl s
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
        AND s.wms_pway_pln_ou        	= l.loc_ou
	LEFT JOIN dwh.d_date d 			
		ON s.wms_pway_pln_date::date 	= d.dateactual
	LEFT JOIN dwh.d_stage g 		
		ON s.wms_pway_stag_id  			= g.stg_mas_id 
        AND s.wms_pway_pln_ou        	= g.stg_mas_ou
        AND s.wms_pway_loc_code         = g.stg_mas_loc
	LEFT JOIN dwh.d_employeeheader e 		
		ON s.wms_pway_employee_id  		= e.emp_employee_code 
        AND s.wms_pway_pln_ou        	= e.emp_ou		
	LEFT JOIN dwh.F_PutawayPlanDetail fh  	
		ON  fh.pway_loc_code 			= s.wms_pway_loc_code
		AND	fh.pway_pln_no 				= s.wms_pway_pln_no
		AND	fh.pway_pln_ou 				= s.wms_pway_pln_ou
    WHERE fh.pway_pln_no IS NULL;
    
    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN
	
	INSERT INTO raw.raw_wms_putaway_plan_dtl
	(
		wms_pway_loc_code, wms_pway_pln_no, wms_pway_pln_ou, wms_pway_pln_date, wms_pway_pln_status,
		wms_pway_stag_id, wms_pway_mhe_id, wms_pway_employee_id, wms_pway_source_stage,
		wms_pway_source_docno, wms_pway_created_by, wms_pway_created_date, wms_pway_modified_by,
		wms_pway_modified_date, wms_pway_timestamp, wms_pway_output_pln, wms_pway_userdefined1,
		wms_pway_userdefined2, wms_pway_userdefined3, wms_pway_type, wms_pway_comp_flag,
		wms_pway_first_pln_no, wms_pway_by_flag, etlcreateddatetime
	
	)
	SELECT 
		wms_pway_loc_code, wms_pway_pln_no, wms_pway_pln_ou, wms_pway_pln_date, wms_pway_pln_status,
		wms_pway_stag_id, wms_pway_mhe_id, wms_pway_employee_id, wms_pway_source_stage,
		wms_pway_source_docno, wms_pway_created_by, wms_pway_created_date, wms_pway_modified_by,
		wms_pway_modified_date, wms_pway_timestamp, wms_pway_output_pln, wms_pway_userdefined1,
		wms_pway_userdefined2, wms_pway_userdefined3, wms_pway_type, wms_pway_comp_flag,
		wms_pway_first_pln_no, wms_pway_by_flag, etlcreateddatetime
	FROM stg.stg_wms_putaway_plan_dtl;
    END IF;	
	
    EXCEPTION WHEN others THEN       
       
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate,p_errordesc = message_text;
        
    CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
        
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt; 	
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawayplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawayplanitemdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawayplanitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_put_plan_item_dtl;

    UPDATE dwh.F_PutawayPlanItemDetail t
    SET
        pway_pln_dtl_key			  = fh.pway_pln_dtl_key,
        pway_pln_itm_dtl_loc_key	  = COALESCE(l.loc_key,-1),
		pway_pln_itm_dtl_itm_hdr_key  = COALESCE(i.itm_hdr_key,-1),
		pway_pln_itm_dtl_zone_key	  = COALESCE(z.zone_key,-1),
        pway_po_no                    = s.wms_pway_po_no,
        pway_po_sr_no                 = s.wms_pway_po_sr_no,
        pway_uid                      = s.wms_pway_uid,
        pway_item                     = s.wms_pway_item,
        pway_zone                     = s.wms_pway_zone,
        pway_allocated_qty            = s.wms_pway_allocated_qty,
        pway_allocated_bin            = s.wms_pway_allocated_bin,
        pway_gr_no                    = s.wms_pway_gr_no,
        pway_gr_lineno                = s.wms_pway_gr_lineno,
        pway_gr_lot_no                = s.wms_pway_gr_lot_no,
        pway_rqs_conformation         = s.wms_pway_rqs_conformation,
        pway_su_type                  = s.wms_pway_su_type,
        pway_su_serial_no             = s.wms_pway_su_serial_no,
        pway_su                       = s.wms_pway_su,
        pway_from_staging_id          = s.wms_pway_from_staging_id,
        pway_supp_batch_no            = s.wms_pway_supp_batch_no,
        pway_thu_serial_no            = s.wms_pway_thu_serial_no,
        pway_allocated_staging        = s.wms_pway_allocated_staging,
        pway_cross_dock               = s.wms_pway_cross_dock,
        pway_stock_status             = s.wms_pway_stock_status,
        pway_staging                  = s.wms_pway_staging,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_put_plan_item_dtl s
    INNER JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_itemheader i 
		ON  s.wms_pway_item			 = i.itm_code
		AND s.wms_pway_pln_ou 		 = i.itm_ou 
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 	 = l.loc_code 
		AND s.wms_pway_pln_ou 		 = l.loc_ou 
	LEFT JOIN dwh.d_zone z 			
		ON  s.wms_pway_zone 		 = z.zone_code
		AND s.wms_pway_loc_code 	 = z.zone_loc_code
		AND s.wms_pway_pln_ou 		 = z.zone_ou 
    WHERE 	t.pway_loc_code 		 = s.wms_pway_loc_code
    AND 	t.pway_pln_no 			 = s.wms_pway_pln_no
    AND 	t.pway_pln_ou 			 = s.wms_pway_pln_ou
    AND 	t.pway_lineno 			 = s.wms_pway_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PutawayPlanItemDetail
    (
	    pway_pln_dtl_key,pway_pln_itm_dtl_loc_key, pway_pln_itm_dtl_itm_hdr_key, pway_pln_itm_dtl_zone_key,
        pway_loc_code, pway_pln_no, pway_pln_ou, pway_lineno, pway_po_no, pway_po_sr_no, pway_uid, pway_item, pway_zone, pway_allocated_qty, pway_allocated_bin, pway_gr_no, pway_gr_lineno, pway_gr_lot_no, pway_rqs_conformation, pway_su_type, pway_su_serial_no, pway_su, pway_from_staging_id, pway_supp_batch_no, pway_thu_serial_no, pway_allocated_staging, pway_cross_dock, pway_stock_status, pway_staging, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		fh.pway_pln_dtl_key,COALESCE(l.loc_key,-1), COALESCE(i.itm_hdr_key,-1), COALESCE(z.zone_key,-1),
        s.wms_pway_loc_code, s.wms_pway_pln_no, s.wms_pway_pln_ou, s.wms_pway_lineno, s.wms_pway_po_no, s.wms_pway_po_sr_no, s.wms_pway_uid, s.wms_pway_item, s.wms_pway_zone, s.wms_pway_allocated_qty, s.wms_pway_allocated_bin, s.wms_pway_gr_no, s.wms_pway_gr_lineno, s.wms_pway_gr_lot_no, s.wms_pway_rqs_conformation, s.wms_pway_su_type, s.wms_pway_su_serial_no, s.wms_pway_su, s.wms_pway_from_staging_id, s.wms_pway_supp_batch_no, s.wms_pway_thu_serial_no, s.wms_pway_allocated_staging, s.wms_pway_cross_dock, s.wms_pway_stock_status, s.wms_pway_staging, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_put_plan_item_dtl s
    INNER JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_itemheader i 
		ON  s.wms_pway_item			 = i.itm_code
		AND s.wms_pway_pln_ou 		 = i.itm_ou 
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 	 = l.loc_code 
		AND s.wms_pway_pln_ou 		 = l.loc_ou 
	LEFT JOIN dwh.d_zone z 			
		ON  s.wms_pway_zone 		 = z.zone_code
		AND s.wms_pway_pln_ou 		 = z.zone_ou 
		AND s.wms_pway_loc_code 	 = z.zone_loc_code
    LEFT JOIN dwh.F_PutawayPlanItemDetail t
    ON 		s.wms_pway_loc_code 	= t.pway_loc_code
    AND 	s.wms_pway_pln_no 		= t.pway_pln_no
    AND 	s.wms_pway_pln_ou 		= t.pway_pln_ou
    AND 	s.wms_pway_lineno 		= t.pway_lineno
    WHERE 	t.pway_pln_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_put_plan_item_dtl
    (
        wms_pway_loc_code, wms_pway_pln_no, wms_pway_pln_ou, wms_pway_lineno, wms_pway_po_no, wms_pway_po_sr_no, wms_pway_uid, wms_pway_item, wms_pway_zone, wms_pway_allocated_qty, wms_pway_allocated_bin, wms_pway_gr_no, wms_pway_gr_lineno, wms_pway_gr_lot_no, wms_pway_rqs_conformation, wms_pway_su_type, wms_pway_su_serial_no, wms_pway_su, wms_pway_from_staging_id, wms_pway_supp_batch_no, wms_pway_thu_serial_no, wms_pway_allocated_staging, wms_pway_cross_dock, wms_pway_target_thu_serial_no, wms_pway_stock_status, wms_pway_staging, wms_pway_su2, wms_pway_su_serial_no2, wms_put_su1_conv_flg, wms_put_su2_conv_flg, etlcreateddatetime
    )
    SELECT
        wms_pway_loc_code, wms_pway_pln_no, wms_pway_pln_ou, wms_pway_lineno, wms_pway_po_no, wms_pway_po_sr_no, wms_pway_uid, wms_pway_item, wms_pway_zone, wms_pway_allocated_qty, wms_pway_allocated_bin, wms_pway_gr_no, wms_pway_gr_lineno, wms_pway_gr_lot_no, wms_pway_rqs_conformation, wms_pway_su_type, wms_pway_su_serial_no, wms_pway_su, wms_pway_from_staging_id, wms_pway_supp_batch_no, wms_pway_thu_serial_no, wms_pway_allocated_staging, wms_pway_cross_dock, wms_pway_target_thu_serial_no, wms_pway_stock_status, wms_pway_staging, wms_pway_su2, wms_pway_su_serial_no2, wms_put_su1_conv_flg, wms_put_su2_conv_flg, etlcreateddatetime
    FROM stg.stg_wms_put_plan_item_dtl;
    END IF;
    ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawayplanitemdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_putawayserialdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_putawayserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_put_serial_dtl;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN
    
    UPDATE dwh.F_PutawaySerialDetail t
    SET
        pway_pln_dtl_key		= fh.pway_pln_dtl_key,
        pway_serial_dtl_loc_key   = COALESCE(l.loc_key,-1),
		pway_serial_dtl_zone_key  = COALESCE(z.zone_key,-1),
        pway_itm_lineno        = s.wms_pway_itm_lineno,
        pway_zone              = s.wms_pway_zone,
        pway_bin               = s.wms_pway_bin,
        pway_serialno          = s.wms_pway_serialno,
        pway_lotno             = s.wms_pway_lotno,
        pway_cust_sno          = s.wms_pway_cust_sno,
        pway_3pl_sno           = s.wms_pway_3pl_sno,
        etlactiveind           = 1,
        etljobname             = p_etljobname,
        envsourcecd            = p_envsourcecd,
        datasourcecd           = p_datasourcecd,
        etlupdatedatetime      = NOW()
    FROM stg.stg_wms_put_serial_dtl s
    INNER JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
		AND s.wms_pway_pln_ou 			= l.loc_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pway_zone 			= z.zone_code 
		AND s.wms_pway_pln_ou 			= z.zone_ou 
    WHERE 	t.pway_loc_code 			= s.wms_pway_loc_code
    AND 	t.pway_pln_no 				= s.wms_pway_pln_no
    AND 	t.pway_pln_ou 				= s.wms_pway_pln_ou
    AND 	t.pway_lineno 				= s.wms_pway_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_PutawaySerialDetail
    (
		pway_pln_dtl_key,pway_serial_dtl_loc_key, pway_serial_dtl_zone_key,
        pway_loc_code, pway_pln_no, pway_pln_ou, pway_lineno, pway_itm_lineno, pway_zone, pway_bin, pway_serialno, pway_lotno, pway_cust_sno, pway_3pl_sno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.pway_pln_dtl_key,COALESCE(l.loc_key,-1), COALESCE(z.zone_key,-1),
		s.wms_pway_loc_code, s.wms_pway_pln_no, s.wms_pway_pln_ou, s.wms_pway_lineno, s.wms_pway_itm_lineno, s.wms_pway_zone, s.wms_pway_bin, s.wms_pway_serialno, s.wms_pway_lotno, s.wms_pway_cust_sno, s.wms_pway_3pl_sno, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_put_serial_dtl s
    INNER JOIN 	dwh.f_putawayplandetail fh 
			ON  s.wms_pway_loc_code = fh.pway_loc_code 
			AND s.wms_pway_pln_no 	= fh.pway_pln_no 
			AND s.wms_pway_pln_ou 	= fh.pway_pln_ou
	LEFT JOIN dwh.d_location l 		
		ON  s.wms_pway_loc_code 		= l.loc_code 
		AND s.wms_pway_pln_ou 			= l.loc_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.wms_pway_zone 			= z.zone_code 
		AND s.wms_pway_pln_ou 			= z.zone_ou 
        AND s.wms_pway_loc_code 		= z.zone_loc_code 
    LEFT JOIN dwh.F_PutawaySerialDetail t
		ON 	s.wms_pway_loc_code 		= t.pway_loc_code
		AND s.wms_pway_pln_no 			= t.pway_pln_no
		AND s.wms_pway_pln_ou 			= t.pway_pln_ou
		AND s.wms_pway_lineno 			= t.pway_lineno
    WHERE t.pway_pln_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_put_serial_dtl
    (
        wms_pway_loc_code, wms_pway_pln_no, wms_pway_pln_ou, wms_pway_lineno, wms_pway_itm_lineno, wms_pway_zone, wms_pway_bin, wms_pway_serialno, wms_pway_lotno, wms_pway_allocated_staging, wms_pway_cust_sno, wms_pway_3pl_sno, wms_pway_warranty_sno, etlcreateddatetime
    )
    SELECT
        wms_pway_loc_code, wms_pway_pln_no, wms_pway_pln_ou, wms_pway_lineno, wms_pway_itm_lineno, wms_pway_zone, wms_pway_bin, wms_pway_serialno, wms_pway_lotno, wms_pway_allocated_staging, wms_pway_cust_sno, wms_pway_3pl_sno, wms_pway_warranty_sno, etlcreateddatetime
    FROM stg.stg_wms_put_serial_dtl;
    END IF;

    ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
       
END;
$$;


ALTER PROCEDURE dwh.usp_f_putawayserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_rppostingsdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_rppostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_rp_postings_dtl;

    UPDATE dwh.f_rppostingsdtl t
    SET
        rppostingsdtl_curr_key	 = COALESCE(cu.curr_key,-1),
		rppostingsdtl_company_key= COALESCE(co.company_key,-1),
        rppostingsdtl_datekey    = COALESCE(d.datekey,-1),
        rppostingsdtl_opcoa_key  = COALESCE(o.opcoa_key,-1),
        rtimestamp               = s.rtimestamp,
        fb_id                    = s.fb_id,
        bu_id                    = s.bu_id,
        tran_date                = s.tran_date,
        posting_date             = s.posting_date,
        account_currcode         = s.account_currcode,
        drcr_flag                = s.drcr_flag,
        currency_code            = s.currency_code,
        tran_amount              = s.tran_amount,
        base_amount              = s.base_amount,
        exchange_rate            = s.exchange_rate,
        par_base_amount          = s.par_base_amount,
        par_exchange_rate        = s.par_exchange_rate,
        analysis_code            = s.analysis_code,
        subanalysis_code         = s.subanalysis_code,
        cost_center              = s.cost_center,
        auth_date                = s.auth_date,
        narration                = s.narration,
        bank_code                = s.bank_code,
        mac_post_flag            = s.mac_post_flag,
        reftran_fbid             = s.reftran_fbid,
        reftran_no               = s.reftran_no,
        supcust_code             = s.supcust_code,
        reftran_ou               = s.reftran_ou,
        ref_tran_type            = s.ref_tran_type,
        createdby                = s.createdby,
        createddate              = s.createddate,
        ctrlacctype              = s.ctrlacctype,
        company_code             = s.company_code,
        batch_id                 = s.batch_id,
        component_name           = s.component_name,
        hdrremarks               = s.hdrremarks,
        mlremarks                = s.mlremarks,
        pdc_void_flag            = s.pdc_void_flag,
        check_no                 = s.check_no,
        line_no                  = s.line_no,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_rp_postings_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency_code				= cu.iso_curr_code
	LEFT JOIN dwh.d_company co 		
		ON  s.company_code 				= co.company_code 
    LEFT JOIN dwh.d_date d 		
		ON  s.posting_date::date 	    = d.dateactual
    LEFT JOIN dwh.d_operationalaccountdetail o 
		ON  s.account_code				= o.account_code
    WHERE t.ou_id 			= s.ou_id
    AND   t.serial_no 		= s.serial_no
    AND   t.unique_no 		= s.unique_no
    AND   t.doc_type 		= s.doc_type
    AND   t.tran_ou 		= s.tran_ou
    AND   t.document_no 	= s.document_no
    AND   t.account_code 	= s.account_code
    AND   t.tran_type 		= s.tran_type;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_rppostingsdtl
    (
        rppostingsdtl_curr_key, rppostingsdtl_company_key,  rppostingsdtl_datekey,  rppostingsdtl_opcoa_key,
        ou_id, 				serial_no, 			unique_no, 			doc_type, 			tran_ou, 
		document_no, 		account_code, 		tran_type, 			rtimestamp, 		fb_id, 
		bu_id, 				tran_date, 			posting_date, 		account_currcode, 	drcr_flag, 
		currency_code, 		tran_amount, 		base_amount, 		exchange_rate, 		par_base_amount, 
		par_exchange_rate, 	analysis_code, 		subanalysis_code, 	cost_center, 		auth_date, 
		narration, 			bank_code, 			mac_post_flag, 		reftran_fbid, 		reftran_no, 
		supcust_code, 		reftran_ou, 		ref_tran_type, 		createdby, 			createddate, 
		ctrlacctype, 		company_code, 		batch_id, 			component_name, 	hdrremarks, 
		mlremarks, 			pdc_void_flag, 		check_no, 			line_no, 			etlactiveind, 
		etljobname, 		envsourcecd, 		datasourcecd, 		etlcreatedatetime
    )

    SELECT
        COALESCE(cu.curr_key,-1),   COALESCE(co.company_key,-1),    COALESCE(d.datekey,-1), COALESCE(o.opcoa_key,-1),
        s.ou_id, 				s.serial_no, 			s.unique_no, 			s.doc_type, 			s.tran_ou, 
		s.document_no, 			s.account_code, 		s.tran_type, 			s.rtimestamp, 			s.fb_id, 
		s.bu_id, 				s.tran_date, 			s.posting_date, 		s.account_currcode, 	s.drcr_flag, 
		s.currency_code, 		s.tran_amount, 			s.base_amount, 			s.exchange_rate, 		s.par_base_amount, 
		s.par_exchange_rate, 	s.analysis_code, 		s.subanalysis_code, 	s.cost_center, 			s.auth_date, 
		s.narration, 			s.bank_code, 			s.mac_post_flag, 		s.reftran_fbid, 		s.reftran_no, 
		s.supcust_code, 		s.reftran_ou, 			s.ref_tran_type, 		s.createdby, 			s.createddate, 
		s.ctrlacctype, 			s.company_code, 		s.batch_id, 			s.component_name, 		s.hdrremarks, 
		s.mlremarks, 			s.pdc_void_flag, 		s.check_no, 			s.line_no, 				1, 
		p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 		NOW()
    FROM stg.stg_rp_postings_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency_code				= cu.iso_curr_code
	LEFT JOIN dwh.d_company co 		
		ON  s.company_code 				= co.company_code 
    LEFT JOIN dwh.d_date d 		
		ON  s.posting_date::date 	    = d.dateactual
    LEFT JOIN dwh.d_operationalaccountdetail o 
		ON  s.account_code				= o.account_code
    LEFT JOIN dwh.f_rppostingsdtl t
    ON 	s.ou_id 		= t.ou_id
    AND s.serial_no 	= t.serial_no
    AND s.unique_no 	= t.unique_no
    AND s.doc_type 		= t.doc_type
    AND s.tran_ou 		= t.tran_ou
    AND s.document_no 	= t.document_no
    AND s.account_code 	= t.account_code
    AND s.tran_type 	= t.tran_type
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_rp_postings_dtl
    (
        ou_id, 				serial_no, 			unique_no, 			doc_type, 			tran_ou, 
		document_no, 		account_code, 		tran_type, 			rtimestamp, 		fb_id, 
		bu_id, 				tran_date, 			posting_date, 		account_currcode, 	drcr_flag, 
		currency_code, 		tran_amount, 		base_amount, 		exchange_rate, 		par_base_amount, 
		par_exchange_rate, 	analysis_code, 		subanalysis_code, 	cost_center, 		entry_date, 
		auth_date, 			narration, 			bank_code, 			item_code, 			item_varinat, 
		quantity, 			mac_post_flag, 		reftran_fbid, 		reftran_no, 		supcust_code, 
		reftran_ou, 		ref_tran_type, 		uom, 				createdby, 			createddate, 
		modifiedby, 		modifieddate, 		ctrlacctype, 		company_code, 		batch_id, 
		component_name, 	hdrremarks, 		mlremarks, 			pdc_void_flag, 		project_ou, 
		Project_code, 		afe_number, 		job_number, 		refcostcenter_hdr, 	check_no, 
		line_no, 			etlcreateddatetime
    )
    SELECT
        ou_id, 				serial_no, 			unique_no, 			doc_type, 			tran_ou, 
		document_no, 		account_code, 		tran_type, 			rtimestamp, 		fb_id, 
		bu_id, 				tran_date, 			posting_date, 		account_currcode, 	drcr_flag, 
		currency_code, 		tran_amount, 		base_amount, 		exchange_rate, 		par_base_amount, 
		par_exchange_rate, 	analysis_code, 		subanalysis_code, 	cost_center, 		entry_date, 
		auth_date, 			narration, 			bank_code, 			item_code, 			item_varinat, 
		quantity, 			mac_post_flag, 		reftran_fbid, 		reftran_no, 		supcust_code, 
		reftran_ou, 		ref_tran_type, 		uom, 				createdby, 			createddate, 
		modifiedby, 		modifieddate, 		ctrlacctype, 		company_code, 		batch_id, 
		component_name, 	hdrremarks, 		mlremarks, 			pdc_void_flag, 		project_ou, 
		Project_code, 		afe_number, 		job_number, 		refcostcenter_hdr, 	check_no, 
		line_no, 			etlcreateddatetime
    FROM stg.stg_rp_postings_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_rppostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_rptacctinfodtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_rptacctinfodtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_rpt_acct_info_dtl;

    UPDATE dwh.F_rptacctinfodtl t
    SET
        rptacctinfodtl_curr_key	 = COALESCE(cu.curr_key,-1),
		rptacctinfodtl_company_key= COALESCE(co.company_key,-1),
        rptacctinfodtl_datekey    = COALESCE(d.datekey,-1),
        rptacctinfodtl_opcoa_key  = COALESCE(o.opcoa_key,-1),
        fin_post_date           = s.fin_post_date,
        currency                = s.currency,
        cost_center             = s.cost_center,
        tran_amount             = s.tran_amount,
        analysis_code           = s.analysis_code,
        subanalysis_code        = s.subanalysis_code,
        basecur_erate           = s.basecur_erate,
        base_amount             = s.base_amount,
        par_base_amt            = s.par_base_amt,
        batch_id                = s.batch_id,
        account_type            = s.account_type,
        company_id              = s.company_id,
        component_id            = s.component_id,
        bu_id                   = s.bu_id,
        tran_date               = s.tran_date,
        createdby               = s.createdby,
        createddate             = s.createddate,
        modifiedby              = s.modifiedby,
        source_comp             = s.source_comp,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_rpt_acct_info_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency				= cu.iso_curr_code
	LEFT JOIN dwh.d_company co 		
		ON  s.company_id 			= co.company_code
    LEFT JOIN dwh.d_date d 		
		ON  s.tran_date::date 	    = d.dateactual
    LEFT JOIN dwh.d_operationalaccountdetail o 
		ON  s.account_code				= o.account_code
    WHERE t.ou_id = s.ou_id
    AND t.tran_no = s.tran_no
    AND t.fb_id = s.fb_id
    AND t.account_code = s.account_code
    AND t.tran_type = s.tran_type
    AND t.drcr_flag = s.drcr_flag
    AND t.posting_line_no = s.posting_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_rptacctinfodtl
    (
		rptacctinfodtl_curr_key,			rptacctinfodtl_company_key, rptacctinfodtl_datekey, rptacctinfodtl_opcoa_key,
        ou_id,			 tran_no, 			fb_id, 				account_code, 		tran_type, 
		drcr_flag, 		 posting_line_no, 	fin_post_date, 		currency, 			cost_center, 
		tran_amount, 	 analysis_code, 	subanalysis_code, 	basecur_erate, 		base_amount, 
		par_base_amt, 	 batch_id, 			account_type, 		company_id, 		component_id, 
		bu_id, 			 tran_date, 		createdby, 			createddate, 		modifiedby, 
		source_comp, 	 etlactiveind, 		etljobname, 		envsourcecd, 		datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		COALESCE(cu.curr_key,-1),			COALESCE(co.company_key,-1),    COALESCE(d.datekey,-1), COALESCE(o.opcoa_key,-1),
        s.ou_id,			 s.tran_no, 			s.fb_id, 				s.account_code, 		s.tran_type, 
		s.drcr_flag, 		 s.posting_line_no, 	s.fin_post_date, 		s.currency, 			s.cost_center, 
		s.tran_amount, 	 	 s.analysis_code, 		s.subanalysis_code, 	s.basecur_erate, 		s.base_amount, 
		s.par_base_amt, 	 s.batch_id, 			s.account_type, 		s.company_id, 		    s.component_id, 
		s.bu_id, 			 s.tran_date, 			s.createdby, 			s.createddate, 		    s.modifiedby, 
		s.source_comp, 
        1, 				 	 p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 		NOW()
    FROM stg.stg_rpt_acct_info_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency				= cu.iso_curr_code
	LEFT JOIN dwh.d_company co 		
		ON  s.company_id 			= co.company_code
    LEFT JOIN dwh.d_date d 		
		ON  s.tran_date::date 	    = d.dateactual
    LEFT JOIN dwh.d_operationalaccountdetail o 
		ON  s.account_code				= o.account_code
    LEFT JOIN dwh.F_rptacctinfodtl t
    ON s.ou_id = t.ou_id
    AND s.tran_no = t.tran_no
    AND s.fb_id = t.fb_id
    AND s.account_code = t.account_code
    AND s.tran_type = t.tran_type
    AND s.drcr_flag = t.drcr_flag
    AND s.posting_line_no = t.posting_line_no
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_rpt_acct_info_dtl
    (
        ou_id, 			tran_no, 			fb_id, 				account_code, 		tran_type, 
		drcr_flag, 		posting_line_no, 	fin_post_date, 		currency, 			cost_center, 
		tran_amount, 	analysis_code, 		subanalysis_code, 	basecur_erate, 		base_amount, 
		pbcur_erate, 	par_base_amt, 		fin_post_status, 	batch_id, 			account_type, 
		flag, 			company_id, 		component_id, 		bu_id, 				tran_date, 
		createdby, 		createddate, 		modifiedby, 		modifieddate, 		source_comp, 
		project_ou, 	Project_code, 		etlcreateddatetime
    )
    SELECT
        ou_id, 			tran_no, 			fb_id, 				account_code, 		tran_type, 
		drcr_flag, 		posting_line_no, 	fin_post_date, 		currency, 			cost_center, 
		tran_amount, 	analysis_code, 		subanalysis_code, 	basecur_erate, 		base_amount, 
		pbcur_erate, 	par_base_amt, 		fin_post_status, 	batch_id, 			account_type, 
		flag, 			company_id, 		component_id, 		bu_id, 				tran_date, 
		createdby, 		createddate, 		modifiedby, 		modifieddate, 		source_comp, 
		project_ou, 	Project_code, 		etlcreateddatetime
    FROM stg.stg_rpt_acct_info_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_rptacctinfodtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sadadjvcrdocdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sadadjvcrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sad_adjv_crdoc_dtl;

    UPDATE dwh.F_sadadjvcrdocdtl t
    SET
        sadadjvcrdocdtl_curr_key	= COALESCE(cu.curr_key,-1),
        tran_type                  = s.tran_type,
        cr_doc_adj_amt             = s.cr_doc_adj_amt,
        discount                   = s.discount,
        proposed_discount          = s.proposed_discount,
        cost_center                = s.cost_center,
        analysis_code              = s.analysis_code,
        subanalysis_code           = s.subanalysis_code,
        au_cr_doc_unadj_amt        = s.au_cr_doc_unadj_amt,
        au_cr_doc_cur              = s.au_cr_doc_cur,
        au_crosscur_erate          = s.au_crosscur_erate,
        au_discount_date           = s.au_discount_date,
        au_cr_doc_date             = s.au_cr_doc_date,
        au_fb_id                   = s.au_fb_id,
        parent_key                 = s.parent_key,
        current_key                = s.current_key,
        au_disc_available          = s.au_disc_available,
        au_due_date                = s.au_due_date,
        au_billing_point           = s.au_billing_point,
        voucher_tran_type          = s.voucher_tran_type,
        batch_id                   = s.batch_id,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_sad_adjv_crdoc_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.au_cr_doc_cur				= cu.iso_curr_code
    WHERE t.ou_id = s.ou_id
    AND t.adj_voucher_no = s.adj_voucher_no
    AND t.cr_doc_ou = s.cr_doc_ou
    AND t.cr_doc_no = s.cr_doc_no
    AND t.term_no = s.term_no
    AND t.cr_doc_type = s.cr_doc_type;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_sadadjvcrdocdtl
    (
		sadadjvcrdocdtl_curr_key,
        ou_id, 				adj_voucher_no, 	cr_doc_ou, 			cr_doc_no, 				term_no, 
		cr_doc_type, 		tran_type, 			cr_doc_adj_amt, 	discount, 				proposed_discount, 
		cost_center, 		analysis_code, 		subanalysis_code, 	au_cr_doc_unadj_amt, 	au_cr_doc_cur, 
		au_crosscur_erate, 	au_discount_date, 	au_cr_doc_date, 	au_fb_id, 				parent_key, 
		current_key, 		au_disc_available,  au_due_date, 		au_billing_point, 		voucher_tran_type, 
		batch_id, 			etlactiveind, 		etljobname, 		envsourcecd, 			datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		COALESCE(cu.curr_key,-1),
        s.ou_id, 				s.adj_voucher_no, 		s.cr_doc_ou, 			s.cr_doc_no, 				s.term_no, 
		s.cr_doc_type, 			s.tran_type, 			s.cr_doc_adj_amt, 		s.discount, 				s.proposed_discount, 
		s.cost_center, 			s.analysis_code, 		s.subanalysis_code, 	s.au_cr_doc_unadj_amt, 		s.au_cr_doc_cur, 
		s.au_crosscur_erate, 	s.au_discount_date, 	s.au_cr_doc_date, 		s.au_fb_id, 				s.parent_key, 
		s.current_key, 			s.au_disc_available,  	s.au_due_date, 			s.au_billing_point, 		s.voucher_tran_type, 
		s.batch_id, 
		1, 						p_etljobname, 			p_envsourcecd, 			p_datasourcecd, NOW()
    FROM stg.stg_sad_adjv_crdoc_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.au_cr_doc_cur				= cu.iso_curr_code
    LEFT JOIN dwh.F_sadadjvcrdocdtl t
    ON s.ou_id = t.ou_id
    AND s.adj_voucher_no = t.adj_voucher_no
    AND s.cr_doc_ou = t.cr_doc_ou
    AND s.cr_doc_no = t.cr_doc_no
    AND s.term_no = t.term_no
    AND s.cr_doc_type = t.cr_doc_type
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sad_adjv_crdoc_dtl
    (
        ou_id, 					adj_voucher_no, 		cr_doc_ou, 			cr_doc_no, 			term_no, 
		cr_doc_type, 			tran_type, 				au_sale_ord_ref, 	cr_doc_adj_amt, 	discount, 
		proposed_discount, 		cost_center, 			analysis_code, 		subanalysis_code, 	au_pur_ord_ref, 
		au_cr_doc_unadj_amt, 	au_cr_doc_cur, 			au_crosscur_erate, 	au_discount_date, 	au_cr_doc_date, 
		au_fb_id, 				parent_key, 			current_key, 		au_disc_available, 	au_due_date, 
		au_billing_point, 		vat_amount, 			vat_rate, 			voucher_tran_type, 	batch_id, 
		au_base_exrate, 		au_par_base_exrate, 	project_ou, 		Project_code, 		afe_number, 
		job_number, 			tax_adj_jvno, 			prop_wht_amt, 		app_wht_amt, 		BillOfLadingNo, 
		BookingNo, 				MasterBillOfLadingNo, 	etlcreateddatetime
    )
    SELECT
        ou_id, 					adj_voucher_no, 		cr_doc_ou, 			cr_doc_no, 			term_no, 
		cr_doc_type, 			tran_type, 				au_sale_ord_ref, 	cr_doc_adj_amt, 	discount, 
		proposed_discount, 		cost_center, 			analysis_code, 		subanalysis_code, 	au_pur_ord_ref, 
		au_cr_doc_unadj_amt, 	au_cr_doc_cur, 			au_crosscur_erate, 	au_discount_date, 	au_cr_doc_date, 
		au_fb_id, 				parent_key, 			current_key, 		au_disc_available, 	au_due_date, 
		au_billing_point, 		vat_amount, 			vat_rate, 			voucher_tran_type, 	batch_id, 
		au_base_exrate, 		au_par_base_exrate, 	project_ou, 		Project_code, 		afe_number, 
		job_number, 			tax_adj_jvno, 			prop_wht_amt, 		app_wht_amt, 		BillOfLadingNo, 
		BookingNo, 				MasterBillOfLadingNo, 	etlcreateddatetime
    FROM stg.stg_sad_adjv_crdoc_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_sadadjvcrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sadadjvdrdocdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sadadjvdrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sad_adjv_drdoc_dtl;

    UPDATE dwh.F_sadadjvdrdocdtl t
    SET
        sadadjvdrdocdtl_curr_key	= COALESCE(cu.curr_key,-1),
        tran_type                  = s.tran_type,
        dr_doc_adj_amt             = s.dr_doc_adj_amt,
        au_dr_doc_unadj_amt        = s.au_dr_doc_unadj_amt,
        au_dr_doc_amount           = s.au_dr_doc_amount,
        au_dr_doc_date             = s.au_dr_doc_date,
        au_dr_doc_cur              = s.au_dr_doc_cur,
        au_fb_id                   = s.au_fb_id,
        parent_key                 = s.parent_key,
        current_key                = s.current_key,
        au_billing_point           = s.au_billing_point,
        voucher_tran_type          = s.voucher_tran_type,
        batch_id                   = s.batch_id,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_sad_adjv_drdoc_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency				= cu.iso_curr_code
    WHERE 	t.ou_id 			 = s.ou_id
    AND 	t.adj_voucher_no	 = s.adj_voucher_no
    AND 	t.dr_doc_ou			 = s.dr_doc_ou
    AND 	t.dr_doc_type 		 = s.dr_doc_type
    AND 	t.dr_doc_no 		 = s.dr_doc_no
    AND 	t.term_no 			 = s.term_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_sadadjvdrdocdtl
    (
		sadadjvdrdocdtl_curr_key,
        ou_id, 				adj_voucher_no, 		dr_doc_ou, 			dr_doc_type, 			dr_doc_no, 
		term_no, 			tran_type, 				dr_doc_adj_amt, 	au_dr_doc_unadj_amt, 	au_dr_doc_amount, 
		au_dr_doc_date, 	au_dr_doc_cur, 			au_fb_id, 			parent_key, 			current_key, 
		au_billing_point, 	voucher_tran_type, 		batch_id, 			etlactiveind, 			etljobname, 
		envsourcecd, 		datasourcecd, 			etlcreatedatetime
    )

    SELECT
		COALESCE(cu.curr_key,-1),
        ou_id, 				adj_voucher_no, 		dr_doc_ou, 			dr_doc_type, 			dr_doc_no, 
		term_no, 			tran_type, 				dr_doc_adj_amt, 	au_dr_doc_unadj_amt, 	au_dr_doc_amount, 
		au_dr_doc_date, 	au_dr_doc_cur, 			au_fb_id, 			parent_key, 			current_key, 
		au_billing_point, 	voucher_tran_type, 		batch_id,			1,						p_etljobname, 
		p_envsourcecd, 		p_datasourcecd, 		NOW()
    FROM stg.stg_sad_adjv_drdoc_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency				= cu.iso_curr_code
    LEFT JOIN dwh.F_sadadjvdrdocdtl t
    ON s.ou_id = t.ou_id
    AND s.adj_voucher_no = t.adj_voucher_no
    AND s.dr_doc_ou = t.dr_doc_ou
    AND s.dr_doc_type = t.dr_doc_type
    AND s.dr_doc_no = t.dr_doc_no
    AND s.term_no = t.term_no
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sad_adjv_drdoc_dtl
    (
        ou_id, 				adj_voucher_no, 	dr_doc_ou, 			dr_doc_type, 			dr_doc_no, 
		term_no, 			tran_type, 			dr_doc_adj_amt, 	au_dr_doc_unadj_amt, 	au_dr_doc_amount, 
		au_dr_doc_date, 	au_dr_doc_cur, 		au_fb_id, 			parent_key, 			current_key, 
		stimestamp, 		au_billing_point, 	voucher_tran_type, 	batch_id, 				project_ou, 
		Project_code, 		afe_number, 		job_number, 		tax_adj_jvno, 			etlcreateddatetime
    )
    SELECT
        ou_id, 				adj_voucher_no, 	dr_doc_ou, 			dr_doc_type, 			dr_doc_no, 
		term_no, 			tran_type, 			dr_doc_adj_amt, 	au_dr_doc_unadj_amt, 	au_dr_doc_amount, 
		au_dr_doc_date, 	au_dr_doc_cur, 		au_fb_id, 			parent_key, 			current_key, 
		stimestamp, 		au_billing_point, 	voucher_tran_type, 	batch_id, 				project_ou, 
		Project_code, 		afe_number, 		job_number, 		tax_adj_jvno, 			etlcreateddatetime
    FROM stg.stg_sad_adjv_drdoc_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_sadadjvdrdocdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sadadjvoucherhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sadadjvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sad_adjvoucher_hdr;

    UPDATE dwh.F_sadadjvoucherhdr t
    SET
        sadadjvoucherhdr_curr_key	= COALESCE(cu.curr_key,-1),
		sadadjvoucherhdr_vendor_key= COALESCE(v.vendor_key,-1),
        voucher_date              = s.voucher_date,
        fb_id                     = s.fb_id,
        voucher_amount            = s.voucher_amount,
        status                    = s.status,
        supp_code                 = s.supp_code,
        adjust_seq                = s.adjust_seq,
        currency_code             = s.currency_code,
        voucher_type              = s.voucher_type,
        rev_voucher_no            = s.rev_voucher_no,
        reversal_date             = s.reversal_date,
        notype_no                 = s.notype_no,
        currentkey                = s.currentkey,
        voucher_tran_type         = s.voucher_tran_type,
        batch_id                  = s.batch_id,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        tcal_exclusive_amt        = s.tcal_exclusive_amt,
        tcal_status               = s.tcal_status,
        comments                  = s.comments,
        autogen_flag              = s.autogen_flag,
        voucher_remarks           = s.voucher_remarks,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_sad_adjvoucher_hdr s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency				= cu.iso_curr_code
	LEFT JOIN dwh.d_vendor v 		
		ON  s.supp_code 			= v.vendor_id
		AND s.ou_id					= v.vendor_ou
    WHERE 	t.ou_id 			= s.ou_id
    AND 	t.adj_voucher_no 	= s.adj_voucher_no
    AND 	t.stimestamp 		= s.stimestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_sadadjvoucherhdr
    (
		sadadjvoucherhdr_curr_key,	sadadjvoucherhdr_vendor_key,
        ou_id, 				adj_voucher_no, 	stimestamp, 	voucher_date, 		fb_id, 
		voucher_amount, 	status, 			supp_code, 		adjust_seq, 		currency_code, 
		voucher_type, 		rev_voucher_no, 	reversal_date, 	notype_no, 			currentkey, 
		voucher_tran_type, 	batch_id, 			createdby, 		createddate, 		modifiedby, 
		modifieddate, 		tcal_exclusive_amt, tcal_status, 	comments, 			autogen_flag, 
		voucher_remarks, 	etlactiveind, 		etljobname, 	envsourcecd, 		datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		COALESCE(cu.curr_key,-1),	 COALESCE(v.vendor_key,-1),
        s.ou_id, 				s.adj_voucher_no, 		s.stimestamp, 		s.voucher_date, 		s.fb_id, 
		s.voucher_amount, 		s.status, 				s.supp_code, 		s.adjust_seq, 			s.currency_code, 
		s.voucher_type, 		s.rev_voucher_no, 		s.reversal_date, 	s.notype_no, 			s.currentkey, 
		s.voucher_tran_type, 	s.batch_id, 			s.createdby, 		s.createddate, 			s.modifiedby, 
		s.modifieddate, 		s.tcal_exclusive_amt, 	s.tcal_status, 		s.comments, 			s.autogen_flag, 
		s.voucher_remarks, 		1, 						p_etljobname, 		p_envsourcecd, 			p_datasourcecd, 
		NOW()
    FROM stg.stg_sad_adjvoucher_hdr s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency				= cu.iso_curr_code
	LEFT JOIN dwh.d_vendor v 		
		ON  s.supp_code 			= v.vendor_id
		AND s.ou_id					= v.vendor_ou
    LEFT JOIN dwh.F_sadadjvoucherhdr t
    ON 		s.ou_id 			= t.ou_id
    AND 	s.adj_voucher_no 	= t.adj_voucher_no
    AND 	s.stimestamp 		= t.stimestamp
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sad_adjvoucher_hdr
    (
        ou_id, 				adj_voucher_no, 	stimestamp, 		voucher_date, 		fb_id, 
		voucher_amount, 	status, 			supp_code, 			adjust_seq, 		currency_code, 
		voucher_type, 		rev_voucher_no, 	reversal_date, 		notype_no, 			reason_code, 
		remarks, 			currentkey, 		voucher_tran_type, 	batch_id, 			createdby, 
		createddate, 		modifiedby, 		modifieddate, 		doc_status, 		tcal_exclusive_amt, 
		total_tcal_amount, 	tcal_status, 		consistency_stamp, 	CrNoteNo, 			DrNoteNo, 
		CrNoteOU, 			DrNoteOU, 			CrNoteFB, 			DrNoteFB, 			CrVoucNo, 
		DrVoucNo, 			SrDocType, 			DestiBU, 			RevCrNoteNo, 		RevDrNoteNo, 
		RevCrVoucNo, 		RevDrVoucNo, 		workflow_status, 	comments, 			autogen_flag, 
		voucher_remarks, 	etlcreateddatetime
    )
    SELECT
        ou_id, 				adj_voucher_no, 	stimestamp, 		voucher_date, 		fb_id, 
		voucher_amount, 	status, 			supp_code, 			adjust_seq, 		currency_code, 
		voucher_type, 		rev_voucher_no, 	reversal_date, 		notype_no, 			reason_code, 
		remarks, 			currentkey, 		voucher_tran_type, 	batch_id, 			createdby, 
		createddate, 		modifiedby, 		modifieddate, 		doc_status, 		tcal_exclusive_amt, 
		total_tcal_amount, 	tcal_status, 		consistency_stamp, 	CrNoteNo, 			DrNoteNo, 
		CrNoteOU, 			DrNoteOU, 			CrNoteFB, 			DrNoteFB, 			CrVoucNo, 
		DrVoucNo, 			SrDocType, 			DestiBU, 			RevCrNoteNo, 		RevDrNoteNo, 
		RevCrVoucNo, 		RevDrVoucNo, 		workflow_status, 	comments, 			autogen_flag, 
		voucher_remarks, 	etlcreateddatetime
    FROM stg.stg_sad_adjvoucher_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_sadadjvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_scdnaccdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_scdnaccdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_scdn_acc_dtl;

    UPDATE dwh.F_scdnaccdtl t
    SET
        account_code            = s.account_code,
        drcr_id                 = s.drcr_id,
        ref_doc_type            = s.ref_doc_type,
        ref_doc_no              = s.ref_doc_no,
        ref_doc_date            = s.ref_doc_date,
        ref_doc_amount          = s.ref_doc_amount,
        ordering_ou             = s.ordering_ou,
        tran_amount             = s.tran_amount,
        remarks                 = s.remarks,
        cost_center             = s.cost_center,
        base_amount             = s.base_amount,
        par_base_amount         = s.par_base_amount,
        createdby               = s.createdby,
        createddate             = s.createddate,
        modifiedby              = s.modifiedby,
        modifieddate            = s.modifieddate,
        usageid                 = s.usageid,
        own_tax_region          = s.own_tax_region,
        party_tax_region        = s.party_tax_region,
        decl_tax_region         = s.decl_tax_region,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_scdn_acc_dtl s
    WHERE 	t.tran_type 	= s.tran_type
    AND 	t.tran_ou 		= s.tran_ou
    AND 	t.tran_no 		= s.tran_no
    AND 	t.line_no 		= s.line_no
    AND 	t.stimestamp 	= s.stimestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_scdnaccdtl
    (
        tran_type, 			tran_ou, 			tran_no, 			line_no, 			stimestamp, 
		account_code, 		drcr_id, 			ref_doc_type, 		ref_doc_no, 		ref_doc_date, 
		ref_doc_amount, 	ordering_ou, 		tran_amount, 		remarks, 			cost_center, 
		base_amount, 		par_base_amount, 	createdby, 			createddate, 		modifiedby, 
		modifieddate, 		usageid, 			own_tax_region, 	party_tax_region, 	decl_tax_region, 
		etlactiveind, 		etljobname, 		envsourcecd, 		datasourcecd, 		etlcreatedatetime
    )

    SELECT
        s.tran_type, 			s.tran_ou, 			s.tran_no, 			s.line_no, 				s.stimestamp, 
		s.account_code, 		s.drcr_id, 			s.ref_doc_type, 	s.ref_doc_no, 			s.ref_doc_date, 
		s.ref_doc_amount, 		s.ordering_ou, 		s.tran_amount, 		s.remarks, 				s.cost_center, 
		s.base_amount, 			s.par_base_amount, 	s.createdby, 		s.createddate, 			s.modifiedby, 
		s.modifieddate, 		s.usageid, 			s.own_tax_region, 	s.party_tax_region, 	s.decl_tax_region, 
		1, 						p_etljobname, 		p_envsourcecd, 		p_datasourcecd, 		NOW()
    FROM stg.stg_scdn_acc_dtl s	
    LEFT JOIN dwh.F_scdnaccdtl t
    ON 		s.tran_type 	= t.tran_type
    AND 	s.tran_ou 		= t.tran_ou
    AND 	s.tran_no 		= t.tran_no
    AND 	s.line_no 		= t.line_no
    AND 	s.stimestamp 	= t.stimestamp
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_scdn_acc_dtl
    (
        tran_type, 			tran_ou, 			tran_no, 			line_no, 			stimestamp, 
		account_code, 		drcr_id, 			ref_doc_type, 		ref_doc_no, 		ref_doc_date, 
		ref_doc_amount, 	ordering_ou, 		tran_amount, 		remarks, 			cost_center, 
		analysis_code, 		subanalysis_code, 	base_amount, 		par_base_amount, 	createdby, 
		createddate, 		modifiedby, 		modifieddate, 		cfs_refdoc_ou, 		cfs_refdoc_no, 
		cfs_refdoc_type, 	usageid, 			Desti_OU, 			Desti_SAC, 			InterFBJVNO, 
		Desti_AC, 			Desti_ACCCode, 		Desti_ACCDescrip, 	Desti_CC, 			Desti_Comp, 
		Desti_FB, 			account_code_int, 	ifb_recon_jvno, 	own_tax_region, 	party_tax_region, 
		decl_tax_region, 	etlcreateddatetime
    )
    SELECT
        tran_type, 			tran_ou, 			tran_no, 			line_no, 			stimestamp, 
		account_code, 		drcr_id, 			ref_doc_type, 		ref_doc_no, 		ref_doc_date, 
		ref_doc_amount, 	ordering_ou, 		tran_amount, 		remarks, 			cost_center, 
		analysis_code, 		subanalysis_code, 	base_amount, 		par_base_amount, 	createdby, 
		createddate, 		modifiedby, 		modifieddate, 		cfs_refdoc_ou, 		cfs_refdoc_no, 
		cfs_refdoc_type, 	usageid, 			Desti_OU, 			Desti_SAC, 			InterFBJVNO, 
		Desti_AC, 			Desti_ACCCode, 		Desti_ACCDescrip, 	Desti_CC, 			Desti_Comp, 
		Desti_FB, 			account_code_int, 	ifb_recon_jvno, 	own_tax_region, 	party_tax_region, 
		decl_tax_region, 	etlcreateddatetime
    FROM stg.stg_scdn_acc_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_scdnaccdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_scdnappostingsdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_scdnappostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_scdn_ap_postings_dtl;

    UPDATE dwh.F_scdnappostingsdtl t
    SET
        line_no                  = s.line_no,
        company_code             = s.company_code,
        posting_status           = s.posting_status,
        posting_date             = s.posting_date,
        fb_id                    = s.fb_id,
        tran_date                = s.tran_date,
        account_type             = s.account_type,
        account_code             = s.account_code,
        drcr_id                  = s.drcr_id,
        tran_currency            = s.tran_currency,
        tran_amount              = s.tran_amount,
        exchange_rate            = s.exchange_rate,
        base_amount              = s.base_amount,
        par_exchange_rate        = s.par_exchange_rate,
        par_base_amount          = s.par_base_amount,
        cost_center              = s.cost_center,
        analysis_code            = s.analysis_code,
        subanalysis_code         = s.subanalysis_code,
        guid                     = s.guid,
        createdby                = s.createdby,
        createddate              = s.createddate,
        modifiedby               = s.modifiedby,
        modifieddate             = s.modifieddate,
        entry_date               = s.entry_date,
        auth_date                = s.auth_date,
        reftran_fbid             = s.reftran_fbid,
        reftran_no               = s.reftran_no,
        reftran_ou               = s.reftran_ou,
        ref_tran_type            = s.ref_tran_type,
        supp_code                = s.supp_code,
        source_comp              = s.source_comp,
        hdrremarks               = s.hdrremarks,
        mlremarks                = s.mlremarks,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_scdn_ap_postings_dtl s
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.posting_line_no = s.posting_line_no
    AND t.s_timestamp = s.timestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_scdnappostingsdtl
    (
        tran_type	, tran_ou			, tran_no			, posting_line_no	, s_timestamp, 
		line_no		, company_code		, posting_status	, posting_date		, fb_id, 
		tran_date	, account_type		, account_code		, drcr_id			, tran_currency, 
		tran_amount	, exchange_rate		, base_amount		, par_exchange_rate	, par_base_amount, 
		cost_center	, analysis_code		, subanalysis_code	, guid				, createdby, 
		createddate	, modifiedby		, modifieddate		, entry_date		, auth_date, 
		reftran_fbid, reftran_no		, reftran_ou		, ref_tran_type		, supp_code, 
		source_comp	, hdrremarks		, mlremarks			, 
		etlactiveind, etljobname		, envsourcecd		, datasourcecd		, etlcreatedatetime
    )

    SELECT
        s.tran_type		, s.tran_ou			, s.tran_no			, s.posting_line_no		, s.timestamp, 
		s.line_no		, s.company_code	, s.posting_status	, s.posting_date		, s.fb_id, 
		s.tran_date		, s.account_type	, s.account_code	, s.drcr_id				, s.tran_currency, 
		s.tran_amount	, s.exchange_rate	, s.base_amount		, s.par_exchange_rate	, s.par_base_amount, 
		s.cost_center	, s.analysis_code	, s.subanalysis_code, s.guid				, s.createdby, 
		s.createddate	, s.modifiedby		, s.modifieddate	, s.entry_date			, s.auth_date, 
		s.reftran_fbid	, s.reftran_no		, s.reftran_ou		, s.ref_tran_type		, s.supp_code, 
		s.source_comp	, s.hdrremarks		, s.mlremarks		, 
				1		, p_etljobname		, p_envsourcecd		, p_datasourcecd		, NOW()
    FROM stg.stg_scdn_ap_postings_dtl s
    LEFT JOIN dwh.F_scdnappostingsdtl t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.posting_line_no = t.posting_line_no
    AND s.timestamp = t.s_timestamp
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_scdn_ap_postings_dtl
    (
        tran_type		, tran_ou		, tran_no			, posting_line_no	, timestamp, 
		line_no			, company_code	, posting_status	, posting_date		, fb_id,
		tran_date		, account_type	, account_code		, drcr_id			, tran_currency, 
		tran_amount		, exchange_rate	, base_amount		, par_exchange_rate	, par_base_amount, 
		cost_center		, analysis_code	, subanalysis_code	, guid, createdby	, createddate, 
		modifiedby		, modifieddate	, entry_date		, auth_date			, item_code, 
		item_variant	, quantity		, reftran_fbid		, reftran_no		, reftran_ou, 
		ref_tran_type	, supp_code		, uom				, org_vat_base_amt	, cust_code	, 
		vat_line_no		, vatusageid	, source_comp		, hdrremarks		, mlremarks	, 
		item_tcd_type	, etlcreateddatetime
    )
    SELECT
	    tran_type		, tran_ou		, tran_no			, posting_line_no	, timestamp, 
		line_no			, company_code	, posting_status	, posting_date		, fb_id,
		tran_date		, account_type	, account_code		, drcr_id			, tran_currency, 
		tran_amount		, exchange_rate	, base_amount		, par_exchange_rate	, par_base_amount, 
		cost_center		, analysis_code	, subanalysis_code	, guid, createdby	, createddate, 
		modifiedby		, modifieddate	, entry_date		, auth_date			, item_code, 
		item_variant	, quantity		, reftran_fbid		, reftran_no		, reftran_ou, 
		ref_tran_type	, supp_code		, uom				, org_vat_base_amt	, cust_code	, 
		vat_line_no		, vatusageid	, source_comp		, hdrremarks		, mlremarks	, 
		item_tcd_type	, etlcreateddatetime
	FROM stg.stg_scdn_ap_postings_dtl;
    
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, 
								p_batchid,p_taskname, 'sp_ExceptionHandling', 
								p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_scdnappostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_scdndcnotehdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_scdndcnotehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_scdn_dcnote_hdr;

    UPDATE dwh.F_scdndcnotehdr t
    SET
        s_timestamp                  = s.timestamp,
        supp_code                    = s.supp_code,
        tran_status                  = s.tran_status,
        note_type                    = s.note_type,
        note_cat                     = s.note_cat,
        num_type                     = s.num_type,
        tran_date                    = s.tran_date,
        anchor_date                  = s.anchor_date,
        fb_id                        = s.fb_id,
        tran_currency                = s.tran_currency,
        exchange_rate                = s.exchange_rate,
        pay_term                     = s.pay_term,
        payterm_version              = s.payterm_version,
        elec_pay                     = s.elec_pay,
        pay_mode                     = s.pay_mode,
        pay_method                   = s.pay_method,
        pay_priority                 = s.pay_priority,
        payment_ou                   = s.payment_ou,
        supp_ou                      = s.supp_ou,
        supp_note_no                 = s.supp_note_no,
        supp_note_date               = s.supp_note_date,
        supp_note_amount             = s.supp_note_amount,
        s_comments                   = s.comments,
        tran_amount                  = s.tran_amount,
        par_exchange_rate            = s.par_exchange_rate,
        base_amount                  = s.base_amount,
        par_base_amount              = s.par_base_amount,
        rev_doc_no                   = s.rev_doc_no,
        rev_doc_ou                   = s.rev_doc_ou,
        rev_date                     = s.rev_date,
        ref_doc_no                   = s.ref_doc_no,
        ref_doc_ou                   = s.ref_doc_ou,
        rev_reason_code              = s.rev_reason_code,
        rev_remarks                  = s.rev_remarks,
        auth_date                    = s.auth_date,
        disc_comp_basis              = s.disc_comp_basis,
        discount_proportional        = s.discount_proportional,
        pre_round_off_amount         = s.pre_round_off_amount,
        rounded_off_amount           = s.rounded_off_amount,
        createdby                    = s.createdby,
        createddate                  = s.createddate,
        modifiedby                   = s.modifiedby,
        modifieddate                 = s.modifieddate,
        batch_id                     = s.batch_id,
        tcal_status                  = s.tcal_status,
        tcal_exclusive_amount        = s.tcal_exclusive_amount,
        tcal_total_amount            = s.tcal_total_amount,
        autogen_flag                 = s.autogen_flag,
        account_code                 = s.account_code,
        auto_adjust                  = s.auto_adjust,
        MAIL_SENT                    = s.MAIL_SENT,
        SupplierAddress              = s.SupplierAddress,
        ifb_flag                     = s.ifb_flag,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_scdn_dcnote_hdr s
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.ict_flag = s.ict_flag
    AND t.ifb_flag = s.ifb_flag;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_scdndcnotehdr
    (
        tran_type, tran_ou, tran_no, s_timestamp, supp_code, 
		tran_status, note_type, note_cat, num_type, tran_date, 
		anchor_date, fb_id, tran_currency, exchange_rate, pay_term, 
		payterm_version, elec_pay, pay_mode, pay_method, pay_priority, 
		payment_ou, supp_ou, supp_note_no, supp_note_date, supp_note_amount, 
		s_comments, tran_amount, par_exchange_rate, base_amount, par_base_amount, 
		rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, 
		rev_reason_code, rev_remarks, auth_date, disc_comp_basis, discount_proportional, 
		pre_round_off_amount, rounded_off_amount, createdby, createddate, modifiedby, 
		modifieddate, batch_id, tcal_status, tcal_exclusive_amount, tcal_total_amount, 
		autogen_flag, account_code, ibe_flag, auto_adjust, ict_flag, 
		MAIL_SENT, SupplierAddress, ifb_flag, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.tran_type, s.tran_ou, s.tran_no, s.timestamp, s.supp_code, 
		s.tran_status, s.note_type, s.note_cat, s.num_type, s.tran_date,
		s.anchor_date, s.fb_id, s.tran_currency, s.exchange_rate, s.pay_term, 
		s.payterm_version, s.elec_pay, s.pay_mode, s.pay_method, s.pay_priority, 
		s.payment_ou, s.supp_ou, s.supp_note_no, s.supp_note_date, s.supp_note_amount, 
		s.comments, s.tran_amount, s.par_exchange_rate, s.base_amount, s.par_base_amount, 
		s.rev_doc_no, s.rev_doc_ou, s.rev_date, s.ref_doc_no, s.ref_doc_ou, 
		s.rev_reason_code, s.rev_remarks, s.auth_date, s.disc_comp_basis, s.discount_proportional, 
		s.pre_round_off_amount, s.rounded_off_amount, s.createdby, s.createddate, s.modifiedby, 
		s.modifieddate, s.batch_id, s.tcal_status, s.tcal_exclusive_amount, s.tcal_total_amount, 
		s.autogen_flag, s.account_code, s.ibe_flag, s.auto_adjust, s.ict_flag, 
		s.MAIL_SENT, s.SupplierAddress, s.ifb_flag, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_scdn_dcnote_hdr s
    LEFT JOIN dwh.F_scdndcnotehdr t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.ict_flag = t.ict_flag
    AND s.ifb_flag = t.ifb_flag
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_scdn_dcnote_hdr
    (
        tran_type, tran_ou, tran_no, timestamp, supp_code, 
		tran_status, note_type, note_cat, num_type, tran_date, 
		anchor_date, fb_id, tran_currency, exchange_rate, pay_term, 
		payterm_version, elec_pay, pay_mode, pay_method, pay_priority, 
		payment_ou, supp_ou, supp_note_no, supp_note_date, supp_note_amount, 
		comments, tran_amount, par_exchange_rate, item_amount, tax_amount, 
		disc_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, 
		rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, 
		hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, 
		posting_status, disc_comp_basis, discount_proportional, comp_bp_code, bank_code, 
		lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, 
		partid_digits, refno_digits, supp_acct_in, supp_bp_ref, supp_bp_acc_no, 
		vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, 
		vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, 
		vat_amount, vat_incl_amount, pre_round_off_amount, rounded_off_amount, doc_status, 
		createdby, createddate, modifiedby, modifieddate, batch_id, 
		usage_id, tcal_status, tcal_exclusive_amount, tcal_total_amount, elec_flag, 
		supp_companycode, supp_comppttname, supp_suplbank, supp_suplbankname, supp_swiftid, 
		supp_ibanno, supp_lsvcontractid, supp_contractref, supp_lsvfromdate, supp_lsvtodate, 
		supp_contallowed, supp_contactperson, supp_bankclearno, suppbank_ptt_reference, autogen_flag, 
		account_code, ibe_flag, consistency_stamp, template_no, workflow_status, 
		project_ou, Project_code, afe_number, job_number, costcenter_hdr, 
		auto_adjust, ict_flag, ref_type, rev_flag, pdc_flag, 
		srdoctype, MAIL_SENT, own_taxregion, SupplierAddress, gen_from, 
		ifb_flag, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, timestamp, supp_code, 
		tran_status, note_type, note_cat, num_type, tran_date, 
		anchor_date, fb_id, tran_currency, exchange_rate, pay_term, 
		payterm_version, elec_pay, pay_mode, pay_method, pay_priority, 
		payment_ou, supp_ou, supp_note_no, supp_note_date, supp_note_amount, 
		comments, tran_amount, par_exchange_rate, item_amount, tax_amount, 
		disc_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, 
		rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, 
		hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, 
		posting_status, disc_comp_basis, discount_proportional, comp_bp_code, bank_code, 
		lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, 
		partid_digits, refno_digits, supp_acct_in, supp_bp_ref, supp_bp_acc_no, 
		vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, 
		vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, 
		vat_amount, vat_incl_amount, pre_round_off_amount, rounded_off_amount, doc_status, 
		createdby, createddate, modifiedby, modifieddate, batch_id, 
		usage_id, tcal_status, tcal_exclusive_amount, tcal_total_amount, elec_flag, 
		supp_companycode, supp_comppttname, supp_suplbank, supp_suplbankname, supp_swiftid, 
		supp_ibanno, supp_lsvcontractid, supp_contractref, supp_lsvfromdate, supp_lsvtodate, 
		supp_contallowed, supp_contactperson, supp_bankclearno, suppbank_ptt_reference, autogen_flag, 
		account_code, ibe_flag, consistency_stamp, template_no, workflow_status, 
		project_ou, Project_code, afe_number, job_number, costcenter_hdr, 
		auto_adjust, ict_flag, ref_type, rev_flag, pdc_flag, 
		srdoctype, MAIL_SENT, own_taxregion, SupplierAddress, gen_from, 
		ifb_flag, etlcreateddatetime
	FROM stg.stg_scdn_dcnote_hdr;
    
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;

END;
$$;


ALTER PROCEDURE dwh.usp_f_scdndcnotehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sdinappostingsdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sdinappostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sdin_ap_postings_dtl;

    UPDATE dwh.F_sdinappostingsdtl t
    SET
		account_key				 = COALESCE(ac.opcoa_key,-1),
		line_no                  = s.line_no,
        company_code             = s.company_code,
        posting_status           = s.posting_status,
        posting_date             = s.posting_date,
        fb_id                    = s.fb_id,
        tran_date                = s.tran_date,
        account_type             = s.account_type,
        account_code             = s.account_code,
        drcr_id                  = s.drcr_id,
        tran_currency            = s.tran_currency,
        tran_amount              = s.tran_amount,
        exchange_rate            = s.exchange_rate,
        base_amount              = s.base_amount,
        par_exchange_rate        = s.par_exchange_rate,
        par_base_amount          = s.par_base_amount,
        cost_center              = s.cost_center,
        analysis_code            = s.analysis_code,
        subanalysis_code         = s.subanalysis_code,
        guid                     = s.guid,
        entry_date               = s.entry_date,
        auth_date                = s.auth_date,
        item_code                = s.item_code,
        item_variant             = s.item_variant,
        quantity                 = s.quantity,
        reftran_fbid             = s.reftran_fbid,
        reftran_no               = s.reftran_no,
        reftran_ou               = s.reftran_ou,
        ref_tran_type            = s.ref_tran_type,
        supp_code                = s.supp_code,
        uom                      = s.uom,
        source_comp              = s.source_comp,
        hdrremarks               = s.hdrremarks,
        mlremarks                = s.mlremarks,
        roundoff_flag            = s.roundoff_flag,
        item_tcd_type            = s.item_tcd_type,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_sdin_ap_postings_dtl s
	LEFT JOIN dwh.d_operationalaccountDetail ac
	ON ac.account_code = s.account_code
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.posting_line_no = s.posting_line_no
    AND t.s_timestamp = s.timestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_sdinappostingsdtl
    (	account_key,
        tran_type, tran_ou, tran_no, posting_line_no, s_timestamp, 
		line_no, company_code, posting_status, posting_date, fb_id, 
		tran_date, account_type, account_code, drcr_id, tran_currency, 
		tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, 
		cost_center, analysis_code, subanalysis_code, guid, entry_date, 
		auth_date, item_code, item_variant, quantity, reftran_fbid, 
		reftran_no, reftran_ou, ref_tran_type, supp_code, uom, 
		source_comp, hdrremarks, mlremarks, roundoff_flag, item_tcd_type, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(ac.opcoa_key,-1),
        s.tran_type, s.tran_ou, s.tran_no, s.posting_line_no, s.timestamp, 
		s.line_no, s.company_code, s.posting_status, s.posting_date, s.fb_id, 
		s.tran_date, s.account_type, s.account_code, s.drcr_id, s.tran_currency, 
		s.tran_amount, s.exchange_rate, s.base_amount, s.par_exchange_rate, s.par_base_amount, 
		s.cost_center, s.analysis_code, s.subanalysis_code, s.guid, s.entry_date, 
		s.auth_date, s.item_code, s.item_variant, s.quantity, s.reftran_fbid, 
		s.reftran_no, s.reftran_ou, s.ref_tran_type, s.supp_code, s.uom, 
		s.source_comp, s.hdrremarks, s.mlremarks, s.roundoff_flag, s.item_tcd_type, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()	
    FROM stg.stg_sdin_ap_postings_dtl s
	LEFT JOIN dwh.d_operationalaccountDetail ac
	ON ac.account_code = s.account_code
    LEFT JOIN dwh.F_sdinappostingsdtl t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.posting_line_no = t.posting_line_no
    AND s.timestamp = t.s_timestamp
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sdin_ap_postings_dtl
    (
        tran_type, tran_ou, tran_no, posting_line_no, timestamp, 
		line_no, company_code, posting_status, posting_date, fb_id, 
		tran_date, account_type, account_code, drcr_id, tran_currency, 
		tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, 
		cost_center, analysis_code, subanalysis_code, guid, entry_date, 
		auth_date, item_code, item_variant, quantity, reftran_fbid, 
		reftran_no, reftran_ou, ref_tran_type, supp_code, uom, 
		org_vat_base_amt, vat_line_no, createdby, createddate, modifiedby, 
		modifieddate, vatusageid, source_comp, hdrremarks, mlremarks, 
		roundoff_flag, item_tcd_type, etlcreateddatetime
    )
    SELECT
	    tran_type, tran_ou, tran_no, posting_line_no, timestamp, 
		line_no, company_code, posting_status, posting_date, fb_id, 
		tran_date, account_type, account_code, drcr_id, tran_currency, 
		tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, 
		cost_center, analysis_code, subanalysis_code, guid, entry_date, 
		auth_date, item_code, item_variant, quantity, reftran_fbid, 
		reftran_no, reftran_ou, ref_tran_type, supp_code, uom, 
		org_vat_base_amt, vat_line_no, createdby, createddate, modifiedby, 
		modifieddate, vatusageid, source_comp, hdrremarks, mlremarks, 
		roundoff_flag, item_tcd_type, etlcreateddatetime
	FROM stg.stg_sdin_ap_postings_dtl;
    
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;

END;
$$;


ALTER PROCEDURE dwh.usp_f_sdinappostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sdinexpensedtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sdinexpensedtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sdin_expense_dtl;

    UPDATE dwh.F_sdinexpensedtl t
    SET
		account_key				 = oad.opcoa_key,
		uom_key					 = um.uom_key,
        expense                  = s.expense,
        usage                    = s.usage,
        uom                      = s.uom,
        item_qty                 = s.item_qty,
        item_rate                = s.item_rate,
        rate_per                 = s.rate_per,
        item_amount              = s.item_amount,
        remarks                  = s.remarks,
        cost_center              = s.cost_center,
        base_value               = s.base_value,
        accountcode              = s.accountcode,
        destou                   = s.destou,
        visible_line_no          = s.visible_line_no,
        retentionml              = s.retentionml,
        holdml                   = s.holdml,
        trnsfr_inv_no            = s.trnsfr_inv_no,
        trnsfr_inv_date          = s.trnsfr_inv_date,
        trnsfr_inv_ou            = s.trnsfr_inv_ou,
        draft_bill_lineno        = s.draft_bill_lineno,
        draft_bill_no            = s.draft_bill_no,
        draft_bill_ou            = s.draft_bill_ou,
        s_location               = s.location,
        region                   = s.region,
        partytype                = s.partytype,
        line_of_business         = s.line_of_business,
        department               = s.department,
        service_type             = s.service_type,
        order_type               = s.order_type,
        vehicle_type             = s.vehicle_type,
        activity_type            = s.activity_type,
        nature                   = s.nature,
        own_tax_region           = s.own_tax_region,
        party_tax_region         = s.party_tax_region,
        decl_tax_region          = s.decl_tax_region,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_sdin_expense_dtl s
	LEFT JOIN dwh.d_uom um
	ON um.mas_uomcode = s.uom
	LEFT JOIN dwh.d_operationalaccountdetail oad
	ON oad.account_code= s.accountcode
	WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.line_no = s.line_no
    AND t.s_timestamp = s.timestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_sdinexpensedtl
    (
        tran_type, tran_ou, tran_no, line_no, s_timestamp, 
		expense, usage, uom, item_qty, item_rate, 
		rate_per, item_amount, remarks, cost_center, base_value, 
		accountcode, destou, visible_line_no, retentionml, holdml, 
		trnsfr_inv_no, trnsfr_inv_date, trnsfr_inv_ou, draft_bill_lineno, draft_bill_no, 
		draft_bill_ou, s_location, region, partytype, line_of_business, 
		department, service_type, order_type, vehicle_type, activity_type, 
		nature, own_tax_region, party_tax_region, decl_tax_region, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.tran_type, s.tran_ou, s.tran_no, s.line_no, s.timestamp, 
		s.expense, s.usage, s.uom, s.item_qty, s.item_rate, 
		s.rate_per, s.item_amount, s.remarks, s.cost_center, s.base_value, 
		s.accountcode, s.destou, s.visible_line_no, s.retentionml, s.holdml, 
		s.trnsfr_inv_no, s.trnsfr_inv_date, s.trnsfr_inv_ou, s.draft_bill_lineno, s.draft_bill_no, 
		s.draft_bill_ou, s.location, s.region, s.partytype, s.line_of_business, 
		s.department, s.service_type, s.order_type, s.vehicle_type, s.activity_type, 
		s.nature, s.own_tax_region, s.party_tax_region, s.decl_tax_region, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_sdin_expense_dtl s
	LEFT JOIN dwh.d_uom um
	ON um.mas_uomcode = s.uom
	LEFT JOIN dwh.d_operationalaccountdetail oad
	ON oad.account_code= s.accountcode
    LEFT JOIN dwh.F_sdinexpensedtl t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.line_no = t.line_no
    AND s.timestamp = t.s_timestamp
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sdin_expense_dtl
    (
        tran_type, tran_ou, tran_no, line_no, timestamp, expense, usage, uom, item_qty, item_rate, rate_per, item_amount, remarks, cost_center, analysis_code, subanalysis_code, base_value, createdby, createddate, modifiedby, modifieddate, accountcode, destou, destfb, destusageid, interfbjvno, accountcode_destusage, accountcode_interfb, analysis_code_dest, sub_analysis_code_dest, costcenter_dest, analysis_code_interfb, sub_analysis_code_interfb, costcenter_interfb, accountcode_sdin, visible_line_no, Dest_comp, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, retentionml, holdml, trnsfr_invoice_no, trnsfr_inv_no, trnsfr_inv_date, trnsfr_inv_ou, draft_bill_lineno, draft_bill_no, trnsfr_bill_date, draft_bill_ou, draft_bill_line_no, trnsfr_bill_lineno, location, region, partytype, partycode, line_of_business, department, product, equip_type, service_type, order_type, vehicle_type, activity_type, party_group, nature, currency, Owner_type, tariff_type, reimburs, ifb_recon_jvno, own_tax_region, party_tax_region, decl_tax_region, subservice_type, leg_behaviour, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, line_no, timestamp, expense, usage, uom, item_qty, item_rate, rate_per, item_amount, remarks, cost_center, analysis_code, subanalysis_code, base_value, createdby, createddate, modifiedby, modifieddate, accountcode, destou, destfb, destusageid, interfbjvno, accountcode_destusage, accountcode_interfb, analysis_code_dest, sub_analysis_code_dest, costcenter_dest, analysis_code_interfb, sub_analysis_code_interfb, costcenter_interfb, accountcode_sdin, visible_line_no, Dest_comp, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, retentionml, holdml, trnsfr_invoice_no, trnsfr_inv_no, trnsfr_inv_date, trnsfr_inv_ou, draft_bill_lineno, draft_bill_no, trnsfr_bill_date, draft_bill_ou, draft_bill_line_no, trnsfr_bill_lineno, location, region, partytype, partycode, line_of_business, department, product, equip_type, service_type, order_type, vehicle_type, activity_type, party_group, nature, currency, Owner_type, tariff_type, reimburs, ifb_recon_jvno, own_tax_region, party_tax_region, decl_tax_region, subservice_type, leg_behaviour, etlcreateddatetime
    FROM stg.stg_sdin_expense_dtl;
    
    END IF;
/*
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	  */
END;
$$;


ALTER PROCEDURE dwh.usp_f_sdinexpensedtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sdininvoicehdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sdininvoicehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sdin_invoice_hdr;

    UPDATE dwh.F_sdininvoicehdr t
    SET
        tran_status                  = s.tran_status,
        tran_date                    = s.tran_date,
        anchor_date                  = s.anchor_date,
        fb_id                        = s.fb_id,
        auto_adjust                  = s.auto_adjust,
        tran_currency                = s.tran_currency,
        exchange_rate                = s.exchange_rate,
        pay_term                     = s.pay_term,
        payterm_version              = s.payterm_version,
        elec_pay                     = s.elec_pay,
        pay_method                   = s.pay_method,
        pay_to_supp                  = s.pay_to_supp,
        pay_mode                     = s.pay_mode,
        pay_priority                 = s.pay_priority,
        payment_ou                   = s.payment_ou,
        supp_code                    = s.supp_code,
        supp_invoice_no              = s.supp_invoice_no,
        supp_invoice_date            = s.supp_invoice_date,
        supp_invoice_amount          = s.supp_invoice_amount,
        supp_ou                      = s.supp_ou,
        comments                     = s.comments,
        tran_amount                  = s.tran_amount,
        par_exchange_rate            = s.par_exchange_rate,
        item_amount                  = s.item_amount,
        base_amount                  = s.base_amount,
        par_base_amount              = s.par_base_amount,
        rev_doc_no                   = s.rev_doc_no,
        rev_doc_ou                   = s.rev_doc_ou,
        rev_date                     = s.rev_date,
        ref_doc_no                   = s.ref_doc_no,
        ref_doc_ou                   = s.ref_doc_ou,
        rev_reason_code              = s.rev_reason_code,
        rev_remarks                  = s.rev_remarks,
        hld_reason_code              = s.hld_reason_code,
        hld_remarks                  = s.hld_remarks,
        auth_date                    = s.auth_date,
        disc_comp_basis              = s.disc_comp_basis,
        discount_proportional        = s.discount_proportional,
        cap_non_ded_charge           = s.cap_non_ded_charge,
        pre_round_off_amount         = s.pre_round_off_amount,
        rounded_off_amount           = s.rounded_off_amount,
        batch_id                     = s.batch_id,
        createdby                    = s.createdby,
        createddate                  = s.createddate,
        modifiedby                   = s.modifiedby,
        modifieddate                 = s.modifieddate,
        tcal_status                  = s.tcal_status,
        total_tcal_amount            = s.total_tcal_amount,
        tcal_exclusive_amt           = s.tcal_exclusive_amt,
        account_code                 = s.account_code,
        ibe_flag                     = s.ibe_flag,
        autogen_flag                 = s.autogen_flag,
        autogen_comp_id              = s.autogen_comp_id,
        prev_trnamt                  = s.prev_trnamt,
        afe_number                   = s.afe_number,
        cash_code                    = s.cash_code,
        Corr_roff                    = s.Corr_roff,
        Dervied_roff                 = s.Dervied_roff,
        num_series                   = s.num_series,
        supplierAddress              = s.supplierAddress,
        trnsfr_bill_date             = s.trnsfr_bill_date,
        rcti_flag                    = s.rcti_flag,
        own_taxregion                = s.own_taxregion,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_sdin_invoice_hdr s
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.s_timestamp = s.timestamp
    AND t.payment_type = s.payment_type
    AND t.ict_flag = s.ict_flag
    AND t.Ales_Flag = s.Ales_Flag
    AND t.lgt_invoice = s.lgt_invoice
    AND t.MAIL_SENT = s.MAIL_SENT
    AND t.allow_auto_cap = s.allow_auto_cap;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_sdininvoicehdr
    (
        tran_type, tran_ou, tran_no, s_timestamp, tran_status, 
		tran_date, anchor_date, fb_id, auto_adjust, tran_currency, 
		exchange_rate, pay_term, payterm_version, elec_pay, pay_method, 
		pay_to_supp, pay_mode, pay_priority, payment_ou, supp_code, 
		supp_invoice_no, supp_invoice_date, supp_invoice_amount, supp_ou, comments, 
		tran_amount, par_exchange_rate, item_amount, base_amount, par_base_amount, 
		rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, 
		rev_reason_code, rev_remarks, hld_reason_code, hld_remarks, auth_date, 
		disc_comp_basis, discount_proportional, cap_non_ded_charge, pre_round_off_amount, rounded_off_amount, 
		batch_id, createdby, createddate, modifiedby, modifieddate, 
		tcal_status, total_tcal_amount, tcal_exclusive_amt, account_code, ibe_flag, 
		autogen_flag, autogen_comp_id, prev_trnamt, afe_number, cash_code, 
		payment_type, Corr_roff, Dervied_roff, ict_flag, num_series, 
		Ales_Flag, supplierAddress, lgt_invoice, trnsfr_bill_date, rcti_flag, 
		MAIL_SENT, own_taxregion, allow_auto_cap, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.tran_type, s.tran_ou, s.tran_no, s.timestamp, s.tran_status, 
		s.tran_date, s.anchor_date, s.fb_id, s.auto_adjust, s.tran_currency, 
		s.exchange_rate, s.pay_term, s.payterm_version, s.elec_pay, s.pay_method, 
		s.pay_to_supp, s.pay_mode, s.pay_priority, s.payment_ou, s.supp_code, 
		s.supp_invoice_no, s.supp_invoice_date, s.supp_invoice_amount, s.supp_ou, s.comments, 
		s.tran_amount, s.par_exchange_rate, s.item_amount, s.base_amount, s.par_base_amount, 
		s.rev_doc_no, s.rev_doc_ou, s.rev_date, s.ref_doc_no, s.ref_doc_ou, 
		s.rev_reason_code, s.rev_remarks, s.hld_reason_code, s.hld_remarks, s.auth_date, 
		s.disc_comp_basis, s.discount_proportional, s.cap_non_ded_charge, s.pre_round_off_amount, s.rounded_off_amount, 
		s.batch_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, 
		s.tcal_status, s.total_tcal_amount, s.tcal_exclusive_amt, s.account_code, s.ibe_flag, 
		s.autogen_flag, s.autogen_comp_id, s.prev_trnamt, s.afe_number, s.cash_code, 
		s.payment_type, s.Corr_roff, s.Dervied_roff, s.ict_flag, s.num_series, 
		s.Ales_Flag, s.supplierAddress, s.lgt_invoice, s.trnsfr_bill_date, s.rcti_flag, 
		s.MAIL_SENT, s.own_taxregion, s.allow_auto_cap, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_sdin_invoice_hdr s
    LEFT JOIN dwh.F_sdininvoicehdr t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.timestamp = t.s_timestamp
    AND s.payment_type = t.payment_type
    AND s.ict_flag = t.ict_flag
    AND s.Ales_Flag = t.Ales_Flag
    AND s.lgt_invoice = t.lgt_invoice
    AND s.MAIL_SENT = t.MAIL_SENT
    AND s.allow_auto_cap = t.allow_auto_cap
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sdin_invoice_hdr
    (
        tran_type, tran_ou, tran_no, timestamp, tran_status, tran_date, anchor_date, fb_id, auto_adjust, tran_currency, exchange_rate, pay_term, payterm_version, elec_pay, pay_method, pay_to_supp, pay_mode, pay_priority, payment_ou, supp_code, supp_invoice_no, supp_invoice_date, supp_invoice_amount, supp_ou, comments, address1, address2, address3, city, state, country, zip, phone, telex, fax, pager, mobile, mailstop, email, url, contact, tran_amount, par_exchange_rate, item_amount, tax_amount, disc_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, posting_status, disc_comp_basis, discount_proportional, comp_bp_code, bank_code, lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, partid_digits, refno_digits, supp_acct_in, supp_bp_ref, supp_bp_acc_no, vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, vat_amount, vat_incl_amount, pre_round_off_amount, rounded_off_amount, batch_id, doc_status, createdby, createddate, modifiedby, modifieddate, tcal_status, total_tcal_amount, tcal_exclusive_amt, supp_companycode, supp_comppttname, supp_suplbank, supp_suplbankname, supp_swiftid, supp_ibanno, supp_lsvcontractid, supp_contractref, supp_lsvfromdate, supp_lsvtodate, supp_contallowed, supp_contactperson, supp_bankclearno, account_code, proposal_no, ibe_flag, BillOfLadingNo, BookingNo, MasterBillOfLadingNo, autogen_flag, autogen_comp_id, consistency_stamp, workflow_status, prev_trnamt, LC_number, LC_refid, project_ou, Project_code, afe_number, job_number, costcenter_hdr, inter_compflag, invoice_num_IMS, INVOICE_ID_IMS, VENDOR_ID_IMS, VENDOR_SITE_ID_IMS, ACCTS_PAY_CODE_COMBINATION_ID_IMS, DOC_SEQUENCE_ID_IMS, DOC_SEQUENCE_VALUE_IMS, cash_code, payment_type, workflow_error, Corr_roff, Dervied_roff, hold_amt, holdaccount, retaccount, retamount, holdpayterm, retpayterm, template_no, ict_flag, num_series, Ales_Flag, supplierAddress, lgt_invoice, trnsfr_bill_no, trnsfr_bill_date, rcti_flag, trnsfr_bill_ou, MAIL_SENT, own_taxregion, allow_auto_cap, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, timestamp, tran_status, tran_date, anchor_date, fb_id, auto_adjust, tran_currency, exchange_rate, pay_term, payterm_version, elec_pay, pay_method, pay_to_supp, pay_mode, pay_priority, payment_ou, supp_code, supp_invoice_no, supp_invoice_date, supp_invoice_amount, supp_ou, comments, address1, address2, address3, city, state, country, zip, phone, telex, fax, pager, mobile, mailstop, email, url, contact, tran_amount, par_exchange_rate, item_amount, tax_amount, disc_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, posting_status, disc_comp_basis, discount_proportional, comp_bp_code, bank_code, lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, partid_digits, refno_digits, supp_acct_in, supp_bp_ref, supp_bp_acc_no, vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, vat_amount, vat_incl_amount, pre_round_off_amount, rounded_off_amount, batch_id, doc_status, createdby, createddate, modifiedby, modifieddate, tcal_status, total_tcal_amount, tcal_exclusive_amt, supp_companycode, supp_comppttname, supp_suplbank, supp_suplbankname, supp_swiftid, supp_ibanno, supp_lsvcontractid, supp_contractref, supp_lsvfromdate, supp_lsvtodate, supp_contallowed, supp_contactperson, supp_bankclearno, account_code, proposal_no, ibe_flag, BillOfLadingNo, BookingNo, MasterBillOfLadingNo, autogen_flag, autogen_comp_id, consistency_stamp, workflow_status, prev_trnamt, LC_number, LC_refid, project_ou, Project_code, afe_number, job_number, costcenter_hdr, inter_compflag, invoice_num_IMS, INVOICE_ID_IMS, VENDOR_ID_IMS, VENDOR_SITE_ID_IMS, ACCTS_PAY_CODE_COMBINATION_ID_IMS, DOC_SEQUENCE_ID_IMS, DOC_SEQUENCE_VALUE_IMS, cash_code, payment_type, workflow_error, Corr_roff, Dervied_roff, hold_amt, holdaccount, retaccount, retamount, holdpayterm, retpayterm, template_no, ict_flag, num_series, Ales_Flag, supplierAddress, lgt_invoice, trnsfr_bill_no, trnsfr_bill_date, rcti_flag, trnsfr_bill_ou, MAIL_SENT, own_taxregion, allow_auto_cap, etlcreateddatetime
    FROM stg.stg_sdin_invoice_hdr;
    
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	  
END;
$$;


ALTER PROCEDURE dwh.usp_f_sdininvoicehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sidochdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sidochdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_si_doc_hdr;

    UPDATE dwh.F_sidochdr t
    SET
		sidochdr_vendor_key			 = COALESCE(v.vendor_key,-1),
		sidochdr_currency_key		 = COALESCE(cu.curr_key,-1),
        transfer_status              = s.transfer_status,
        bankcashcode                 = s.bankcashcode,
        batch_id                     = s.batch_id,
        vat_incorporate_flag         = s.vat_incorporate_flag,
        tran_date                    = s.tran_date,
        lo_id                        = s.lo_id,
        fb_id                        = s.fb_id,
        tran_currency                = s.tran_currency,
        supplier_code                = s.supplier_code,
        pay_term                     = s.pay_term,
        payterm_version              = s.payterm_version,
        tran_amount                  = s.tran_amount,
        exchange_rate                = s.exchange_rate,
        base_amount                  = s.base_amount,
        par_exchange_rate            = s.par_exchange_rate,
        par_base_amount              = s.par_base_amount,
        doc_status                   = s.doc_status,
        reversed_docno               = s.reversed_docno,
        reversal_date                = s.reversal_date,
        checkseries_no               = s.checkseries_no,
        check_no                     = s.check_no,
        bank_code                    = s.bank_code,
        paid_status                  = s.paid_status,
        vat_applicable               = s.vat_applicable,
        average_vat_rate             = s.average_vat_rate,
        discount_proportional        = s.discount_proportional,
        discount_amount              = s.discount_amount,
        discount_availed             = s.discount_availed,
        penalty_amount               = s.penalty_amount,
        paid_amount                  = s.paid_amount,
        requested_amount             = s.requested_amount,
        adjusted_amount              = s.adjusted_amount,
        supp_ou                      = s.supp_ou,
        reversed_docou               = s.reversed_docou,
        supp_name                    = s.supp_name,
        supp_inv_no                  = s.supp_inv_no,
        remarks                      = s.remarks,
        createdby                    = s.createdby,
        createddate                  = s.createddate,
        modifiedby                   = s.modifiedby,
        modifieddate                 = s.modifieddate,
        cap_amount                   = s.cap_amount,
        supp_invoice_date            = s.supp_invoice_date,
        component_id                 = s.component_id,
        ibe_flag                     = s.ibe_flag,
        pay_to_supp                  = s.pay_to_supp,
        pay_mode                     = s.pay_mode,
        pay_priority                 = s.pay_priority,
        apply_sr                     = s.apply_sr,
        pay_method                   = s.pay_method,
        pdcflag                      = s.pdcflag,
        report_flag                  = s.report_flag,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_si_doc_hdr s
	LEFT JOIN dwh.d_vendor v
	ON v.vendor_id = s.supplier_code
	and v.vendor_ou = s.tran_ou
	LEFT JOIN dwh.d_currency cu
	ON cu.iso_curr_code = s.tran_currency
	WHERE t.tran_ou = s.tran_ou
    AND t.tran_type = s.tran_type
    AND t.tran_no = s.tran_no
    AND t.s_timestamp = s.timestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_sidochdr
    (	sidochdr_vendor_key, sidochdr_currency_key,
        tran_ou, tran_type, tran_no, s_timestamp, transfer_status, 
		bankcashcode, batch_id, vat_incorporate_flag, tran_date, lo_id, 
		fb_id, tran_currency, supplier_code, pay_term, payterm_version, 
		tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, 
		doc_status, reversed_docno, reversal_date, checkseries_no, check_no, 
		bank_code, paid_status, vat_applicable, average_vat_rate, discount_proportional, 
		discount_amount, discount_availed, penalty_amount, paid_amount, requested_amount, 
		adjusted_amount, supp_ou, reversed_docou, supp_name, supp_inv_no, 
		remarks, createdby, createddate, modifiedby, modifieddate, 
		cap_amount, supp_invoice_date, component_id, ibe_flag, pay_to_supp, 
		pay_mode, pay_priority, apply_sr, pay_method, pdcflag, 
		report_flag, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(v.vendor_key,-1), COALESCE(cu.curr_key,-1),
        s.tran_ou, s.tran_type, s.tran_no, s.timestamp, s.transfer_status, 
		s.bankcashcode, s.batch_id, s.vat_incorporate_flag, s.tran_date, s.lo_id, 
		s.fb_id, s.tran_currency, s.supplier_code, s.pay_term, s.payterm_version, 
		s.tran_amount, s.exchange_rate, s.base_amount, s.par_exchange_rate, s.par_base_amount,
		s.doc_status, s.reversed_docno, s.reversal_date, s.checkseries_no, s.check_no, 
		s.bank_code, s.paid_status, s.vat_applicable, s.average_vat_rate, s.discount_proportional, 
		s.discount_amount, s.discount_availed, s.penalty_amount, s.paid_amount, s.requested_amount, 
		s.adjusted_amount, s.supp_ou, s.reversed_docou, s.supp_name, s.supp_inv_no, 
		s.remarks, s.createdby, s.createddate, s.modifiedby, s.modifieddate, 
		s.cap_amount, s.supp_invoice_date, s.component_id, s.ibe_flag, s.pay_to_supp, 
		s.pay_mode, s.pay_priority, s.apply_sr, s.pay_method, s.pdcflag, 
		s.report_flag, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_si_doc_hdr s
	LEFT JOIN dwh.d_vendor v
	ON v.vendor_id = s.supplier_code
	and v.vendor_ou = s.tran_ou
	LEFT JOIN dwh.d_currency cu
	ON cu.iso_curr_code = s.tran_currency
    LEFT JOIN dwh.F_sidochdr t
    ON s.tran_ou = t.tran_ou
    AND s.tran_type = t.tran_type
    AND s.tran_no = t.tran_no
    AND s.timestamp = t.s_timestamp
    WHERE t.tran_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_si_doc_hdr
    (
        tran_ou, tran_type, tran_no, timestamp, transfer_status, bankcashcode, batch_id, vat_incorporate_flag, tran_date, lo_id, fb_id, tran_currency, supplier_code, pay_term, payterm_version, tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, doc_status, reversed_docno, reversal_date, checkseries_no, check_no, bank_code, paid_status, vat_applicable, average_vat_rate, discount_proportional, discount_amount, discount_availed, penalty_amount, paid_amount, requested_amount, adjusted_amount, supp_ou, reversed_docou, supp_name, supp_inv_no, remarks, intbanktran_status, createdby, createddate, modifiedby, modifieddate, cap_amount, supp_invoice_date, component_id, ibe_flag, pay_to_supp, pay_mode, pay_priority, apply_sr, pay_method, lcnumber, refid, pdcflag, tr_amount, tr_redeemed_amt, tr_duedate, project_ou, Project_code, recon_flag, report_flag, etlcreateddatetime
    )
    SELECT
        tran_ou, tran_type, tran_no, timestamp, transfer_status, bankcashcode, batch_id, vat_incorporate_flag, tran_date, lo_id, fb_id, tran_currency, supplier_code, pay_term, payterm_version, tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, doc_status, reversed_docno, reversal_date, checkseries_no, check_no, bank_code, paid_status, vat_applicable, average_vat_rate, discount_proportional, discount_amount, discount_availed, penalty_amount, paid_amount, requested_amount, adjusted_amount, supp_ou, reversed_docou, supp_name, supp_inv_no, remarks, intbanktran_status, createdby, createddate, modifiedby, modifieddate, cap_amount, supp_invoice_date, component_id, ibe_flag, pay_to_supp, pay_mode, pay_priority, apply_sr, pay_method, lcnumber, refid, pdcflag, tr_amount, tr_redeemed_amt, tr_duedate, project_ou, Project_code, recon_flag, report_flag, etlcreateddatetime
    FROM stg.stg_si_doc_hdr;
    
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	  
END;
$$;


ALTER PROCEDURE dwh.usp_f_sidochdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_silinedtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_silinedtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
	p_depsource VARCHAR(100);

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
	

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_si_line_dtl;

    UPDATE dwh.f_silinedtl t
    SET
        lo_id                     = s.lo_id,
        ref_doc_type              = s.ref_doc_type,
        ref_doc_ou                = s.ref_doc_ou,
        ref_doc_term_no           = s.ref_doc_term_no,
        item_tcd_code             = s.item_tcd_code,
        item_tcd_var              = s.item_tcd_var,
        uom                       = s.uom,
        item_qty                  = s.item_qty,
        unit_price                = s.unit_price,
        rate_per                  = s.rate_per,
        item_amount               = s.item_amount,
        tax_amount                = s.tax_amount,
        disc_amount               = s.disc_amount,
        line_amount               = s.line_amount,
        capitalized_amount        = s.capitalized_amount,
        proposal_no               = s.proposal_no,
        cap_doc_flag              = s.cap_doc_flag,
        batch_id                  = s.batch_id,
        usage_id                  = s.usage_id,
        pending_cap_amount        = s.pending_cap_amount,
        account_code              = s.account_code,
        milestone_code            = s.milestone_code,
        report_flag               = s.report_flag,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_si_line_dtl s
    WHERE t.tran_type =		s.tran_type
    AND t.tran_ou	  =		s.tran_ou
    AND t.tran_no	  =		s.tran_no
    AND t.line_no	  =		s.line_no
    AND t.row_type	  =		s.row_type;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_silinedtl
    (
       tran_type, tran_ou, tran_no, line_no, row_type, lo_id, ref_doc_type, ref_doc_ou, ref_doc_no, ref_doc_term_no, 
		item_tcd_code, item_tcd_var, uom, item_qty, unit_price, rate_per, item_amount, tax_amount, disc_amount, line_amount, 
		capitalized_amount, proposal_no, cap_doc_flag, batch_id, usage_id, pending_cap_amount, account_code, milestone_code, 
		report_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
    s.tran_type, s.tran_ou, s.tran_no, s.line_no, s.row_type, s.lo_id, s.ref_doc_type, s.ref_doc_ou, s.ref_doc_no, s.ref_doc_term_no, 
		s.item_tcd_code, s.item_tcd_var, s.uom, s.item_qty, s.unit_price, s.rate_per, s.item_amount, s.tax_amount, s.disc_amount, s.line_amount, 
		s.capitalized_amount, s.proposal_no, s.cap_doc_flag, s.batch_id, s.usage_id, s.pending_cap_amount, s.account_code, s.milestone_code, 
		s.report_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_si_line_dtl s
    LEFT JOIN dwh.f_silinedtl t
    ON s.tran_type	  =		t.tran_type
    AND s.tran_ou     =		t.tran_ou
    AND s.tran_no     =     t.tran_no
    AND s.line_no     =		t.line_no
    AND s.row_type	  =		t.row_type
	AND s.ref_doc_no =      t.ref_doc_no
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_si_line_dtl
    (
        tran_type, tran_ou, tran_no, line_no, row_type, lo_id, ref_doc_type, ref_doc_ou, ref_doc_no, ref_doc_term_no, item_tcd_code, item_tcd_var, uom, item_qty, unit_price, rate_per, item_amount, tax_amount, disc_amount, line_amount, capitalized_amount, proposal_no, cap_doc_flag, batch_id, usage_id, createdby, createddate, modifiedby, modifieddate, pending_cap_amount, account_code, milestone_code, report_flag, writeoff_amt, writeoff_remarks, writeoff_JVno, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, line_no, row_type, lo_id, ref_doc_type, ref_doc_ou, ref_doc_no, ref_doc_term_no, item_tcd_code, item_tcd_var, uom, item_qty, unit_price, rate_per, item_amount, tax_amount, disc_amount, line_amount, capitalized_amount, proposal_no, cap_doc_flag, batch_id, usage_id, createdby, createddate, modifiedby, modifieddate, pending_cap_amount, account_code, milestone_code, report_flag, writeoff_amt, writeoff_remarks, writeoff_JVno, etlcreateddatetime
    FROM stg.stg_si_line_dtl;
    END IF;
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_silinedtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sinappostingsdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sinappostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
	p_depsource VARCHAR(100);

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sin_ap_postings_dtl;

    UPDATE dwh.f_sinappostingsdtl t
    SET
        line_no                  = s.line_no,
        company_code             = s.company_code,
        posting_status           = s.posting_status,
        posting_date             = s.posting_date,
        fb_id                    = s.fb_id,
        tran_date                = s.tran_date,
        account_type             = s.account_type,
        account_code             = s.account_code,
        drcr_id                  = s.drcr_id,
        tran_currency            = s.tran_currency,
        tran_amount              = s.tran_amount,
        exchange_rate            = s.exchange_rate,
        base_amount              = s.base_amount,
        par_exchange_rate        = s.par_exchange_rate,
        par_base_amount          = s.par_base_amount,
        cost_center              = s.cost_center,
        analysis_code            = s.analysis_code,
        subanalysis_code         = s.subanalysis_code,
        guid                     = s.guid,
        item_code                = s.item_code,
        item_variant             = s.item_variant,
        quantity                 = s.quantity,
        reftran_fbid             = s.reftran_fbid,
        reftran_no               = s.reftran_no,
        reftran_ou               = s.reftran_ou,
        ref_tran_type            = s.ref_tran_type,
        supp_code                = s.supp_code,
        uom                      = s.uom,
        source_comp              = s.source_comp,
        hdrremarks               = s.hdrremarks,
        mlremarks                = s.mlremarks,
        roundoff_flag            = s.roundoff_flag,
        item_tcd_type            = s.item_tcd_type,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_sin_ap_postings_dtl s
    WHERE t.tran_type =		s.tran_type
    AND t.tran_ou	  =		s.tran_ou
    AND t.tran_no	  =		s.tran_no
    AND t.posting_line_no = s.posting_line_no
    AND t.a_timestamp	  =		s.timestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_sinappostingsdtl
    (
        tran_type, tran_ou, tran_no, posting_line_no, a_timestamp, line_no, company_code, posting_status, posting_date, 
		fb_id, tran_date, account_type, account_code, drcr_id, tran_currency, tran_amount, exchange_rate, base_amount, par_exchange_rate, 
		par_base_amount, cost_center, analysis_code, subanalysis_code, guid, item_code, item_variant, quantity, reftran_fbid, reftran_no, 
		reftran_ou, ref_tran_type, supp_code, uom, source_comp, hdrremarks, mlremarks, roundoff_flag, item_tcd_type, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.tran_type, s.tran_ou, s.tran_no, s.posting_line_no, s.timestamp, s.line_no, s.company_code, s.posting_status, s.posting_date, 
		s.fb_id, s.tran_date, s.account_type, s.account_code, s.drcr_id, s.tran_currency, s.tran_amount, s.exchange_rate, 
		s.base_amount, s.par_exchange_rate, s.par_base_amount, s.cost_center, s.analysis_code, s.subanalysis_code, s.guid, s.item_code, s.item_variant, s.quantity, s.reftran_fbid, s.reftran_no, 
		s.reftran_ou, s.ref_tran_type, s.supp_code, s.uom, s.source_comp, s.hdrremarks, s.mlremarks, s.roundoff_flag, s.item_tcd_type, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_sin_ap_postings_dtl s
    LEFT JOIN dwh.f_sinappostingsdtl t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.posting_line_no = t.posting_line_no
    AND s.timestamp = t.a_timestamp
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sin_ap_postings_dtl
    (
        tran_type, tran_ou, tran_no, posting_line_no, timestamp, line_no, company_code, posting_status, posting_date, fb_id, tran_date, account_type, account_code, drcr_id, tran_currency, tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, cost_center, analysis_code, subanalysis_code, guid, entry_date, auth_date, item_code, item_variant, quantity, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, supp_code, uom, org_vat_base_amt, createdby, createddate, modifiedby, modifieddate, vat_line_no, vatusageid, source_comp, hdrremarks, mlremarks, roundoff_flag, item_tcd_type, rowtype, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, posting_line_no, timestamp, line_no, company_code, posting_status, posting_date, fb_id, tran_date, account_type, account_code, drcr_id, tran_currency, tran_amount, exchange_rate, base_amount, par_exchange_rate, par_base_amount, cost_center, analysis_code, subanalysis_code, guid, entry_date, auth_date, item_code, item_variant, quantity, reftran_fbid, reftran_no, reftran_ou, ref_tran_type, supp_code, uom, org_vat_base_amt, createdby, createddate, modifiedby, modifieddate, vat_line_no, vatusageid, source_comp, hdrremarks, mlremarks, roundoff_flag, item_tcd_type, rowtype, etlcreateddatetime
    FROM stg.stg_sin_ap_postings_dtl;
    
    END IF;
    
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_sinappostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sininvoicehdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sininvoicehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sin_invoice_hdr;

    UPDATE dwh.f_sininvoicehdr t
    SET
        tran_status                    = s.tran_status,
        invoce_cat                     = s.invoce_cat,
        num_type                       = s.num_type,
        tran_date                      = s.tran_date,
        anchor_date                    = s.anchor_date,
        fb_id                          = s.fb_id,
        auto_adjust                    = s.auto_adjust,
        auto_match                     = s.auto_match,
        tran_currency                  = s.tran_currency,
        exchange_rate                  = s.exchange_rate,
        pay_term                       = s.pay_term,
        elec_pay                       = s.elec_pay,
        pay_method                     = s.pay_method,
        pay_priority                   = s.pay_priority,
        payment_ou                     = s.payment_ou,
        pay_mode                       = s.pay_mode,
        supp_code                      = s.supp_code,
        pay_to_supp                    = s.pay_to_supp,
        supp_invoice_no                = s.supp_invoice_no,
        supp_invoice_date              = s.supp_invoice_date,
        supp_invoice_amount            = s.supp_invoice_amount,
        comments                       = s.comments,
        proposed_amount                = s.proposed_amount,
        tran_amount                    = s.tran_amount,
        item_amount                    = s.item_amount,
        tax_amount                     = s.tax_amount,
        disc_amount                    = s.disc_amount,
        base_amount                    = s.base_amount,
        rev_doc_no                     = s.rev_doc_no,
        rev_doc_ou                     = s.rev_doc_ou,
        rev_date                       = s.rev_date,
        ref_doc_no                     = s.ref_doc_no,
        ref_doc_ou                     = s.ref_doc_ou,
        rev_reason_code                = s.rev_reason_code,
        rev_remarks                    = s.rev_remarks,
        disc_comp_basis                = s.disc_comp_basis,
        discount_proportional          = s.discount_proportional,
        vat_applicable                 = s.vat_applicable,
        pre_round_off_amount           = s.pre_round_off_amount,
        rounded_off_amount             = s.rounded_off_amount,
        utilized_invtol_per            = s.utilized_invtol_per,
        unmatched_per                  = s.unmatched_per,
        forcemth_tolper_applied        = s.forcemth_tolper_applied,
        batch_id                       = s.batch_id,
        createdby                      = s.createdby,
        createddate                    = s.createddate,
        modifiedby                     = s.modifiedby,
        modifieddate                   = s.modifieddate,
        tcal_status                    = s.tcal_status,
        total_tcal_amount              = s.total_tcal_amount,
        tcal_exclusive_amt             = s.tcal_exclusive_amt,
        account_code                   = s.account_code,
        reconcilation_status           = s.reconcilation_status,
        unmatched_amount               = s.unmatched_amount,
        workflow_status                = s.workflow_status,
        prev_trnamt                    = s.prev_trnamt,
        MAIL_SENT                      = s.MAIL_SENT,
        own_taxregion                  = s.own_taxregion,
        autogen_flag                   = s.autogen_flag,
        Variance_Acct                  = s.Variance_Acct,
        hold_inv_pay                   = s.hold_inv_pay,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_sin_invoice_hdr s
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.timestamp = s.timestamp
    AND t.tms_flag = s.tms_flag
    AND t.gen_from_MntFrght = s.gen_from_MntFrght;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_sininvoicehdr
    (
        tran_type, tran_ou, tran_no, timestamp, tran_status, invoce_cat, num_type, tran_date, anchor_date, fb_id, auto_adjust, auto_match, tran_currency, exchange_rate, pay_term, elec_pay, pay_method, pay_priority, payment_ou, pay_mode, supp_code, pay_to_supp, supp_invoice_no, supp_invoice_date, supp_invoice_amount, comments, proposed_amount, tran_amount, item_amount, tax_amount, disc_amount, base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, disc_comp_basis, discount_proportional, vat_applicable, pre_round_off_amount, rounded_off_amount, utilized_invtol_per, unmatched_per, forcemth_tolper_applied, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_status, total_tcal_amount, tcal_exclusive_amt, account_code, reconcilation_status, unmatched_amount, workflow_status, prev_trnamt, tms_flag, MAIL_SENT, own_taxregion, autogen_flag, gen_from_MntFrght, Variance_Acct, hold_inv_pay, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.tran_type, s.tran_ou, s.tran_no, s.timestamp, s.tran_status, s.invoce_cat, s.num_type, s.tran_date, s.anchor_date, s.fb_id, s.auto_adjust, s.auto_match, s.tran_currency, s.exchange_rate, s.pay_term, s.elec_pay, s.pay_method, s.pay_priority, s.payment_ou, s.pay_mode, s.supp_code, s.pay_to_supp, s.supp_invoice_no, s.supp_invoice_date, s.supp_invoice_amount, s.comments, s.proposed_amount, s.tran_amount, s.item_amount, s.tax_amount, s.disc_amount, s.base_amount, s.rev_doc_no, s.rev_doc_ou, s.rev_date, s.ref_doc_no, s.ref_doc_ou, s.rev_reason_code, s.rev_remarks, s.disc_comp_basis, s.discount_proportional, s.vat_applicable, s.pre_round_off_amount, s.rounded_off_amount, s.utilized_invtol_per, s.unmatched_per, s.forcemth_tolper_applied, s.batch_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.tcal_status, s.total_tcal_amount, s.tcal_exclusive_amt, s.account_code, s.reconcilation_status, s.unmatched_amount, s.workflow_status, s.prev_trnamt, s.tms_flag, s.MAIL_SENT, s.own_taxregion, s.autogen_flag, s.gen_from_MntFrght, s.Variance_Acct, s.hold_inv_pay, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_sin_invoice_hdr s
    LEFT JOIN dwh.f_sininvoicehdr t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.timestamp = t.timestamp
    AND s.tms_flag = t.tms_flag
    AND s.gen_from_MntFrght = t.gen_from_MntFrght
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sin_invoice_hdr
    (
        tran_type, tran_ou, tran_no, timestamp, tran_status, invoce_cat, num_type, tran_date, anchor_date, fb_id, auto_adjust, auto_match, tran_currency, exchange_rate, pay_term, payterm_version, elec_pay, pay_method, pay_priority, payment_ou, pay_mode, supp_code, pay_to_supp, supp_invoice_no, supp_invoice_date, supp_invoice_amount, comments, proposed_amount, tran_amount, par_exchange_rate, item_amount, tax_amount, disc_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, posting_status, disc_comp_basis, discount_proportional, comp_bp_code, bank_code, lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, partid_digits, refno_digits, supp_acct_in, supp_bp_ref, supp_bp_acc_no, vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, vat_amount, vat_incl_amount, pre_round_off_amount, rounded_off_amount, utilized_invtol_per, unmatched_per, forcemth_tolper_applied, batch_id, doc_status, createdby, createddate, modifiedby, modifieddate, tcal_status, total_tcal_amount, tcal_exclusive_amt, supp_companycode, supp_comppttname, supp_suplbank, supp_suplbankname, supp_swiftid, supp_ibanno, supp_lsvcontractid, supp_contractref, supp_lsvfromdate, supp_lsvtodate, supp_contallowed, supp_contactperson, supp_bankclearno, supp_reftype, account_code, reconcilation_status, consistency_stamp, unmatched_amount, lcnumber, refid, workflow_status, prev_trnamt, project_ou, Project_code, tms_flag, retaccount, retpayterm, retamount, gen_from, hold_amt, holdaccount, holdpayterm, adj_jv, MAIL_SENT, own_taxregion, mat_reason_code, autogen_flag, gen_from_MntFrght, Variance_Acct, hold_inv_pay, supplierAddress, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, timestamp, tran_status, invoce_cat, num_type, tran_date, anchor_date, fb_id, auto_adjust, auto_match, tran_currency, exchange_rate, pay_term, payterm_version, elec_pay, pay_method, pay_priority, payment_ou, pay_mode, supp_code, pay_to_supp, supp_invoice_no, supp_invoice_date, supp_invoice_amount, comments, proposed_amount, tran_amount, par_exchange_rate, item_amount, tax_amount, disc_amount, base_amount, par_base_amount, rev_doc_no, rev_doc_ou, rev_date, ref_doc_no, ref_doc_ou, rev_reason_code, rev_remarks, hld_date, hld_reason_code, hld_remarks, auth_date, posting_date, posting_status, disc_comp_basis, discount_proportional, comp_bp_code, bank_code, lsv_id, comp_acct_in, comp_bp_ref, comp_bp_acc_no, esr_id, partid_digits, refno_digits, supp_acct_in, supp_bp_ref, supp_bp_acc_no, vat_applicable, vat_exchange_rate, vat_charge, non_vat_charge, doc_level_disc, vat_incl, retain_init_distbn, cap_non_ded_charge, average_vat_rate, vat_excl_amount, vat_amount, vat_incl_amount, pre_round_off_amount, rounded_off_amount, utilized_invtol_per, unmatched_per, forcemth_tolper_applied, batch_id, doc_status, createdby, createddate, modifiedby, modifieddate, tcal_status, total_tcal_amount, tcal_exclusive_amt, supp_companycode, supp_comppttname, supp_suplbank, supp_suplbankname, supp_swiftid, supp_ibanno, supp_lsvcontractid, supp_contractref, supp_lsvfromdate, supp_lsvtodate, supp_contallowed, supp_contactperson, supp_bankclearno, supp_reftype, account_code, reconcilation_status, consistency_stamp, unmatched_amount, lcnumber, refid, workflow_status, prev_trnamt, project_ou, Project_code, tms_flag, retaccount, retpayterm, retamount, gen_from, hold_amt, holdaccount, holdpayterm, adj_jv, MAIL_SENT, own_taxregion, mat_reason_code, autogen_flag, gen_from_MntFrght, Variance_Acct, hold_inv_pay, supplierAddress, etlcreateddatetime
    FROM stg.stg_sin_invoice_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_sininvoicehdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_sinitemdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_sinitemdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;
	p_depsource VARCHAR(100);

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sin_item_dtl;

    UPDATE dwh.f_sinitemdtl t
    SET
	    si_sinitm_inv_key            = fh.si_inv_key,
        timestamp                    = s.timestamp,
        po_amendment_no              = s.po_amendment_no,
        visible_line_no              = s.visible_line_no,
        ref_doc_type                 = s.ref_doc_type,
        ref_doc_no                   = s.ref_doc_no,
        ref_doc_date                 = s.ref_doc_date,
        pors_type                    = s.pors_type,
        po_no                        = s.po_no,
        po_ou                        = s.po_ou,
        item_tcd_code                = s.item_tcd_code,
        item_tcd_var                 = s.item_tcd_var,
        uom                          = s.uom,
        rate_per                     = s.rate_per,
        invoice_qty                  = s.invoice_qty,
        invoice_rate                 = s.invoice_rate,
        proposed_qty                 = s.proposed_qty,
        proposed_rate                = s.proposed_rate,
        proposed_amount              = s.proposed_amount,
        remarks                      = s.remarks,
        cost_center                  = s.cost_center,
        analysis_code                = s.analysis_code,
        subanalysis_code             = s.subanalysis_code,
        ref_doc_ou                   = s.ref_doc_ou,
        tax_amount                   = s.tax_amount,
        disc_amount                  = s.disc_amount,
        line_amount                  = s.line_amount,
        item_amount                  = s.item_amount,
        base_amount                  = s.base_amount,
        original_proposed_amt        = s.original_proposed_amt,
        original_proposed_qty        = s.original_proposed_qty,
        po_line_no                   = s.po_line_no,
        ref_doc_line_no              = s.ref_doc_line_no,
        base_value                   = s.base_value,
        matching_type                = s.matching_type,
        orderno_instname             = s.orderno_instname,
        refdocno_instname            = s.refdocno_instname,
        orderno_cur                  = s.orderno_cur,
        po_date                      = s.po_date,
        po_categ                     = s.po_categ,
        gr_opt                       = s.gr_opt,
        po_qty                       = s.po_qty,
        imports_flag                 = s.imports_flag,
        retention_amt                = s.retention_amt,
        retentionml                  = s.retentionml,
        holdml                       = s.holdml,
        acusage                      = s.acusage,
        own_tax_region               = s.own_tax_region,
        party_tax_region             = s.party_tax_region,
        decl_tax_region              = s.decl_tax_region,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_sin_item_dtl s
	INNER JOIN dwh.f_sininvoicehdr fh
	ON  s.tran_no     =		fh.tran_no
	AND s.tran_ou     =		fh.tran_ou
	AND s.tran_type   =     fh.tran_type
    WHERE t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou
    AND t.tran_no = s.tran_no
    AND t.line_no = s.line_no
    AND t.ipv_flag = s.ipv_flag
    AND t.epv_flag = s.epv_flag;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_sinitemdtl
    (
        si_sinitm_inv_key,tran_type, tran_ou, tran_no, line_no, timestamp, po_amendment_no, visible_line_no, ref_doc_type, 
		ref_doc_no, ref_doc_date, pors_type, po_no, po_ou, item_tcd_code, item_tcd_var, uom, rate_per, invoice_qty, 
		invoice_rate, proposed_qty, proposed_rate, proposed_amount, remarks, cost_center, analysis_code, subanalysis_code, 
		ref_doc_ou, tax_amount, disc_amount, line_amount, item_amount, base_amount, original_proposed_amt, original_proposed_qty, 
		po_line_no, ref_doc_line_no, base_value, matching_type, orderno_instname, refdocno_instname, orderno_cur, po_date, 
		po_categ, gr_opt, po_qty, imports_flag, retention_amt, ipv_flag, epv_flag, retentionml, holdml, acusage, own_tax_region, 
		party_tax_region, decl_tax_region, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.si_inv_key,s.tran_type, s.tran_ou, s.tran_no, s.line_no, s.timestamp, s.po_amendment_no, s.visible_line_no, s.ref_doc_type, 
		s.ref_doc_no, s.ref_doc_date, s.pors_type, s.po_no, s.po_ou, s.item_tcd_code, s.item_tcd_var, s.uom, s.rate_per, s.invoice_qty,
		s.invoice_rate, s.proposed_qty, s.proposed_rate, s.proposed_amount, s.remarks, s.cost_center, s.analysis_code, s.subanalysis_code, 
		s.ref_doc_ou, s.tax_amount, s.disc_amount, s.line_amount, s.item_amount, s.base_amount, s.original_proposed_amt, s.original_proposed_qty,
		s.po_line_no, s.ref_doc_line_no, s.base_value, s.matching_type, s.orderno_instname, s.refdocno_instname, s.orderno_cur, s.po_date, 
		s.po_categ, s.gr_opt, s.po_qty, s.imports_flag, s.retention_amt, s.ipv_flag, s.epv_flag, s.retentionml, s.holdml, s.acusage, s.own_tax_region,
		s.party_tax_region, s.decl_tax_region, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_sin_item_dtl s
	INNER JOIN dwh.f_sininvoicehdr fh
	ON  s.tran_no     =		fh.tran_no
	AND s.tran_ou     =		fh.tran_ou
	AND s.tran_type   =     fh.tran_type
    LEFT JOIN dwh.f_sinitemdtl t
    ON s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    AND s.tran_no = t.tran_no
    AND s.line_no = t.line_no
    AND s.ipv_flag = t.ipv_flag
    AND s.epv_flag = t.epv_flag
    WHERE t.tran_type IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sin_item_dtl
    (
        tran_type, tran_ou, tran_no, line_no, timestamp, po_amendment_no, visible_line_no, ref_doc_type, ref_doc_no, ref_doc_date, pors_type, po_no, po_ou, item_tcd_code, item_tcd_var, uom, rate_per, invoice_qty, invoice_rate, invoice_amount, proposed_qty, proposed_rate, proposed_amount, tran_amount, remarks, cost_center, analysis_code, subanalysis_code, ref_doc_ou, unmatched_amount, unmatched_perc, tax_amount, disc_amount, line_amount, item_amount, base_amount, original_proposed_amt, original_proposed_qty, po_line_no, ref_doc_line_no, par_base_amount, base_value, createdby, createddate, modifiedby, modifieddate, item_desc, matching_type, reconciled_qty, orderno_instname, refdocno_instname, orderno_cur, po_date, po_categ, gr_opt, po_qty, imports_flag, project_ou, Project_code, tms_ou, tms_no, tms_type, retention_amt, retentionperc, ret_postol, ret_negtol, ipv_flag, epv_flag, retentionml, holdml, acusage, boe_no, boe_date, Dest_comp, destou, destfb, destusageid, interfbjvno, dest_cost_center, dest_sub_analysis_code, dest_analysis_code, Dest_Account_code, Itercomp_Account_code, port_code, own_tax_region, party_tax_region, decl_tax_region, etlcreateddatetime
    )
    SELECT
        tran_type, tran_ou, tran_no, line_no, timestamp, po_amendment_no, visible_line_no, ref_doc_type, ref_doc_no, ref_doc_date, pors_type, po_no, po_ou, item_tcd_code, item_tcd_var, uom, rate_per, invoice_qty, invoice_rate, invoice_amount, proposed_qty, proposed_rate, proposed_amount, tran_amount, remarks, cost_center, analysis_code, subanalysis_code, ref_doc_ou, unmatched_amount, unmatched_perc, tax_amount, disc_amount, line_amount, item_amount, base_amount, original_proposed_amt, original_proposed_qty, po_line_no, ref_doc_line_no, par_base_amount, base_value, createdby, createddate, modifiedby, modifieddate, item_desc, matching_type, reconciled_qty, orderno_instname, refdocno_instname, orderno_cur, po_date, po_categ, gr_opt, po_qty, imports_flag, project_ou, Project_code, tms_ou, tms_no, tms_type, retention_amt, retentionperc, ret_postol, ret_negtol, ipv_flag, epv_flag, retentionml, holdml, acusage, boe_no, boe_date, Dest_comp, destou, destfb, destusageid, interfbjvno, dest_cost_center, dest_sub_analysis_code, dest_analysis_code, Dest_Account_code, Itercomp_Account_code, port_code, own_tax_region, party_tax_region, decl_tax_region, etlcreateddatetime
    FROM stg.stg_sin_item_dtl;
    
    END IF;
    
	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;END;
$$;


ALTER PROCEDURE dwh.usp_f_sinitemdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_snpfbpostingdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_snpfbpostingdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_snp_fbposting_dtl;

    UPDATE dwh.f_snpfbpostingdtl t
    SET
        company_code            = s.company_code,
        component_name          = s.component_name,
        bu_id                   = s.bu_id,
        fb_id                   = s.fb_id,
        tran_ou                 = s.tran_ou,
        tran_type               = s.tran_type,
        tran_date               = s.tran_date,
        posting_date            = s.posting_date,
        drcr_flag               = s.drcr_flag,
        currency_code           = s.currency_code,
        tran_amount             = s.tran_amount,
        base_amount             = s.base_amount,
        exchange_rate           = s.exchange_rate,
        analysis_code           = s.analysis_code,
        subanalysis_code        = s.subanalysis_code,
        cost_center             = s.cost_center,
        mac_post_flag           = s.mac_post_flag,
        acct_type               = s.acct_type,
        createdby               = s.createdby,
        createddate             = s.createddate,
        modifieddate            = s.modifieddate,
        posting_flag            = s.posting_flag,
        hdrremarks              = s.hdrremarks,
        mlremarks               = s.mlremarks,
        tranline_no             = s.tranline_no,
        reftran_no              = s.reftran_no,
        reftran_ou              = s.reftran_ou,
        reftran_type            = s.reftran_type,
        reftran_fbid            = s.reftran_fbid,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_snp_fbposting_dtl s
    WHERE t.batch_id = s.batch_id
    AND t.ou_id = s.ou_id
    AND t.document_no = s.document_no
    AND t.account_lineno = s.account_lineno
    AND t.account_code = s.account_code
    AND t.timestamp = s.timestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_snpfbpostingdtl
    (
        batch_id, ou_id, document_no, account_lineno, account_code, timestamp, company_code, component_name, bu_id, fb_id, tran_ou, tran_type, tran_date, posting_date, drcr_flag, currency_code, tran_amount, base_amount, exchange_rate, analysis_code, subanalysis_code, cost_center, mac_post_flag, acct_type, createdby, createddate, modifieddate, posting_flag, hdrremarks, mlremarks, tranline_no, reftran_no, reftran_ou, reftran_type, reftran_fbid, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.batch_id, s.ou_id, s.document_no, s.account_lineno, s.account_code, s.timestamp, s.company_code, s.component_name, s.bu_id, s.fb_id, s.tran_ou, s.tran_type, s.tran_date, s.posting_date, s.drcr_flag, s.currency_code, s.tran_amount, s.base_amount, s.exchange_rate, s.analysis_code, s.subanalysis_code, s.cost_center, s.mac_post_flag, s.acct_type, s.createdby, s.createddate, s.modifieddate, s.posting_flag, s.hdrremarks, s.mlremarks, s.tranline_no, s.reftran_no, s.reftran_ou, s.reftran_type, s.reftran_fbid, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_snp_fbposting_dtl s
    LEFT JOIN dwh.f_snpfbpostingdtl t
    ON s.batch_id = t.batch_id
    AND s.ou_id = t.ou_id
    AND s.document_no = t.document_no
    AND s.account_lineno = t.account_lineno
    AND s.account_code = t.account_code
    AND s.timestamp = t.timestamp
    WHERE t.batch_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_snp_fbposting_dtl
    (
        batch_id, ou_id, document_no, account_lineno, account_code, timestamp, company_code, component_name, bu_id, fb_id, tran_ou, tran_type, tran_date, posting_date, drcr_flag, currency_code, tran_amount, base_amount, exchange_rate, par_base_amount, par_exchange_rate, analysis_code, subanalysis_code, cost_center, mac_post_flag, acct_type, createdby, createddate, modifiedby, modifieddate, posting_flag, hdrremarks, mlremarks, tranline_no, reftran_no, reftran_ou, reftran_type, reftran_fbid, etlcreateddatetime
    )
    SELECT
        batch_id, ou_id, document_no, account_lineno, account_code, timestamp, company_code, component_name, bu_id, fb_id, tran_ou, tran_type, tran_date, posting_date, drcr_flag, currency_code, tran_amount, base_amount, exchange_rate, par_base_amount, par_exchange_rate, analysis_code, subanalysis_code, cost_center, mac_post_flag, acct_type, createdby, createddate, modifiedby, modifieddate, posting_flag, hdrremarks, mlremarks, tranline_no, reftran_no, reftran_ou, reftran_type, reftran_fbid, etlcreateddatetime
    FROM stg.stg_snp_fbposting_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_snpfbpostingdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_snpvoucherdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_snpvoucherdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
	

		SELECT COUNT(1) INTO srccnt
		FROM stg.stg_snp_voucher_dtl;

		UPDATE dwh.F_snpvoucherdtl t
		SET
			curr_key                    	= COALESCE(cr.curr_key,-1),
			usage_id                    	= s.usage_id,
			account_code                	= s.account_code,
			currency                    	= s.currency,
			amount                      	= s.amount,
			drcr_flag                   	= s.drcr_flag,
			base_amount                 	= s.base_amount,
			remarks                     	= s.remarks,
			cost_center                 	= s.cost_center,
			batch_id                    	= s.batch_id,
			createdby                   	= s.createdby,
			createddate                 	= s.createddate,
			receive_bank_cash_code      	= s.receive_bank_cash_code,
			sur_receipt_no              	= s.sur_receipt_no,
			Dest_comp                   	= s.Dest_comp,
			destination_accode          	= s.destination_accode,
			destination_ou              	= s.destination_ou,
			destination_fb              	= s.destination_fb,
			destination_costcenter      	= s.destination_costcenter,
			destination_interfbjvno     	= s.destination_interfbjvno,
			accountcode_interfb         	= s.accountcode_interfb,
			destaccount_currency        	= s.destaccount_currency,
			SUR_OU                      	= s.SUR_OU,
			etlactiveind                	= 1,
			etljobname                  	= p_etljobname,
			envsourcecd                 	= p_envsourcecd,
			datasourcecd                	= p_datasourcecd,
			etlupdatedatetime           	= NOW()
		FROM stg.stg_snp_voucher_dtl s
		LEFT JOIN dwh.d_currency cr
			ON  s.currency					= cr.iso_curr_code
		WHERE  t.ou_id 						= s.ou_id
			AND t.voucher_no 				= s.voucher_no
			AND t.voucher_type 				= s.voucher_type
			AND t.account_lineno 			= s.account_lineno
			AND t.tran_type 				= s.tran_type
			AND t.vtimestamp 				= s.vtimestamp;

		GET DIAGNOSTICS updcnt = ROW_COUNT;

		INSERT INTO dwh.F_snpvoucherdtl
		(
			curr_key,ou_id, voucher_no, voucher_type, account_lineno, tran_type, vtimestamp, usage_id, account_code, currency, amount, drcr_flag, base_amount, remarks, cost_center, batch_id, createdby, createddate, receive_bank_cash_code, sur_receipt_no, Dest_comp, destination_accode, destination_ou, destination_fb, destination_costcenter, destination_interfbjvno, accountcode_interfb, destaccount_currency, SUR_OU, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
		)

		SELECT
			COALESCE(cr.curr_key,-1),s.ou_id, s.voucher_no, s.voucher_type, s.account_lineno, s.tran_type, s.vtimestamp, s.usage_id, s.account_code, s.currency, s.amount, s.drcr_flag, s.base_amount, s.remarks, s.cost_center, s.batch_id, s.createdby, s.createddate, s.receive_bank_cash_code, s.sur_receipt_no, s.Dest_comp, s.destination_accode, s.destination_ou, s.destination_fb, s.destination_costcenter, s.destination_interfbjvno, s.accountcode_interfb, s.destaccount_currency, s.SUR_OU, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
		FROM stg.stg_snp_voucher_dtl s
		LEFT JOIN dwh.d_currency cr
			ON  s.currency					= cr.iso_curr_code	
		LEFT JOIN dwh.F_snpvoucherdtl t
		ON s.ou_id = t.ou_id
		AND s.voucher_no = t.voucher_no
		AND s.voucher_type = t.voucher_type
		AND s.account_lineno = t.account_lineno
		AND s.tran_type = t.tran_type
		AND s.vtimestamp = t.vtimestamp
		WHERE t.ou_id IS NULL;

		GET DIAGNOSTICS inscnt = ROW_COUNT;

		IF p_rawstorageflag = 1
		THEN

			INSERT INTO raw.raw_snp_voucher_dtl
			(
				ou_id, voucher_no, voucher_type, account_lineno, tran_type, vtimestamp, usage_id, account_code, currency, amount, drcr_flag, base_amount, proposal_no, remarks, cost_center, analysis_code, subanalysis_code, batch_id, acct_type, createdby, createddate, modifiedby, modifieddate, receive_bank_cash_code, sur_receipt_no, Dest_comp, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, destination_accode, destination_ou, destination_fb, destination_costcenter, destination_analysiscode, destination_subanalysiscode, destination_interfbjvno, accountcode_interfb, costcenter_interfb, analysis_code_interfb, sub_analysis_code_interfb, destaccount_currency, Reciving_Comp, SUR_OU, ifb_recon_jvno, own_tax_region, party_tax_region, decl_tax_region, etlcreateddatetime
			)
			SELECT
				ou_id, voucher_no, voucher_type, account_lineno, tran_type, vtimestamp, usage_id, account_code, currency, amount, drcr_flag, base_amount, proposal_no, remarks, cost_center, analysis_code, subanalysis_code, batch_id, acct_type, createdby, createddate, modifiedby, modifieddate, receive_bank_cash_code, sur_receipt_no, Dest_comp, cfs_refdoc_ou, cfs_refdoc_no, cfs_refdoc_type, destination_accode, destination_ou, destination_fb, destination_costcenter, destination_analysiscode, destination_subanalysiscode, destination_interfbjvno, accountcode_interfb, costcenter_interfb, analysis_code_interfb, sub_analysis_code_interfb, destaccount_currency, Reciving_Comp, SUR_OU, ifb_recon_jvno, own_tax_region, party_tax_region, decl_tax_region, etlcreateddatetime
			FROM stg.stg_snp_voucher_dtl;
		
		END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_snpvoucherdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_snpvoucherhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_snpvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_snp_voucher_hdr;

    UPDATE dwh.F_snpvoucherhdr t
    SET
		curr_key					= COALESCE(cr.curr_key,-1),
        fb_id                       = s.fb_id,
        notype_no                   = s.notype_no,
        request_date                = s.request_date,
        payee_name                  = s.payee_name,
        pay_date                    = s.pay_date,
        elec_payment                = s.elec_payment,
        pay_currency                = s.pay_currency,
        exchange_rate               = s.exchange_rate,
        pay_amount_bef_roff         = s.pay_amount_bef_roff,
        pay_amount                  = s.pay_amount,
        roundoff_amount             = s.roundoff_amount,
        pay_method                  = s.pay_method,
        payment_route               = s.payment_route,
        pay_mode                    = s.pay_mode,
        bank_cash_code              = s.bank_cash_code,
        relpay_ou                   = s.relpay_ou,
        instr_charge                = s.instr_charge,
        priority                    = s.priority,
        remarks                     = s.remarks,
        hr_reason_code              = s.hr_reason_code,
        reversal_reason_code        = s.reversal_reason_code,
        reversal_date               = s.reversal_date,
        reversal_remarks            = s.reversal_remarks,
        address1                    = s.address1,
        city                        = s.city,
        state                       = s.state,
        country                     = s.country,
        zip_code                    = s.zip_code,
        batch_id                    = s.batch_id,
        voucher_status              = s.voucher_status,
        refdoc_no                   = s.refdoc_no,
        createdby                   = s.createdby,
        createddate                 = s.createddate,
        modifiedby                  = s.modifiedby,
        modifieddate                = s.modifieddate,
        tcal_status                 = s.tcal_status,
        total_tcal_amount           = s.total_tcal_amount,
        tcal_exclusive_amt          = s.tcal_exclusive_amt,
        receipt_route               = s.receipt_route,
        auto_gen_flag               = s.auto_gen_flag,
        receipt_ou                  = s.receipt_ou,
        workflow_status             = s.workflow_status,
        recon_reqflg                = s.recon_reqflg,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_snp_voucher_hdr s
	LEFT JOIN dwh.d_currency cr
		ON  s.pay_currency			= cr.iso_curr_code	
    WHERE t.ou_id = s.ou_id
    AND t.voucher_no = s.voucher_no
    AND t.voucher_type = s.voucher_type
    AND t.tran_type = s.tran_type
    AND t.vtimestamp = s.vtimestamp
    AND t.ifb_flag = s.ifb_flag;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_snpvoucherhdr
    (
        curr_key,ou_id, voucher_no, voucher_type, tran_type, vtimestamp, fb_id, notype_no, request_date, payee_name, pay_date, elec_payment, pay_currency, exchange_rate, pay_amount_bef_roff, pay_amount, roundoff_amount, pay_method, payment_route, pay_mode, bank_cash_code, relpay_ou, instr_charge, priority, remarks, hr_reason_code, reversal_reason_code, reversal_date, reversal_remarks, address1, city, state, country, zip_code, batch_id, voucher_status, refdoc_no, createdby, createddate, modifiedby, modifieddate, tcal_status, total_tcal_amount, tcal_exclusive_amt, receipt_route, auto_gen_flag, receipt_ou, workflow_status, recon_reqflg, ifb_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(cr.curr_key,-1),s.ou_id, s.voucher_no, s.voucher_type, s.tran_type, s.vtimestamp, s.fb_id, s.notype_no, s.request_date, s.payee_name, s.pay_date, s.elec_payment, s.pay_currency, s.exchange_rate, s.pay_amount_bef_roff, s.pay_amount, s.roundoff_amount, s.pay_method, s.payment_route, s.pay_mode, s.bank_cash_code, s.relpay_ou, s.instr_charge, s.priority, s.remarks, s.hr_reason_code, s.reversal_reason_code, s.reversal_date, s.reversal_remarks, s.address1, s.city, s.state, s.country, s.zip_code, s.batch_id, s.voucher_status, s.refdoc_no, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.tcal_status, s.total_tcal_amount, s.tcal_exclusive_amt, s.receipt_route, s.auto_gen_flag, s.receipt_ou, s.workflow_status, s.recon_reqflg, s.ifb_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_snp_voucher_hdr s
	LEFT JOIN dwh.d_currency cr
		ON  s.pay_currency		= cr.iso_curr_code	
    LEFT JOIN dwh.F_snpvoucherhdr t
    ON s.ou_id = t.ou_id
    AND s.voucher_no = t.voucher_no
    AND s.voucher_type = t.voucher_type
    AND s.tran_type = t.tran_type
    AND s.vtimestamp = t.vtimestamp
    AND s.ifb_flag = t.ifb_flag
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_snp_voucher_hdr
    (
        ou_id, voucher_no, voucher_type, tran_type, vtimestamp, fb_id, notype_no, request_date, payee_name, pay_date, elec_payment, pay_currency, exchange_rate, pay_amount_bef_roff, pay_amount, roundoff_amount, pay_method, payment_route, pay_mode, bank_cash_code, relpay_ou, instr_charge, priority, remarks, hr_reason_code, hr_remarks, reversal_reason_code, reversal_date, reversal_remarks, address1, address2, address3, city, state, country, zip_code, contact, url, mail_stop, pager_no, email_id, telex, phone_no, mobile_no, fax_no, lsv_id, lsv_reference, bank_code, partid_digits, esr_id, refno_digits, esr_reference, esr_amount, esr_code_line, payee_accountin, payee_bankrefno, payee_accountcode, comp_accountin, comp_bankref, comp_accountcode, template_no, cap_charge, batch_id, voucher_status, refdoc_no, refdoc_type, pbcexchrate, createdby, createddate, modifiedby, modifieddate, doc_status, contract_ref, elec_applied, iban_no, tcal_status, total_tcal_amount, tcal_exclusive_amt, receipt_route, auto_gen_flag, consistency_stamp, receipt_ou, workflow_status, recon_reqflg, afe_number, job_number, project_ou, Project_code, costcenter_hdr, workflow_error, ifb_flag, etlcreateddatetime
    )
    SELECT
        ou_id, voucher_no, voucher_type, tran_type, vtimestamp, fb_id, notype_no, request_date, payee_name, pay_date, elec_payment, pay_currency, exchange_rate, pay_amount_bef_roff, pay_amount, roundoff_amount, pay_method, payment_route, pay_mode, bank_cash_code, relpay_ou, instr_charge, priority, remarks, hr_reason_code, hr_remarks, reversal_reason_code, reversal_date, reversal_remarks, address1, address2, address3, city, state, country, zip_code, contact, url, mail_stop, pager_no, email_id, telex, phone_no, mobile_no, fax_no, lsv_id, lsv_reference, bank_code, partid_digits, esr_id, refno_digits, esr_reference, esr_amount, esr_code_line, payee_accountin, payee_bankrefno, payee_accountcode, comp_accountin, comp_bankref, comp_accountcode, template_no, cap_charge, batch_id, voucher_status, refdoc_no, refdoc_type, pbcexchrate, createdby, createddate, modifiedby, modifieddate, doc_status, contract_ref, elec_applied, iban_no, tcal_status, total_tcal_amount, tcal_exclusive_amt, receipt_route, auto_gen_flag, consistency_stamp, receipt_ou, workflow_status, recon_reqflg, afe_number, job_number, project_ou, Project_code, costcenter_hdr, workflow_error, ifb_flag, etlcreateddatetime
    FROM stg.stg_snp_voucher_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_snpvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_spypaybatchdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_spypaybatchdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
	

		SELECT COUNT(1) INTO srccnt
		FROM stg.stg_spy_paybatch_dtl;

		UPDATE dwh.F_spypaybatchdtl t
		SET
			curr_key                 = COALESCE(cr.curr_key,-1),
			vendor_key               = COALESCE(v.vendor_key,-1),
			cr_doc_type              = s.cr_doc_type,
			pay_currency             = s.pay_currency,
			parbasecur_erate         = s.parbasecur_erate,
			tran_amount              = s.tran_amount,
			discount                 = s.discount,
			penalty                  = s.penalty,
			pay_mode                 = s.pay_mode,
			proposed_penalty         = s.proposed_penalty,
			proposed_discount        = s.proposed_discount,
			basecur_erate            = s.basecur_erate,
			crosscur_erate           = s.crosscur_erate,
			supp_ctrl_acct           = s.supp_ctrl_acct,
			batch_id                 = s.batch_id,
			supplier_code            = s.supplier_code,
			cr_doc_cur               = s.cr_doc_cur,
			cr_doc_amount            = s.cr_doc_amount,
			cr_doc_fb_id             = s.cr_doc_fb_id,
			tran_net_amount          = s.tran_net_amount,
			pay_amount               = s.pay_amount,
			pay_to_supp              = s.pay_to_supp,
			pay_cur_erate            = s.pay_cur_erate,
			ctrl_acct_type           = s.ctrl_acct_type,
			etlactiveind             = 1,
			etljobname               = p_etljobname,
			envsourcecd              = p_envsourcecd,
			datasourcecd             = p_datasourcecd,
			etlupdatedatetime        = NOW()
		FROM stg.stg_spy_paybatch_dtl s
		LEFT JOIN dwh.d_currency cr
			ON  s.pay_currency		 = cr.iso_curr_code
		LEFT JOIN dwh.d_vendor v
			ON  s.supplier_code		 = v.vendor_id
			AND s.ou_id				 = v.vendor_ou		
		WHERE t.ou_id 				 = s.ou_id
		AND t.paybatch_no 			 = s.paybatch_no
		AND t.cr_doc_ou 			 = s.cr_doc_ou
		AND t.cr_doc_no 			 = s.cr_doc_no
		AND t.term_no 				 = s.term_no
		AND t.tran_type 			 = s.tran_type
		AND t.ptimestamp 			 = s.ptimestamp;

		GET DIAGNOSTICS updcnt = ROW_COUNT;

		INSERT INTO dwh.F_spypaybatchdtl
		(
			 curr_key, vendor_key, ou_id, paybatch_no, cr_doc_ou, cr_doc_no, term_no, tran_type, ptimestamp, cr_doc_type, pay_currency, parbasecur_erate, tran_amount, discount, penalty, pay_mode, proposed_penalty, proposed_discount, basecur_erate, crosscur_erate, supp_ctrl_acct, batch_id, supplier_code, cr_doc_cur, cr_doc_amount, cr_doc_fb_id, tran_net_amount, pay_amount, pay_to_supp, pay_cur_erate, ctrl_acct_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
		)

		SELECT
		COALESCE(cr.curr_key,-1), COALESCE(v.vendor_key,-1), s.ou_id, s.paybatch_no, s.cr_doc_ou, s.cr_doc_no, s.term_no, s.tran_type, s.ptimestamp, s.cr_doc_type, s.pay_currency, s.parbasecur_erate, s.tran_amount, s.discount, s.penalty, s.pay_mode, s.proposed_penalty, s.proposed_discount, s.basecur_erate, s.crosscur_erate, s.supp_ctrl_acct, s.batch_id, s.supplier_code, s.cr_doc_cur, s.cr_doc_amount, s.cr_doc_fb_id, s.tran_net_amount, s.pay_amount, s.pay_to_supp, s.pay_cur_erate, s.ctrl_acct_type, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
		FROM stg.stg_spy_paybatch_dtl s
		LEFT JOIN dwh.d_currency cr
			ON  s.pay_currency		= cr.iso_curr_code
		LEFT JOIN dwh.d_vendor v
			ON  s.supplier_code		= v.vendor_id
			AND s.ou_id				= v.vendor_ou	
		LEFT JOIN dwh.F_spypaybatchdtl t
		ON s.ou_id 					= t.ou_id
		AND s.paybatch_no 			= t.paybatch_no
		AND s.cr_doc_ou 			= t.cr_doc_ou
		AND s.cr_doc_no 			= t.cr_doc_no
		AND s.term_no 				= t.term_no
		AND s.tran_type 			= t.tran_type
		AND s.ptimestamp 			= t.ptimestamp
		WHERE t.ou_id IS NULL;

		GET DIAGNOSTICS inscnt = ROW_COUNT;

		IF p_rawstorageflag = 1
		THEN

			INSERT INTO raw.raw_spy_paybatch_dtl
			(
				ou_id, paybatch_no, cr_doc_ou, cr_doc_no, term_no, tran_type, ptimestamp, cr_doc_type, pay_currency, parbasecur_erate, tran_amount, discount, penalty, pay_mode, proposed_penalty, proposed_discount, basecur_erate, crosscur_erate, supp_ctrl_acct, batch_id, lsv_id, esr_line, createdby, createddate, modifiedby, modifieddate, supplier_code, cr_doc_cur, cr_doc_amount, cr_doc_fb_id, tran_net_amount, pay_amount, pay_to_supp, pay_cur_erate, ctrl_acct_type, BankCurrency, project_ou, Project_code, prop_wht_amt, app_wht_amt, etlcreateddatetime
			)
			SELECT
				ou_id, paybatch_no, cr_doc_ou, cr_doc_no, term_no, tran_type, ptimestamp, cr_doc_type, pay_currency, parbasecur_erate, tran_amount, discount, penalty, pay_mode, proposed_penalty, proposed_discount, basecur_erate, crosscur_erate, supp_ctrl_acct, batch_id, lsv_id, esr_line, createdby, createddate, modifiedby, modifieddate, supplier_code, cr_doc_cur, cr_doc_amount, cr_doc_fb_id, tran_net_amount, pay_amount, pay_to_supp, pay_cur_erate, ctrl_acct_type, BankCurrency, project_ou, Project_code, prop_wht_amt, app_wht_amt, etlcreateddatetime
			FROM stg.stg_spy_paybatch_dtl;
			END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_spypaybatchdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_spypaybatchhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_spypaybatchhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_spy_paybatch_hdr;

    UPDATE dwh.F_spypaybatchhdr t
    SET
        curr_key                  = COALESCE(cr.curr_key,-1),
        paybatch_notype           = s.paybatch_notype,
        voucher_notype            = s.voucher_notype,
        request_date              = s.request_date,
        pay_date                  = s.pay_date,
        payment_route             = s.payment_route,
        elect_payment             = s.elect_payment,
        pay_mode                  = s.pay_mode,
        relpay_ou                 = s.relpay_ou,
        pay_chargeby              = s.pay_chargeby,
        priority                  = s.priority,
        fb_id                     = s.fb_id,
        status                    = s.status,
        pay_currency              = s.pay_currency,
        basecur_erate             = s.basecur_erate,
        tran_type                 = s.tran_type,
        remarks                   = s.remarks,
        batch_id                  = s.batch_id,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        unadjppchk_flag           = s.unadjppchk_flag,
        crosscur_erate            = s.crosscur_erate,
        unadjdebitchk_flag        = s.unadjdebitchk_flag,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_spy_paybatch_hdr s
	LEFT JOIN dwh.d_currency cr
		ON  s.pay_currency		= cr.iso_curr_code	
    WHERE t.ou_id = s.ou_id
    AND t.paybatch_no = s.paybatch_no
    AND t.ptimestamp = s.ptimestamp
    AND t.ict_flag = s.ict_flag;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_spypaybatchhdr
    (
        curr_key, ou_id, paybatch_no, ptimestamp, paybatch_notype, voucher_notype, request_date, pay_date, payment_route, elect_payment, pay_mode, relpay_ou, pay_chargeby, priority, fb_id, status, pay_currency, basecur_erate, tran_type, remarks, batch_id, createdby, createddate, modifiedby, modifieddate, unadjppchk_flag, crosscur_erate, unadjdebitchk_flag, ict_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(cr.curr_key,-1), s.ou_id, s.paybatch_no, s.ptimestamp, s.paybatch_notype, s.voucher_notype, s.request_date, s.pay_date, s.payment_route, s.elect_payment, s.pay_mode, s.relpay_ou, s.pay_chargeby, s.priority, s.fb_id, s.status, s.pay_currency, s.basecur_erate, s.tran_type, s.remarks, s.batch_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.unadjppchk_flag, s.crosscur_erate, s.unadjdebitchk_flag, s.ict_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_spy_paybatch_hdr s
	LEFT JOIN dwh.d_currency cr
		ON  s.pay_currency		= cr.iso_curr_code	
    LEFT JOIN dwh.F_spypaybatchhdr t
    ON s.ou_id = t.ou_id
    AND s.paybatch_no = t.paybatch_no
    AND s.ptimestamp = t.ptimestamp
    AND s.ict_flag = t.ict_flag
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

		INSERT INTO raw.raw_spy_paybatch_hdr
		(
			ou_id, paybatch_no, ptimestamp, paybatch_notype, voucher_notype, request_date, pay_date, payment_route, elect_payment, pay_mode, paygroup_no, relpay_ou, pay_chargeby, priority, fb_id, status, pay_currency, basecur_erate, tran_type, remarks, batch_id, doc_status, createdby, createddate, modifiedby, modifieddate, unadjppchk_flag, consistency_stamp, workflow_status, BankCurrency, crosscur_erate, bank_amount, bank_base_amount, unadjdebitchk_flag, ict_flag, supplier_group, etlcreateddatetime
		)
		SELECT
			ou_id, paybatch_no, ptimestamp, paybatch_notype, voucher_notype, request_date, pay_date, payment_route, elect_payment, pay_mode, paygroup_no, relpay_ou, pay_chargeby, priority, fb_id, status, pay_currency, basecur_erate, tran_type, remarks, batch_id, doc_status, createdby, createddate, modifiedby, modifieddate, unadjppchk_flag, consistency_stamp, workflow_status, BankCurrency, crosscur_erate, bank_amount, bank_base_amount, unadjdebitchk_flag, ict_flag, supplier_group, etlcreateddatetime
		FROM stg.stg_spy_paybatch_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_spypaybatchhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_spyprepayvchhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_spyprepayvchhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_spy_prepay_vch_hdr;

    UPDATE dwh.F_spyprepayvchhdr t
    SET
		vendor_key                = COALESCE(v.vendor_key,-1),
		curr_key                  = COALESCE(cr.curr_key,-1),
        voucher_type              = s.voucher_type,
        request_date              = s.request_date,
        fb_id                     = s.fb_id,
        supp_code                 = s.supp_code,
        payment_route             = s.payment_route,
        pay_mode                  = s.pay_mode,
        priority                  = s.priority,
        pay_currency              = s.pay_currency,
        exchange_rate             = s.exchange_rate,
        dd_charges                = s.dd_charges,
        pay_amount                = s.pay_amount,
        pay_amt_bef_round         = s.pay_amt_bef_round,
        roundoff_amt              = s.roundoff_amt,
        pay_date                  = s.pay_date,
        bank_cash_code            = s.bank_cash_code,
        relpay_ou                 = s.relpay_ou,
        reason_code               = s.reason_code,
        remarks                   = s.remarks,
        rev_remarks               = s.rev_remarks,
        rev_date                  = s.rev_date,
        notype_no                 = s.notype_no,
        supp_area                 = s.supp_area,
        supp_doc_no               = s.supp_doc_no,
        supp_doc_date             = s.supp_doc_date,
        supp_doc_amt              = s.supp_doc_amt,
        supp_prepay_acct          = s.supp_prepay_acct,
        bank_cash_acct            = s.bank_cash_acct,
        status                    = s.status,
        batch_id                  = s.batch_id,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        tcal_exclusive_amt        = s.tcal_exclusive_amt,
        tcal_status               = s.tcal_status,
        voucher_amount            = s.voucher_amount,
        ibe_flag                  = s.ibe_flag,
        workflow_status           = s.workflow_status,
        tr_flag                   = s.tr_flag,
        surnotype_no              = s.surnotype_no,
        bank_amount               = s.bank_amount,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_spy_prepay_vch_hdr s
	LEFT JOIN dwh.d_currency cr
		ON  s.pay_currency		  = cr.iso_curr_code
	LEFT JOIN dwh.d_vendor v
		ON  s.supp_code 	  	  = v.vendor_id
		AND s.ou_id			  	  = v.vendor_ou	
    WHERE t.ou_id = s.ou_id
    AND t.voucher_no = s.voucher_no
    AND t.tran_type = s.tran_type
    AND t.ptimestamp = s.ptimestamp
    AND t.lgt_invoice_flag = s.lgt_invoice_flag;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_spyprepayvchhdr
    (
        curr_key, vendor_key, ou_id, voucher_no, tran_type, ptimestamp, voucher_type, request_date, fb_id, supp_code, payment_route, pay_mode, priority, pay_currency, exchange_rate, dd_charges, pay_amount, pay_amt_bef_round, roundoff_amt, pay_date, bank_cash_code, relpay_ou, reason_code, remarks, rev_remarks, rev_date, notype_no, supp_area, supp_doc_no, supp_doc_date, supp_doc_amt, supp_prepay_acct, bank_cash_acct, status, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_exclusive_amt, tcal_status, voucher_amount, ibe_flag, workflow_status, tr_flag, surnotype_no, bank_amount, lgt_invoice_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(cr.curr_key,-1), COALESCE(v.vendor_key,-1),s.ou_id, s.voucher_no, s.tran_type, s.ptimestamp, s.voucher_type, s.request_date, s.fb_id, s.supp_code, s.payment_route, s.pay_mode, s.priority, s.pay_currency, s.exchange_rate, s.dd_charges, s.pay_amount, s.pay_amt_bef_round, s.roundoff_amt, s.pay_date, s.bank_cash_code, s.relpay_ou, s.reason_code, s.remarks, s.rev_remarks, s.rev_date, s.notype_no, s.supp_area, s.supp_doc_no, s.supp_doc_date, s.supp_doc_amt, s.supp_prepay_acct, s.bank_cash_acct, s.status, s.batch_id, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.tcal_exclusive_amt, s.tcal_status, s.voucher_amount, s.ibe_flag, s.workflow_status, s.tr_flag, s.surnotype_no, s.bank_amount, s.lgt_invoice_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_spy_prepay_vch_hdr s
	LEFT JOIN dwh.d_currency cr
		ON  s.pay_currency		  = cr.iso_curr_code
	LEFT JOIN dwh.d_vendor v
		ON  s.supp_code 	  	  = v.vendor_id
		AND s.ou_id			  	  = v.vendor_ou		
    LEFT JOIN dwh.F_spyprepayvchhdr t
    ON s.ou_id = t.ou_id
    AND s.voucher_no = t.voucher_no
    AND s.tran_type = t.tran_type
    AND s.ptimestamp = t.ptimestamp
    AND s.lgt_invoice_flag = t.lgt_invoice_flag
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

		INSERT INTO raw.raw_spy_prepay_vch_hdr
		(
			ou_id, voucher_no, tran_type, ptimestamp, voucher_type, request_date, fb_id, supp_code, payment_route, pay_mode, priority, pay_currency, exchange_rate, dd_charges, pay_amount, pay_amt_bef_round, roundoff_amt, par_exchange_rate, pay_date, bank_cash_code, relpay_ou, reason_code, hld_reason_code, remarks, hld_remarks, rev_remarks, rev_date, notype_no, supp_area, supp_doc_no, supp_doc_date, supp_doc_amt, supp_prepay_acct, bank_cash_acct, supp_receipt_no, receipt_date, status, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_exclusive_amt, total_tcal_amount, tcal_status, voucher_amount, ibe_flag, consistency_stamp, lcnumber, refid, workflow_status, tr_flag, tr_percent, tr_amount, tr_tenure, tr_duedate, receipt_no, surnotype_no, BankCurrency, crosscur_erate, bank_amount, bank_base_amount, project_ou, Project_code, afe_number, job_number, auto_gen_flag, trnsfr_inv_no, trnsfr_inv_date, trnsfr_inv_ou, lgt_invoice_flag, lgt_rev_guid, etlcreateddatetime
		)
		SELECT
			ou_id, voucher_no, tran_type, ptimestamp, voucher_type, request_date, fb_id, supp_code, payment_route, pay_mode, priority, pay_currency, exchange_rate, dd_charges, pay_amount, pay_amt_bef_round, roundoff_amt, par_exchange_rate, pay_date, bank_cash_code, relpay_ou, reason_code, hld_reason_code, remarks, hld_remarks, rev_remarks, rev_date, notype_no, supp_area, supp_doc_no, supp_doc_date, supp_doc_amt, supp_prepay_acct, bank_cash_acct, supp_receipt_no, receipt_date, status, batch_id, createdby, createddate, modifiedby, modifieddate, tcal_exclusive_amt, total_tcal_amount, tcal_status, voucher_amount, ibe_flag, consistency_stamp, lcnumber, refid, workflow_status, tr_flag, tr_percent, tr_amount, tr_tenure, tr_duedate, receipt_no, surnotype_no, BankCurrency, crosscur_erate, bank_amount, bank_base_amount, project_ou, Project_code, afe_number, job_number, auto_gen_flag, trnsfr_inv_no, trnsfr_inv_date, trnsfr_inv_ou, lgt_invoice_flag, lgt_rev_guid, etlcreateddatetime
		FROM stg.stg_spy_prepay_vch_hdr;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_spyprepayvchhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_spyvoucherhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_spyvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_spy_voucher_hdr;

    UPDATE dwh.F_spyvoucherhdr t
    SET
      
      
        voucher_amount            = s.voucher_amount,
        vouch_amt_bef             = s.vouch_amt_bef,
        roundoff_amt              = s.roundoff_amt,
        pay_currency              = s.pay_currency,
        payee                     = s.payee,
        pay_mode                  = s.pay_mode,
        bank_cash_code            = s.bank_cash_code,
        priority                  = s.priority,
        dd_charges                = s.dd_charges,
        status                    = s.status,
        reason_code               = s.reason_code,
        rev_remarks               = s.rev_remarks,
        rev_date                  = s.rev_date,
        batch_id                  = s.batch_id,
        supp_acct_in              = s.supp_acct_in,
        supp_bank_ref             = s.supp_bank_ref,
        supp_acc_no               = s.supp_acc_no,
        lsv_id                    = s.lsv_id,
        esr_line                  = s.esr_line,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        tcal_status               = s.tcal_status,
        tcal_exclusive_amt        = s.tcal_exclusive_amt,
        request_date              = s.request_date,
        supplier_code             = s.supplier_code,
        recon_reqflg              = s.recon_reqflg,
        MAIL_SENT                 = s.MAIL_SENT,
        Loan_FA                   = s.Loan_FA,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_spy_voucher_hdr s
    WHERE t.ou_id = s.ou_id
    AND t.paybatch_no = s.paybatch_no
    AND t.voucher_no = s.voucher_no
    AND t.timestamp = s.vtimestamp
    AND t.line_no = s.line_no
    AND t.ict_flag = s.ict_flag;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_spyvoucherhdr
    (
        ou_id, paybatch_no, voucher_no, timestamp, voucher_amount, vouch_amt_bef, roundoff_amt, pay_currency, payee, pay_mode, bank_cash_code, priority, dd_charges, status, reason_code, rev_remarks, rev_date, batch_id, supp_acct_in, supp_bank_ref, supp_acc_no, lsv_id, esr_line, createdby, createddate, modifiedby, modifieddate, line_no, tcal_status, tcal_exclusive_amt, request_date, supplier_code, recon_reqflg, ict_flag, MAIL_SENT, Loan_FA, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    
)SELECT 
       s.ou_id, s.paybatch_no, s.voucher_no, s.vtimestamp, s.voucher_amount, s.vouch_amt_bef, s.roundoff_amt, s.pay_currency, s.payee, s.pay_mode, s.bank_cash_code, s.priority, s.dd_charges, s.status, s.reason_code, s.rev_remarks, s.rev_date, s.batch_id, s.supp_acct_in, s.supp_bank_ref, s.supp_acc_no, s.lsv_id, s.esr_line, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.line_no, s.tcal_status, s.tcal_exclusive_amt, s.request_date, s.supplier_code, s.recon_reqflg, s.ict_flag, s.MAIL_SENT, s.Loan_FA, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_spy_voucher_hdr s
    LEFT JOIN dwh.F_spyvoucherhdr t
    ON s.ou_id = t.ou_id
    AND s.paybatch_no = t.paybatch_no
    AND s.voucher_no = t.voucher_no
    AND s.vtimestamp = t.timestamp
    AND s.line_no = t.line_no
    AND s.ict_flag = t.ict_flag
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_spy_voucher_hdr
    (
        ou_id, paybatch_no, voucher_no, vtimestamp, voucher_amount, vouch_amt_bef, roundoff_amt, exchange_rate, par_exchange_rate, pay_currency, payee, pay_mode, bank_cash_code, priority, dd_charges, status, supp_receipt_no, receipt_date, reason_code, hld_reason_code, hld_remarks, rev_remarks, rev_date, batch_id, supp_acct_in, supp_bank_ref, supp_acc_no, lsv_id, esr_line, doc_status, createdby, createddate, modifiedby, modifieddate, line_no, tcal_status, tcal_exclusive_amt, total_tcal_amount, request_date, supplier_code, lcnumber, refid, tr_flag, tr_percent, tr_amount, tr_tenure, tr_duedate, receipt_no, tr_totalamount, recon_reqflg, ict_flag, be_amount, be_amount_base, be_totalamount, be_percent, be_currency, be_duedate, be_boeno, be_flag, be_issuedat, be_coveredamt, be_redemptionamt, be_status, Lt_loanno, Lt_loanamount, Lt_loantype, Lt_loanp, Lt_currency, Lt_anchordate, Lt_flag, Lt_loannumtype, Lt_surnumtype, Lt_loancat, Lt_loanpurp, Lt_maturitydate, Lt_Interestacc, Lt_Loanaccount, Lt_lenderid, Lt_interestid, Lt_noofinstall, Lt_costcenter, Lt_analysiscode, Lt_subanalysiscode, Lt_loandesc, Lt_loanptype, Lt_projou, Lt_projcode, MAIL_SENT, Loan_FA, gen_from, etlcreateddatetime
    )
    SELECT
        ou_id, paybatch_no, voucher_no, vtimestamp, voucher_amount, vouch_amt_bef, roundoff_amt, exchange_rate, par_exchange_rate, pay_currency, payee, pay_mode, bank_cash_code, priority, dd_charges, status, supp_receipt_no, receipt_date, reason_code, hld_reason_code, hld_remarks, rev_remarks, rev_date, batch_id, supp_acct_in, supp_bank_ref, supp_acc_no, lsv_id, esr_line, doc_status, createdby, createddate, modifiedby, modifieddate, line_no, tcal_status, tcal_exclusive_amt, total_tcal_amount, request_date, supplier_code, lcnumber, refid, tr_flag, tr_percent, tr_amount, tr_tenure, tr_duedate, receipt_no, tr_totalamount, recon_reqflg, ict_flag, be_amount, be_amount_base, be_totalamount, be_percent, be_currency, be_duedate, be_boeno, be_flag, be_issuedat, be_coveredamt, be_redemptionamt, be_status, Lt_loanno, Lt_loanamount, Lt_loantype, Lt_loanp, Lt_currency, Lt_anchordate, Lt_flag, Lt_loannumtype, Lt_surnumtype, Lt_loancat, Lt_loanpurp, Lt_maturitydate, Lt_Interestacc, Lt_Loanaccount, Lt_lenderid, Lt_interestid, Lt_noofinstall, Lt_costcenter, Lt_analysiscode, Lt_subanalysiscode, Lt_loandesc, Lt_loanptype, Lt_projou, Lt_projcode, MAIL_SENT, Loan_FA, gen_from, etlcreateddatetime
    FROM stg.stg_spy_voucher_hdr;
    
    END IF;
     EXCEPTION WHEN others THEN
         get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_spyvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stock_lottrackingdaywise_detail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stock_lottrackingdaywise_detail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stock_lot_tracking_daywise_dtl;

    UPDATE dwh.f_stock_lottrackingdaywise_detail t
    SET
        stk_loc_key				=	COALESCE (l.loc_key,-1),
		stk_item_key			=	COALESCE (i.itm_hdr_key,-1),
		stk_customer_key		=	COALESCE (c.customer_key,-1),
        stk_opn_bal              = s.wms_stk_opn_bal,
        stk_received             = s.wms_stk_received,
        stk_issued               = s.wms_stk_issued,
        stk_cls_bal              = s.wms_stk_cls_bal,
        stk_write_off_qty        = s.wms_stk_write_off_qty,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_wms_stock_lot_tracking_daywise_dtl s
	LEFT JOIN dwh.d_location l
	ON s.wms_stk_location	= l.loc_code
	AND s.wms_stk_ou		= l.loc_ou
	LEFT JOIN dwh.d_itemheader I
	ON s.wms_stk_item		= i.itm_code
	AND s.wms_stk_ou		= i.itm_ou
	LEFT JOIN dwh.d_customer c
	on s.wms_stk_customer	= c.customer_id
	and s.wms_stk_ou		= c.customer_ou
    WHERE t.stk_ou = s.wms_stk_ou
    AND t.stk_location = s.wms_stk_location
    AND t.stk_item = s.wms_stk_item
    AND t.stk_customer = s.wms_stk_customer
    AND t.stk_date = s.wms_stk_date
    AND t.stk_lot_no = s.wms_stk_lot_no
    AND t.stk_stock_status = s.wms_stk_stock_status;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_stock_lottrackingdaywise_detail
    (
	 stk_loc_key	, stk_item_key		, stk_customer_key	, stk_ou		, 
	 stk_location	, stk_item			, stk_customer		, stk_date		, 
	 stk_lot_no		, stk_stock_status	, stk_opn_bal		, stk_received	,
	 stk_issued		, stk_cls_bal		, stk_write_off_qty	, 
	 etlactiveind	, etljobname		, envsourcecd		, datasourcecd	, 
	 etlcreatedatetime
    )

    SELECT
	COALESCE (l.loc_key,-1)	, COALESCE (i.itm_hdr_key,-1)	, COALESCE (c.customer_key,-1)	,s.wms_stk_ou		,
	s.wms_stk_location		, s.wms_stk_item				, s.wms_stk_customer			, s.wms_stk_date	,
	s.wms_stk_lot_no		, s.wms_stk_stock_status		, s.wms_stk_opn_bal				, s.wms_stk_received,
	s.wms_stk_issued		, s.wms_stk_cls_bal				, s.wms_stk_write_off_qty,
			1				, p_etljobname					, p_envsourcecd					, p_datasourcecd	,
			NOW()
    FROM stg.stg_wms_stock_lot_tracking_daywise_dtl s
	LEFT JOIN dwh.d_location l
	ON s.wms_stk_location	= l.loc_code
	AND s.wms_stk_ou		= l.loc_ou
	LEFT JOIN  dwh.d_itemheader I
	ON s.wms_stk_item		= i.itm_code
	AND s.wms_stk_ou		= i.itm_ou
	LEFT JOIN dwh.d_customer c
	on s.wms_stk_customer	= c.customer_id
	and s.wms_stk_ou		= c.customer_ou
    LEFT JOIN dwh.f_stock_lottrackingdaywise_detail t
    ON s.wms_stk_ou = t.stk_ou
    AND s.wms_stk_location = t.stk_location
    AND s.wms_stk_item = t.stk_item
    AND s.wms_stk_customer = t.stk_customer
    AND s.wms_stk_date = t.stk_date
    AND s.wms_stk_lot_no = t.stk_lot_no
    AND s.wms_stk_stock_status = t.stk_stock_status
    WHERE t.stk_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_lot_tracking_daywise_dtl
    (
        wms_stk_ou			, wms_stk_location	, wms_stk_item			, wms_stk_customer		,
		wms_stk_date		, wms_stk_lot_no	, wms_stk_stock_status	, wms_stk_opn_bal		, 
		wms_stk_received	, wms_stk_issued	, wms_stk_cls_bal		, wms_stk_write_off_qty	,
		etlcreateddatetime
    )
    SELECT
        wms_stk_ou			, wms_stk_location	, wms_stk_item			, wms_stk_customer		,
		wms_stk_date		, wms_stk_lot_no	, wms_stk_stock_status	, wms_stk_opn_bal		, 
		wms_stk_received	, wms_stk_issued	, wms_stk_cls_bal		, wms_stk_write_off_qty	,
		etlcreateddatetime
	FROM stg.stg_wms_stock_lot_tracking_daywise_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_stock_lottrackingdaywise_detail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockbalanceseriallevel(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockbalanceseriallevel(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stockbal_serial;

    UPDATE dwh.F_StockBalanceSeriallevel t
    SET
        sbs_level_wh_key			  = COALESCE(w.wh_key,-1),
		sbs_level_itm_hdr_key		  = COALESCE(i.itm_hdr_key,-1),
		sbs_level_zone_key			  = COALESCE(z.zone_key,-1),
        sbs_quantity                  = s.sbs_quantity,
        sbs_wh_bat_no                 = s.sbs_wh_bat_no,
        sbs_supp_bat_no               = s.sbs_supp_bat_no,
        sbs_ido_no                    = s.sbs_ido_no,
        sbs_gr_no                     = s.sbs_gr_no,
        sbs_trantype                  = s.sbs_trantype,
        sbs_customer_serial_no        = s.sbs_customer_serial_no,
        sbs_3pl_serial_no             = s.sbs_3pl_serial_no,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_stockbal_serial s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.sbs_item_code			 = i.itm_code
		AND s.sbs_ouinstid 		 	 = i.itm_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.sbs_zone 	   	 		 = z.zone_code 
		AND s.sbs_ouinstid 		     = z.zone_ou 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.sbs_wh_code 	   	     = w.wh_code 
		AND s.sbs_ouinstid 		     = w.wh_ou 
    WHERE t.sbs_wh_code 			 = s.sbs_wh_code
    AND   t.sbs_ouinstid 			 = s.sbs_ouinstid
    AND   t.sbs_item_code 			 = s.sbs_item_code
    AND   t.sbs_sr_no 				 = s.sbs_sr_no
    AND   t.sbs_zone 				 = s.sbs_zone
    AND   t.sbs_bin 				 = s.sbs_bin
    AND   t.sbs_stock_status 	     = s.sbs_stock_status
    AND   t.sbs_lot_no 				 = s.sbs_lot_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_StockBalanceSeriallevel
    (
		sbs_level_wh_key, sbs_level_itm_hdr_key, sbs_level_zone_key,
        sbs_wh_code, sbs_ouinstid, sbs_item_code, sbs_sr_no, sbs_zone, sbs_bin, sbs_stock_status, sbs_lot_no, sbs_quantity, sbs_wh_bat_no, sbs_supp_bat_no, sbs_ido_no, sbs_gr_no, sbs_trantype, sbs_customer_serial_no, sbs_3pl_serial_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(w.wh_key,-1), COALESCE(i.itm_hdr_key,-1), COALESCE(z.zone_key,-1),
        s.sbs_wh_code, s.sbs_ouinstid, s.sbs_item_code, s.sbs_sr_no, s.sbs_zone, s.sbs_bin, s.sbs_stock_status, s.sbs_lot_no, s.sbs_quantity, s.sbs_wh_bat_no, s.sbs_supp_bat_no, s.sbs_ido_no, s.sbs_gr_no, s.sbs_trantype, s.sbs_customer_serial_no, s.sbs_3pl_serial_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_stockbal_serial s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.sbs_item_code			 = i.itm_code
		AND s.sbs_ouinstid 		 	 = i.itm_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.sbs_zone 	   	 		 = z.zone_code 
		AND s.sbs_ouinstid 		     = z.zone_ou 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.sbs_wh_code 	   	     = w.wh_code 
		AND s.sbs_ouinstid 		     = w.wh_ou 
    LEFT JOIN dwh.F_StockBalanceSeriallevel t
    ON 		s.sbs_wh_code            = t.sbs_wh_code
    AND     s.sbs_ouinstid 			 = t.sbs_ouinstid
    AND     s.sbs_item_code 		 = t.sbs_item_code
    AND     s.sbs_sr_no 			 = t.sbs_sr_no
    AND     s.sbs_zone 				 = t.sbs_zone
    AND     s.sbs_bin 				 = t.sbs_bin
    AND     s.sbs_stock_status 		 = t.sbs_stock_status
    AND     s.sbs_lot_no 			 = t.sbs_lot_no
    WHERE t.sbs_ouinstid IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stockbal_serial
    (
        sbs_wh_code, sbs_ouinstid, sbs_item_code, sbs_sr_no, sbs_zone, sbs_bin, sbs_stock_status, sbs_lot_no, sbs_quantity, sbs_wh_bat_no, sbs_supp_bat_no, sbs_ido_no, sbs_gr_no, sbs_trantype, sbs_warranty_serial_no, sbs_customer_serial_no, sbs_3pl_serial_no, etlcreateddatetime
    )
    SELECT
        sbs_wh_code, sbs_ouinstid, sbs_item_code, sbs_sr_no, sbs_zone, sbs_bin, sbs_stock_status, sbs_lot_no, sbs_quantity, sbs_wh_bat_no, sbs_supp_bat_no, sbs_ido_no, sbs_gr_no, sbs_trantype, sbs_warranty_serial_no, sbs_customer_serial_no, sbs_3pl_serial_no, etlcreateddatetime
    FROM stg.stg_wms_stockbal_serial;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockbalanceseriallevel(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockbalancestorageunitlotlevel(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockbalancestorageunitlotlevel(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stockbal_su_lot;

    UPDATE dwh.F_StockBalanceStorageunitLotLevel t
    SET
        sbl_lot_level_wh_key	 = COALESCE(w.wh_key,-1),
		sbl_lot_level_itm_hdr_key= COALESCE(i.itm_hdr_key,-1),
		sbl_lot_level_zone_key	 = COALESCE(z.zone_key,-1),
		sbl_lot_level_thu_key	 = COALESCE(th.thu_key,-1),
        sbl_su_type              = s.sbl_su_type,
        sbl_thu_id               = s.sbl_thu_id,
        sbl_quantity             = s.sbl_quantity,
        sbl_wh_bat_no            = s.sbl_wh_bat_no,
        sbl_supp_bat_no          = s.sbl_supp_bat_no,
        sbl_ido_no               = s.sbl_ido_no,
        sbl_gr_no                = s.sbl_gr_no,
        sbl_trantype             = s.sbl_trantype,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_wms_stockbal_su_lot s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.sbl_item_code			 = i.itm_code
		AND s.sbl_ouinstid 		 	 = i.itm_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.sbl_zone 	   	 		 = z.zone_code 
		AND s.sbl_ouinstid 		     = z.zone_ou 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.sbl_wh_code 	   	     = w.wh_code 
		AND s.sbl_ouinstid 		     = w.wh_ou 
	LEFT JOIN dwh.d_thu th 		
		ON  s.sbl_thu_id 	   	     = th.thu_code 
		AND s.sbl_ouinstid 		     = th.thu_ou 
    WHERE 	t.sbl_wh_code 			 = s.sbl_wh_code
    AND 	t.sbl_ouinstid 			 = s.sbl_ouinstid
    AND 	t.sbl_item_code 		 = s.sbl_item_code
    AND 	t.sbl_lot_no 	 		 = s.sbl_lot_no
    AND 	t.sbl_zone 				 = s.sbl_zone
    AND 	t.sbl_bin 				 = s.sbl_bin
    AND 	t.sbl_su 				 = s.sbl_su
    AND 	t.sbl_stock_status 		 = s.sbl_stock_status
    AND 	t.sbl_su_serial_no 		 = s.sbl_su_serial_no
    AND 	t.sbl_thu_serial_no 	 = s.sbl_thu_serial_no
    AND 	t.sbl_su_serial_no2 	 = s.sbl_su_serial_no2;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_StockBalanceStorageunitLotLevel
    (
		sbl_lot_level_wh_key, sbl_lot_level_itm_hdr_key, sbl_lot_level_zone_key, sbl_lot_level_thu_key,
        sbl_wh_code, sbl_ouinstid, sbl_item_code, sbl_lot_no, sbl_zone, sbl_bin, sbl_su, sbl_su_type, sbl_thu_id, sbl_stock_status, sbl_quantity, sbl_su_serial_no, sbl_wh_bat_no, sbl_supp_bat_no, sbl_ido_no, sbl_gr_no, sbl_trantype, sbl_thu_serial_no, sbl_su_serial_no2, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(w.wh_key,-1), COALESCE(i.itm_hdr_key,-1),  COALESCE(z.zone_key,-1), COALESCE(th.thu_key,-1),
        s.sbl_wh_code, s.sbl_ouinstid, s.sbl_item_code, s.sbl_lot_no, s.sbl_zone, s.sbl_bin, s.sbl_su, s.sbl_su_type, s.sbl_thu_id, s.sbl_stock_status, s.sbl_quantity, s.sbl_su_serial_no, s.sbl_wh_bat_no, s.sbl_supp_bat_no, s.sbl_ido_no, s.sbl_gr_no, s.sbl_trantype, s.sbl_thu_serial_no, s.sbl_su_serial_no2, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_stockbal_su_lot s
	LEFT JOIN dwh.d_itemheader i 
		ON  s.sbl_item_code			 = i.itm_code
		AND s.sbl_ouinstid 		 	 = i.itm_ou 
	LEFT JOIN dwh.d_zone z 		
		ON  s.sbl_zone 	   	 		 = z.zone_code 
		AND s.sbl_ouinstid 		     = z.zone_ou 
	LEFT JOIN dwh.d_warehouse w 		
		ON  s.sbl_wh_code 	   	     = w.wh_code 
		AND s.sbl_ouinstid 		     = w.wh_ou 
	LEFT JOIN dwh.d_thu th 		
		ON  s.sbl_thu_id 	   	     = th.thu_code 
		AND s.sbl_ouinstid 		     = th.thu_ou 
    LEFT JOIN dwh.F_StockBalanceStorageunitLotLevel t
    ON 		s.sbl_wh_code 			 = t.sbl_wh_code
    AND 	s.sbl_ouinstid 			 = t.sbl_ouinstid
    AND 	s.sbl_item_code 		 = t.sbl_item_code
    AND 	s.sbl_lot_no 			 = t.sbl_lot_no
    AND 	s.sbl_zone 				 = t.sbl_zone
    AND 	s.sbl_bin 				 = t.sbl_bin
    AND 	s.sbl_su 				 = t.sbl_su
    AND 	s.sbl_stock_status       = t.sbl_stock_status
    AND 	s.sbl_su_serial_no       = t.sbl_su_serial_no
    AND 	s.sbl_thu_serial_no      = t.sbl_thu_serial_no
    AND 	s.sbl_su_serial_no2      = t.sbl_su_serial_no2
    WHERE t.sbl_ouinstid IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stockbal_su_lot
    (
        sbl_wh_code, sbl_ouinstid, sbl_item_code, sbl_lot_no, sbl_zone, sbl_bin, sbl_su, sbl_su_type, sbl_thu_id, sbl_stock_status, sbl_quantity, sbl_su_serial_no, sbl_wh_bat_no, sbl_supp_bat_no, sbl_ido_no, sbl_gr_no, sbl_trantype, sbl_thu_serial_no, sbl_su2, sbl_su_serial_no2, etlcreateddatetime
    )
    SELECT
        sbl_wh_code, sbl_ouinstid, sbl_item_code, sbl_lot_no, sbl_zone, sbl_bin, sbl_su, sbl_su_type, sbl_thu_id, sbl_stock_status, sbl_quantity, sbl_su_serial_no, sbl_wh_bat_no, sbl_supp_bat_no, sbl_ido_no, sbl_gr_no, sbl_trantype, sbl_thu_serial_no, sbl_su2, sbl_su_serial_no2, etlcreateddatetime
    FROM stg.stg_wms_stockbal_su_lot;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockbalancestorageunitlotlevel(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockbalancestorageunitseriallevel(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockbalancestorageunitseriallevel(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stockbal_su_serial;

    UPDATE dwh.F_StockBalanceStorageunitSerialLevel t
    SET
        
        
        sbl_lot_level_itm_hdr_key		=  COALESCE(C.itm_hdr_key,-1),
        sbs_su                        = s.sbs_su,
        sbs_su_type                   = s.sbs_su_type,
        sbs_thu_id                    = s.sbs_thu_id, 
        sbs_quantity                  = s.sbs_quantity,
        sbs_wh_bat_no                 = s.sbs_wh_bat_no,
        sbs_supp_bat_no               = s.sbs_supp_bat_no,
        sbs_ido_no                    = s.sbs_ido_no,
        sbs_gr_no                     = s.sbs_gr_no,
        sbs_trantype                  = s.sbs_trantype,
        sbs_customer_serial_no        = s.sbs_customer_serial_no,
        sbs_3pl_serial_no             = s.sbs_3pl_serial_no,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_wms_stockbal_su_serial s
    LEFT JOIN dwh.d_itemheader C        
        ON s.sbs_item_code       = C.itm_code 
		AND s.sbs_ouinstid      = c.itm_ou

    WHERE t.sbs_wh_code = s.sbs_wh_code
    AND   t.sbs_ouinstid = s.sbs_ouinstid
    AND   t.sbs_item_code = s.sbs_item_code
    AND   t.sbs_sr_no = s.sbs_sr_no
    AND   t.sbs_zone = s.sbs_zone
    AND   t.sbs_bin = s.sbs_bin
    AND   t.sbs_stock_status = s.sbs_stock_status
    AND   t.sbs_lot_no = s.sbs_lot_no
    AND   t.sbs_su_serial_no = s.sbs_su_serial_no
    AND   t.sbs_thu_serial_no = s.sbs_thu_serial_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_StockBalanceStorageunitSerialLevel
    (
        sbl_lot_level_itm_hdr_key, sbs_wh_code, sbs_ouinstid, sbs_item_code, sbs_sr_no, sbs_zone, sbs_bin, sbs_stock_status, sbs_lot_no, sbs_su, sbs_su_type, sbs_thu_id, sbs_su_serial_no, sbs_quantity, sbs_wh_bat_no, sbs_supp_bat_no, sbs_ido_no, sbs_gr_no, sbs_trantype, sbs_thu_serial_no, sbs_customer_serial_no, sbs_3pl_serial_no, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(C.itm_hdr_key,-1),s.sbs_wh_code, s.sbs_ouinstid, s.sbs_item_code, s.sbs_sr_no, s.sbs_zone, s.sbs_bin, s.sbs_stock_status, s.sbs_lot_no, s.sbs_su, s.sbs_su_type, s.sbs_thu_id, s.sbs_su_serial_no, s.sbs_quantity, s.sbs_wh_bat_no, s.sbs_supp_bat_no, s.sbs_ido_no, s.sbs_gr_no, s.sbs_trantype, s.sbs_thu_serial_no, s.sbs_customer_serial_no, s.sbs_3pl_serial_no, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_stockbal_su_serial s
     LEFT JOIN dwh.d_itemheader C        
        ON s.sbs_item_code       = C.itm_code
		AND s.sbs_ouinstid      = c.itm_ou
    LEFT JOIN dwh.F_StockBalanceStorageunitSerialLevel t
    ON s.sbs_wh_code = t.sbs_wh_code
    AND s.sbs_ouinstid = t.sbs_ouinstid
    AND s.sbs_item_code = t.sbs_item_code
    AND s.sbs_sr_no = t.sbs_sr_no
    AND s.sbs_zone = t.sbs_zone
    AND s.sbs_bin = t.sbs_bin
    AND s.sbs_stock_status = t.sbs_stock_status
    AND s.sbs_lot_no = t.sbs_lot_no
    AND s.sbs_su_serial_no = t.sbs_su_serial_no
    AND s.sbs_thu_serial_no = t.sbs_thu_serial_no
    WHERE t.sbs_wh_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stockbal_su_serial
    (
        sbs_wh_code, sbs_ouinstid, sbs_item_code, sbs_sr_no, sbs_zone, sbs_bin, sbs_stock_status, sbs_lot_no, sbs_su, sbs_su_type, sbs_thu_id, sbs_su_serial_no, sbs_quantity, sbs_wh_bat_no, sbs_supp_bat_no, sbs_ido_no, sbs_gr_no, sbs_trantype, sbs_thu_serial_no, sbs_warranty_serial_no, sbs_customer_serial_no, sbs_3pl_serial_no, sbs_su2, sbs_su_serial_no2, etlcreateddatetime
    )
    SELECT
        sbs_wh_code, sbs_ouinstid, sbs_item_code, sbs_sr_no, sbs_zone, sbs_bin, sbs_stock_status, sbs_lot_no, sbs_su, sbs_su_type, sbs_thu_id, sbs_su_serial_no, sbs_quantity, sbs_wh_bat_no, sbs_supp_bat_no, sbs_ido_no, sbs_gr_no, sbs_trantype, sbs_thu_serial_no, sbs_warranty_serial_no, sbs_customer_serial_no, sbs_3pl_serial_no, sbs_su2, sbs_su_serial_no2, etlcreateddatetime
    FROM stg.stg_wms_stockbal_su_serial;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockbalancestorageunitseriallevel(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockbinhistorydetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockbinhistorydetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stock_bin_history_dtl;

    UPDATE dwh.f_stockBinHistoryDetail t
    SET
        bin_dtl_key                    = COALESCE(fh.bin_dtl_key,-1),
	    stock_loc_key                  = COALESCE(l.loc_key,-1),
		stock_thu_key                  = COALESCE(h.thu_key,-1),
		stock_item_key                 = COALESCE(it.itm_hdr_key,-1),
		stock_cust_key                 = COALESCE(c.customer_key,-1),
        stock_bin_type                 = s.wms_stock_bin_type,
        stock_customer                 = s.wms_stock_customer,
        stock_opening_bal              = s.wms_stock_opening_bal,
        stock_in_qty                   = s.wms_stock_in_qty,
        stock_out_qty                  = s.wms_stock_out_qty,
        stock_bin_qty                  = s.wms_stock_bin_qty,
        stock_su_opening_bal           = s.wms_stock_su_opening_bal,
        stock_su_count_qty_in          = s.wms_stock_su_count_qty_in,
        stock_su_count_qty_out         = s.wms_stock_su_count_qty_out,
        stock_su_count_qty_bal         = s.wms_stock_su_count_qty_bal,
        stock_thu_opening_bal          = s.wms_stock_thu_opening_bal,
        stock_thu_count_qty_in         = s.wms_stock_thu_count_qty_in,
        stock_thu_count_qty_out        = s.wms_stock_thu_count_qty_out,
        stock_thu_count_qty_bal        = s.wms_stock_thu_count_qty_bal,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_stock_bin_history_dtl s
    LEFT JOIN dwh.f_bindetails fh 	
        on  fh.bin_ou       = s.wms_stock_ou
        and fh.bin_code     = s.wms_stock_bin
        and fh.bin_loc_code = s.wms_stock_location
        and fh.bin_zone     = s.wms_stock_zone
        and fh.bin_type     = s.wms_stock_bin_type
	LEFT JOIN dwh.d_location L 		
		ON s.wms_stock_location	 			= L.loc_code 
        AND s.wms_stock_ou	        		= L.loc_ou
	LEFT JOIN dwh.d_itemheader it 			
		ON s.wms_stock_item					= it.itm_code
        AND s.wms_stock_ou	        		= it.itm_ou
	LEFT JOIN dwh.d_customer c
	    ON s.wms_stock_customer				= c.customer_id
		AND s.wms_stock_ou	        		= c.customer_ou 
	LEFT JOIN dwh.d_thu h
		ON  s.wms_stock_thu_id				= h.thu_id
		AND s.wms_stock_ou					= h.thu_ou

    WHERE t.stock_ou						= s.wms_stock_ou
	AND t.stock_bin							= s.wms_stock_bin
	AND t.stock_location					= s.wms_stock_location
	AND t.stock_zone						= s.wms_stock_zone
	AND t.stock_bin_type					= s.wms_stock_bin_type
    AND t.stock_date						= s.wms_stock_date    
    AND t.stock_item						= s.wms_stock_item
    AND t.stock_thu_id						= s.wms_stock_thu_id
    AND t.stock_su							= s.wms_stock_su;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_stockBinHistoryDetail
    (
	    bin_dtl_key,stock_loc_key,stock_thu_key,stock_item_key,stock_cust_key,
        stock_ou, stock_date, stock_location, stock_zone, stock_bin, stock_bin_type, stock_customer, stock_item, stock_opening_bal, stock_in_qty, stock_out_qty, stock_bin_qty, stock_thu_id, stock_su_opening_bal, stock_su_count_qty_in, stock_su_count_qty_out, stock_su_count_qty_bal, stock_su, stock_thu_opening_bal, stock_thu_count_qty_in, stock_thu_count_qty_out, stock_thu_count_qty_bal, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
	    COALESCE(fh.bin_dtl_key,-1),COALESCE(l.loc_key,-1),COALESCE(h.thu_key,-1),COALESCE(it.itm_hdr_key,-1),COALESCE(c.customer_key,-1),
        s.wms_stock_ou, s.wms_stock_date, s.wms_stock_location, s.wms_stock_zone, s.wms_stock_bin, s.wms_stock_bin_type, s.wms_stock_customer, TRIM(s.wms_stock_item), s.wms_stock_opening_bal, s.wms_stock_in_qty, s.wms_stock_out_qty, s.wms_stock_bin_qty, s.wms_stock_thu_id, s.wms_stock_su_opening_bal, s.wms_stock_su_count_qty_in, s.wms_stock_su_count_qty_out, s.wms_stock_su_count_qty_bal, s.wms_stock_su, s.wms_stock_thu_opening_bal, s.wms_stock_thu_count_qty_in, s.wms_stock_thu_count_qty_out, s.wms_stock_thu_count_qty_bal, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_stock_bin_history_dtl s
    LEFT JOIN dwh.f_bindetails fh 	
        on  fh.bin_ou       = s.wms_stock_ou
        and fh.bin_code     = s.wms_stock_bin
        and fh.bin_loc_code = s.wms_stock_location
        and fh.bin_zone     = s.wms_stock_zone
        and fh.bin_type     = s.wms_stock_bin_type
	LEFT JOIN dwh.d_location L 		
		ON s.wms_stock_location	 			= L.loc_code 
        AND s.wms_stock_ou	        		= L.loc_ou
	LEFT JOIN dwh.d_itemheader it 			
		ON s.wms_stock_item					= it.itm_code
        AND s.wms_stock_ou	        		= it.itm_ou
	LEFT JOIN dwh.d_customer c
	    ON s.wms_stock_customer				= c.customer_id
		AND s.wms_stock_ou	        		= c.customer_ou 
	LEFT JOIN dwh.d_thu h
		ON  s.wms_stock_thu_id				= h.thu_id
		AND s.wms_stock_ou					= h.thu_ou
    LEFT JOIN dwh.f_stockBinHistoryDetail t
		ON t.stock_ou						= s.wms_stock_ou
		AND t.stock_bin							= s.wms_stock_bin
		AND t.stock_location					= s.wms_stock_location
		AND t.stock_zone						= s.wms_stock_zone
		AND t.stock_bin_type					= s.wms_stock_bin_type
    	AND t.stock_date						= s.wms_stock_date    
    	AND t.stock_item						= s.wms_stock_item
    	AND t.stock_thu_id						= s.wms_stock_thu_id
    	AND t.stock_su							= s.wms_stock_su
	WHERE t.stock_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_bin_history_dtl
    (
        wms_stock_ou, wms_stock_date, wms_stock_location, wms_stock_zone, wms_stock_bin, wms_stock_bin_type, wms_stock_customer, wms_stock_item, wms_stock_opening_bal, wms_stock_in_qty, wms_stock_out_qty, wms_stock_bin_qty, wms_stock_thu_id, wms_stock_su_opening_bal, wms_stock_su_count_qty_in, wms_stock_su_count_qty_out, wms_stock_su_count_qty_bal, wms_stock_su, wms_stock_thu_opening_bal, wms_stock_thu_count_qty_in, wms_stock_thu_count_qty_out, wms_stock_thu_count_qty_bal, etlcreateddatetime
    )
    SELECT
        wms_stock_ou, wms_stock_date, wms_stock_location, wms_stock_zone, wms_stock_bin, wms_stock_bin_type, wms_stock_customer, wms_stock_item, wms_stock_opening_bal, wms_stock_in_qty, wms_stock_out_qty, wms_stock_bin_qty, wms_stock_thu_id, wms_stock_su_opening_bal, wms_stock_su_count_qty_in, wms_stock_su_count_qty_out, wms_stock_su_count_qty_bal, wms_stock_su, wms_stock_thu_opening_bal, wms_stock_thu_count_qty_in, wms_stock_thu_count_qty_out, wms_stock_thu_count_qty_bal, etlcreateddatetime
    FROM stg.stg_wms_stock_bin_history_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockbinhistorydetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockconversiondetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockconversiondetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid 					= h.sourceid
    WHERE d.sourceid 					= p_sourceId
        AND d.dataflowflag 				= p_dataflowflag
        AND d.targetobject 				= p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stock_conversion_dtl;

    UPDATE dwh.f_stockconversiondetail t
    SET
        stk_con_hdr_key                  	= COALESCE(sh.stk_con_hdr_key,-1),
        stk_con_dtl_loc_key              	= COALESCE(l.loc_key,-1),
        stk_con_dtl_customer_key         	= COALESCE(c.customer_key,-1),
        stk_con_dtl_itm_hdr_key			 	= COALESCE(i.itm_hdr_key,-1),
        stk_con_dtl_zone_key             	= COALESCE(z.zone_key,-1),
        stk_con_lineno                   	= s.wms_stk_con_lineno,
        stk_con_cust_no                  	= s.wms_stk_con_cust_no,
        stk_con_item_code                	= s.wms_stk_con_item_code,
        stk_con_item_batch_no            	= s.wms_stk_con_item_batch_no,
        stk_con_item_sr_no               	= s.wms_stk_con_item_sr_no,
        stk_con_bin                      	= s.wms_stk_con_bin,
        stk_con_qty                      	= s.wms_stk_con_qty,
        stk_con_from_status              	= s.wms_stk_con_from_status,
        stk_con_to_status                	= s.wms_stk_con_to_status,
        stk_con_from_qty                 	= s.wms_stk_con_from_qty,
        stk_con_to_qty                   	= s.wms_stk_con_to_qty,
        stk_con_status                   	= s.wms_stk_con_status,
        stk_con_remarks                  	= s.wms_stk_con_remarks,
        stk_con_su                       	= s.wms_stk_con_su,
        stk_con_uid_serial_no            	= s.wms_stk_con_uid_serial_no,
        stk_con_zone                     	= s.wms_stk_con_zone,
        stk_con_batchno                  	= s.wms_stk_con_batchno,
        stk_con_source_staging_id        	= s.wms_stk_con_source_staging_id,
        stk_con_tar_bin                  	= s.wms_stk_con_tar_bin,
        stk_gr_line_no                   	= s.wms_stk_gr_line_no,
        stk_gr_exec_no                   	= s.wms_stk_gr_exec_no,
        stk_con_res_code                 	= s.wms_stk_con_res_code,
        stk_wrtoff_qlty                  	= s.wms_stk_wrtoff_qlty,
        stk_con_stksts                   	= s.wms_stk_con_stksts,
        stk_con_from_thu_srno            	= s.wms_stk_con_from_thu_srno,
        stk_con_coo                      	= s.wms_stk_con_coo,
        stk_con_inven_type               	= s.wms_stk_con_inven_type,
        stk_con_item_atrib1              	= s.wms_stk_con_item_atrib1,
        stk_con_item_atrib2              	= s.wms_stk_con_item_atrib2,
        stk_con_item_atrib3              	= s.wms_stk_con_item_atrib3,
        stk_con_prod_status              	= s.wms_stk_con_prod_status,
        stk_con_stk_lineno               	= s.wms_stk_con_stk_lineno,
        stk_con_curr_stock_qty           	= s.wms_stk_con_curr_stock_qty,
        stk_con_item_atrib6              	= s.wms_stk_con_item_atrib6,
        etlactiveind                     	= 1,
        etljobname                       	= p_etljobname,
        envsourcecd                      	= p_envsourcecd,
        datasourcecd                     	= p_datasourcecd,
        etlupdatedatetime                	= NOW()
    FROM stg.stg_wms_stock_conversion_dtl s
	INNER JOIN dwh.f_stockconversionheader sh
		ON  s.wms_stk_con_loc_code 			= sh.stk_con_loc_code
		AND s.wms_stk_con_proposal_no 		= sh.stk_con_proposal_no
		AND s.wms_stk_con_proposal_ou		= sh.stk_con_proposal_ou
	LEFT JOIN dwh.d_location l	
		ON  s.wms_stk_con_loc_code 			= l.loc_code
		AND s.wms_stk_con_proposal_ou		= l.loc_ou
	LEFT JOIN dwh.d_customer c	
		ON  s.wms_stk_con_cust_no 			= c.customer_id
		AND s.wms_stk_con_proposal_ou		= c.customer_ou
	LEFT JOIN dwh.d_itemheader i	
		ON  s.wms_stk_con_item_code 		= i.itm_code
		AND s.wms_stk_con_proposal_ou		= i.itm_ou
	LEFT JOIN dwh.d_zone z	
		ON  s.wms_stk_con_zone				= z.zone_code
		AND s.wms_stk_con_loc_code 			= z.zone_loc_code
		AND s.wms_stk_con_proposal_ou		= z.zone_ou		
    WHERE   t.stk_con_loc_code 				= s.wms_stk_con_loc_code
		AND t.stk_con_proposal_no 			= s.wms_stk_con_proposal_no
		AND t.stk_con_proposal_ou 			= s.wms_stk_con_proposal_ou
		AND t.stk_con_lineno 				= s.wms_stk_con_lineno;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_stockconversiondetail
    (
        stk_con_hdr_key					, stk_con_dtl_loc_key				, stk_con_dtl_customer_key		, stk_con_dtl_itm_hdr_key, 
		stk_con_dtl_zone_key			, stk_con_loc_code					, stk_con_proposal_no			, stk_con_proposal_ou, 
		stk_con_lineno					, stk_con_cust_no					, stk_con_item_code				, stk_con_item_batch_no, 
		stk_con_item_sr_no				, stk_con_bin						, stk_con_qty					, stk_con_from_status, 
		stk_con_to_status				, stk_con_from_qty					, stk_con_to_qty				, stk_con_status, 
		stk_con_remarks					, stk_con_su						, stk_con_uid_serial_no			, stk_con_zone, 
		stk_con_batchno					, stk_con_source_staging_id			, stk_con_tar_bin				, stk_gr_line_no, 
		stk_gr_exec_no					, stk_con_res_code					, stk_wrtoff_qlty				, stk_con_stksts, 
		stk_con_from_thu_srno			, stk_con_coo						, stk_con_inven_type			, stk_con_item_atrib1, 
		stk_con_item_atrib2				, stk_con_item_atrib3				, stk_con_prod_status			, stk_con_stk_lineno, 
		stk_con_curr_stock_qty			, stk_con_item_atrib6				, etlactiveind					, etljobname, 
		envsourcecd						, datasourcecd						, etlcreatedatetime
    )

    SELECT
        COALESCE(sh.stk_con_hdr_key,-1)	, COALESCE(l.loc_key,-1)			, COALESCE(c.customer_key,-1)	, COALESCE(i.itm_hdr_key,-1), 
		COALESCE(z.zone_key,-1)			, s.wms_stk_con_loc_code			, s.wms_stk_con_proposal_no		, s.wms_stk_con_proposal_ou, 
		s.wms_stk_con_lineno			, s.wms_stk_con_cust_no				, s.wms_stk_con_item_code		, s.wms_stk_con_item_batch_no, 
		s.wms_stk_con_item_sr_no		, s.wms_stk_con_bin					, s.wms_stk_con_qty				, s.wms_stk_con_from_status, 
		s.wms_stk_con_to_status			, s.wms_stk_con_from_qty			, s.wms_stk_con_to_qty			, s.wms_stk_con_status, 
		s.wms_stk_con_remarks			, s.wms_stk_con_su					, s.wms_stk_con_uid_serial_no	, s.wms_stk_con_zone, 
		s.wms_stk_con_batchno			, s.wms_stk_con_source_staging_id	, s.wms_stk_con_tar_bin			, s.wms_stk_gr_line_no, 
		s.wms_stk_gr_exec_no			, s.wms_stk_con_res_code			, s.wms_stk_wrtoff_qlty			, s.wms_stk_con_stksts, 
		s.wms_stk_con_from_thu_srno		, s.wms_stk_con_coo					, s.wms_stk_con_inven_type		, s.wms_stk_con_item_atrib1, 
		s.wms_stk_con_item_atrib2		, s.wms_stk_con_item_atrib3			, s.wms_stk_con_prod_status		, s.wms_stk_con_stk_lineno, 
		s.wms_stk_con_curr_stock_qty	, s.wms_stk_con_item_atrib6			, 1								, p_etljobname, 
		p_envsourcecd					, p_datasourcecd					, NOW()
    FROM stg.stg_wms_stock_conversion_dtl s
	INNER JOIN dwh.f_stockconversionheader sh
		ON  s.wms_stk_con_loc_code 			= sh.stk_con_loc_code
		AND s.wms_stk_con_proposal_no 		= sh.stk_con_proposal_no
		AND s.wms_stk_con_proposal_ou		= sh.stk_con_proposal_ou
	LEFT JOIN dwh.d_location l	
		ON  s.wms_stk_con_loc_code 			= l.loc_code
		AND s.wms_stk_con_proposal_ou		= l.loc_ou
	LEFT JOIN dwh.d_customer c	
		ON  s.wms_stk_con_cust_no 			= c.customer_id
		AND s.wms_stk_con_proposal_ou		= c.customer_ou
	LEFT JOIN dwh.d_itemheader i	
		ON  s.wms_stk_con_item_code 		= i.itm_code
		AND s.wms_stk_con_proposal_ou		= i.itm_ou
	LEFT JOIN dwh.d_zone z	
		ON  s.wms_stk_con_zone				= z.zone_code
		AND s.wms_stk_con_loc_code 			= z.zone_loc_code
		AND s.wms_stk_con_proposal_ou		= z.zone_ou		
    LEFT JOIN dwh.f_stockconversiondetail t
		ON  s.wms_stk_con_loc_code 			= t.stk_con_loc_code
		AND s.wms_stk_con_proposal_no 		= t.stk_con_proposal_no
		AND s.wms_stk_con_proposal_ou 		= t.stk_con_proposal_ou
		AND s.wms_stk_con_lineno 			= t.stk_con_lineno
    WHERE t.stk_con_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_conversion_dtl
    (
        wms_stk_con_loc_code			, wms_stk_con_proposal_no		, wms_stk_con_proposal_ou		, wms_stk_con_lineno, 
		wms_stk_con_cust_no				, wms_stk_con_item_code			, wms_stk_con_item_batch_no		, wms_stk_con_item_sr_no, 
		wms_stk_con_bin					, wms_stk_con_qty				, wms_stk_con_from_status		, wms_stk_con_to_status, 
		wms_stk_con_target_bin			, wms_stk_con_from_qty			, wms_stk_con_to_qty			, wms_stk_con_status, 
		wms_stk_con_remarks				, wms_stk_con_su				, wms_stk_con_uid_serial_no		, wms_stk_con_zone, 
		wms_stk_con_batchno				, wms_stk_con_source_staging_id	, wms_stk_con_tar_bin			, wms_stk_gr_line_no, 
		wms_stk_gr_exec_no				, wms_stk_con_res_code			, wms_stk_wrtoff_qlty_ctrl		, wms_stk_wrtoff_qlty, 
		wms_stk_con_stksts				, wms_stk_con_from_thu_srno		, wms_stk_con_target_thu_srno	, wms_stk_con_coo, 
		wms_stk_con_inven_type			, wms_stk_con_item_atrib1		, wms_stk_con_item_atrib2		, wms_stk_con_item_atrib3, 
		wms_stk_con_item_atrib4			, wms_stk_con_item_atrib5		, wms_stk_con_prod_status		, wms_stk_con_thu_type, 
		wms_stk_con_stk_lineno			, wms_stk_con_curr_stock_qty	, wms_stk_con_su1_qty			, wms_stk_con_su2, 
		wms_stk_con_uid_serial_no2		, wms_stk_con_su2_qty			, wms_stk_con_qty_UOM			, wms_stk_con_profile_type, 
		wms_stk_con_mas_to_qty			, wms_stk_con_item_atrib6		, wms_stk_con_item_atrib7		, wms_stk_con_item_atrib8, 
		wms_stk_con_item_atrib9			, wms_stk_con_item_atrib10		, etlcreateddatetime
    )
    SELECT
        wms_stk_con_loc_code			, wms_stk_con_proposal_no		, wms_stk_con_proposal_ou		, wms_stk_con_lineno, 
		wms_stk_con_cust_no				, wms_stk_con_item_code			, wms_stk_con_item_batch_no		, wms_stk_con_item_sr_no, 
		wms_stk_con_bin					, wms_stk_con_qty				, wms_stk_con_from_status		, wms_stk_con_to_status, 
		wms_stk_con_target_bin			, wms_stk_con_from_qty			, wms_stk_con_to_qty			, wms_stk_con_status, 
		wms_stk_con_remarks				, wms_stk_con_su				, wms_stk_con_uid_serial_no		, wms_stk_con_zone, 
		wms_stk_con_batchno				, wms_stk_con_source_staging_id	, wms_stk_con_tar_bin			, wms_stk_gr_line_no, 
		wms_stk_gr_exec_no				, wms_stk_con_res_code			, wms_stk_wrtoff_qlty_ctrl		, wms_stk_wrtoff_qlty, 
		wms_stk_con_stksts				, wms_stk_con_from_thu_srno		, wms_stk_con_target_thu_srno	, wms_stk_con_coo, 
		wms_stk_con_inven_type			, wms_stk_con_item_atrib1		, wms_stk_con_item_atrib2		, wms_stk_con_item_atrib3, 
		wms_stk_con_item_atrib4			, wms_stk_con_item_atrib5		, wms_stk_con_prod_status		, wms_stk_con_thu_type, 
		wms_stk_con_stk_lineno			, wms_stk_con_curr_stock_qty	, wms_stk_con_su1_qty			, wms_stk_con_su2, 
		wms_stk_con_uid_serial_no2		, wms_stk_con_su2_qty			, wms_stk_con_qty_UOM			, wms_stk_con_profile_type, 
		wms_stk_con_mas_to_qty			, wms_stk_con_item_atrib6		, wms_stk_con_item_atrib7		, wms_stk_con_item_atrib8, 
		wms_stk_con_item_atrib9			, wms_stk_con_item_atrib10		, etlcreateddatetime
	FROM stg.stg_wms_stock_conversion_dtl;
    END IF;

    EXCEPTION WHEN others THEN
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockconversiondetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockconversionheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockconversionheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid 			= h.sourceid
    WHERE d.sourceid 			= p_sourceId
        AND d.dataflowflag 		= p_dataflowflag
        AND d.targetobject 		= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_stock_conversion_hdr;

    UPDATE dwh.F_StockConversionHeader t
    SET
        stk_con_loc_key 						= COALESCE(l.loc_key,-1),
        stk_con_date_key 						= COALESCE(d.datekey,-1),
        stk_con_proposal_date          			= s.wms_stk_con_proposal_date,
        stk_con_proposal_status        			= s.wms_stk_con_proposal_status,
        stk_con_proposal_type          			= s.wms_stk_con_proposal_type,
        stk_con_ref_doc_no             			= s.wms_stk_con_ref_doc_no,
        stk_con_approver               			= s.wms_stk_con_approver,
        stk_con_remarks                			= s.wms_stk_con_remarks,
        stk_con_created_by             			= s.wms_stk_con_created_by,
        stk_con_created_date           			= s.wms_stk_con_created_date,
        stk_con_modified_by            			= s.wms_stk_con_modified_by,
        stk_con_modified_date          			= s.wms_stk_con_modified_date,
        stk_con_timestamp              			= s.wms_stk_con_timestamp,
        etlactiveind                   			= 1,
        etljobname                     			= p_etljobname,
        envsourcecd                    			= p_envsourcecd,
        datasourcecd                   			= p_datasourcecd,
        etlupdatedatetime              			= NOW()
    FROM stg.stg_wms_stock_conversion_hdr s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_con_loc_code 				= l.loc_code
		AND s.wms_stk_con_proposal_ou			= l.loc_ou
	LEFT JOIN dwh.d_date d	
		ON  s.wms_stk_con_proposal_date::date 	= d.dateactual
    WHERE   t.stk_con_loc_code 					= s.wms_stk_con_loc_code
		AND t.stk_con_proposal_no 				= s.wms_stk_con_proposal_no
		AND t.stk_con_proposal_ou 				= s.wms_stk_con_proposal_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_StockConversionHeader
    (
        stk_con_loc_key				, stk_con_date_key				, stk_con_loc_code				, stk_con_proposal_no, 
		stk_con_proposal_ou			, stk_con_proposal_date			, stk_con_proposal_status		, stk_con_proposal_type, 
		stk_con_ref_doc_no			, stk_con_approver				, stk_con_remarks				, stk_con_created_by, 
		stk_con_created_date		, stk_con_modified_by			, stk_con_modified_date			, stk_con_timestamp, 
		etlactiveind				, etljobname					, envsourcecd					, datasourcecd					, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1)		, COALESCE(d.datekey,-1)		, s.wms_stk_con_loc_code		, s.wms_stk_con_proposal_no, 
		s.wms_stk_con_proposal_ou	, s.wms_stk_con_proposal_date	, s.wms_stk_con_proposal_status	, s.wms_stk_con_proposal_type, 
		s.wms_stk_con_ref_doc_no	, s.wms_stk_con_approver		, s.wms_stk_con_remarks			, s.wms_stk_con_created_by, 
		s.wms_stk_con_created_date	, s.wms_stk_con_modified_by		, s.wms_stk_con_modified_date	, s.wms_stk_con_timestamp, 
		1							, p_etljobname					, p_envsourcecd					, p_datasourcecd				, NOW()
    FROM stg.stg_wms_stock_conversion_hdr s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_con_loc_code 				= l.loc_code
		AND s.wms_stk_con_proposal_ou			= l.loc_ou
	LEFT JOIN dwh.d_date d	
		ON  s.wms_stk_con_proposal_date::date 	= d.dateactual	
    LEFT JOIN dwh.F_StockConversionHeader t
		ON  s.wms_stk_con_loc_code 				= t.stk_con_loc_code
		AND s.wms_stk_con_proposal_no 			= t.stk_con_proposal_no
		AND s.wms_stk_con_proposal_ou 			= t.stk_con_proposal_ou
    WHERE   t.stk_con_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_conversion_hdr
    (
        wms_stk_con_loc_code			, wms_stk_con_proposal_no			, wms_stk_con_proposal_ou	, wms_stk_con_proposal_date, 
		wms_stk_con_proposal_status		, wms_stk_con_proposal_type			, wms_stk_con_ref_doc_no	, wms_stk_con_approver, 
		wms_stk_con_remarks				, wms_stk_con_created_by			, wms_stk_con_created_date	, wms_stk_con_modified_by, 
		wms_stk_con_modified_date		, wms_stk_con_timestamp				, wms_stk_con_userdefined1	, wms_stk_con_userdefined2, 
		wms_stk_con_userdefined3		, wms_stk_recasfee_last_bil_date	, etlcreateddatetime
    )
    SELECT
        wms_stk_con_loc_code			, wms_stk_con_proposal_no			, wms_stk_con_proposal_ou	, wms_stk_con_proposal_date, 
		wms_stk_con_proposal_status		, wms_stk_con_proposal_type			, wms_stk_con_ref_doc_no	, wms_stk_con_approver, 
		wms_stk_con_remarks				, wms_stk_con_created_by			, wms_stk_con_created_date	, wms_stk_con_modified_by, 
		wms_stk_con_modified_date		, wms_stk_con_timestamp				, wms_stk_con_userdefined1	, wms_stk_con_userdefined2, 
		wms_stk_con_userdefined3		, wms_stk_recasfee_last_bil_date	, etlcreateddatetime
	FROM stg.stg_wms_stock_conversion_hdr;
    END IF;

    EXCEPTION
        WHEN others THEN
        GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockconversionheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockrejecteddetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockrejecteddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON  d.sourceid 			= h.sourceid
    WHERE   d.sourceid 			= p_sourceId
        AND d.dataflowflag 		= p_dataflowflag
        AND d.targetobject 		= p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_stock_rejected_dtl;

    UPDATE dwh.f_stockrejecteddetail t
    SET
        rejstk_dtl_loc_key			= COALESCE(l.loc_key,-1),
		rejstk_dtl_itm_hdr_key		= COALESCE(i.itm_hdr_key,-1),
		rejstk_dtl_thu_key			= COALESCE(th.thu_key,-1),
		rejstk_loc_code             = s.wms_rejstk_loc_code,
        rejstk_ou                   = s.wms_rejstk_ou,
        rejstk_gr_no                = s.wms_rejstk_gr_no,
        rejstk_item_code            = s.wms_rejstk_item_code,
        rejstk_gr_line_no           = s.wms_rejstk_gr_line_no,
        rejstk_rejected_qty         = s.wms_rejstk_rejected_qty,
        rejstk_created_by           = s.wms_rejstk_created_by,
        rejstk_created_date         = s.wms_rejstk_created_date,
        rejstk_modified_by          = s.wms_rejstk_modified_by,
        rejstk_modified_date        = s.wms_rejstk_modified_date,
        rejstk_staging_id           = s.wms_rejstk_staging_id,
        rejstk_line_no              = s.wms_rejstk_line_no,
        rejstk_lot_no               = s.wms_rejstk_lot_no,
        rejstk_gr_exec_no           = s.wms_rejstk_gr_exec_no,
        rejstk_thuid                = s.wms_rejstk_thuid,
        rejstk_thu_ser_no           = s.wms_rejstk_thu_ser_no,
        etlactiveind                = 1,
        etljobname                  = p_etljobname,
        envsourcecd                 = p_envsourcecd,
        datasourcecd                = p_datasourcecd,
        etlupdatedatetime           = NOW()
    FROM stg.stg_wms_stock_rejected_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_rejstk_loc_code	= l.loc_code
		AND s.wms_rejstk_ou			= l.loc_ou
	LEFT JOIN dwh.d_itemheader i
		ON  s.wms_rejstk_item_code	= i.itm_code
		AND s.wms_rejstk_ou			= i.itm_ou
	LEFT JOIN dwh.d_thu th
		ON  s.wms_rejstk_thuid		= th.thu_id
		AND s.wms_rejstk_ou			= th.thu_ou		
    WHERE   t.rejstk_line_no		= s.wms_rejstk_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_stockrejecteddetail
    (
        rejstk_dtl_loc_key			, rejstk_dtl_itm_hdr_key		, rejstk_dtl_thu_key		, rejstk_loc_code, 
		rejstk_ou					, rejstk_gr_no					, rejstk_item_code			, rejstk_gr_line_no, 
		rejstk_rejected_qty			, rejstk_created_by				, rejstk_created_date		, rejstk_modified_by, 
		rejstk_modified_date		, rejstk_staging_id				, rejstk_line_no			, rejstk_lot_no, 
		rejstk_gr_exec_no			, rejstk_thuid					, rejstk_thu_ser_no			, etlactiveind, 
		etljobname					, envsourcecd					, datasourcecd				, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1)		, COALESCE(i.itm_hdr_key,-1)	, COALESCE(th.thu_key,-1)	, s.wms_rejstk_loc_code, 
		s.wms_rejstk_ou				, s.wms_rejstk_gr_no			, s.wms_rejstk_item_code	, s.wms_rejstk_gr_line_no, 
		s.wms_rejstk_rejected_qty	, s.wms_rejstk_created_by		, s.wms_rejstk_created_date	, s.wms_rejstk_modified_by, 
		s.wms_rejstk_modified_date	, s.wms_rejstk_staging_id		, s.wms_rejstk_line_no		, s.wms_rejstk_lot_no, 
		s.wms_rejstk_gr_exec_no		, s.wms_rejstk_thuid			, s.wms_rejstk_thu_ser_no	, 1, 
		p_etljobname, p_envsourcecd	, p_datasourcecd				, NOW()
    FROM stg.stg_wms_stock_rejected_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_rejstk_loc_code	= l.loc_code
		AND s.wms_rejstk_ou			= l.loc_ou
	LEFT JOIN dwh.d_itemheader i
		ON  s.wms_rejstk_item_code	= i.itm_code
		AND s.wms_rejstk_ou			= i.itm_ou
	LEFT JOIN dwh.d_thu th
		ON  s.wms_rejstk_thuid		= th.thu_id
		AND s.wms_rejstk_ou			= th.thu_ou
    LEFT JOIN dwh.f_stockrejecteddetail t
		ON  s.wms_rejstk_line_no	= t.rejstk_line_no
    WHERE   t.rejstk_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_rejected_dtl
    (
        wms_rejstk_loc_code		, wms_rejstk_ou				, wms_rejstk_gr_no			, wms_rejstk_item_code, 
		wms_rejstk_gr_line_no	, wms_rejstk_rejected_qty	, wms_rejstk_created_by		, wms_rejstk_created_date, 
		wms_rejstk_modified_by	, wms_rejstk_modified_date	, wms_rejstk_staging_id		, wms_rejstk_line_no, 
		wms_rejstk_lot_no		, wms_stk_sts				, wms_rejstk_gr_exec_no		, wms_rejstk_thuid, 
		wms_rejstk_thu_ser_no	, wms_rejstk_thuid_2		, wms_rejstk_thu_ser_no_2	, wms_rejstk_su1_conv_flg, 
		wms_rejstk_su2_conv_flg	, etlcreateddatetime
    )
    SELECT
        wms_rejstk_loc_code		, wms_rejstk_ou				, wms_rejstk_gr_no			, wms_rejstk_item_code, 
		wms_rejstk_gr_line_no	, wms_rejstk_rejected_qty	, wms_rejstk_created_by		, wms_rejstk_created_date, 
		wms_rejstk_modified_by	, wms_rejstk_modified_date	, wms_rejstk_staging_id		, wms_rejstk_line_no, 
		wms_rejstk_lot_no		, wms_stk_sts				, wms_rejstk_gr_exec_no		, wms_rejstk_thuid, 
		wms_rejstk_thu_ser_no	, wms_rejstk_thuid_2		, wms_rejstk_thu_ser_no_2	, wms_rejstk_su1_conv_flg, 
		wms_rejstk_su2_conv_flg	, etlcreateddatetime
	FROM stg.stg_wms_stock_rejected_dtl;
    END IF;

    EXCEPTION WHEN others THEN
	GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockrejecteddetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockstoragebalancedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockstoragebalancedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt FROM stg.stg_wms_stock_su_bal_dtl;

    UPDATE dwh.f_stockstoragebalancedetail t
    SET
        stk_su_loc_key				= COALESCE(l.loc_key,-1),
		stk_su_customer_key			= COALESCE(c.customer_key,-1),        
        stk_su_opn_bal         		= s.wms_stk_su_opn_bal,
        stk_su_received        		= s.wms_stk_su_received,
        stk_su_issued          		= s.wms_stk_su_issued,
        stk_su_cls_bal         		= s.wms_stk_su_cls_bal,
        stk_su_peak_qty        		= s.wms_stk_su_peak_qty,
        etlactiveind           		= 1,
        etljobname             		= p_etljobname,
        envsourcecd            		= p_envsourcecd,
        datasourcecd           		= p_datasourcecd,
        etlupdatedatetime      		= NOW()
    FROM stg.stg_wms_stock_su_bal_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_location		= l.loc_code
		AND s.wms_stk_ou			= l.loc_ou
	LEFT JOIN dwh.d_customer c
		ON  TRIM(s.wms_stk_customer)= TRIM(c.customer_id)
		AND s.wms_stk_ou			= c.customer_ou
	WHERE   t.stk_ou 				= s.wms_stk_ou
		AND t.stk_location 			= s.wms_stk_location
		AND TRIM(t.stk_customer)	= TRIM(s.wms_stk_customer)
		AND t.stk_date 				= s.wms_stk_date
		AND t.stk_su 				= s.wms_stk_su;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_stockstoragebalancedetail
    (
        stk_su_loc_key			, stk_su_customer_key			, stk_ou				, stk_location, 
		stk_customer			, stk_date						, stk_su				, stk_su_opn_bal, 
		stk_su_received			, stk_su_issued					, stk_su_cls_bal		, stk_su_peak_qty, 
		etlactiveind			, etljobname					, envsourcecd			, datasourcecd			, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1)	, COALESCE(c.customer_key,-1)	, s.wms_stk_ou			, s.wms_stk_location, 
		TRIM(s.wms_stk_customer), s.wms_stk_date				, s.wms_stk_su			, s.wms_stk_su_opn_bal, 
		s.wms_stk_su_received	, s.wms_stk_su_issued			, s.wms_stk_su_cls_bal	, s.wms_stk_su_peak_qty, 
		1						, p_etljobname					, p_envsourcecd			, p_datasourcecd		, NOW()
    FROM stg.stg_wms_stock_su_bal_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_location		= l.loc_code
		AND s.wms_stk_ou			= l.loc_ou
	LEFT JOIN dwh.d_customer c
		ON  TRIM(s.wms_stk_customer)= TRIM(c.customer_id)
		AND s.wms_stk_ou			= c.customer_ou
    LEFT JOIN dwh.f_stockstoragebalancedetail t
		ON  s.wms_stk_ou 			= t.stk_ou
		AND s.wms_stk_location 		= t.stk_location
		AND TRIM(s.wms_stk_customer)= TRIM(t.stk_customer)
		AND s.wms_stk_date 			= t.stk_date
		AND s.wms_stk_su 			= t.stk_su
    WHERE   t.stk_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_su_bal_dtl
    (
        wms_stk_ou			, wms_stk_location		, wms_stk_customer		, wms_stk_date, 
		wms_stk_su			, wms_stk_su_opn_bal	, wms_stk_su_received	, wms_stk_su_issued, 
		wms_stk_su_cls_bal	, wms_stk_su_peak_qty	, etlcreateddatetime
    )
    SELECT
        wms_stk_ou			, wms_stk_location		, wms_stk_customer		, wms_stk_date, 
		wms_stk_su			, wms_stk_su_opn_bal	, wms_stk_su_received	, wms_stk_su_issued, 
		wms_stk_su_cls_bal	, wms_stk_su_peak_qty	, etlcreateddatetime
	FROM stg.stg_wms_stock_su_bal_dtl;
    END IF;

    EXCEPTION WHEN others THEN
    GET stacked DIAGNOSTICS p_errorid = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockstoragebalancedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockuiditemtrackingdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockuiditemtrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid 				= h.sourceid
    WHERE d.sourceid 				= p_sourceId
        AND d.dataflowflag 			= p_dataflowflag
        AND d.targetobject 			= p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stock_uid_item_tracking_dtl;

    UPDATE dwh.f_stockuiditemtrackingdetail t
    SET
        stk_itm_dtl_loc_key             = COALESCE(l.loc_key,-1),
		stk_itm_dtl_itm_hdr_key			= COALESCE(i.itm_hdr_key,-1),
        stk_itm_dtl_customer_key        = COALESCE(c.customer_key,-1),
        stk_itm_dtl_date_key            = COALESCE(d.datekey,-1),
        stk_itm_dtl_thu_key             = COALESCE(th.thu_key,-1),	
        stk_su                   		= s.wms_stk_su,
        stk_thu_id               		= s.wms_stk_thu_id,
        stk_thu_serial_no        		= s.wms_stk_thu_serial_no,
        stk_opn_bal              		= s.wms_stk_opn_bal,
        stk_received             		= s.wms_stk_received,
        stk_issued               		= s.wms_stk_issued,
        stk_cls_bal              		= s.wms_stk_cls_bal,
        stk_write_off_qty        		= s.wms_stk_write_off_qty,
        etlactiveind             		= 1,
        etljobname               		= p_etljobname,
        envsourcecd              		= p_envsourcecd,
        datasourcecd             		= p_datasourcecd,
        etlupdatedatetime        		= NOW()
    FROM stg.stg_wms_stock_uid_item_tracking_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_location			= l.loc_code
		AND s.wms_stk_ou				= l.loc_ou
	LEFT JOIN dwh.d_itemheader i	
		ON  s.wms_stk_item				= i.itm_code
		AND s.wms_stk_ou				= i.itm_ou	
	LEFT JOIN dwh.d_customer c	
		ON  s.wms_stk_customer			= c.customer_id
		AND s.wms_stk_ou				= c.customer_ou	
	LEFT JOIN dwh.d_date d	
		ON  s.wms_stk_date::DATE		= d.dateactual
	LEFT JOIN dwh.d_thu th	
		ON  s.wms_stk_thu_id			= th.thu_id
		AND s.wms_stk_ou				= th.thu_ou		
    WHERE   t.stk_ou 					= s.wms_stk_ou
		AND t.stk_location 				= s.wms_stk_location
		AND t.stk_item 					= s.wms_stk_item
		AND t.stk_customer 				= s.wms_stk_customer
		AND t.stk_date 					= s.wms_stk_date
		AND t.stk_uid_serial_no 		= s.wms_stk_uid_serial_no
		AND t.stk_lot_no 				= s.wms_stk_lot_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_stockuiditemtrackingdetail
    (
        stk_itm_dtl_loc_key		, stk_itm_dtl_itm_hdr_key		, stk_itm_dtl_customer_key		, stk_itm_dtl_date_key, 
		stk_itm_dtl_thu_key		, stk_ou						, stk_location					, stk_item, 
		stk_customer			, stk_date						, stk_uid_serial_no				, stk_lot_no, 
		stk_su					, stk_thu_id					, stk_thu_serial_no				, stk_opn_bal, 
		stk_received			, stk_issued					, stk_cls_bal					, stk_write_off_qty, 
		etlactiveind			, etljobname					, envsourcecd					, datasourcecd				, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1)	, COALESCE(i.itm_hdr_key,-1)	, COALESCE(c.customer_key,-1)	, COALESCE(d.datekey,-1), 
		COALESCE(th.thu_key,-1)	, s.wms_stk_ou					, s.wms_stk_location			, s.wms_stk_item, 
		s.wms_stk_customer		, s.wms_stk_date				, s.wms_stk_uid_serial_no		, s.wms_stk_lot_no, 
		s.wms_stk_su			, s.wms_stk_thu_id				, s.wms_stk_thu_serial_no		, s.wms_stk_opn_bal, 
		s.wms_stk_received		, s.wms_stk_issued				, s.wms_stk_cls_bal				, s.wms_stk_write_off_qty, 
		1						, p_etljobname					, p_envsourcecd					, p_datasourcecd			, NOW()
    FROM stg.stg_wms_stock_uid_item_tracking_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_location			= l.loc_code
		AND s.wms_stk_ou				= l.loc_ou
	LEFT JOIN dwh.d_itemheader i	
		ON  s.wms_stk_item				= i.itm_code
		AND s.wms_stk_ou				= i.itm_ou	
	LEFT JOIN dwh.d_customer c	
		ON  s.wms_stk_customer			= c.customer_id
		AND s.wms_stk_ou				= c.customer_ou	
	LEFT JOIN dwh.d_date d	
		ON  s.wms_stk_date::DATE		= d.dateactual
	LEFT JOIN dwh.d_thu th	
		ON  s.wms_stk_thu_id			= th.thu_id
		AND s.wms_stk_ou				= th.thu_ou		
    LEFT JOIN dwh.f_stockuiditemtrackingdetail t
		ON  s.wms_stk_ou 				= t.stk_ou
		AND s.wms_stk_location 			= t.stk_location
		AND s.wms_stk_item 				= t.stk_item
		AND s.wms_stk_customer 			= t.stk_customer
		AND s.wms_stk_date 				= t.stk_date
		AND s.wms_stk_uid_serial_no 	= t.stk_uid_serial_no
		AND s.wms_stk_lot_no 			= t.stk_lot_no
    WHERE   t.stk_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_uid_item_tracking_dtl
    (
        wms_stk_ou		, wms_stk_location		, wms_stk_item			, wms_stk_customer, 
		wms_stk_date	, wms_stk_uid_serial_no	, wms_stk_lot_no		, wms_stk_su, 
		wms_stk_thu_id	, wms_stk_thu_serial_no	, wms_stk_opn_bal		, wms_stk_received, 
		wms_stk_issued	, wms_stk_cls_bal		, wms_stk_write_off_qty	, wms_UID2SerialNo, 
		wms_SU2			, etlcreateddatetime
    )
    SELECT
        wms_stk_ou		, wms_stk_location		, wms_stk_item			, wms_stk_customer, 
		wms_stk_date	, wms_stk_uid_serial_no	, wms_stk_lot_no		, wms_stk_su, 
		wms_stk_thu_id	, wms_stk_thu_serial_no	, wms_stk_opn_bal		, wms_stk_received, 
		wms_stk_issued	, wms_stk_cls_bal		, wms_stk_write_off_qty	, wms_UID2SerialNo, 
		wms_SU2			, etlcreateddatetime
	FROM stg.stg_wms_stock_uid_item_tracking_dtl;
    END IF;

    EXCEPTION WHEN others THEN
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockuiditemtrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_stockuidtrackingdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_stockuidtrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_stock_uid_tracking_dtl;

    UPDATE dwh.f_stockuidtrackingdetail t
    SET
        stk_trc_dtl_loc_key				= COALESCE(l.loc_key,-1),
		stk_trc_dtl_zone_key			= COALESCE(z.zone_key,-1),
		stk_trc_dtl_bin_type_key		= COALESCE(b.bin_typ_key,-1),
		stk_trc_dtl_customer_key		= COALESCE(c.customer_key,-1),
		stk_trc_dtl_thu_key				= COALESCE(th.thu_key,-1),
		stk_ou                    		= s.wms_stk_ou,
        stk_to_date               		= s.wms_stk_to_date,
        stk_from_tran_type        		= s.wms_stk_from_tran_type,
        stk_to_tran_type          		= s.wms_stk_to_tran_type,
        stk_from_tran_no          		= s.wms_stk_from_tran_no,
        stk_to_tran_no            		= s.wms_stk_to_tran_no,
        etlactiveind              		= 1,
        etljobname                		= p_etljobname,
        envsourcecd               		= p_envsourcecd,
        datasourcecd              		= p_datasourcecd,
        etlupdatedatetime         		= NOW()
    FROM stg.stg_wms_stock_uid_tracking_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_location			= l.loc_code
		AND s.wms_stk_ou				= l.loc_ou	
	LEFT JOIN dwh.d_zone z		
		ON  s.wms_stk_zone				= z.zone_code
		AND s.wms_stk_location          = z.zone_loc_code
		AND s.wms_stk_ou				= z.zone_ou
	LEFT JOIN dwh.d_bintypes b		
		ON  s.wms_stk_bin_type			= b.bin_typ_code
		AND s.wms_stk_location			= b.bin_typ_loc_code
		AND s.wms_stk_ou				= b.bin_typ_ou
	LEFT JOIN dwh.d_customer c		
		ON  s.wms_stk_customer			= c.customer_id
		AND s.wms_stk_ou				= c.customer_ou			
	LEFT JOIN dwh.d_thu th		
		ON  s.wms_stk_thu_id			= th.thu_id
		AND s.wms_stk_ou				= th.thu_ou		
    WHERE   t.stk_location 				= s.wms_stk_location
		AND t.stk_zone 					= s.wms_stk_zone
		AND t.stk_bin 					= s.wms_stk_bin
		AND t.stk_bin_type 				= s.wms_stk_bin_type
		AND t.stk_staging_id 			= s.wms_stk_staging_id
		AND t.stk_stage 				= s.wms_stk_stage
		AND t.stk_customer 				= s.wms_stk_customer
		AND t.stk_uid_serial_no 		= s.wms_stk_uid_serial_no
		AND t.stk_thu_id 				= s.wms_stk_thu_id
		AND t.stk_su 					= s.wms_stk_su
		AND t.stk_from_date 			= s.wms_stk_from_date;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_stockuidtrackingdetail
    (
        stk_trc_dtl_loc_key	, stk_trc_dtl_zone_key	, stk_trc_dtl_bin_type_key	, stk_trc_dtl_customer_key, 
		stk_trc_dtl_thu_key	, stk_ou				, stk_location				, stk_zone, 
		stk_bin				, stk_bin_type			, stk_staging_id			, stk_stage, 
		stk_customer		, stk_uid_serial_no		, stk_thu_id				, stk_su, 
		stk_from_date		, stk_to_date			, stk_from_tran_type		, stk_to_tran_type, 
		stk_from_tran_no	, stk_to_tran_no		, etlactiveind				, etljobname, 
		envsourcecd			, datasourcecd			, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1)	, COALESCE(z.zone_key,-1)	, COALESCE(b.bin_typ_key,-1)	, COALESCE(c.customer_key,-1),
		COALESCE(th.thu_key,-1)	, s.wms_stk_ou				, s.wms_stk_location			, s.wms_stk_zone, 
		s.wms_stk_bin			, s.wms_stk_bin_type		, s.wms_stk_staging_id			, s.wms_stk_stage, 
		s.wms_stk_customer		, s.wms_stk_uid_serial_no	, s.wms_stk_thu_id				, s.wms_stk_su, 
		s.wms_stk_from_date		, s.wms_stk_to_date			, s.wms_stk_from_tran_type		, s.wms_stk_to_tran_type, 
		s.wms_stk_from_tran_no	, s.wms_stk_to_tran_no		, 1								, p_etljobname, 
		p_envsourcecd			, p_datasourcecd			, NOW()
    FROM stg.stg_wms_stock_uid_tracking_dtl s
	LEFT JOIN dwh.d_location l
		ON  s.wms_stk_location			= l.loc_code
		AND s.wms_stk_ou				= l.loc_ou	
	LEFT JOIN dwh.d_zone z		
		ON  s.wms_stk_zone				= z.zone_code
		AND s.wms_stk_location          = z.zone_loc_code
		AND s.wms_stk_ou				= z.zone_ou
	LEFT JOIN dwh.d_bintypes b		
		ON  s.wms_stk_bin_type			= b.bin_typ_code
		AND s.wms_stk_location			= b.bin_typ_loc_code
		AND s.wms_stk_ou				= b.bin_typ_ou
	LEFT JOIN dwh.d_customer c		
		ON  s.wms_stk_customer			= c.customer_id
		AND s.wms_stk_ou				= c.customer_ou			
	LEFT JOIN dwh.d_thu th		
		ON  s.wms_stk_thu_id			= th.thu_id
		AND s.wms_stk_ou				= th.thu_ou		
    LEFT JOIN dwh.f_stockuidtrackingdetail t
		ON  s.wms_stk_location 			= t.stk_location
		AND s.wms_stk_zone 				= t.stk_zone
		AND s.wms_stk_bin 				= t.stk_bin
		AND s.wms_stk_bin_type 			= t.stk_bin_type
		AND s.wms_stk_staging_id 		= t.stk_staging_id
		AND s.wms_stk_stage 			= t.stk_stage
		AND s.wms_stk_customer 			= t.stk_customer
		AND s.wms_stk_uid_serial_no 	= t.stk_uid_serial_no
		AND s.wms_stk_thu_id 			= t.stk_thu_id
		AND s.wms_stk_su 				= t.stk_su
		AND s.wms_stk_from_date 		= t.stk_from_date
    WHERE   t.stk_ou IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_stock_uid_tracking_dtl
    (
        wms_stk_ou				, wms_stk_location			, wms_stk_zone			, wms_stk_bin, 
		wms_stk_bin_type		, wms_stk_staging_id		, wms_stk_stage			, wms_stk_customer, 
		wms_stk_uid_serial_no	, wms_stk_thu_id			, wms_stk_su			, wms_stk_from_date, 
		wms_stk_to_date			, wms_stk_from_tran_type	, wms_stk_to_tran_type	, wms_stk_from_tran_no, 
		wms_stk_to_tran_no		, etlcreateddatetime
    )
    SELECT
        wms_stk_ou				, wms_stk_location			, wms_stk_zone			, wms_stk_bin, 
		wms_stk_bin_type		, wms_stk_staging_id		, wms_stk_stage			, wms_stk_customer, 
		wms_stk_uid_serial_no	, wms_stk_thu_id			, wms_stk_su			, wms_stk_from_date, 
		wms_stk_to_date			, wms_stk_from_tran_type	, wms_stk_to_tran_type	, wms_stk_from_tran_no, 
		wms_stk_to_tran_no		, etlcreateddatetime
	FROM stg.stg_wms_stock_uid_tracking_dtl;
    END IF;

    EXCEPTION WHEN others THEN
    GET stacked DIAGNOSTICS p_errorid   = returned_sqlstate, p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
    SELECT 0 INTO inscnt;
    SELECT 0 INTO updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_stockuidtrackingdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_surfbpostingsdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_surfbpostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sur_fbpostings_dtl;

    UPDATE dwh.F_surfbpostingsdtl t
    SET
        surf_trn_curr_key        = COALESCE(c.curr_key,-1),
        surf_trn_company_key     = COALESCE(g.company_key,-1),
        acct_type                = s.acct_type,
        currency_code            = s.currency_code,
        tran_date                = s.tran_date,
        tran_amount              = s.tran_amount,
        base_amount              = s.base_amount,
        cost_center              = s.cost_center,
        analysis_code            = s.analysis_code,
        subanalysis_code         = s.subanalysis_code,
        bank_code                = s.bank_code,
        ref_doc_no               = s.ref_doc_no,
        origin_ou                = s.origin_ou,
        exchange_rate            = s.exchange_rate,
        par_exchange_rate        = s.par_exchange_rate,
        par_base_amount          = s.par_base_amount,
        ref_tran_type            = s.ref_tran_type,
        ref_fbid                 = s.ref_fbid,
        auth_date                = s.auth_date,
        post_date                = s.post_date,
        bu_id                    = s.bu_id,
        company_code             = s.company_code,
        component_name           = s.component_name,
        flag                     = s.flag,
        batch_id                 = s.batch_id,
        receipt_type             = s.receipt_type,
        createdby                = s.createdby,
        createddate              = s.createddate,
        modifiedby               = s.modifiedby,
        modifieddate             = s.modifieddate,
        source_comp              = s.source_comp,
        narration                = s.narration,
        hdrremarks               = s.hdrremarks,
        mlremarks                = s.mlremarks,
        tran_lineno              = s.tran_lineno,
        etlactiveind             = 1,
        etljobname               = p_etljobname,
        envsourcecd              = p_envsourcecd,
        datasourcecd             = p_datasourcecd,
        etlupdatedatetime        = NOW()
    FROM stg.stg_sur_fbpostings_dtl s

       LEFT JOIN dwh.d_currency c      
    ON  s.currency_code          = c.iso_curr_code  
    
     LEFT JOIN dwh.d_company g      
    ON  s.company_code          = g.company_code 

    WHERE t.ou_id = s.ou_id
    AND t.tran_type = s.tran_type
    AND t.fb_id = s.fb_id
    AND t.tran_no = s.tran_no
    AND t.account_code = s.account_code
    AND t.drcr_flag = s.drcr_flag
    AND t.acct_lineno = s.acct_lineno
    AND t.timestamp = s.timestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_surfbpostingsdtl
    (
       surf_trn_curr_key ,surf_trn_company_key,ou_id, tran_type, fb_id, tran_no, account_code, drcr_flag, acct_lineno, timestamp, acct_type, currency_code, tran_date, tran_amount, base_amount, cost_center, analysis_code, subanalysis_code, bank_code, ref_doc_no, origin_ou, exchange_rate, par_exchange_rate, par_base_amount, ref_tran_type, ref_fbid, auth_date, post_date, bu_id, company_code, component_name, flag, batch_id, receipt_type, createdby, createddate, modifiedby, modifieddate, source_comp, narration, hdrremarks, mlremarks, tran_lineno, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(c.curr_key,-1),COALESCE(g.company_key,-1),s.ou_id, s.tran_type, s.fb_id, s.tran_no, s.account_code, s.drcr_flag, s.acct_lineno, s.timestamp, s.acct_type, s.currency_code, s.tran_date, s.tran_amount, s.base_amount, s.cost_center, s.analysis_code, s.subanalysis_code, s.bank_code, s.ref_doc_no, s.origin_ou, s.exchange_rate, s.par_exchange_rate, s.par_base_amount, s.ref_tran_type, s.ref_fbid, s.auth_date, s.post_date, s.bu_id, s.company_code, s.component_name, s.flag, s.batch_id, s.receipt_type, s.createdby, s.createddate, s.modifiedby, s.modifieddate, s.source_comp, s.narration, s.hdrremarks, s.mlremarks, s.tran_lineno, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_sur_fbpostings_dtl s

     LEFT JOIN dwh.d_currency c      
    ON  s.currency_code          = c.iso_curr_code
    
     LEFT JOIN dwh.d_company g      
    ON  s.company_code          = g.company_code

    LEFT JOIN dwh.F_surfbpostingsdtl t
    ON s.ou_id = t.ou_id
    AND s.tran_type = t.tran_type
    AND s.fb_id = t.fb_id
    AND s.tran_no = t.tran_no
    AND s.account_code = t.account_code
    AND s.drcr_flag = t.drcr_flag
    AND s.acct_lineno = t.acct_lineno
    AND s.timestamp = t.timestamp
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sur_fbpostings_dtl
    (
        ou_id, tran_type, fb_id, tran_no, account_code, drcr_flag, acct_lineno, timestamp, acct_type, currency_code, declnyr_code, declnprd_code, tran_date, tran_qty, tran_amount, base_amount, cost_center, analysis_code, subanalysis_code, bank_code, ref_doc_no, vendor_code, origin_ou, item_code, vrnt_code, uom, exchange_rate, par_exchange_rate, par_base_amount, ref_tran_type, ref_fbid, auth_date, post_date, bu_id, company_code, component_name, vat_category, vat_class, vat_code, vat_rate, vat_inclusive, flag, batch_id, receipt_type, createdby, createddate, modifiedby, modifieddate, source_comp, narration, hdrremarks, mlremarks, tran_lineno, etlcreateddatetime
    )
    SELECT
        ou_id, tran_type, fb_id, tran_no, account_code, drcr_flag, acct_lineno, timestamp, acct_type, currency_code, declnyr_code, declnprd_code, tran_date, tran_qty, tran_amount, base_amount, cost_center, analysis_code, subanalysis_code, bank_code, ref_doc_no, vendor_code, origin_ou, item_code, vrnt_code, uom, exchange_rate, par_exchange_rate, par_base_amount, ref_tran_type, ref_fbid, auth_date, post_date, bu_id, company_code, component_name, vat_category, vat_class, vat_code, vat_rate, vat_inclusive, flag, batch_id, receipt_type, createdby, createddate, modifiedby, modifieddate, source_comp, narration, hdrremarks, mlremarks, tran_lineno, etlcreateddatetime
    FROM stg.stg_sur_fbpostings_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_surfbpostingsdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_surreceiptdtl(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_surreceiptdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
		
	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sur_receipt_dtl;

    UPDATE dwh.F_surreceiptdtl t
    SET
        surreceiptdtl_curr_key	= COALESCE(cu.curr_key,-1),
        surreceiptdtl_opcoa_key = COALESCE(o.opcoa_key,-1),
        usage                   = s.usage,
        account_code            = s.account_code,
        currency_code           = s.currency_code,
        account_amount          = s.account_amount,
        drcr_flag               = s.drcr_flag,
        base_amount             = s.base_amount,
        remarks                 = s.remarks,
        cost_center             = s.cost_center,
        analysis_code           = s.analysis_code,
        subanalysis_code        = s.subanalysis_code,
        batch_id                = s.batch_id,
        acct_type               = s.acct_type,
        createdby               = s.createdby,
        createddate             = s.createddate,
        modifiedby              = s.modifiedby,
        modifieddate            = s.modifieddate,
        item_desc               = s.item_desc,
        etlactiveind            = 1,
        etljobname              = p_etljobname,
        envsourcecd             = p_envsourcecd,
        datasourcecd            = p_datasourcecd,
        etlupdatedatetime       = NOW()
    FROM stg.stg_sur_receipt_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency_code				= cu.iso_curr_code
    LEFT JOIN dwh.d_operationalaccountdetail o 
		ON  s.account_code				= o.account_code
    WHERE 	t.ou_id 			= s.ou_id
    AND 	t.receipt_type 		= s.receipt_type
    AND 	t.receipt_no 		= s.receipt_no
    AND 	t.refdoc_lineno 	= s.refdoc_lineno
    AND 	t.tran_type 		= s.tran_type
    AND 	t.stimestamp 		= s.stimestamp;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_surreceiptdtl
    (
		surreceiptdtl_curr_key, surreceiptdtl_opcoa_key,
        ou_id, 				receipt_type, 		receipt_no, 		refdoc_lineno, 		tran_type, 
		stimestamp, 		usage, 				account_code, 		currency_code, 		account_amount, 
		drcr_flag, 			base_amount, 		remarks, 			cost_center, 		analysis_code, 
		subanalysis_code, 	batch_id, 			acct_type, 			createdby, 			createddate, 
		modifiedby, 		modifieddate, 		item_desc, 			etlactiveind, 		etljobname, 
		envsourcecd, 		datasourcecd, 		etlcreatedatetime
    )

    SELECT
		COALESCE(cu.curr_key,-1),   COALESCE(o.opcoa_key,-1),
        s.ou_id, 				s.receipt_type, 		s.receipt_no, 		s.refdoc_lineno, 		s.tran_type, 
		s.stimestamp, 			s.usage, 				s.account_code, 	s.currency_code, 		s.account_amount, 
		s.drcr_flag, 			s.base_amount, 			s.remarks, 			s.cost_center, 			s.analysis_code, 
		s.subanalysis_code, 	s.batch_id, 			s.acct_type, 		s.createdby, 			s.createddate, 
		s.modifiedby, 			s.modifieddate, 		s.item_desc, 		1,						p_etljobname, 
		p_envsourcecd, 			p_datasourcecd, 		NOW()
    FROM stg.stg_sur_receipt_dtl s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency_code				= cu.iso_curr_code
    LEFT JOIN dwh.d_operationalaccountdetail o 
		ON  s.account_code				= o.account_code
    LEFT JOIN dwh.F_surreceiptdtl t
    ON 			s.ou_id 			= t.ou_id
    AND 		s.receipt_type 		= t.receipt_type
    AND 		s.receipt_no 		= t.receipt_no
    AND 		s.refdoc_lineno 	= t.refdoc_lineno
    AND 		s.tran_type 		= t.tran_type
    AND 		s.stimestamp 		= t.stimestamp
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sur_receipt_dtl
    (
        ou_id, 				receipt_type, 		receipt_no, 		refdoc_lineno, 		tran_type, 
		stimestamp, 		usage, 				account_code, 		currency_code, 		account_amount, 
		drcr_flag, 			base_amount, 		remarks, 			cost_center, 		analysis_code, 
		subanalysis_code, 	batch_id, 			acct_type, 			createdby, 			createddate, 
		modifiedby, 		modifieddate, 		item_code, 			item_desc, 			Dest_comp, 
		cfs_refdoc_ou, 		cfs_refdoc_no, 		cfs_refdoc_type, 	Desti_OU, 			Desti_SAC, 
		InterFBJVNO, 		Desti_AC, 			Desti_ACCCode, 		Desti_ACCDescrip, 	Desti_CC, 
		Desti_FB, 			account_code_int, 	ifb_recon_jvno, 	etlcreateddatetime
    )
    SELECT
        ou_id, 				receipt_type, 		receipt_no, 		refdoc_lineno, 		tran_type, 
		stimestamp, 		usage, 				account_code, 		currency_code, 		account_amount, 
		drcr_flag, 			base_amount, 		remarks, 			cost_center, 		analysis_code, 
		subanalysis_code, 	batch_id, 			acct_type, 			createdby, 			createddate, 
		modifiedby, 		modifieddate, 		item_code, 			item_desc, 			Dest_comp, 
		cfs_refdoc_ou, 		cfs_refdoc_no, 		cfs_refdoc_type, 	Desti_OU, 			Desti_SAC, 
		InterFBJVNO, 		Desti_AC, 			Desti_ACCCode, 		Desti_ACCDescrip, 	Desti_CC, 
		Desti_FB, 			account_code_int, 	ifb_recon_jvno, 	etlcreateddatetime
    FROM stg.stg_sur_receipt_dtl;
	END IF;	
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_surreceiptdtl(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_surreceipthdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_surreceipthdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_sur_receipt_hdr;
	
    UPDATE dwh.F_surreceipthdr t
    SET
		surreceipthdr_curr_key	  = COALESCE(cu.curr_key,-1),
		surreceipthdr_datekey	  = COALESCE(d.datekey,-1),
        receipt_date              = s.receipt_date,
        receipt_category          = s.receipt_category,
        fb_id                     = s.fb_id,
        notype_no                 = s.notype_no,
        remitter_name             = s.remitter_name,
        receipt_method            = s.receipt_method,
        receipt_mode              = s.receipt_mode,
        receipt_route             = s.receipt_route,
        bank_cash_code            = s.bank_cash_code,
        currency_code             = s.currency_code,
        exchange_rate             = s.exchange_rate,
        receipt_amount            = s.receipt_amount,
        origin_no                 = s.origin_no,
        reason_code               = s.reason_code,
        remarks                   = s.remarks,
        instr_no                  = s.instr_no,
        micr_no                   = s.micr_no,
        instr_amount              = s.instr_amount,
        instr_date                = s.instr_date,
        instr_status              = s.instr_status,
        bank_code                 = s.bank_code,
        receipt_status            = s.receipt_status,
        batch_id                  = s.batch_id,
        refdoc_no                 = s.refdoc_no,
        refdoc_type               = s.refdoc_type,
        createdby                 = s.createdby,
        createddate               = s.createddate,
        modifiedby                = s.modifiedby,
        modifieddate              = s.modifieddate,
        tcal_exclusive_amt        = s.tcal_exclusive_amt,
        total_tcal_amount         = s.total_tcal_amount,
        tcal_status               = s.tcal_status,
        acct_type                 = s.acct_type,
        insamt_btcal              = s.insamt_btcal,
        refdoc_ou                 = s.refdoc_ou,
        instr_type                = s.instr_type,
        auto_gen_flag             = s.auto_gen_flag,
        afe_number                = s.afe_number,
        job_number                = s.job_number,
        report_flag               = s.report_flag,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_sur_receipt_hdr s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency_code				= cu.iso_curr_code
	LEFT JOIN dwh.d_date d 		
		ON  s.receipt_date::date 	= d.dateactual
    WHERE 	t.ou_id 		= s.ou_id
    AND 	t.receipt_no 	= s.receipt_no
    AND 	t.receipt_type 	= s.receipt_type
    AND 	t.tran_type 	= s.tran_type
    AND 	t.stimestamp 	= s.stimestamp
    AND 	t.ifb_flag 		= s.ifb_flag;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_surreceipthdr
    (
		surreceipthdr_curr_key,	surreceipthdr_datekey,
        ou_id, 				receipt_no, 		receipt_type, 		tran_type, 			stimestamp, 
		receipt_date, 		receipt_category, 	fb_id, 				notype_no, 			remitter_name, 
		receipt_method, 	receipt_mode, 		receipt_route, 		bank_cash_code, 	currency_code, 
		exchange_rate, 		receipt_amount, 	origin_no, 			reason_code, 		remarks, 
		instr_no, 			micr_no, 			instr_amount, 		instr_date, 		instr_status, 
		bank_code, 			receipt_status, 	batch_id, 			refdoc_no, 			refdoc_type, 
		createdby, 			createddate, 		modifiedby, 		modifieddate, 		tcal_exclusive_amt, 
		total_tcal_amount, 	tcal_status, 		acct_type, 			insamt_btcal, 		refdoc_ou, 
		instr_type, 		auto_gen_flag, 		afe_number, 		job_number, 		report_flag, 
		ifb_flag, 			etlactiveind, 		etljobname, 		envsourcecd, 		datasourcecd, 
		etlcreatedatetime
    )

    SELECT
		COALESCE(cu.curr_key,-1),	COALESCE(d.datekey,-1),	
        s.ou_id, 				s.receipt_no, 			s.receipt_type, 		s.tran_type, 			s.stimestamp, 
		s.receipt_date, 		s.receipt_category, 	s.fb_id, 				s.notype_no, 			s.remitter_name, 
		s.receipt_method, 		s.receipt_mode, 		s.receipt_route, 		s.bank_cash_code, 		s.currency_code, 
		s.exchange_rate, 		s.receipt_amount, 		s.origin_no, 			s.reason_code, 			s.remarks, 
		s.instr_no, 			s.micr_no, 				s.instr_amount, 		s.instr_date, 			s.instr_status, 
		s.bank_code, 			s.receipt_status, 		s.batch_id, 			s.refdoc_no, 			s.refdoc_type, 
		s.createdby, 			s.createddate, 			s.modifiedby, 			s.modifieddate, 		s.tcal_exclusive_amt, 
		s.total_tcal_amount, 	s.tcal_status, 			s.acct_type, 			s.insamt_btcal, 		s.refdoc_ou, 
		s.instr_type, 			s.auto_gen_flag, 		s.afe_number, 			s.job_number, 			s.report_flag, 
		s.ifb_flag,				1, 						p_etljobname, 			p_envsourcecd, 			p_datasourcecd, 
		NOW()
    FROM stg.stg_sur_receipt_hdr s
	LEFT JOIN dwh.d_currency cu 
		ON  s.currency_code				= cu.iso_curr_code
	LEFT JOIN dwh.d_date d 		
		ON  s.receipt_date::date 	= d.dateactual
    LEFT JOIN dwh.F_surreceipthdr t
    ON 		s.ou_id 		= t.ou_id
    AND 	s.receipt_no 	= t.receipt_no
    AND 	s.receipt_type 	= t.receipt_type
    AND 	s.tran_type		= t.tran_type
    AND 	s.stimestamp 	= t.stimestamp
    AND 	s.ifb_flag 		= t.ifb_flag
    WHERE t.ou_id IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_sur_receipt_hdr
    (
        ou_id, 				receipt_no, 		receipt_type, 		tran_type, 			stimestamp, 
		receipt_date, 		receipt_category, 	fb_id, 				notype_no, 			remitter_name, 
		receipt_method, 	receipt_mode, 		receipt_route, 		bank_cash_code, 	currency_code, 
		exchange_rate, 		receipt_amount, 	origin_no, 			reason_code, 		remarks, 
		instr_no, 			micr_no, 			instr_amount, 		instr_date, 		instr_status, 
		bank_code, 			card_no, 			card_auth_no, 		issuer, 			valid_till_month, 
		valid_till_year, 	address1, 			address2, 			address3, 			city, 
		state, 				country, 			zip_code, 			contact, 			url, 
		mail_stop, 			pager_no, 			telex, 				email_id, 			phone_no, 
		mobile_no, 			fax_no, 			receipt_status, 	rr_flag, 			batch_id, 
		refdoc_no, 			refdoc_type, 		parbaseexrate, 		createdby, 			createddate, 
		modifiedby, 		modifieddate, 		doc_status, 		tcal_exclusive_amt, total_tcal_amount, 
		tcal_status, 		source_comp, 		acct_type, 			insamt_btcal, 		consistency_stamp, 
		refdoc_ou, 			instr_type, 		pdr_status, 		pdr_rev_flag, 		workflow_status, 
		auto_gen_flag, 		project_ou, 		Project_code, 		afe_number, 		job_number, 
		costcenter_hdr, 	bc_coveredamt, 		bc_no, 				bc_redemptionamt, 	report_flag, 
		ifb_flag, 			etlcreateddatetime
    )
    SELECT
        ou_id, 				receipt_no, 		receipt_type, 		tran_type, 			stimestamp, 
		receipt_date, 		receipt_category, 	fb_id, 				notype_no, 			remitter_name, 
		receipt_method, 	receipt_mode, 		receipt_route, 		bank_cash_code, 	currency_code, 
		exchange_rate, 		receipt_amount, 	origin_no, 			reason_code, 		remarks, 
		instr_no, 			micr_no, 			instr_amount, 		instr_date, 		instr_status, 
		bank_code, 			card_no, 			card_auth_no, 		issuer, 			valid_till_month, 
		valid_till_year, 	address1, 			address2, 			address3, 			city, 
		state, 				country, 			zip_code, 			contact, 			url, 
		mail_stop, 			pager_no, 			telex, 				email_id, 			phone_no, 
		mobile_no, 			fax_no, 			receipt_status, 	rr_flag, 			batch_id, 
		refdoc_no, 			refdoc_type, 		parbaseexrate, 		createdby, 			createddate, 
		modifiedby, 		modifieddate, 		doc_status, 		tcal_exclusive_amt, total_tcal_amount, 
		tcal_status, 		source_comp, 		acct_type, 			insamt_btcal, 		consistency_stamp, 
		refdoc_ou, 			instr_type, 		pdr_status, 		pdr_rev_flag, 		workflow_status, 
		auto_gen_flag, 		project_ou, 		Project_code, 		afe_number, 		job_number, 
		costcenter_hdr, 	bc_coveredamt, 		bc_no, 				bc_redemptionamt, 	report_flag, 
		ifb_flag, 			etlcreateddatetime
    FROM stg.stg_sur_receipt_hdr;
    
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_surreceipthdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tariffrevcostdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tariffrevcostdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_tarcd_tariff_rev_cost_dtl;

    UPDATE dwh.F_TariffRevCostDetail t
    SET
	    tarcd_trip_hdr_key               = COALESCE(fh.plpth_hdr_key,-1),
        tarcd_leg_id                     = s.tarcd_leg_id,
        tarcd_date_of_stage              = s.tarcd_date_of_stage,
        tarcd_contract_id                = s.tarcd_contract_id,
        tarcd_tariff_id                  = s.tarcd_tariff_id,
        tarcd_tariff_type                = s.tarcd_tariff_type,
        tarcd_rate                       = s.tarcd_rate,
        tarcd_remarks                    = s.tarcd_remarks,
        tarcd_trip_rev_cost_sk           = s.tarcd_trip_rev_cost_sk,
        tarcd_trip_plan_hdr_sk           = s.tarcd_trip_plan_hdr_sk,
        tarcd_created_by                 = s.tarcd_created_by,
        tarcd_created_date               = s.tarcd_created_date,
        tarcd_resource_type              = s.tarcd_resource_type,
        tarcd_weight                     = s.tarcd_weight,
        tarcd_weight_uom                 = s.tarcd_weight_uom,
        tarcd_pallet                     = s.tarcd_pallet,
        tarcd_vendor_flag                = s.tarcd_vendor_flag,
        tarcd_resource_id                = s.tarcd_resource_id,
        tarcd_amendment_no               = s.tarcd_amendment_no,
        tarcd_Agreed_Rate                = s.tarcd_Agreed_Rate,
        tarcd_Agreed_cost                = s.tarcd_Agreed_cost,
        tarcd_charagable_quantity        = s.tarcd_charagable_quantity,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_tms_tarcd_tariff_rev_cost_dtl s
	LEFT join dwh.f_tripplanningheader fh
	ON		tarcd_ouinstance			=	fh.plpth_ouinstance
	AND		tarcd_trip_plan_id			=	fh.plpth_trip_plan_id
    WHERE	t.tarcd_ouinstance			=	s.tarcd_ouinstance
    AND		t.tarcd_trip_plan_id		=	s.tarcd_trip_plan_id
    AND		t.tarcd_booking_request		=	s.tarcd_booking_request
	AND		t.tarcd_stage_of_derivation =	s.tarcd_stage_of_derivation
	AND		t.tarcd_buy_sell_type       =	s.tarcd_buy_sell_type
    AND		t.tarcd_unique_id			=	s.tarcd_unique_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TariffRevCostDetail
    (
        tarcd_trip_hdr_key,tarcd_ouinstance, tarcd_trip_plan_id, tarcd_booking_request, tarcd_unique_id, tarcd_leg_id, tarcd_buy_sell_type, 
		tarcd_stage_of_derivation, tarcd_date_of_stage, tarcd_contract_id, tarcd_tariff_id, tarcd_tariff_type, tarcd_rate, 
		tarcd_remarks, tarcd_trip_rev_cost_sk, tarcd_trip_plan_hdr_sk, tarcd_created_by, tarcd_created_date, tarcd_resource_type, 
		tarcd_weight, tarcd_weight_uom, tarcd_pallet, tarcd_vendor_flag, tarcd_resource_id, tarcd_amendment_no, tarcd_Agreed_Rate, 
		tarcd_Agreed_cost, tarcd_charagable_quantity, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(fh.plpth_hdr_key,-1),s.tarcd_ouinstance, s.tarcd_trip_plan_id, s.tarcd_booking_request, s.tarcd_unique_id, s.tarcd_leg_id, s.tarcd_buy_sell_type, 
		s.tarcd_stage_of_derivation, s.tarcd_date_of_stage, s.tarcd_contract_id, s.tarcd_tariff_id, s.tarcd_tariff_type, s.tarcd_rate, 
		s.tarcd_remarks, s.tarcd_trip_rev_cost_sk, s.tarcd_trip_plan_hdr_sk, s.tarcd_created_by, s.tarcd_created_date, s.tarcd_resource_type, 
		s.tarcd_weight, s.tarcd_weight_uom, s.tarcd_pallet, s.tarcd_vendor_flag, s.tarcd_resource_id, s.tarcd_amendment_no, s.tarcd_Agreed_Rate,
		s.tarcd_Agreed_cost, s.tarcd_charagable_quantity, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_tarcd_tariff_rev_cost_dtl s
	LEFT JOIN dwh.f_tripplanningheader fh
	ON		tarcd_ouinstance			=	fh.plpth_ouinstance
	AND		tarcd_trip_plan_id			=	fh.plpth_trip_plan_id
    LEFT JOIN dwh.F_TariffRevCostDetail t
    ON		s.tarcd_ouinstance			=	t.tarcd_ouinstance
    AND		s.tarcd_trip_plan_id		=	t.tarcd_trip_plan_id
    AND		s.tarcd_booking_request		=	t.tarcd_booking_request
	AND		s.tarcd_stage_of_derivation =	t.tarcd_stage_of_derivation
	AND		s.tarcd_buy_sell_type       =	t.tarcd_buy_sell_type
    AND		s.tarcd_unique_id			=	t.tarcd_unique_id
    WHERE	t.tarcd_ouinstance IS NULL;
	

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tarcd_tariff_rev_cost_dtl
    (
        tarcd_ouinstance, tarcd_trip_plan_id, tarcd_booking_request, tarcd_unique_id, tarcd_leg_id, tarcd_buy_sell_type, 
		tarcd_stage_of_derivation, tarcd_date_of_stage, tarcd_contract_id, tarcd_tariff_id, tarcd_tariff_type, tarcd_rate, 
		tarcd_remarks, tarcd_trip_rev_cost_sk, tarcd_trip_plan_hdr_sk, tarcd_created_by, tarcd_created_date, tarcd_modified_by, 
		tarcd_modified_date, tarcd_time_stamp, tarcd_resource_type, tarcd_weight, tarcd_weight_uom, tarcd_pallet, tarcd_vendor_flag, 
		tarcd_resource_id, tarcd_amendment_no, Vehicle_cost, Equipment_1_cost, Equipment_2_cost, Driver_1_cost, Driver_2_cost, 
		Handler_1_cost, Handler_2_cost, tarcd_Agreed_Rate, tarcd_Agreed_cost, tarcd_charagable_quantity, tarcd_exchange_rate, etlcreateddatetime
    )
    SELECT
        tarcd_ouinstance, tarcd_trip_plan_id, tarcd_booking_request, tarcd_unique_id, tarcd_leg_id, tarcd_buy_sell_type, 
		tarcd_stage_of_derivation, tarcd_date_of_stage, tarcd_contract_id, tarcd_tariff_id, tarcd_tariff_type, tarcd_rate,
		tarcd_remarks, tarcd_trip_rev_cost_sk, tarcd_trip_plan_hdr_sk, tarcd_created_by, tarcd_created_date, tarcd_modified_by,
		tarcd_modified_date, tarcd_time_stamp, tarcd_resource_type, tarcd_weight, tarcd_weight_uom, tarcd_pallet, tarcd_vendor_flag,
		tarcd_resource_id, tarcd_amendment_no, Vehicle_cost, Equipment_1_cost, Equipment_2_cost, Driver_1_cost, Driver_2_cost, 
		Handler_1_cost, Handler_2_cost, tarcd_Agreed_Rate, tarcd_Agreed_cost, tarcd_charagable_quantity, tarcd_exchange_rate, etlcreateddatetime
    FROM stg.stg_tms_tarcd_tariff_rev_cost_dtl;
    END IF;

ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tariffrevcostdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tariffrevcostheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tariffrevcostheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	
    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_tarch_tariff_rev_cost_hdr;

    UPDATE dwh.f_tariffrevcostheader t
    SET
	    tarch_trip_hdr_key               = COALESCE(fh.plpth_hdr_key,-1),
        tarch_rate                       = s.tarch_rate,
        tarch_trip_plan_hdr_sk           = s.tarch_trip_plan_hdr_sk,
        tarch_created_by                 = s.tarch_created_by,
        tarch_created_date               = s.tarch_created_date,
        tarch_modified_by                = s.tarch_modified_by,
        tarch_modified_date              = s.tarch_modified_date,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_tms_tarch_tariff_rev_cost_hdr s
	LEFT JOIN dwh.f_tripplanningheader fh
	ON		tarch_ouinstance		=	fh.plpth_ouinstance
	AND		tarch_trip_plan_id		=	fh.plpth_trip_plan_id
    WHERE	t.tarch_ouinstance		=	s.tarch_ouinstance
    AND		t.tarch_trip_plan_id	=	s.tarch_trip_plan_id
    AND		t.tarch_unique_id		=	s.tarch_unique_id
    AND     t.tarch_stage_of_derivation = s.tarch_stage_of_derivation
	AND		t.tarch_buy_sell_type	=	s.tarch_buy_sell_type;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_tariffrevcostheader
    (
        tarch_trip_hdr_key,tarch_ouinstance, tarch_trip_plan_id, tarch_unique_id, tarch_stage_of_derivation, tarch_buy_sell_type, 
		tarch_rate, tarch_trip_plan_hdr_sk, tarch_created_by, tarch_created_date, tarch_modified_by, tarch_modified_date, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(fh.plpth_hdr_key,-1),s.tarch_ouinstance, s.tarch_trip_plan_id, s.tarch_unique_id, s.tarch_stage_of_derivation, s.tarch_buy_sell_type, 
		s.tarch_rate, s.tarch_trip_plan_hdr_sk, s.tarch_created_by, s.tarch_created_date, s.tarch_modified_by, s.tarch_modified_date, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM  stg.stg_tms_tarch_tariff_rev_cost_hdr s
	LEFT JOIN dwh.f_tripplanningheader fh
	ON		tarch_ouinstance		=	fh.plpth_ouinstance
	AND		tarch_trip_plan_id		=	fh.plpth_trip_plan_id
    LEFT JOIN dwh.f_tariffrevcostheader t
    ON		s.tarch_ouinstance		=	t.tarch_ouinstance
    AND		s.tarch_trip_plan_id	=	t.tarch_trip_plan_id
    AND		s.tarch_unique_id		=	t.tarch_unique_id
	AND		s.tarch_buy_sell_type	=	t.tarch_buy_sell_type
	AND		s.tarch_stage_of_derivation = t.tarch_stage_of_derivation
    WHERE	t.tarch_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tarch_tariff_rev_cost_hdr
    (
        tarch_ouinstance, tarch_trip_plan_id, tarch_unique_id, tarch_stage_of_derivation, tarch_buy_sell_type, tarch_rate, 
		tarch_trip_plan_hdr_sk, tarch_created_by, tarch_created_date, tarch_modified_by, tarch_modified_date, tarch_time_stamp, 
		etlcreateddatetime
    )
    SELECT
        tarch_ouinstance, tarch_trip_plan_id, tarch_unique_id, tarch_stage_of_derivation, tarch_buy_sell_type, tarch_rate, 
		tarch_trip_plan_hdr_sk, tarch_created_by, tarch_created_date, tarch_modified_by, tarch_modified_date, tarch_time_stamp, 
		etlcreateddatetime
    FROM stg.stg_tms_tarch_tariff_rev_cost_hdr;
    END IF;

	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tariffrevcostheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tbpvoucherhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tbpvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tbp_voucher_hdr;

    UPDATE dwh.F_tbpvoucherhdr t
    SET
		company_key				= COALESCE(c.company_key,-1),
        s_timestamp            = s.timestamp,
        tran_type              = s.tran_type,
        tran_date              = s.tran_date,
        fb_voucher_date        = s.fb_voucher_date,
        createdby              = s.createdby,
        createddate            = s.createddate,
        etlactiveind           = 1,
        etljobname             = p_etljobname,
        envsourcecd            = p_envsourcecd,
        datasourcecd           = p_datasourcecd,
        etlupdatedatetime      = NOW()
    FROM stg.stg_tbp_voucher_hdr s
	LEFT JOIN dwh.d_company c
	ON c.company_code= s.company_code
    WHERE t.current_key = s.current_key
    AND t.company_code = s.company_code
    AND t.component_name = s.component_name
    AND t.bu_id = s.bu_id
    AND t.fb_id = s.fb_id
    AND t.fb_voucher_no = s.fb_voucher_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_tbpvoucherhdr
    (
		company_key,
        current_key, company_code, component_name, bu_id, fb_id, 
		fb_voucher_no, s_timestamp, tran_type, tran_date, fb_voucher_date,
		createdby, createddate, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(c.company_key,-1),
        s.current_key, s.company_code, s.component_name, s.bu_id, s.fb_id, 
		s.fb_voucher_no, s.timestamp, s.tran_type, s.tran_date, s.fb_voucher_date, 
		s.createdby, s.createddate, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tbp_voucher_hdr s
	LEFT JOIN dwh.d_company c
	ON c.company_code= s.company_code
    LEFT JOIN dwh.F_tbpvoucherhdr t
    ON s.current_key = t.current_key
    AND s.company_code = t.company_code
    AND s.component_name = t.component_name
    AND s.bu_id = t.bu_id
    AND s.fb_id = t.fb_id
    AND s.fb_voucher_no = t.fb_voucher_no
    WHERE t.current_key IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tbp_voucher_hdr
    (
        current_key, company_code, component_name, bu_id, fb_id,
		fb_voucher_no, timestamp, tran_type, tran_date, fb_voucher_date, 
		con_ref_voucher_no, createdby, createddate, modifiedby, modifieddate, 
		etlcreateddatetime
    )
    SELECT
        current_key, company_code, component_name, bu_id, fb_id, 
		fb_voucher_no, timestamp, tran_type, tran_date, fb_voucher_date, 
		con_ref_voucher_no, createdby, createddate, modifiedby, modifieddate, 
		etlcreateddatetime
    FROM stg.stg_tbp_voucher_hdr;
    
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, 
								p_batchid,p_taskname, 'sp_ExceptionHandling', 
								p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_tbpvoucherhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tcaltranhdr(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tcaltranhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tcal_tran_hdr;

    UPDATE dwh.F_tcaltranhdr t
    SET
		company_key					  = c.company_key,
        tax_community                 = s.tax_community,
        tran_date                     = s.tran_date,
        applicable_flag               = s.applicable_flag,
        company_code                  = s.company_code,
        buid                          = s.buid,
        fbid                          = s.fbid,
        tran_curr                     = s.tran_curr,
        incl_option                   = s.incl_option,
        tax_excl_amt                  = s.tax_excl_amt,
        tax_incl_amt                  = s.tax_incl_amt,
        tran_amt                      = s.tran_amt,
        comp_tax_amt                  = s.comp_tax_amt,
        corr_tax_amt                  = s.corr_tax_amt,
        party_type                    = s.party_type,
        supp_cust_code                = s.supp_cust_code,
        assessee_type                 = s.assessee_type,
        cap_deduct_charge             = s.cap_deduct_charge,
        bas_exch_rate                 = s.bas_exch_rate,
        pbas_exch_rate                = s.pbas_exch_rate,
        comp_tax_amt_bascurr          = s.comp_tax_amt_bascurr,
        corr_tax_amt_bascurr          = s.corr_tax_amt_bascurr,
        nontax_tc_amt                 = s.nontax_tc_amt,
        nontax_disc_amt               = s.nontax_disc_amt,
        component_name                = s.component_name,
        original_tran_no              = s.original_tran_no,
        reversed_tran_no              = s.reversed_tran_no,
        doc_status                    = s.doc_status,
        tax_status                    = s.tax_status,
        cert_recd_status              = s.cert_recd_status,
        dr_cr_flag                    = s.dr_cr_flag,
        usage_id                      = s.usage_id,
        trade_type                    = s.trade_type,
        created_at                    = s.created_at,
        created_by                    = s.created_by,
        created_date                  = s.created_date,
        modified_by                   = s.modified_by,
        modified_date                 = s.modified_date,
        s_timestamp                     = s.timestamp,
        receipt_type                  = s.receipt_type,
        threshold_flag                = s.threshold_flag,
        capital_flag                  = s.capital_flag,
        post_date                     = s.post_date,
        tcal_pdc_flag                 = s.tcal_pdc_flag,
        supp_inv_no                   = s.supp_inv_no,
        supp_inv_date                 = s.supp_inv_date,
        supp_inv_amount               = s.supp_inv_amount,
        nature_of_reason              = s.nature_of_reason,
        recon_sup_tax_inv_flag        = s.recon_sup_tax_inv_flag,
        Aadhaar_No                    = s.Aadhaar_No,
        pan_no                        = s.pan_no,
        etlactiveind                  = 1,
        etljobname                    = p_etljobname,
        envsourcecd                   = p_envsourcecd,
        datasourcecd                  = p_datasourcecd,
        etlupdatedatetime             = NOW()
    FROM stg.stg_tcal_tran_hdr s
	LEFT JOIN dwh.d_company c
	on s.company_code = c.company_code
    WHERE t.tran_no = s.tran_no
    AND t.tax_type = s.tax_type
    AND t.tran_type = s.tran_type
    AND t.tran_ou = s.tran_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_tcaltranhdr
    (	company_key,
        tran_no, tax_type, tran_type, tran_ou, tax_community, 
		tran_date, applicable_flag, company_code, buid, fbid, 
		tran_curr, incl_option, tax_excl_amt, tax_incl_amt, tran_amt, 
		comp_tax_amt, corr_tax_amt, party_type, supp_cust_code, assessee_type, 
		cap_deduct_charge, bas_exch_rate, pbas_exch_rate, comp_tax_amt_bascurr, corr_tax_amt_bascurr, 
		nontax_tc_amt, nontax_disc_amt, component_name, original_tran_no, reversed_tran_no, 
		doc_status, tax_status, cert_recd_status, dr_cr_flag, usage_id, 
		trade_type, created_at, created_by, created_date, modified_by, 
		modified_date, s_timestamp, receipt_type, threshold_flag, capital_flag, 
		post_date, tcal_pdc_flag, supp_inv_no, supp_inv_date, supp_inv_amount, 
		nature_of_reason, recon_sup_tax_inv_flag, Aadhaar_No, pan_no, 
		etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		c.company_key,
        s.tran_no, s.tax_type, s.tran_type, s.tran_ou, s.tax_community, 
		s.tran_date, s.applicable_flag, s.company_code, s.buid, s.fbid, 
		s.tran_curr, s.incl_option, s.tax_excl_amt, s.tax_incl_amt, s.tran_amt, 
		s.comp_tax_amt, s.corr_tax_amt, s.party_type, s.supp_cust_code, s.assessee_type, 
		s.cap_deduct_charge, s.bas_exch_rate, s.pbas_exch_rate, s.comp_tax_amt_bascurr, s.corr_tax_amt_bascurr, 
		s.nontax_tc_amt, s.nontax_disc_amt, s.component_name, s.original_tran_no, s.reversed_tran_no, 
		s.doc_status, s.tax_status, s.cert_recd_status, s.dr_cr_flag, s.usage_id, 
		s.trade_type, s.created_at, s.created_by, s.created_date, s.modified_by, 
		s.modified_date, s.timestamp, s.receipt_type, s.threshold_flag, s.capital_flag, 
		s.post_date, s.tcal_pdc_flag, s.supp_inv_no, s.supp_inv_date, s.supp_inv_amount, 
		s.nature_of_reason, s.recon_sup_tax_inv_flag, s.Aadhaar_No, s.pan_no, 
		1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tcal_tran_hdr s
	LEFT JOIN dwh.d_company c
	on s.company_code = c.company_code
    LEFT JOIN dwh.F_tcaltranhdr t
    ON s.tran_no = t.tran_no
    AND s.tax_type = t.tax_type
    AND s.tran_type = t.tran_type
    AND s.tran_ou = t.tran_ou
    WHERE t.tran_no IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tcal_tran_hdr
    (
        tran_no, tax_type, tran_type, tran_ou, tax_community, tran_date, applicable_flag, company_code, buid, fbid, tran_curr, incl_option, tax_excl_amt, tax_incl_amt, tran_amt, comp_tax_amt, corr_tax_amt, party_type, supp_cust_code, assessee_type, cap_deduct_charge, bas_exch_rate, pbas_exch_rate, comp_tax_amt_bascurr, corr_tax_amt_bascurr, nontax_tc_amt, nontax_disc_amt, component_name, original_tran_no, reversed_tran_no, doc_status, tax_status, tax_adj_status, cert_recd_status, dr_cr_flag, usage_id, trade_type, tax_on, addnl_param1, addnl_param2, addnl_param3, addnl_param4, created_at, created_by, created_date, modified_by, modified_date, timestamp, receipt_type, tax_amt_invoiced, threshold_flag, capital_flag, ttran_taxable_amt, ttran_tax_amt, post_date, tcal_pdc_flag, prop_wht_amt, app_wht_amt, supp_inv_no, supp_inv_date, supp_inv_amount, ack_no, nature_of_reason, sec_heading, sub_heading, eway_bill_no, valid_upto, eway_bill_date, original_supp_inv_no, recon_sup_tax_inv_flag, gstr2a_classification, Aadhaar_No, pan_no, einv_Qrcode, InvRefNum, etlcreateddatetime
    )
    SELECT
        tran_no, tax_type, tran_type, tran_ou, tax_community, tran_date, applicable_flag, company_code, buid, fbid, tran_curr, incl_option, tax_excl_amt, tax_incl_amt, tran_amt, comp_tax_amt, corr_tax_amt, party_type, supp_cust_code, assessee_type, cap_deduct_charge, bas_exch_rate, pbas_exch_rate, comp_tax_amt_bascurr, corr_tax_amt_bascurr, nontax_tc_amt, nontax_disc_amt, component_name, original_tran_no, reversed_tran_no, doc_status, tax_status, tax_adj_status, cert_recd_status, dr_cr_flag, usage_id, trade_type, tax_on, addnl_param1, addnl_param2, addnl_param3, addnl_param4, created_at, created_by, created_date, modified_by, modified_date, timestamp, receipt_type, tax_amt_invoiced, threshold_flag, capital_flag, ttran_taxable_amt, ttran_tax_amt, post_date, tcal_pdc_flag, prop_wht_amt, app_wht_amt, supp_inv_no, supp_inv_date, supp_inv_amount, ack_no, nature_of_reason, sec_heading, sub_heading, eway_bill_no, valid_upto, eway_bill_date, original_supp_inv_no, recon_sup_tax_inv_flag, gstr2a_classification, Aadhaar_No, pan_no, einv_Qrcode, InvRefNum, etlcreateddatetime
    FROM stg.stg_tcal_tran_hdr;
    
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
	   
END;
$$;


ALTER PROCEDURE dwh.usp_f_tcaltranhdr(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tenderrequirementdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tenderrequirementdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;
        IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_trd_tender_req_dtls;

    UPDATE dwh.F_TenderRequirementDetail t
    SET

    	trd_hdr_key               		   = fh.trh_hdr_key,
        trd_ouinstance                    = s.trd_ouinstance,
        trd_tender_req_no                 = s.trd_tender_req_no,
        trd_tender_req_line_no            = s.trd_tender_req_line_no,
        trd_ref_doc_type                  = s.trd_ref_doc_type,
        trd_from_geo                      = s.trd_from_geo,
        trd_from_geo_type                 = s.trd_from_geo_type,
        trd_to_geo                        = s.trd_to_geo,
        trd_to_geo_type                   = s.trd_to_geo_type,
        trd_req_for_vehicle               = s.trd_req_for_vehicle,
        trd_req_for_equipment             = s.trd_req_for_equipment,
        trd_req_for_driver                = s.trd_req_for_driver,
        trd_req_for_handler               = s.trd_req_for_handler,
        trd_req_for_services              = s.trd_req_for_services,
        trd_req_for_schedule              = s.trd_req_for_schedule,
        trd_req_created_by                = s.trd_req_created_by,
        trd_req_created_date              = s.trd_req_created_date,
        trd_req_last_modified_by          = s.trd_req_last_modified_by,
        trd_req_last_modified_date        = s.trd_req_last_modified_date,
        trd_timestamp                     = s.trd_timestamp,
        trd_trip_plan_id                  = s.trd_trip_plan_id,
        geo_city_desc                     = s.wms_geo_city_desc,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_tms_trd_tender_req_dtls s
    INNER JOIN  dwh.f_tenderrequirementheader fh 
		ON  s.trd_ouinstance		= fh.trh_ouinstance 
		AND s.trd_tender_req_no		= fh.trh_tender_req_no 
    WHERE t.trd_ouinstance			= s.trd_ouinstance
		AND t.trd_tender_req_no		= s.trd_tender_req_no
		AND t.trd_tender_req_line_no = s.trd_tender_req_line_no
		AND t.trd_ref_doc_no		= s.trd_ref_doc_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TenderRequirementDetail
    ( 
        trd_hdr_key, trd_ouinstance, trd_tender_req_no, trd_tender_req_line_no, trd_ref_doc_type, trd_ref_doc_no, trd_from_geo, trd_from_geo_type, trd_to_geo, trd_to_geo_type, trd_req_for_vehicle, trd_req_for_equipment, trd_req_for_driver, trd_req_for_handler, trd_req_for_services, trd_req_for_schedule, trd_req_created_by, trd_req_created_date, trd_req_last_modified_by, trd_req_last_modified_date, trd_timestamp, trd_trip_plan_id, geo_city_desc, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.trh_hdr_key, s.trd_ouinstance, s.trd_tender_req_no, s.trd_tender_req_line_no, s.trd_ref_doc_type, s.trd_ref_doc_no, s.trd_from_geo, s.trd_from_geo_type, s.trd_to_geo, s.trd_to_geo_type, s.trd_req_for_vehicle, s.trd_req_for_equipment, s.trd_req_for_driver, s.trd_req_for_handler, s.trd_req_for_services, s.trd_req_for_schedule, s.trd_req_created_by, s.trd_req_created_date, s.trd_req_last_modified_by, s.trd_req_last_modified_date, s.trd_timestamp, s.trd_trip_plan_id, s.wms_geo_city_desc, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_trd_tender_req_dtls s

    INNER JOIN  dwh.f_tenderrequirementheader fh 
		ON  s.trd_ouinstance		= fh.trh_ouinstance 
		AND s.trd_tender_req_no		= fh.trh_tender_req_no
    LEFT JOIN dwh.F_TenderRequirementDetail t
		ON s.trd_ouinstance			= t.trd_ouinstance
		AND s.trd_tender_req_no		= t.trd_tender_req_no
		AND s.trd_tender_req_line_no = t.trd_tender_req_line_no
		AND s.trd_ref_doc_no		= t.trd_ref_doc_no
    WHERE t.trd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_trd_tender_req_dtls
    (
        trd_ouinstance, trd_tender_req_no, trd_tender_req_line_no, trd_ref_doc_type, trd_ref_doc_no, trd_from_geo, trd_from_geo_type, trd_to_geo, trd_to_geo_type, trd_req_for_vehicle, trd_req_for_equipment, trd_req_for_driver, trd_req_for_handler, trd_req_for_services, trd_req_for_schedule, trd_req_created_by, trd_req_created_date, trd_req_last_modified_by, trd_req_last_modified_date, trd_timestamp, trd_trip_plan_id, wms_geo_city_desc, etlcreateddatetime
    )
    SELECT
        trd_ouinstance, trd_tender_req_no, trd_tender_req_line_no, trd_ref_doc_type, trd_ref_doc_no, trd_from_geo, trd_from_geo_type, trd_to_geo, trd_to_geo_type, trd_req_for_vehicle, trd_req_for_equipment, trd_req_for_driver, trd_req_for_handler, trd_req_for_services, trd_req_for_schedule, trd_req_created_by, trd_req_created_date, trd_req_last_modified_by, trd_req_last_modified_date, trd_timestamp, trd_trip_plan_id, wms_geo_city_desc, etlcreateddatetime
    FROM stg.stg_tms_trd_tender_req_dtls;
    
    END IF;

     ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;
    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tenderrequirementdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tenderrequirementheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tenderrequirementheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_trh_tender_req_header;

    UPDATE dwh.F_TenderRequirementHeader t
    SET
		trh_date_key                     = COALESCE(d.datekey,-1),
        trh_ouinstance                   = s.trh_ouinstance,
        trh_tender_req_no                = s.trh_tender_req_no,
        trh_numtype                      = s.trh_numtype,
        trh_tender_req_status            = s.trh_tender_req_status,
        trh_tender_req_date              = s.trh_tender_req_date,
        trh_req_type                     = s.trh_req_type,
        trh_req_id                       = s.trh_req_id,
        trh_resp_time_limit              = s.trh_resp_time_limit,
        trh_resp_time_limit_uom          = s.trh_resp_time_limit_uom,
        trh_tender_inst                  = s.trh_tender_inst,
        trh_transport_mode               = s.trh_transport_mode,
        trh_created_by                   = s.trh_created_by,
        trh_created_date                 = s.trh_created_date,
        trh_last_modified_by             = s.trh_last_modified_by,
        trh_lst_modified_date            = s.trh_lst_modified_date,
        trh_timestamp                    = s.trh_timestamp,
        trh_tender_confirm_status        = s.trh_tender_confirm_status,
        trh_resp_before                  = s.trh_resp_before,
        trh_tender_req_status_old        = s.trh_tender_req_status_old,
        trh_tender_req_prevstatus        = s.trh_tender_req_prevstatus,
        trh_workflow_status              = s.trh_workflow_status,
        trh_workflow_error               = s.trh_workflow_error,
        trh_wf_guid                      = s.trh_wf_guid,
        trh_multi_del_ins_flag           = s.trh_multi_del_ins_flag,
        trh_multi_del_ins                = s.trh_multi_del_ins,
        trh_request_cost_currency        = s.trh_request_cost_currency,
        trh_requested_ext_cost           = s.trh_requested_ext_cost,
        trh_reason_rejection_mtr         = s.trh_reason_rejection_mtr,
        trh_workflow_status_mtr          = s.trh_workflow_status_mtr,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_tms_trh_tender_req_header s
	
	LEFT JOIN dwh.d_date D 			
		ON s.trh_tender_req_date::date = D.dateactual
		
    WHERE t.trh_ouinstance = s.trh_ouinstance
    AND t.trh_tender_req_no = s.trh_tender_req_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TenderRequirementHeader
    (
         trh_date_key ,trh_ouinstance, trh_tender_req_no, trh_numtype, trh_tender_req_status, trh_tender_req_date, trh_req_type, trh_req_id, trh_resp_time_limit, trh_resp_time_limit_uom, trh_tender_inst, trh_transport_mode, trh_created_by, trh_created_date, trh_last_modified_by, trh_lst_modified_date, trh_timestamp, trh_tender_confirm_status, trh_resp_before, trh_tender_req_status_old, trh_tender_req_prevstatus, trh_workflow_status, trh_workflow_error, trh_wf_guid, trh_multi_del_ins_flag, trh_multi_del_ins, trh_request_cost_currency, trh_requested_ext_cost, trh_reason_rejection_mtr, trh_workflow_status_mtr, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(d.datekey,-1) ,s.trh_ouinstance, s.trh_tender_req_no, s.trh_numtype, s.trh_tender_req_status, s.trh_tender_req_date, s.trh_req_type, s.trh_req_id, s.trh_resp_time_limit, s.trh_resp_time_limit_uom, s.trh_tender_inst, s.trh_transport_mode, s.trh_created_by, s.trh_created_date, s.trh_last_modified_by, s.trh_lst_modified_date, s.trh_timestamp, s.trh_tender_confirm_status, s.trh_resp_before, s.trh_tender_req_status_old, s.trh_tender_req_prevstatus, s.trh_workflow_status, s.trh_workflow_error, s.trh_wf_guid, s.trh_multi_del_ins_flag, s.trh_multi_del_ins, s.trh_request_cost_currency, s.trh_requested_ext_cost, s.trh_reason_rejection_mtr, s.trh_workflow_status_mtr, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_trh_tender_req_header s
	
	LEFT JOIN dwh.d_date D 			
		ON s.trh_tender_req_date::date = D.dateactual
    LEFT JOIN dwh.F_TenderRequirementHeader t
    ON s.trh_ouinstance = t.trh_ouinstance
    AND s.trh_tender_req_no = t.trh_tender_req_no
    WHERE t.trh_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_trh_tender_req_header
    (
        trh_ouinstance, trh_tender_req_no, trh_numtype, trh_tender_req_status, trh_tender_req_date, trh_req_type, trh_req_id, trh_resp_time_limit, trh_resp_time_limit_uom, trh_tender_inst, trh_transport_mode, trh_created_by, trh_created_date, trh_last_modified_by, trh_lst_modified_date, trh_timestamp, trh_tender_confirm_status, trh_resp_before, trh_tender_req_status_old, trh_tender_req_prevstatus, trh_workflow_status, trh_workflow_error, trh_wf_guid, trh_multi_del_ins_flag, trh_multi_del_ins, trh_request_cost_currency, trh_requested_ext_cost, trh_reason_rejection_mtr, trh_workflow_status_mtr, etlcreateddatetime
    )
    SELECT
        trh_ouinstance, trh_tender_req_no, trh_numtype, trh_tender_req_status, trh_tender_req_date, trh_req_type, trh_req_id, trh_resp_time_limit, trh_resp_time_limit_uom, trh_tender_inst, trh_transport_mode, trh_created_by, trh_created_date, trh_last_modified_by, trh_lst_modified_date, trh_timestamp, trh_tender_confirm_status, trh_resp_before, trh_tender_req_status_old, trh_tender_req_prevstatus, trh_workflow_status, trh_workflow_error, trh_wf_guid, trh_multi_del_ins_flag, trh_multi_del_ins, trh_request_cost_currency, trh_requested_ext_cost, trh_reason_rejection_mtr, trh_workflow_status_mtr, etlcreateddatetime
    FROM stg.stg_tms_trh_tender_req_header;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tenderrequirementheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripexecutionplandetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripexecutionplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_plepd_execution_plan_details;

        UPDATE dwh.F_TripExecutionPlanDetail t
        SET
        br_key                            =oh.br_key,
        plepd_bk_id                       = s.plepd_bk_id,
        plepd_bk_ref_route_id             = s.plepd_bk_ref_route_id,
        plepd_leg_id                      = s.plepd_leg_id,
        plepd_leg_behaviour_id            = s.plepd_leg_behaviour_id,
        plepd_leg_seq_no                  = s.plepd_leg_seq_no,
        plepd_leg_status                  = s.plepd_leg_status,
        plepd_planning_seq_no             = s.plepd_planning_seq_no,
        plepd_leg_from                    = s.plepd_leg_from,
        plepd_from_leg_geo_type           = s.plepd_from_leg_geo_type,
        plepd_leg_from_postal_code        = s.plepd_leg_from_postal_code,
        plepd_leg_from_subzone            = s.plepd_leg_from_subzone,
        plepd_leg_from_city               = s.plepd_leg_from_city,
        plepd_leg_from_zone               = s.plepd_leg_from_zone,
        plepd_leg_from_state              = s.plepd_leg_from_state,
        plepd_leg_from_region             = s.plepd_leg_from_region,
        plepd_leg_from_country            = s.plepd_leg_from_country,
        plepd_leg_to                      = s.plepd_leg_to,
        plepd_to_leg_geo_type             = s.plepd_to_leg_geo_type,
        plepd_leg_to_postal_code          = s.plepd_leg_to_postal_code,
        plepd_leg_to_subzone              = s.plepd_leg_to_subzone,
        plepd_leg_to_city                 = s.plepd_leg_to_city,
        plepd_leg_to_zone                 = s.plepd_leg_to_zone,
        plepd_leg_to_state                = s.plepd_leg_to_state,
        plepd_leg_to_region               = s.plepd_leg_to_region,
        plepd_leg_to_country              = s.plepd_leg_to_country,
        plepd_leg_transport_mode          = s.plepd_leg_transport_mode,
        plepd_available_qty               = s.plepd_available_qty,
        plepd_draft_qty                   = s.plepd_draft_qty,
        plepd_confirmed_qty               = s.plepd_confirmed_qty,
        plepd_initiated_qty               = s.plepd_initiated_qty,
        plepd_executed_qty                = s.plepd_executed_qty,
        plepd_qty_uom                     = s.plepd_qty_uom,
        plepd_available_vol               = s.plepd_available_vol,
        plepd_draft_vol                   = s.plepd_draft_vol,
        plepd_confirmed_vol               = s.plepd_confirmed_vol,
        plepd_vol_uom                     = s.plepd_vol_uom,
        plepd_available_weight            = s.plepd_available_weight,
        plepd_draft_weight                = s.plepd_draft_weight,
        plepd_confirmed_weight            = s.plepd_confirmed_weight,
        plepd_weight_uom                  = s.plepd_weight_uom,
        plepd_created_by                  = s.plepd_created_by,
        plepd_created_Date                = s.plepd_created_Date,
        plepd_last_modified_by            = s.plepd_last_modified_by,
        plepd_last_modified_date          = s.plepd_last_modified_date,
        plepd_leg_to_suburb               = s.plepd_leg_to_suburb,
        plepd_leg_from_suburb             = s.plepd_leg_from_suburb,
        plepd_updated_by                  = s.plepd_updated_by,
            etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
        FROM stg.stg_tms_plepd_execution_plan_details s

        INNER JOIN dwh.f_bookingrequest oh
        ON  
          s.plepd_ouinstance  =  oh. br_ouinstance             
    AND   s.plepd_bk_id       = oh. br_request_Id              

        WHERE t.plepd_ouinstance = s.plepd_ouinstance
    AND t.plepd_execution_plan_id = s.plepd_execution_plan_id
    AND t.plepd_line_no = s.plepd_line_no;
     

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_TripExecutionPlanDetail
        (
           br_key , plepd_ouinstance, plepd_execution_plan_id, plepd_line_no, plepd_bk_id, plepd_bk_ref_route_id, plepd_leg_id, plepd_leg_behaviour_id, plepd_leg_seq_no, plepd_leg_status, plepd_planning_seq_no, plepd_leg_from, plepd_from_leg_geo_type, plepd_leg_from_postal_code, plepd_leg_from_subzone, plepd_leg_from_city, plepd_leg_from_zone, plepd_leg_from_state, plepd_leg_from_region, plepd_leg_from_country, plepd_leg_to, plepd_to_leg_geo_type, plepd_leg_to_postal_code, plepd_leg_to_subzone, plepd_leg_to_city, plepd_leg_to_zone, plepd_leg_to_state, plepd_leg_to_region, plepd_leg_to_country, plepd_leg_transport_mode, plepd_available_qty, plepd_draft_qty, plepd_confirmed_qty, plepd_initiated_qty, plepd_executed_qty, plepd_qty_uom, plepd_available_vol, plepd_draft_vol, plepd_confirmed_vol, plepd_vol_uom, plepd_available_weight, plepd_draft_weight, plepd_confirmed_weight, plepd_weight_uom, plepd_created_by, plepd_created_Date, plepd_last_modified_by, plepd_last_modified_date, plepd_leg_to_suburb, plepd_leg_from_suburb, plepd_updated_by, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
           oh.br_key, s.plepd_ouinstance, s.plepd_execution_plan_id, s.plepd_line_no, s.plepd_bk_id, s.plepd_bk_ref_route_id, s.plepd_leg_id, s.plepd_leg_behaviour_id, s.plepd_leg_seq_no, s.plepd_leg_status, s.plepd_planning_seq_no, s.plepd_leg_from, s.plepd_from_leg_geo_type, s.plepd_leg_from_postal_code, s.plepd_leg_from_subzone, s.plepd_leg_from_city, s.plepd_leg_from_zone, s.plepd_leg_from_state, s.plepd_leg_from_region, s.plepd_leg_from_country, s.plepd_leg_to, s.plepd_to_leg_geo_type, s.plepd_leg_to_postal_code, s.plepd_leg_to_subzone, s.plepd_leg_to_city, s.plepd_leg_to_zone, s.plepd_leg_to_state, s.plepd_leg_to_region, s.plepd_leg_to_country, s.plepd_leg_transport_mode, s.plepd_available_qty, s.plepd_draft_qty, s.plepd_confirmed_qty, s.plepd_initiated_qty, s.plepd_executed_qty, s.plepd_qty_uom, s.plepd_available_vol, s.plepd_draft_vol, s.plepd_confirmed_vol, s.plepd_vol_uom, s.plepd_available_weight, s.plepd_draft_weight, s.plepd_confirmed_weight, s.plepd_weight_uom, s.plepd_created_by, s.plepd_created_Date, s.plepd_last_modified_by, s.plepd_last_modified_date, s.plepd_leg_to_suburb, s.plepd_leg_from_suburb, s.plepd_updated_by, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_plepd_execution_plan_details s

            INNER JOIN dwh.f_bookingrequest oh
        ON  
          s.plepd_ouinstance  =  oh. br_ouinstance             
    AND   s.plepd_bk_id       = oh. br_request_Id              

        LEFT JOIN dwh.F_TripExecutionPlanDetail t
        ON s.plepd_ouinstance = t.plepd_ouinstance
    AND s.plepd_execution_plan_id = t.plepd_execution_plan_id
    AND s.plepd_line_no = t.plepd_line_no
    
        WHERE t.plepd_ouinstance IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_plepd_execution_plan_details
        (
            plepd_ouinstance, plepd_execution_plan_id, plepd_line_no, plepd_bk_id, plepd_bk_ref_route_id, plepd_leg_id, plepd_leg_behaviour_id, plepd_leg_seq_no, plepd_leg_status, plepd_planning_seq_no, plepd_leg_from, plepd_from_leg_geo_type, plepd_leg_from_postal_code, plepd_leg_from_subzone, plepd_leg_from_city, plepd_leg_from_zone, plepd_leg_from_state, plepd_leg_from_region, plepd_leg_from_country, plepd_leg_to, plepd_to_leg_geo_type, plepd_leg_to_postal_code, plepd_leg_to_subzone, plepd_leg_to_city, plepd_leg_to_zone, plepd_leg_to_state, plepd_leg_to_region, plepd_leg_to_country, plepd_leg_transport_mode, plepd_available_qty, plepd_draft_qty, plepd_confirmed_qty, plepd_initiated_qty, plepd_executed_qty, plepd_qty_uom, plepd_available_vol, plepd_draft_vol, plepd_confirmed_vol, plepd_executed_vol, plepd_vol_uom, plepd_available_weight, plepd_draft_weight, plepd_confirmed_weight, plepd_executed_weight, plepd_weight_uom, plepd_created_by, plepd_created_Date, plepd_last_modified_by, plepd_last_modified_date, plepd_timestamp, plepd_leg_to_suburb, plepd_leg_from_suburb, plepd_est_trip_cost, plepd_act_trip_cost, plepd_ofc_col_quantity, plepd_updated_by, etlcreateddatetime
        )
        SELECT
           plepd_ouinstance, plepd_execution_plan_id, plepd_line_no, plepd_bk_id, plepd_bk_ref_route_id, plepd_leg_id, plepd_leg_behaviour_id, plepd_leg_seq_no, plepd_leg_status, plepd_planning_seq_no, plepd_leg_from, plepd_from_leg_geo_type, plepd_leg_from_postal_code, plepd_leg_from_subzone, plepd_leg_from_city, plepd_leg_from_zone, plepd_leg_from_state, plepd_leg_from_region, plepd_leg_from_country, plepd_leg_to, plepd_to_leg_geo_type, plepd_leg_to_postal_code, plepd_leg_to_subzone, plepd_leg_to_city, plepd_leg_to_zone, plepd_leg_to_state, plepd_leg_to_region, plepd_leg_to_country, plepd_leg_transport_mode, plepd_available_qty, plepd_draft_qty, plepd_confirmed_qty, plepd_initiated_qty, plepd_executed_qty, plepd_qty_uom, plepd_available_vol, plepd_draft_vol, plepd_confirmed_vol, plepd_executed_vol, plepd_vol_uom, plepd_available_weight, plepd_draft_weight, plepd_confirmed_weight, plepd_executed_weight, plepd_weight_uom, plepd_created_by, plepd_created_Date, plepd_last_modified_by, plepd_last_modified_date, plepd_timestamp, plepd_leg_to_suburb, plepd_leg_from_suburb, plepd_est_trip_cost, plepd_act_trip_cost, plepd_ofc_col_quantity, plepd_updated_by, etlcreateddatetime
        FROM stg.stg_tms_plepd_execution_plan_details;
    END IF;

    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;  
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 
    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripexecutionplandetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_triplogagentdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_triplogagentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status >= 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_tlad_trip_log_agent_details;

        UPDATE dwh.F_TripLogAgentDetail t
        SET


        plpth_hdr_key                    = oh.plpth_hdr_key,
        tlad_thu_agent_qty               = s.tlad_thu_agent_qty,
        tlad_thu_agent_weight            = s.tlad_thu_agent_weight,
        tlad_thu_agent_volume            = s.tlad_thu_agent_volume,
        tlad_ag_ref_doc_type             = s.tlad_ag_ref_doc_type,
        tlad_ag_ref_doc_no               = s.tlad_ag_ref_doc_no,
        tlad_ag_ref_doc_date             = s.tlad_ag_ref_doc_date,
        tlad_agent_remarks               = s.tlad_agent_remarks,
        tlad_thu_agent_qty_uom           = s.tlad_thu_agent_qty_uom,
        tlad_thu_agent_weight_uom        = s.tlad_thu_agent_weight_uom,
        tlad_thu_agent_volume_uom        = s.tlad_thu_agent_volume_uom,
        tlad_timestamp                   = s.tlad_timestamp,
        tlad_created_by                  = s.tlad_created_by,
        tlad_creation_date               = s.tlad_creation_date,
        tlad_last_modified_by            = s.tlad_last_modified_by,
        tlad_last_modified_date          = s.tlad_last_modified_date,
            etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
        FROM stg.stg_tms_tlad_trip_log_agent_details s

         INNER JOIN dwh.f_tripplanningheader oh  
ON           s.tlad_ouinstance  = oh.plpth_ouinstance
      AND s.tlad_trip_plan_id   = oh.plpth_trip_plan_id
      
        WHERE t.tlad_ouinstance = s.tlad_ouinstance
    AND t.tlad_trip_plan_id = s.tlad_trip_plan_id
    AND t.tlad_dispatch_doc_no = s.tlad_dispatch_doc_no
    AND t.tlad_thu_line_no = s.tlad_thu_line_no
    AND t.plpth_hdr_key  = oh.plpth_hdr_key;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_TripLogAgentDetail
        (
            plpth_hdr_key,tlad_ouinstance, tlad_trip_plan_id, tlad_dispatch_doc_no, tlad_thu_line_no, tlad_thu_agent_qty, tlad_thu_agent_weight, tlad_thu_agent_volume, tlad_ag_ref_doc_type, tlad_ag_ref_doc_no, tlad_ag_ref_doc_date, tlad_agent_remarks, tlad_thu_agent_qty_uom, tlad_thu_agent_weight_uom, tlad_thu_agent_volume_uom, tlad_timestamp, tlad_created_by, tlad_creation_date, tlad_last_modified_by, tlad_last_modified_date, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            oh.plpth_hdr_key,s.tlad_ouinstance, s.tlad_trip_plan_id, s.tlad_dispatch_doc_no, s.tlad_thu_line_no, s.tlad_thu_agent_qty, s.tlad_thu_agent_weight, s.tlad_thu_agent_volume, s.tlad_ag_ref_doc_type, s.tlad_ag_ref_doc_no, s.tlad_ag_ref_doc_date, s.tlad_agent_remarks, s.tlad_thu_agent_qty_uom, s.tlad_thu_agent_weight_uom, s.tlad_thu_agent_volume_uom, s.tlad_timestamp, s.tlad_created_by, s.tlad_creation_date, s.tlad_last_modified_by, s.tlad_last_modified_date, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_tlad_trip_log_agent_details s

        INNER JOIN dwh.f_tripplanningheader oh  
ON           s.tlad_ouinstance  = oh.plpth_ouinstance
      AND s.tlad_trip_plan_id   = oh.plpth_trip_plan_id
      
        LEFT JOIN dwh.F_TripLogAgentDetail t
        ON s.tlad_ouinstance = t.tlad_ouinstance
    AND s.tlad_trip_plan_id = t.tlad_trip_plan_id
    AND s.tlad_dispatch_doc_no = t.tlad_dispatch_doc_no
    AND s.tlad_thu_line_no = t.tlad_thu_line_no
        AND t.plpth_hdr_key  = oh.plpth_hdr_key

        WHERE t.tlad_ouinstance IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_tlad_trip_log_agent_details
        (
            tlad_ouinstance, tlad_trip_plan_id, tlad_dispatch_doc_no, tlad_thu_line_no, tlad_thu_agent_qty, tlad_thu_agent_weight, tlad_thu_agent_volume, tlad_ag_ref_doc_type, tlad_ag_ref_doc_no, tlad_ag_ref_doc_date, tlad_agent_remarks, tlad_thu_agent_qty_uom, tlad_thu_agent_weight_uom, tlad_thu_agent_volume_uom, tlad_timestamp, tlad_created_by, tlad_creation_date, tlad_last_modified_by, tlad_last_modified_date, etlcreateddatetime
        )
        SELECT
            tlad_ouinstance, tlad_trip_plan_id, tlad_dispatch_doc_no, tlad_thu_line_no, tlad_thu_agent_qty, tlad_thu_agent_weight, tlad_thu_agent_volume, tlad_ag_ref_doc_type, tlad_ag_ref_doc_no, tlad_ag_ref_doc_date, tlad_agent_remarks, tlad_thu_agent_qty_uom, tlad_thu_agent_weight_uom, tlad_thu_agent_volume_uom, tlad_timestamp, tlad_created_by, tlad_creation_date, tlad_last_modified_by, tlad_last_modified_date, etlcreateddatetime
        FROM stg.stg_tms_tlad_trip_log_agent_details;
    END IF;

    ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;  
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF; 
    
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_triplogagentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_triplogeventdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_triplogeventdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_tled_trip_log_event_details;

        UPDATE dwh.F_TripLogEventDetail t
        SET
        plpth_hdr_key                   = fh.plpth_hdr_key,
		tled_actual_date_key			= COALESCE(d.datekey,-1),
        tled_trip_plan_line_no          = s.tled_trip_plan_line_no,
        tled_bkr_id                     = s.tled_bkr_id,
        tled_leg_no                     = s.tled_leg_no,
        tled_event_id                   = s.tled_event_id,
        tled_actual_date_time           = s.tled_actual_date_time,
        tled_remarks1                   = s.tled_remarks1,
        tled_reason_code                = s.tled_reason_code,
        tled_reason_description         = s.tled_reason_description,
        tled_created_date               = s.tled_created_date,
        tled_created_by                 = s.tled_created_by,
        tled_modified_date              = s.tled_modified_date,
        tled_modified_by                = s.tled_modified_by,
        tled_timestamp                  = s.tled_timestamp,
        tled_planned_datetime           = s.tled_planned_datetime,
        tled_event_nod                  = s.tled_event_nod,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
        FROM stg.stg_tms_tled_trip_log_event_details s

    INNER JOIN dwh.f_tripplanningheader fh
	ON   s.tled_ouinstance   = fh.plpth_ouinstance
	AND  s.tled_trip_plan_id = fh.plpth_trip_plan_id
	
	LEFT JOIN dwh.d_date d			
    ON s.tled_actual_date_time::date = d.dateactual

    WHERE t.tled_ouinstance = s.tled_ouinstance
    AND t.tled_trip_plan_id = s.tled_trip_plan_id
    AND t.tled_trip_plan_unique_id = s.tled_trip_plan_unique_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TripLogEventDetail
        (
            plpth_hdr_key,tled_actual_date_key,
			tled_ouinstance, tled_trip_plan_id, tled_trip_plan_line_no, tled_bkr_id, tled_leg_no, tled_event_id, tled_actual_date_time, tled_remarks1, tled_reason_code, tled_reason_description, tled_created_date, tled_created_by, tled_modified_date, tled_modified_by, tled_timestamp, tled_planned_datetime, tled_trip_plan_unique_id, tled_event_nod, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

    SELECT
            fh.plpth_hdr_key,COALESCE(d.datekey,-1),
			s.tled_ouinstance, s.tled_trip_plan_id, s.tled_trip_plan_line_no, s.tled_bkr_id, s.tled_leg_no, s.tled_event_id, s.tled_actual_date_time, s.tled_remarks1, s.tled_reason_code, s.tled_reason_description, s.tled_created_date, s.tled_created_by, s.tled_modified_date, s.tled_modified_by, s.tled_timestamp, s.tled_planned_datetime, s.tled_trip_plan_unique_id, s.tled_event_nod, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_tled_trip_log_event_details s
		
    INNER JOIN dwh.f_tripplanningheader fh
	ON   s.tled_ouinstance   = fh.plpth_ouinstance
	AND  s.tled_trip_plan_id = fh.plpth_trip_plan_id
	
	LEFT JOIN dwh.d_date d 			
	ON s.tled_actual_date_time::date = d.dateactual

    LEFT JOIN dwh.F_TripLogEventDetail t
    ON s.tled_ouinstance = t.tled_ouinstance
    AND s.tled_trip_plan_id = t.tled_trip_plan_id
    AND s.tled_trip_plan_unique_id = t.tled_trip_plan_unique_id
	
    WHERE t.tled_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tled_trip_log_event_details
        (
            tled_ouinstance, tled_trip_plan_id, tled_trip_plan_line_no, tled_bkr_id, tled_leg_no, tled_event_id, tled_actual_date_time, tled_remarks1, tled_reason_code, tled_reason_description, tled_remarks2, tled_created_date, tled_created_by, tled_modified_date, tled_modified_by, tled_timestamp, tled_planned_datetime, tled_trip_plan_unique_id, tled_event_nod, etlcreateddatetime
        )
    SELECT
            tled_ouinstance, tled_trip_plan_id, tled_trip_plan_line_no, tled_bkr_id, tled_leg_no, tled_event_id, tled_actual_date_time, tled_remarks1, tled_reason_code, tled_reason_description, tled_remarks2, tled_created_date, tled_created_by, tled_modified_date, tled_modified_by, tled_timestamp, tled_planned_datetime, tled_trip_plan_unique_id, tled_event_nod, etlcreateddatetime
        FROM stg.stg_tms_tled_trip_log_event_details;
		
    END IF;

   ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
         select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_triplogeventdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_triplogexpensedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_triplogexpensedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    
	SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_tled_trip_log_expense_details;
	
	UPDATE dwh.F_TripLogExpenseDetail t
    SET
        tled_ouinstance                    = s.tled_ouinstance,
        tled_trip_plan_id                  = s.tled_trip_plan_id,
        tled_trip_plan_line_id             = s.tled_trip_plan_line_id,
        tled_expense_record                = s.tled_expense_record,
        tled_expense_type                  = s.tled_expense_type,
        tled_bill_no                       = s.tled_bill_no,
        tled_bill_date                     = s.tled_bill_date,
        tled_bill_amount                   = s.tled_bill_amount,
        tled_claimed_amount                = s.tled_claimed_amount,
        tled_approved_amount               = s.tled_approved_amount,
        tled_currency                      = s.tled_currency,
        tled_remarks                       = s.tled_remarks,
        tled_created_date                  = s.tled_created_date,
        tled_created_by                    = s.tled_created_by,
        tled_modified_date                 = s.tled_modified_date,
        tled_modified_by                   = s.tled_modified_by,
        tled_timestamp                     = s.tled_timestamp,
        tled_status                        = s.tled_status,
        tled_leq_no                        = s.tled_leq_no,
        tled_previous_status               = s.tled_previous_status,
        tled_workflow_status               = s.tled_workflow_status,
        tled_workflow_error                = s.tled_workflow_error,
        tled_wf_guid                       = s.tled_wf_guid,
        tms_tled_hdr_guid                  = s.tms_tled_hdr_guid,
        tms_tled_guid                      = s.tms_tled_guid,
        tms_tled_exp_requset_no            = s.tms_tled_exp_requset_no,
        tms_tled_exp_resource_id           = s.tms_tled_exp_resource_id,
        tms_tled_adv_amount                = s.tms_tled_adv_amount,
        tms_tled_adv_amt_ref               = s.tms_tled_adv_amt_ref,
        tled_bill_base_amount              = s.tled_bill_base_amount,
        tled_claimed_base_amount           = s.tled_claimed_base_amount,
        tled_approved_base_amount          = s.tled_approved_base_amount,
        tms_tled_adv_base_amount           = s.tms_tled_adv_base_amount,
        tleh_draft_bill_line_status        = s.tleh_draft_bill_line_status,
        tled_via_point                     = s.tled_via_point,
        tled_resource_reimbursement        = s.tled_resource_reimbursement,
        tled_customer_reimbursement        = s.tled_customer_reimbursement,
        tled_transaction_date              = s.tled_transaction_date,
        tled_refdoc_type                   = s.tled_refdoc_type,
        tled_refdoc_no                     = s.tled_refdoc_no,
        tled_tariff_id                     = s.tled_tariff_id,
        tled_amendment_no                  = s.tled_amendment_no,
        tled_rejection_remarks             = s.tled_rejection_remarks,
        tled_attachment                    = s.tled_attachment,
        etlactiveind                       = 1,
        etljobname                         = p_etljobname,
        envsourcecd                        = p_envsourcecd,
        datasourcecd                       = p_datasourcecd,
        etlupdatedatetime                  = NOW()
    FROM stg.stg_tms_tled_trip_log_expense_details s
    WHERE t.tled_ouinstance = s.tled_ouinstance
    AND t.tled_trip_plan_id = s.tled_trip_plan_id
    AND t.tled_trip_plan_line_id = s.tled_trip_plan_line_id
	AND t.tms_tled_guid	=	s.tms_tled_guid;

    GET DIAGNOSTICS updcnt = ROW_COUNT;
	
    INSERT INTO dwh.F_TripLogExpenseDetail
    (

        tled_ouinstance				, tled_trip_plan_id				, tled_trip_plan_line_id	, tled_expense_record			, 
		tled_expense_type			, tled_bill_no					, tled_bill_date			, tled_bill_amount				, 
		tled_claimed_amount			, tled_approved_amount			, tled_currency				, tled_remarks					, 
		tled_created_date			, tled_created_by				, tled_modified_date		, tled_modified_by				, 
		tled_timestamp				, tled_status					, tled_leq_no				, tled_previous_status			,
		tled_workflow_status		, tled_workflow_error			, tled_wf_guid				, tms_tled_hdr_guid				, 
		tms_tled_guid				, tms_tled_exp_requset_no		, tms_tled_exp_resource_id	, tms_tled_adv_amount			, 
		tms_tled_adv_amt_ref		, tled_bill_base_amount			, tled_claimed_base_amount	, tled_approved_base_amount		, 
		tms_tled_adv_base_amount	, tleh_draft_bill_line_status	, tled_via_point			, tled_resource_reimbursement	, 
		tled_customer_reimbursement	, tled_transaction_date			, tled_refdoc_type			, tled_refdoc_no				, 
		tled_tariff_id				, tled_amendment_no				, tled_rejection_remarks	, tled_attachment				, 
		etlactiveind				, etljobname					, envsourcecd				, datasourcecd					,
		etlcreatedatetime
    )

    SELECT

        s.tled_ouinstance				, s.tled_trip_plan_id			, s.tled_trip_plan_line_id	, s.tled_expense_record			, 
		s.tled_expense_type				, s.tled_bill_no				, s.tled_bill_date			, s.tled_bill_amount			, 
		s.tled_claimed_amount			, s.tled_approved_amount		, s.tled_currency			, s.tled_remarks				, 
		s.tled_created_date				, s.tled_created_by				, s.tled_modified_date		, s.tled_modified_by			, 
		s.tled_timestamp				, s.tled_status					, s.tled_leq_no				, s.tled_previous_status		, 
		s.tled_workflow_status			, s.tled_workflow_error			, s.tled_wf_guid			, s.tms_tled_hdr_guid			,
		s.tms_tled_guid					, s.tms_tled_exp_requset_no		, s.tms_tled_exp_resource_id, s.tms_tled_adv_amount			, 
		s.tms_tled_adv_amt_ref			, s.tled_bill_base_amount		, s.tled_claimed_base_amount, s.tled_approved_base_amount	, 
		s.tms_tled_adv_base_amount		, s.tleh_draft_bill_line_status	, s.tled_via_point			, s.tled_resource_reimbursement	, 
		s.tled_customer_reimbursement	, s.tled_transaction_date		, s.tled_refdoc_type		, s.tled_refdoc_no				, 
		s.tled_tariff_id				, s.tled_amendment_no			, s.tled_rejection_remarks	, s.tled_attachment				, 
					1					, p_etljobname					, p_envsourcecd				, p_datasourcecd				, 
		NOW()
    FROM	stg.stg_tms_tled_trip_log_expense_details s
    LEFT JOIN dwh.F_TripLogExpenseDetail t
    ON		s.tled_ouinstance 			= t.tled_ouinstance
    AND		s.tled_trip_plan_id 		= t.tled_trip_plan_id
    AND		s.tled_trip_plan_line_id 	= t.tled_trip_plan_line_id
	AND 	s.tms_tled_guid				= t.tms_tled_guid
    WHERE	t.tled_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tled_trip_log_expense_details
    (
        tled_ouinstance				, tled_trip_plan_id				, tled_trip_plan_line_id	, tled_expense_record		, 
		tled_expense_type			, tled_bill_no					, tled_bill_date			, tled_bill_amount			, 
		tled_claimed_amount			, tled_approved_amount			, tled_currency				, tled_remarks				, 
		tled_created_date			, tled_created_by				, tled_modified_date		, tled_modified_by			, 
		tled_timestamp				, tled_status					, tled_leq_no				, tled_previous_status		, 
		tled_workflow_status		, tled_workflow_error			, tled_wf_guid				, tms_tled_hdr_guid			, 
		tms_tled_guid				, tms_tled_exp_requset_no		, tms_tled_exp_resource_id	, tms_tled_adv_amount		, 
		tms_tled_adv_amt_ref		, tled_bill_base_amount			, tled_claimed_base_amount	, tled_approved_base_amount	, 
		tms_tled_adv_base_amount	, tleh_draft_bill_line_status	, tled_via_point			, tled_resource_reimbursement, 
		tled_customer_reimbursement	, tled_transaction_date			, tled_refdoc_type			, tled_refdoc_no			, 
		tled_tariff_id				, tled_amendment_no				, tled_rejection_remarks	, tled_attachment			, 
		etlcreateddatetime
    )
    SELECT
        tled_ouinstance				, tled_trip_plan_id				, tled_trip_plan_line_id	, tled_expense_record		, 
		tled_expense_type			, tled_bill_no					, tled_bill_date			, tled_bill_amount			, 
		tled_claimed_amount			, tled_approved_amount			, tled_currency				, tled_remarks				, 
		tled_created_date			, tled_created_by				, tled_modified_date		, tled_modified_by			, 
		tled_timestamp				, tled_status					, tled_leq_no				, tled_previous_status		, 
		tled_workflow_status		, tled_workflow_error			, tled_wf_guid				, tms_tled_hdr_guid			, 
		tms_tled_guid				, tms_tled_exp_requset_no		, tms_tled_exp_resource_id	, tms_tled_adv_amount		, 
		tms_tled_adv_amt_ref		, tled_bill_base_amount			, tled_claimed_base_amount	, tled_approved_base_amount	, 
		tms_tled_adv_base_amount	, tleh_draft_bill_line_status	, tled_via_point			, tled_resource_reimbursement, 
		tled_customer_reimbursement	, tled_transaction_date			, tled_refdoc_type			, tled_refdoc_no			, 
		tled_tariff_id				, tled_amendment_no				, tled_rejection_remarks	, tled_attachment			, 
		etlcreateddatetime
    FROM stg.stg_tms_tled_trip_log_expense_details;
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_triplogexpensedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_triplogexpensedocdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_triplogexpensedocdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
	FROM stg.stg_tms_tledd_trip_log_expense_Document_details;

    UPDATE dwh.F_TripLogExpenseDocDetail t
    SET
        tledd_trip_plan              = s.tledd_trip_plan,
        tledd_trip_leg_seq_id        = s.tledd_trip_leg_seq_id,
        tledd_rec_exp                = s.tledd_rec_exp,
        tledd_exp_type               = s.tledd_exp_type,
        tledd_bill_no                = s.tledd_bill_no,
        tledd_document_id            = s.tledd_document_id,
        tledd_document_date          = s.tledd_document_date,
        tledd_remarks                = s.tledd_remarks,
        tledd_created_by             = s.tledd_created_by,
        tledd_created_date           = s.tledd_created_date,
        tledd_modified_by            = s.tledd_modified_by,
        tledd_modified_date          = s.tledd_modified_date,
        tled_timestamp               = s.tled_timestamp,
        tledd_attachment             = s.tledd_attachment,
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
    FROM stg.stg_tms_tledd_trip_log_expense_document_details s
    WHERE t.tledd_ouinstance = s.tledd_ouinstance
    AND t.tledd_doc_guid = s.tledd_doc_guid;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TripLogExpenseDocDetail
    (
        tledd_ouinstance	, tledd_trip_plan		, tledd_trip_leg_seq_id	, tledd_rec_exp		,
		tledd_exp_type		, tledd_bill_no			, tledd_doc_guid		, tledd_document_id	, 
		tledd_document_date	, tledd_remarks			, tledd_created_by		, tledd_created_date, 
		tledd_modified_by	, tledd_modified_date	, tled_timestamp		, tledd_attachment	,
		etlactiveind		, etljobname			, envsourcecd			, datasourcecd		, 
		etlcreatedatetime
    )

    SELECT
        s.tledd_ouinstance		, s.tledd_trip_plan		, s.tledd_trip_leg_seq_id	, s.tledd_rec_exp		,
		s.tledd_exp_type		, s.tledd_bill_no		, s.tledd_doc_guid			, s.tledd_document_id	, 
		s.tledd_document_date	, s.tledd_remarks		, s.tledd_created_by		, s.tledd_created_date	,
		s.tledd_modified_by		, s.tledd_modified_date	, s.tled_timestamp			, s.tledd_attachment	, 
					1			, p_etljobname			, p_envsourcecd				, p_datasourcecd		,
		NOW()
    FROM stg.stg_tms_tledd_trip_log_expense_document_details s
    LEFT JOIN dwh.F_TripLogExpenseDocDetail t
    ON s.tledd_ouinstance = t.tledd_ouinstance
    AND s.tledd_doc_guid = t.tledd_doc_guid
    WHERE t.tledd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tledd_trip_log_expense_Document_details
    (
        tledd_ouinstance, tledd_trip_plan, tledd_trip_leg_seq_id, tledd_rec_exp, 
		tledd_exp_type, tledd_bill_no, tledd_doc_guid, tledd_document_id, 
		tledd_document_date, tledd_remarks, tledd_created_by, tledd_created_date, 
		tledd_modified_by, tledd_modified_date, tled_timestamp, tledd_attachment,
		etlcreateddatetime
    )
    SELECT
        tledd_ouinstance, tledd_trip_plan, tledd_trip_leg_seq_id, tledd_rec_exp,
		tledd_exp_type, tledd_bill_no, tledd_doc_guid, tledd_document_id, 
		tledd_document_date, tledd_remarks, tledd_created_by, tledd_created_date, 
		tledd_modified_by, tledd_modified_date, tled_timestamp, tledd_attachment, 
		etlcreateddatetime
    FROM stg.stg_tms_tledd_trip_log_expense_document_details;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_triplogexpensedocdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_triplogexpenseheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_triplogexpenseheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_tleh_trip_log_expence_hdr;

    UPDATE dwh.F_TripLogExpenseHeader t
    SET
		
        tleh_expense_for                   = s.tleh_expense_for,
        tleh_trip_leg_no                   = s.tleh_trip_leg_no,
        tleh_resource_id                   = s.tleh_resource_id,
        tleh_resource_name                 = s.tleh_resource_name,
        tleh_advance_amount                = s.tleh_advance_amount,
        tleh_expense_amount                = s.tleh_expense_amount,
        tleh_report_status                 = s.tleh_report_status,
        tleh_guid                          = s.tleh_guid,
        tleh_workflow_status               = s.tleh_workflow_status,
        tleh_reject_reason                 = s.tleh_reject_reason,
        tleh_reject_reason_desc            = s.tleh_reject_reason_desc,
        tleh_cancel_reason                 = s.tleh_cancel_reason,
        tleh_remarks                       = s.tleh_remarks,
        tleh_creation_date                 = s.tleh_creation_date,
        tleh_created_by                    = s.tleh_created_by,
        tleh_last_modified_date            = s.tleh_last_modified_date,
        tleh_last_modified_by              = s.tleh_last_modified_by,
        tleh_timestamp                     = s.tleh_timestamp,
        tleh_draft_bill_status             = s.tleh_draft_bill_status,
        tleh_resource_type                 = s.tleh_resource_type,
        tleh_refdoc_type                   = s.tleh_refdoc_type,
        tleh_refdoc_no                     = s.tleh_refdoc_no,
        tleh_agency_id                     = s.tleh_agency_id,
        tleh_agency_name                   = s.tleh_agency_name,
        tleh_requester_id                  = s.tleh_requester_id,
        tleh_requester_name                = s.tleh_requester_name,
        tleh_estimated_setlmnt_date        = s.tleh_estimated_setlmnt_date,
        tleh_amendment_no                  = s.tleh_amendment_no,
        tleh_amend_reason                  = s.tleh_amend_reason,
        tleh_amend_reason_desc             = s.tleh_amend_reason_desc,
        tleh_rpt_mob_ref_no                = s.tleh_rpt_mob_ref_no,
        etlactiveind                       = 1,
        etljobname                         = p_etljobname,
        envsourcecd                        = p_envsourcecd,
        datasourcecd                       = p_datasourcecd,
        etlupdatedatetime                  = NOW()
    FROM 	stg.stg_tms_tleh_trip_log_expence_hdr s
    WHERE 	t.tleh_ouinstance 		= s.tleh_ouinstance
    AND 	t.tleh_report_no 		= s.tleh_report_no
	AND		t.tleh_report_creation_date = s.tleh_report_creation_date
    AND 	t.tleh_trip_id 			= s.tleh_trip_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TripLogExpenseHeader
    (
		
        tleh_ouinstance			, tleh_report_no		, tleh_report_creation_date		, tleh_trip_id			,
		tleh_expense_for		, tleh_trip_leg_no		, tleh_resource_id				, tleh_resource_name	,
		tleh_advance_amount		, tleh_expense_amount	, tleh_report_status			, tleh_guid				,
		tleh_workflow_status	, tleh_reject_reason	, tleh_reject_reason_desc		, tleh_cancel_reason	,
		tleh_remarks			, tleh_creation_date	, tleh_created_by				, tleh_last_modified_date,
		tleh_last_modified_by	, tleh_timestamp		, tleh_draft_bill_status		, tleh_resource_type	,
		tleh_refdoc_type		, tleh_refdoc_no		, tleh_agency_id				, tleh_agency_name		,
		tleh_requester_id		, tleh_requester_name	, tleh_estimated_setlmnt_date	, tleh_amendment_no		,
		tleh_amend_reason		, tleh_amend_reason_desc, tleh_rpt_mob_ref_no			,
		etlactiveind			, etljobname			, envsourcecd					, datasourcecd			,
		etlcreatedatetime
    )

    SELECT
		
        s.tleh_ouinstance		, s.tleh_report_no			, s.tleh_report_creation_date	, s.tleh_trip_id			,
		s.tleh_expense_for		, s.tleh_trip_leg_no		, s.tleh_resource_id			, s.tleh_resource_name		, 
		s.tleh_advance_amount	, s.tleh_expense_amount		, s.tleh_report_status			, s.tleh_guid				, 
		s.tleh_workflow_status	, s.tleh_reject_reason		, s.tleh_reject_reason_desc		, s.tleh_cancel_reason		,
		s.tleh_remarks			, s.tleh_creation_date		, s.tleh_created_by				, s.tleh_last_modified_date	,
		s.tleh_last_modified_by	, s.tleh_timestamp			, s.tleh_draft_bill_status		, s.tleh_resource_type		, 
		s.tleh_refdoc_type		, s.tleh_refdoc_no			, s.tleh_agency_id				, s.tleh_agency_name		, 
		s.tleh_requester_id		, s.tleh_requester_name		, s.tleh_estimated_setlmnt_date	, s.tleh_amendment_no		, 
		s.tleh_amend_reason		, s.tleh_amend_reason_desc	, s.tleh_rpt_mob_ref_no			, 
					1			, p_etljobname				, p_envsourcecd					, p_datasourcecd			, 
		NOW()
    FROM	stg.stg_tms_tleh_trip_log_expence_hdr s
    LEFT JOIN dwh.F_TripLogExpenseHeader t
    ON		s.tleh_ouinstance		= t.tleh_ouinstance
    AND		s.tleh_report_no		= t.tleh_report_no
    AND		s.tleh_trip_id			= t.tleh_trip_id
	AND		s.tleh_report_creation_date= t.tleh_report_creation_date
    WHERE	t.tleh_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tleh_trip_log_expence_hdr
    (
        tleh_ouinstance			, tleh_report_no		, tleh_report_creation_date		, tleh_trip_id			, 
		tleh_expense_for		, tleh_trip_leg_no		, tleh_resource_id				, tleh_resource_name	, 
		tleh_advance_amount		, tleh_expense_amount	, tleh_report_status			, tleh_guid				,
		tleh_workflow_status	, tleh_reject_reason	, tleh_reject_reason_desc		, tleh_cancel_reason	, 
		tleh_remarks			, tleh_creation_date	, tleh_created_by				, tleh_last_modified_date,
		tleh_last_modified_by	, tleh_timestamp		, tleh_draft_bill_status		, tleh_resource_type	,
		tleh_refdoc_type		, tleh_refdoc_no		, tleh_agency_id				, tleh_agency_name		, 
		tleh_requester_id		, tleh_requester_name	, tleh_estimated_setlmnt_date	, tleh_amendment_no		, 
		tleh_amend_reason		, tleh_amend_reason_desc, tleh_rpt_mob_ref_no			, etlcreateddatetime
    )
    SELECT
        tleh_ouinstance			, tleh_report_no		, tleh_report_creation_date		, tleh_trip_id			, 
		tleh_expense_for		, tleh_trip_leg_no		, tleh_resource_id				, tleh_resource_name	, 
		tleh_advance_amount		, tleh_expense_amount	, tleh_report_status			, tleh_guid				,
		tleh_workflow_status	, tleh_reject_reason	, tleh_reject_reason_desc		, tleh_cancel_reason	, 
		tleh_remarks			, tleh_creation_date	, tleh_created_by				, tleh_last_modified_date,
		tleh_last_modified_by	, tleh_timestamp		, tleh_draft_bill_status		, tleh_resource_type	,
		tleh_refdoc_type		, tleh_refdoc_no		, tleh_agency_id				, tleh_agency_name		, 
		tleh_requester_id		, tleh_requester_name	, tleh_estimated_setlmnt_date	, tleh_amendment_no		, 
		tleh_amend_reason		, tleh_amend_reason_desc, tleh_rpt_mob_ref_no			, etlcreateddatetime
	FROM stg.stg_tms_tleh_trip_log_expence_hdr;
    END IF;
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_triplogexpenseheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_triplogresourceintransitdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_triplogresourceintransitdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_ittnt_triplog_resource_in_transit_details;

    UPDATE dwh.F_TripLogResourceIntransitDetail t
    SET
    
        in_transit_latitude            = s.in_transit_latitude,
        in_transit_longitude           = s.in_transit_longitude,
        in_transit_date_time           = s.in_transit_date_time,
        in_transit_created_by          = s.in_transit_created_by,
        in_transit_created_Date        = s.in_transit_created_Date,
        in_transit_timestamp           = s.in_transit_timestamp,
        in_transit_event               = s.in_transit_event,
        in_transit_leg_no              = s.in_transit_leg_no,
        in_transit_driverid            = s.in_transit_driverid,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_tms_ittnt_triplog_resource_in_transit_details s
    WHERE t.in_transit_ouinstance = s.in_transit_ouinstance
    AND t.in_transit_line_no = s.in_transit_line_no
    AND t.in_transit_trip_log = s.in_transit_trip_log;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TripLogResourceIntransitDetail
    (
        in_transit_ouinstance, in_transit_line_no, in_transit_trip_log, in_transit_latitude, in_transit_longitude, in_transit_date_time, in_transit_created_by, in_transit_created_Date, in_transit_timestamp, in_transit_event, in_transit_leg_no, in_transit_driverid, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.in_transit_ouinstance, s.in_transit_line_no, s.in_transit_trip_log, s.in_transit_latitude, s.in_transit_longitude, s.in_transit_date_time, s.in_transit_created_by, s.in_transit_created_Date, s.in_transit_timestamp, s.in_transit_event, s.in_transit_leg_no, s.in_transit_driverid, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_ittnt_triplog_resource_in_transit_details s
    LEFT JOIN dwh.F_TripLogResourceIntransitDetail t
    ON s.in_transit_ouinstance = t.in_transit_ouinstance
    AND s.in_transit_line_no = t.in_transit_line_no
    AND s.in_transit_trip_log = t.in_transit_trip_log
    WHERE t.in_transit_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_ittnt_triplog_resource_in_transit_details
    (
        in_transit_ouinstance, in_transit_line_no, in_transit_trip_log, in_transit_latitude, in_transit_longitude, in_transit_geo_info, in_transit_date_time, in_transit_created_by, in_transit_created_Date, in_transit_modified_date, in_transit_modified_by, in_transit_timestamp, in_transit_event, in_transit_leg_no, in_transit_driverid, in_transit_vehicle_speed, in_transit_vehicle_idle_time, in_transit_vehicle_ETA_time, in_transit_odo_reading, in_transit_advance_create_flag, etlcreateddatetime
    )
    SELECT
        in_transit_ouinstance, in_transit_line_no, in_transit_trip_log, in_transit_latitude, in_transit_longitude, in_transit_geo_info, in_transit_date_time, in_transit_created_by, in_transit_created_Date, in_transit_modified_date, in_transit_modified_by, in_transit_timestamp, in_transit_event, in_transit_leg_no, in_transit_driverid, in_transit_vehicle_speed, in_transit_vehicle_idle_time, in_transit_vehicle_ETA_time, in_transit_odo_reading, in_transit_advance_create_flag, etlcreateddatetime
    FROM stg.stg_tms_ittnt_triplog_resource_in_transit_details;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_triplogresourceintransitdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_triplogthudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_triplogthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_tltd_trip_log_thu_details;

        UPDATE dwh.F_TripLogThuDetail t
        SET
        plpth_hdr_key         =   oh.plpth_hdr_key,
        tltd_vendor_key                 = COALESCE(v.vendor_key,-1),
        tltd_thu_line_no                           = s.tltd_thu_line_no,
        tltd_thu_id                                = s.tltd_thu_id,
        tltd_class_of_stores                       = s.tltd_class_of_stores,
        tltd_planned_qty                           = s.tltd_planned_qty,
        tltd_thu_actual_qty                        = s.tltd_thu_actual_qty,
        tltd_damaged_qty                           = s.tltd_damaged_qty,
        tltd_vendor_id                             = s.tltd_vendor_id,
        tltd_vendor_thu_type                       = s.tltd_vendor_thu_type,
        tltd_vendor_thu_id                         = s.tltd_vendor_thu_id,
        tltd_vendor_doc_no                         = s.tltd_vendor_doc_no,
        tltd_vendor_ac_no                          = s.tltd_vendor_ac_no,
        tltd_cha_id                                = s.tltd_cha_id,
        tltd_created_date                          = s.tltd_created_date,
        tltd_created_by                            = s.tltd_created_by,
        tltd_modified_date                         = s.tltd_modified_date,
        tltd_modified_by                           = s.tltd_modified_by,
        tltd_timestamp                             = s.tltd_timestamp,
        tltd_transfer_type                         = s.tltd_transfer_type,
        tltd_remarks                               = s.tltd_remarks,
        tltd_thu_weight                            = s.tltd_thu_weight,
        tltd_rsncode_damage                        = s.tltd_rsncode_damage,
        tltd_thu_weight_uom                        = s.tltd_thu_weight_uom,
        tltd_reasoncode_remarks                    = s.tltd_reasoncode_remarks,
        tltd_damaged_reasoncode                    = s.tltd_damaged_reasoncode,
        tltd_returned_reasoncode                   = s.tltd_returned_reasoncode,
        tltd_actual_planned_mismatch_reason        = s.tltd_actual_planned_mismatch_reason,
        tltd_actual_pallet_space                   = s.tltd_actual_pallet_space,
        tltd_returned_qty                          = s.tltd_returned_qty,
        tltd_planned_palletspace                   = s.tltd_planned_palletspace,
        tltd_actual_palletspace                    = s.tltd_actual_palletspace,
        tltd_volume                                = s.tltd_volume,
        tltd_volume_uom                            = s.tltd_volume_uom,
        etlactiveind                               = 1,
        etljobname                                 = p_etljobname,
        envsourcecd                                = p_envsourcecd,
        datasourcecd                               = p_datasourcecd,
        etlupdatedatetime                          = NOW()
        FROM stg.stg_tms_tltd_trip_log_thu_details s

  INNER JOIN dwh.f_tripplanningheader oh  
ON           s.tltd_ouinstance  = oh.plpth_ouinstance
      AND s.tltd_trip_plan_id   = oh.plpth_trip_plan_id
	  
      LEFT JOIN dwh.d_vendor v       
        ON  s.tltd_vendor_id           = v.vendor_id 
        AND s.tltd_ouinstance           = v.vendor_ou

        WHERE   t.tltd_trip_plan_id =  s.tltd_trip_plan_id
          AND t.tltd_thu_line_no =  s.tltd_thu_line_no  
          AND t.tltd_trip_sequence =  s.tltd_trip_sequence 
          AND t.tltd_dispatch_doc_no =  s.tltd_dispatch_doc_no
          AND t.tltd_ouinstance =  s.tltd_ouinstance  
          AND t.tltd_trip_plan_line_id =  s.tltd_trip_plan_line_id;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_TripLogThuDetail
        (
           plpth_hdr_key , tltd_vendor_key , tltd_ouinstance, tltd_trip_plan_id, tltd_trip_plan_line_id, tltd_dispatch_doc_no, tltd_thu_line_no, tltd_thu_id, tltd_class_of_stores, tltd_planned_qty, tltd_thu_actual_qty, tltd_damaged_qty, tltd_vendor_id, tltd_vendor_thu_type, tltd_vendor_thu_id, tltd_vendor_doc_no, tltd_vendor_ac_no, tltd_cha_id, tltd_created_date, tltd_created_by, tltd_modified_date, tltd_modified_by, tltd_timestamp, tltd_transfer_type, tltd_remarks, tltd_trip_sequence, tltd_thu_weight, tltd_rsncode_damage, tltd_thu_weight_uom, tltd_reasoncode_remarks, tltd_damaged_reasoncode, tltd_returned_reasoncode, tltd_actual_planned_mismatch_reason, tltd_actual_pallet_space, tltd_returned_qty, tltd_planned_palletspace, tltd_actual_palletspace, tltd_volume, tltd_volume_uom, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            oh.plpth_hdr_key,COALESCE(v.vendor_key,-1), s.tltd_ouinstance, s.tltd_trip_plan_id, s.tltd_trip_plan_line_id, s.tltd_dispatch_doc_no, s.tltd_thu_line_no, s.tltd_thu_id, s.tltd_class_of_stores, s.tltd_planned_qty, s.tltd_thu_actual_qty, s.tltd_damaged_qty, s.tltd_vendor_id, s.tltd_vendor_thu_type, s.tltd_vendor_thu_id, s.tltd_vendor_doc_no, s.tltd_vendor_ac_no, s.tltd_cha_id, s.tltd_created_date, s.tltd_created_by, s.tltd_modified_date, s.tltd_modified_by, s.tltd_timestamp, s.tltd_transfer_type, s.tltd_remarks, s.tltd_trip_sequence, s.tltd_thu_weight, s.tltd_rsncode_damage, s.tltd_thu_weight_uom, s.tltd_reasoncode_remarks, s.tltd_damaged_reasoncode, s.tltd_returned_reasoncode, s.tltd_actual_planned_mismatch_reason, s.tltd_actual_pallet_space, s.tltd_returned_qty, s.tltd_planned_palletspace, s.tltd_actual_palletspace, s.tltd_volume, s.tltd_volume_uom, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_tltd_trip_log_thu_details s

       INNER JOIN dwh.f_tripplanningheader oh  
ON           s.tltd_ouinstance  = oh.plpth_ouinstance
      AND s.tltd_trip_plan_id   = oh.plpth_trip_plan_id

      LEFT JOIN dwh.d_vendor v       
        ON  s.tltd_vendor_id           = v.vendor_id 
        AND s.tltd_ouinstance           = v.vendor_ou

        LEFT JOIN dwh.F_TripLogThuDetail t
        ON  s.tltd_trip_plan_id =  t.tltd_trip_plan_id
          AND s.tltd_thu_line_no =  t.tltd_thu_line_no 
          AND s.tltd_trip_sequence =  t.tltd_trip_sequence  
          AND s.tltd_dispatch_doc_no =  t.tltd_dispatch_doc_no
          AND s.tltd_ouinstance =  t.tltd_ouinstance
          AND s.tltd_trip_plan_line_id =  t.tltd_trip_plan_line_id	
        WHERE t.tltd_ouinstance IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_tltd_trip_log_thu_details
        (
            tltd_ouinstance, tltd_trip_plan_id, tltd_trip_plan_line_id, tltd_dispatch_doc_no, tltd_thu_line_no, tltd_thu_id, tltd_class_of_stores, tltd_planned_qty, tltd_thu_actual_qty, tltd_damaged_qty, tltd_vendor_id, tltd_vendor_thu_type, tltd_vendor_thu_id, tltd_vendor_doc_no, tltd_vendor_ac_no, tltd_cha_id, tltd_created_date, tltd_created_by, tltd_modified_date, tltd_modified_by, tltd_timestamp, tltd_transfer_type, tltd_remarks, tltd_trip_sequence, tltd_thu_weight, tltd_rsncode_damage, tltd_thu_weight_uom, tltd_reasoncode_remarks, tltd_damaged_reasoncode, tltd_returned_reasoncode, tltd_actual_planned_mismatch_reason, tltd_actual_pallet_space, tltd_returned_qty, tltd_planned_palletspace, tltd_actual_palletspace, tltd_volume, tltd_volume_uom, etlcreateddatetime
        )
        SELECT
            tltd_ouinstance, tltd_trip_plan_id, tltd_trip_plan_line_id, tltd_dispatch_doc_no, tltd_thu_line_no, tltd_thu_id, tltd_class_of_stores, tltd_planned_qty, tltd_thu_actual_qty, tltd_damaged_qty, tltd_vendor_id, tltd_vendor_thu_type, tltd_vendor_thu_id, tltd_vendor_doc_no, tltd_vendor_ac_no, tltd_cha_id, tltd_created_date, tltd_created_by, tltd_modified_date, tltd_modified_by, tltd_timestamp, tltd_transfer_type, tltd_remarks, tltd_trip_sequence, tltd_thu_weight, tltd_rsncode_damage, tltd_thu_weight_uom, tltd_reasoncode_remarks, tltd_damaged_reasoncode, tltd_returned_reasoncode, tltd_actual_planned_mismatch_reason, tltd_actual_pallet_space, tltd_returned_qty, tltd_planned_palletspace, tltd_actual_palletspace, tltd_volume, tltd_volume_uom, etlcreateddatetime
        FROM stg.stg_tms_tltd_trip_log_thu_details;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_triplogthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripododetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripododetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_pltpo_trip_odo_details;

        UPDATE dwh.F_TripOdoDetail t
        SET

        plpth_hdr_key                   = oh.plpth_hdr_key,
        plpto_plan_run_no               = s.plpto_plan_run_no,
        plpto_trip_plan_id              = s.plpto_trip_plan_id,
        plpto_trip_plan_line_no         = s.plpto_trip_plan_line_no,
        plpto_bk_req_id                 = s.plpto_bk_req_id,
        plpto_bk_leg_no                 = s.plpto_bk_leg_no,
        plpto_odo_state                 = s.plpto_odo_state,
        plpto_odo_reading               = s.plpto_odo_reading,
        plpto_odo_uom                   = s.plpto_odo_uom,
        plpto_created_by                = s.plpto_created_by,
        plpto_created_date              = s.plpto_created_date,
        plpto_last_modified_by          = s.plpto_last_modified_by,
        plpto_last_modified_date        = s.plpto_last_modified_date,
        plpto_timestamp                 = s.plpto_timestamp,
        plpto_trip_plan_seq             = s.plpto_trip_plan_seq,
        plpto_flag                      = s.plpto_flag,
            etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
        FROM stg.stg_tms_pltpo_trip_odo_details s


         INNER JOIN dwh.f_tripplanningheader oh  
ON           s.plpto_ouinstance  = oh.plpth_ouinstance
      AND s.plpto_trip_plan_id   = oh.plpth_trip_plan_id
      
        WHERE t.plpto_ouinstance = s.plpto_ouinstance
        AND t.plpto_guid = s.plpto_guid
        AND  t.plpth_hdr_key  = oh.plpth_hdr_key;

        GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_TripOdoDetail
        (
            plpth_hdr_key ,plpto_ouinstance, plpto_guid, plpto_plan_run_no, plpto_trip_plan_id, plpto_trip_plan_line_no, plpto_bk_req_id, plpto_bk_leg_no, plpto_odo_state, plpto_odo_reading, plpto_odo_uom, plpto_created_by, plpto_created_date, plpto_last_modified_by, plpto_last_modified_date, plpto_timestamp, plpto_trip_plan_seq, plpto_flag, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
           oh.plpth_hdr_key, s.plpto_ouinstance, s.plpto_guid, s.plpto_plan_run_no, s.plpto_trip_plan_id, s.plpto_trip_plan_line_no, s.plpto_bk_req_id, s.plpto_bk_leg_no, s.plpto_odo_state, s.plpto_odo_reading, s.plpto_odo_uom, s.plpto_created_by, s.plpto_created_date, s.plpto_last_modified_by, s.plpto_last_modified_date, s.plpto_timestamp, s.plpto_trip_plan_seq, s.plpto_flag, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_pltpo_trip_odo_details s


              INNER JOIN dwh.f_tripplanningheader oh  
ON           s.plpto_ouinstance  = oh.plpth_ouinstance
      AND s.plpto_trip_plan_id   = oh.plpth_trip_plan_id
      
        LEFT JOIN dwh.F_TripOdoDetail t
        ON s.plpto_ouinstance = t.plpto_ouinstance
        AND s.plpto_guid = t.plpto_guid
        AND  t.plpth_hdr_key  = oh.plpth_hdr_key

        WHERE t.plpto_ouinstance IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_pltpo_trip_odo_details
        (
            plpto_ouinstance, plpto_guid, plpto_plan_run_no, plpto_trip_plan_id, plpto_trip_plan_line_no, plpto_bk_req_id, plpto_bk_leg_no, plpto_odo_state, plpto_odo_reading, plpto_odo_uom, plpto_created_by, plpto_created_date, plpto_last_modified_by, plpto_last_modified_date, plpto_timestamp, plpto_trip_plan_seq, plpto_flag, etlcreateddatetime
        )
        SELECT
            plpto_ouinstance, plpto_guid, plpto_plan_run_no, plpto_trip_plan_id, plpto_trip_plan_line_no, plpto_bk_req_id, plpto_bk_leg_no, plpto_odo_state, plpto_odo_reading, plpto_odo_uom, plpto_created_by, plpto_created_date, plpto_last_modified_by, plpto_last_modified_date, plpto_timestamp, plpto_trip_plan_seq, plpto_flag, etlcreateddatetime
        FROM stg.stg_tms_pltpo_trip_odo_details;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripododetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripplanningdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripplanningdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc VARCHAR(10000);
    p_errorline integer;
	p_depsource VARCHAR(100);
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_pltpd_trip_planning_details;

    UPDATE dwh.f_tripPlanningDetail t
    SET 
	    plpth_hdr_key                        = fh.plpth_hdr_key,
        plptd_trip_plan_line_no              = s.plptd_trip_plan_line_no,
        plptd_trip_plan_cutoftime            = s.plptd_trip_plan_cutoftime,
        plptd_bk_leg_no                      = s.plptd_bk_leg_no,
        plptd_leg_behaviour                  = s.plptd_leg_behaviour,
        plptd_thu_covered_qty                = s.plptd_thu_covered_qty,
        plptd_thu_line_no                    = s.plptd_thu_line_no,
        plptd_execution_plan                 = s.plptd_execution_plan,
        plptd_created_by                     = s.plptd_created_by,
        plptd_created_date                   = s.plptd_created_date,
        plptd_last_modified_by               = s.plptd_last_modified_by,
        plptd_last_modified_date             = s.plptd_last_modified_date,
        plptd_line_status                    = s.plptd_line_status,
        plptd_billing_status                 = s.plptd_billing_status,
        plptd_event_id                       = s.plptd_event_id,
        plptd_Distinct_Leg_id                = s.plptd_Distinct_Leg_id,
        plptd_plan_source                    = s.plptd_plan_source,
        plptd_odo_start                      = s.plptd_odo_start,
        plptd_odo_end                        = s.plptd_odo_end,
        plptd_odo_uom                        = s.plptd_odo_uom,
        plpth_start_time                     = s.plpth_start_time,
        plpth_end_time                       = s.plpth_end_time,
        pltpd_manage_flag                    = s.pltpd_manage_flag,
        pltpd_rest_hours                     = s.pltpd_rest_hours,
        plptd_trip_plan_unique_id            = s.plptd_trip_plan_unique_id,
        pltpd_from                           = s.pltpd_from,
        pltpd_from_type                      = s.pltpd_from_type,
        pltpd_to                             = s.pltpd_to,
        pltpd_to_type                        = s.pltpd_to_type,
        plptd_distance                       = s.plptd_distance,
        plptd_supplier_billing_status        = s.plptd_supplier_billing_status,
        plptd_rest_start                     = s.plptd_rest_start,
        plptd_transfer_doc_no                = s.plptd_transfer_doc_no,
        pltpd_pl_bk_qty                      = s.pltpd_pl_bk_qty,
        pltpd_pl_bk_wei                      = s.pltpd_pl_bk_wei,
        pltpd_pl_bk_wei_uom                  = s.pltpd_pl_bk_wei_uom,
        pltpd_act_bk_qty                     = s.pltpd_act_bk_qty,
        pltpd_act_bk_wei                     = s.pltpd_act_bk_wei,
        pltpd_act_bk_wei_uom                 = s.pltpd_act_bk_wei_uom,
        pltpd_cuml_pl_wei                    = s.pltpd_cuml_pl_wei,
        pltpd_cuml_pl_wei_uom                = s.pltpd_cuml_pl_wei_uom,
        pltpd_cuml_act_wei                   = s.pltpd_cuml_act_wei,
        pltpd_cuml_act_wei_uom               = s.pltpd_cuml_act_wei_uom,
        pltpd_bk_wise_seq                    = s.pltpd_bk_wise_seq,
        pltpd_backhaul_flag                  = s.pltpd_backhaul_flag,
        pltpd_timestamp                      = s.pltpd_timestamp,
        plptd_backtohub_type                 = s.plptd_backtohub_type,
        pltpd_loading_time                   = s.pltpd_loading_time,
        plptd_transit_time                   = s.plptd_transit_time,
        etlactiveind                         = 1,
        etljobname                           = p_etljobname,
        envsourcecd                          = p_envsourcecd,
        datasourcecd                         = p_datasourcecd,
        etlupdatedatetime                    = NOW()
    FROM stg.stg_tms_pltpd_trip_planning_details s
	INNER JOIN dwh.f_tripplanningheader fh
	ON   s.plptd_ouinstance   = fh.plpth_ouinstance
	AND  s.plptd_trip_plan_id = fh.plpth_trip_plan_id
    WHERE t.plptd_ouinstance = s.plptd_ouinstance
    AND t.plptd_plan_run_no = s.plptd_plan_run_no
    AND t.plptd_trip_plan_id = s.plptd_trip_plan_id
    AND t.plptd_trip_plan_seq = s.plptd_trip_plan_seq
    AND t.plptd_bk_req_id = s.plptd_bk_req_id
	AND t.plptd_trip_plan_unique_id = s.plptd_trip_plan_unique_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_tripPlanningDetail
    (
        plpth_hdr_key,plptd_ouinstance, plptd_plan_run_no, plptd_trip_plan_id, plptd_trip_plan_line_no, plptd_trip_plan_seq, plptd_trip_plan_cutoftime, plptd_bk_req_id, plptd_bk_leg_no, plptd_leg_behaviour, plptd_thu_covered_qty, plptd_thu_line_no, plptd_execution_plan, plptd_created_by, plptd_created_date, plptd_last_modified_by, plptd_last_modified_date, plptd_line_status, plptd_billing_status, plptd_event_id, plptd_Distinct_Leg_id, plptd_plan_source, plptd_odo_start, plptd_odo_end, plptd_odo_uom, plpth_start_time, plpth_end_time, pltpd_manage_flag, pltpd_rest_hours, plptd_trip_plan_unique_id, pltpd_from, pltpd_from_type, pltpd_to, pltpd_to_type, plptd_distance, plptd_supplier_billing_status, plptd_rest_start, plptd_transfer_doc_no, pltpd_pl_bk_qty, pltpd_pl_bk_wei, pltpd_pl_bk_wei_uom, pltpd_act_bk_qty, pltpd_act_bk_wei, pltpd_act_bk_wei_uom, pltpd_cuml_pl_wei, pltpd_cuml_pl_wei_uom, pltpd_cuml_act_wei, pltpd_cuml_act_wei_uom, pltpd_bk_wise_seq, pltpd_backhaul_flag, pltpd_timestamp, plptd_backtohub_type, pltpd_loading_time, plptd_transit_time, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.plpth_hdr_key,s.plptd_ouinstance, s.plptd_plan_run_no, s.plptd_trip_plan_id, s.plptd_trip_plan_line_no, s.plptd_trip_plan_seq, s.plptd_trip_plan_cutoftime, s.plptd_bk_req_id, s.plptd_bk_leg_no, s.plptd_leg_behaviour, s.plptd_thu_covered_qty, s.plptd_thu_line_no, s.plptd_execution_plan, s.plptd_created_by, s.plptd_created_date, s.plptd_last_modified_by, s.plptd_last_modified_date, s.plptd_line_status, s.plptd_billing_status, s.plptd_event_id, s.plptd_Distinct_Leg_id, s.plptd_plan_source, s.plptd_odo_start, s.plptd_odo_end, s.plptd_odo_uom, s.plpth_start_time, s.plpth_end_time, s.pltpd_manage_flag, s.pltpd_rest_hours, s.plptd_trip_plan_unique_id, s.pltpd_from, s.pltpd_from_type, s.pltpd_to, s.pltpd_to_type, s.plptd_distance, s.plptd_supplier_billing_status, s.plptd_rest_start, s.plptd_transfer_doc_no, s.pltpd_pl_bk_qty, s.pltpd_pl_bk_wei, s.pltpd_pl_bk_wei_uom, s.pltpd_act_bk_qty, s.pltpd_act_bk_wei, s.pltpd_act_bk_wei_uom, s.pltpd_cuml_pl_wei, s.pltpd_cuml_pl_wei_uom, s.pltpd_cuml_act_wei, s.pltpd_cuml_act_wei_uom, s.pltpd_bk_wise_seq, s.pltpd_backhaul_flag, s.pltpd_timestamp, s.plptd_backtohub_type, s.pltpd_loading_time, s.plptd_transit_time, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_pltpd_trip_planning_details s
	INNER JOIN dwh.f_tripplanningheader fh
	ON   s.plptd_ouinstance   = fh.plpth_ouinstance
	AND  s.plptd_trip_plan_id = fh.plpth_trip_plan_id
    LEFT JOIN dwh.f_tripPlanningDetail t
    ON s.plptd_ouinstance = t.plptd_ouinstance
    AND s.plptd_plan_run_no = t.plptd_plan_run_no
    AND s.plptd_trip_plan_id = t.plptd_trip_plan_id
    AND s.plptd_trip_plan_seq = t.plptd_trip_plan_seq
    AND s.plptd_bk_req_id = t.plptd_bk_req_id
	AND t.plptd_trip_plan_unique_id = s.plptd_trip_plan_unique_id
	WHERE t.plptd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_pltpd_trip_planning_details
    (
        plptd_ouinstance, plptd_plan_run_no, plptd_trip_plan_id, plptd_trip_plan_line_no, plptd_trip_plan_seq, plptd_trip_plan_cutoftime, plptd_bk_req_id, plptd_bk_leg_no, plptd_leg_behaviour, plptd_thu_covered_qty, plptd_thu_line_no, plptd_execution_plan, plptd_created_by, plptd_created_date, plptd_last_modified_by, plptd_last_modified_date, plptd_line_status, plptd_billing_status, plptd_event_id, plptd_Distinct_Leg_id, plptd_plan_source, plptd_odo_start, plptd_odo_end, plptd_odo_uom, plpth_start_time, plpth_end_time, pltpd_manage_flag, pltpd_rest_hours, plptd_trip_plan_unique_id, pltpd_from, pltpd_from_type, pltpd_to, pltpd_to_type, plptd_distance, plptd_supplier_billing_status, plptd_rest_start, plptd_transfer_doc_no, pltpd_pl_bk_qty, pltpd_pl_bk_wei, pltpd_pl_bk_wei_uom, pltpd_act_bk_qty, pltpd_act_bk_wei, pltpd_act_bk_wei_uom, pltpd_cuml_pl_wei, pltpd_cuml_pl_wei_uom, pltpd_cuml_act_wei, pltpd_cuml_act_wei_uom, pltpd_bk_wise_seq, pltpd_backhaul_flag, pltpd_timestamp, plptd_backtohub_type, pltpd_loading_time, plptd_transit_time, etlcreateddatetime
    )
    SELECT
        plptd_ouinstance, plptd_plan_run_no, plptd_trip_plan_id, plptd_trip_plan_line_no, plptd_trip_plan_seq, plptd_trip_plan_cutoftime, plptd_bk_req_id, plptd_bk_leg_no, plptd_leg_behaviour, plptd_thu_covered_qty, plptd_thu_line_no, plptd_execution_plan, plptd_created_by, plptd_created_date, plptd_last_modified_by, plptd_last_modified_date, plptd_line_status, plptd_billing_status, plptd_event_id, plptd_Distinct_Leg_id, plptd_plan_source, plptd_odo_start, plptd_odo_end, plptd_odo_uom, plpth_start_time, plpth_end_time, pltpd_manage_flag, pltpd_rest_hours, plptd_trip_plan_unique_id, pltpd_from, pltpd_from_type, pltpd_to, pltpd_to_type, plptd_distance, plptd_supplier_billing_status, plptd_rest_start, plptd_transfer_doc_no, pltpd_pl_bk_qty, pltpd_pl_bk_wei, pltpd_pl_bk_wei_uom, pltpd_act_bk_qty, pltpd_act_bk_wei, pltpd_act_bk_wei_uom, pltpd_cuml_pl_wei, pltpd_cuml_pl_wei_uom, pltpd_cuml_act_wei, pltpd_cuml_act_wei_uom, pltpd_bk_wise_seq, pltpd_backhaul_flag, pltpd_timestamp, plptd_backtohub_type, pltpd_loading_time, plptd_transit_time, etlcreateddatetime
    FROM stg.stg_tms_pltpd_trip_planning_details;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripplanningdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripplanningheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripplanningheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_pltph_trip_plan_hdr;

    UPDATE dwh.f_tripPlanningHeader t
    SET
		plpth_trip_plan_datekey						   = COALESCE(d.datekey,-1),
		plpth_vehicle_key							   = COALESCE (v.veh_key,-1),
        plpth_plan_run_no                              = s.plpth_plan_run_no,
        plpth_plan_run_status                          = s.plpth_plan_run_status,
        plpth_trip_plan_planning_profile_id            = s.plpth_trip_plan_planning_profile_id,
        plpth_trip_plan_status                         = s.plpth_trip_plan_status,
        plpth_trip_plan_date                           = s.plpth_trip_plan_date,
        plpth_trip_plan_end_date                       = s.plpth_trip_plan_end_date,
        plpth_trip_plan_from                           = s.plpth_trip_plan_from,
        plpth_trip_plan_to                             = s.plpth_trip_plan_to,
        plpth_vehicle_profile                          = s.plpth_vehicle_profile,
        plpth_vehicle_type                             = s.plpth_vehicle_type,
        plpth_vehicle_id                               = s.plpth_vehicle_id,
        plpth_vehicle_resource                         = s.plpth_vehicle_resource,
        plpth_vehicle_cov_weight                       = s.plpth_vehicle_cov_weight,
        plpth_vehicle_bal_weight                       = s.plpth_vehicle_bal_weight,
        plpth_vehicle_bal_weight_uom                   = s.plpth_vehicle_bal_weight_uom,
        plpth_vehicle_bal_volume                       = s.plpth_vehicle_bal_volume,
        plpth_vehicle_bal_volume_uom                   = s.plpth_vehicle_bal_volume_uom,
        plpth_equipment_profile                        = s.plpth_equipment_profile,
        plpth_equipment_type                           = s.plpth_equipment_type,
        plpth_equipment_id                             = s.plpth_equipment_id,
        plpth_equipment_resource                       = s.plpth_equipment_resource,
        plpth_equip_cov_weight                         = s.plpth_equip_cov_weight,
        plpth_equip_bal_weight                         = s.plpth_equip_bal_weight,
        plpth_equip_bal_weight_uom                     = s.plpth_equip_bal_weight_uom,
        plpth_equip_bal_volume                         = s.plpth_equip_bal_volume,
        plpth_equip_bal_volume_uom                     = s.plpth_equip_bal_volume_uom,
        plpth_driver_profile                           = s.plpth_driver_profile,
        plpth_driver_grade                             = s.plpth_driver_grade,
        plpth_driver_id                                = s.plpth_driver_id,
        plpth_driver_resource                          = s.plpth_driver_resource,
        plpth_handler_profile                          = s.plpth_handler_profile,
        plpth_handler_grade                            = s.plpth_handler_grade,
        plpth_handler_id                               = s.plpth_handler_id,
        plpth_handler_resource                         = s.plpth_handler_resource,
        plpth_agent_profile                            = s.plpth_agent_profile,
        plpth_agent_service                            = s.plpth_agent_service,
        plpth_agent_id                                 = s.plpth_agent_id,
        plpth_agent_resource                           = s.plpth_agent_resource,
        plpth_rec_trip_id                              = s.plpth_rec_trip_id,
        plpth_schedule_id                              = s.plpth_schedule_id,
        plpth_created_by                               = s.plpth_created_by,
        plpth_created_date                             = s.plpth_created_date,
        plpth_last_modified_by                         = s.plpth_last_modified_by,
        plpth_last_modified_date                       = s.plpth_last_modified_date,
        plpth_timestamp                                = s.plpth_timestamp,
        plpth_location                                 = s.plpth_location,
        plpth_actual_end_time                          = s.plpth_actual_end_time,
        Agent_status                                   = s.Agent_status,
        plpth_plan_run_type                            = s.plpth_plan_run_type,
        plpth_vehicle_cov_volume                       = s.plpth_vehicle_cov_volume,
        plpth_driver2_profile                          = s.plpth_driver2_profile,
        plpth_driver2_grade                            = s.plpth_driver2_grade,
        plpth_driver2_id                               = s.plpth_driver2_id,
        plpth_driver2_resource                         = s.plpth_driver2_resource,
        plpth_handler2_profile                         = s.plpth_handler2_profile,
        plpth_handler2_grade                           = s.plpth_handler2_grade,
        plpth_handler2_id                              = s.plpth_handler2_id,
        plpth_handler2_resource                        = s.plpth_handler2_resource,
        plpth_plan_mode                                = s.plpth_plan_mode,
        plpth_amend_status                             = s.plpth_amend_status,
        plpth_trip_plan_rsncd                          = s.plpth_trip_plan_rsncd,
        plpth_trip_plan_remarks                        = s.plpth_trip_plan_remarks,
        plpth_vehicle_weight                           = s.plpth_vehicle_weight,
        plpth_vehicle_volume                           = s.plpth_vehicle_volume,
        pltph_booking_request_weight                   = s.pltph_booking_request_weight,
        pltph_booking_request_volume                   = s.pltph_booking_request_volume,
        pltph_expected_revenue                         = s.pltph_expected_revenue,
        pltph_expected_cost                            = s.pltph_expected_cost,
        pltph_covered_qty                              = s.pltph_covered_qty,
        pltph_booking_request                          = s.pltph_booking_request,
        pltph_equipment_status_2                       = s.pltph_equipment_status_2,
        pltph_trip_thu_utilization                     = s.pltph_trip_thu_utilization,
        pltph_execution_plan                           = s.pltph_execution_plan,
        pltph_trip_pallet_space                        = s.pltph_trip_pallet_space,
        plpth_trip_plan_from_type                      = s.plpth_trip_plan_from_type,
        plpth_trip_plan_to_type                        = s.plpth_trip_plan_to_type,
        pltph_confirmation_date                        = s.pltph_confirmation_date,
        pltph_release_date                             = s.pltph_release_date,
        pltph_unique_guid                              = s.pltph_unique_guid,
        pltph_error_id                                 = s.pltph_error_id,
        pltph_error_desc                               = s.pltph_error_desc,
        pltph_desktop_mobile_flag                      = s.pltph_desktop_mobile_flag,
        pltph_trip_sht_cls_date                        = s.pltph_trip_sht_cls_date,
        plpth_prime_mover_chkflg                       = s.plpth_prime_mover_chkflg,
        pltph_recurring_flag                           = s.pltph_recurring_flag,
        pltph_trip_calculated_chargeable_weight        = s.pltph_trip_calculated_chargeable_weight,
        plpth_plan_accrual_jv_date                     = s.plpth_plan_accrual_jv_date,
        etlactiveind                                   = 1,
        etljobname                                     = p_etljobname,
        envsourcecd                                    = p_envsourcecd,
        datasourcecd                                   = p_datasourcecd,
        etlupdatedatetime                              = NOW()
    FROM stg.stg_tms_pltph_trip_plan_hdr s
	left join dwh.d_vehicle v
	on s.plpth_vehicle_id = v.veh_id
	and s.plpth_ouinstance = v.veh_ou
	LEFT JOIN dwh.d_date d			
	ON s.plpth_trip_plan_date::date = d.dateactual
    WHERE t.plpth_ouinstance = s.plpth_ouinstance
    AND t.plpth_trip_plan_id = s.plpth_trip_plan_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_tripPlanningHeader
    (
        plpth_trip_plan_datekey,plpth_vehicle_key,
		plpth_ouinstance, plpth_plan_run_no, plpth_plan_run_status, plpth_trip_plan_id, plpth_trip_plan_planning_profile_id, plpth_trip_plan_status, plpth_trip_plan_date, plpth_trip_plan_end_date, plpth_trip_plan_from, plpth_trip_plan_to, plpth_vehicle_profile, plpth_vehicle_type, plpth_vehicle_id, plpth_vehicle_resource, plpth_vehicle_cov_weight, plpth_vehicle_bal_weight, plpth_vehicle_bal_weight_uom, plpth_vehicle_bal_volume, plpth_vehicle_bal_volume_uom, plpth_equipment_profile, plpth_equipment_type, plpth_equipment_id, plpth_equipment_resource, plpth_equip_cov_weight, plpth_equip_bal_weight, plpth_equip_bal_weight_uom, plpth_equip_bal_volume, plpth_equip_bal_volume_uom, plpth_driver_profile, plpth_driver_grade, plpth_driver_id, plpth_driver_resource, plpth_handler_profile, plpth_handler_grade, plpth_handler_id, plpth_handler_resource, plpth_agent_profile, plpth_agent_service, plpth_agent_id, plpth_agent_resource, plpth_rec_trip_id, plpth_schedule_id, plpth_created_by, plpth_created_date, plpth_last_modified_by, plpth_last_modified_date, plpth_timestamp, plpth_location, plpth_actual_end_time, Agent_status, plpth_plan_run_type, plpth_vehicle_cov_volume, plpth_driver2_profile, plpth_driver2_grade, plpth_driver2_id, plpth_driver2_resource, plpth_handler2_profile, plpth_handler2_grade, plpth_handler2_id, plpth_handler2_resource, plpth_plan_mode, plpth_amend_status, plpth_trip_plan_rsncd, plpth_trip_plan_remarks, plpth_vehicle_weight, plpth_vehicle_volume, pltph_booking_request_weight, pltph_booking_request_volume, pltph_expected_revenue, pltph_expected_cost, pltph_covered_qty, pltph_booking_request, pltph_equipment_status_2, pltph_trip_thu_utilization, pltph_execution_plan, pltph_trip_pallet_space, plpth_trip_plan_from_type, plpth_trip_plan_to_type, pltph_confirmation_date, pltph_release_date, pltph_unique_guid, pltph_error_id, pltph_error_desc, pltph_desktop_mobile_flag, pltph_trip_sht_cls_date, plpth_prime_mover_chkflg, pltph_recurring_flag, pltph_trip_calculated_chargeable_weight, plpth_plan_accrual_jv_date, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
		COALESCE(d.datekey,-1),COALESCE (v.veh_key,-1),
        s.plpth_ouinstance, s.plpth_plan_run_no, s.plpth_plan_run_status, s.plpth_trip_plan_id, s.plpth_trip_plan_planning_profile_id, s.plpth_trip_plan_status, s.plpth_trip_plan_date, s.plpth_trip_plan_end_date, s.plpth_trip_plan_from, s.plpth_trip_plan_to, s.plpth_vehicle_profile, s.plpth_vehicle_type, s.plpth_vehicle_id, s.plpth_vehicle_resource, s.plpth_vehicle_cov_weight, s.plpth_vehicle_bal_weight, s.plpth_vehicle_bal_weight_uom, s.plpth_vehicle_bal_volume, s.plpth_vehicle_bal_volume_uom, s.plpth_equipment_profile, s.plpth_equipment_type, s.plpth_equipment_id, s.plpth_equipment_resource, s.plpth_equip_cov_weight, s.plpth_equip_bal_weight, s.plpth_equip_bal_weight_uom, s.plpth_equip_bal_volume, s.plpth_equip_bal_volume_uom, s.plpth_driver_profile, s.plpth_driver_grade, s.plpth_driver_id, s.plpth_driver_resource, s.plpth_handler_profile, s.plpth_handler_grade, s.plpth_handler_id, s.plpth_handler_resource, s.plpth_agent_profile, s.plpth_agent_service, s.plpth_agent_id, s.plpth_agent_resource, s.plpth_rec_trip_id, s.plpth_schedule_id, s.plpth_created_by, s.plpth_created_date, s.plpth_last_modified_by, s.plpth_last_modified_date, s.plpth_timestamp, s.plpth_location, s.plpth_actual_end_time, s.Agent_status, s.plpth_plan_run_type, s.plpth_vehicle_cov_volume, s.plpth_driver2_profile, s.plpth_driver2_grade, s.plpth_driver2_id, s.plpth_driver2_resource, s.plpth_handler2_profile, s.plpth_handler2_grade, s.plpth_handler2_id, s.plpth_handler2_resource, s.plpth_plan_mode, s.plpth_amend_status, s.plpth_trip_plan_rsncd, s.plpth_trip_plan_remarks, s.plpth_vehicle_weight, s.plpth_vehicle_volume, s.pltph_booking_request_weight, s.pltph_booking_request_volume, s.pltph_expected_revenue, s.pltph_expected_cost, s.pltph_covered_qty, s.pltph_booking_request, s.pltph_equipment_status_2, s.pltph_trip_thu_utilization, s.pltph_execution_plan, s.pltph_trip_pallet_space, s.plpth_trip_plan_from_type, s.plpth_trip_plan_to_type, s.pltph_confirmation_date, s.pltph_release_date, s.pltph_unique_guid, s.pltph_error_id, s.pltph_error_desc, s.pltph_desktop_mobile_flag, s.pltph_trip_sht_cls_date, s.plpth_prime_mover_chkflg, s.pltph_recurring_flag, s.pltph_trip_calculated_chargeable_weight, s.plpth_plan_accrual_jv_date, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_pltph_trip_plan_hdr s
	left join dwh.d_vehicle v
	on s.plpth_vehicle_id = v.veh_id
	and s.plpth_ouinstance = v.veh_ou
	LEFT JOIN dwh.d_date d 			
	ON s.plpth_trip_plan_date::date = d.dateactual
    LEFT JOIN dwh.f_tripPlanningHeader t
    ON s.plpth_ouinstance = t.plpth_ouinstance
    AND s.plpth_trip_plan_id = t.plpth_trip_plan_id
    WHERE t.plpth_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_pltph_trip_plan_hdr
    (
        plpth_ouinstance, plpth_plan_run_no, plpth_plan_run_status, plpth_trip_plan_id, plpth_trip_plan_planning_profile_id, plpth_trip_plan_status, plpth_trip_plan_date, plpth_trip_plan_end_date, plpth_trip_plan_from, plpth_trip_plan_to, plpth_vehicle_profile, plpth_vehicle_type, plpth_vehicle_id, plpth_vehicle_resource, plpth_vehicle_cov_weight, plpth_vehicle_bal_weight, plpth_vehicle_bal_weight_uom, plpth_vehicle_bal_volume, plpth_vehicle_bal_volume_uom, plpth_equipment_profile, plpth_equipment_type, plpth_equipment_id, plpth_equipment_resource, plpth_equip_cov_weight, plpth_equip_bal_weight, plpth_equip_bal_weight_uom, plpth_equip_bal_volume, plpth_equip_bal_volume_uom, plpth_driver_profile, plpth_driver_grade, plpth_driver_id, plpth_driver_resource, plpth_handler_profile, plpth_handler_grade, plpth_handler_id, plpth_handler_resource, plpth_agent_profile, plpth_agent_service, plpth_agent_id, plpth_agent_resource, plpth_rec_trip_id, plpth_schedule_id, plpth_created_by, plpth_created_date, plpth_last_modified_by, plpth_last_modified_date, plpth_timestamp, plpth_location, plpth_actual_start_time, plpth_actual_end_time, Agent_status, plpth_schedule_Profile, plpth_plan_run_type, plpth_vehicle_cov_volume, plpth_driver2_profile, plpth_driver2_grade, plpth_driver2_id, plpth_driver2_resource, plpth_handler2_profile, plpth_handler2_grade, plpth_handler2_id, plpth_handler2_resource, plpth_schedule_resource, plpth_gps_ref_no, plpth_mobile_gps_ref_no, plpth_from_date_time, plpth_to_date_time, plpth_equipment2_id, plpth_plan_mode, plpth_amend_status, plpth_trip_plan_backtohub, plpth_trip_plan_rsncd, plpth_trip_plan_remarks, plpth_vehicle_weight, plpth_vehicle_volume, pltph_booking_request_weight, pltph_booking_request_volume, pltph_expected_revenue, pltph_expected_cost, pltph_covered_qty, pltph_booking_request, pltph_equipment_type_2, pltph_equipment_status_2, pltph_trip_thu_utilization, pltph_execution_plan, pltph_trip_pallet_space, plpth_trip_plan_from_type, plpth_trip_plan_to_type, pltph_confirmation_date, pltph_release_date, pltph_unique_guid, pltph_error_id, pltph_error_desc, pltph_mobile_remarks, pltph_desktop_mobile_flag, pltph_vehicle_reg_num, pltph_trip_sht_cls_date, plpth_ship_point_id, plpth_prime_mover_chkflg, pltph_recurring_flag, plpth_Consol_Eway_bill_no, pltph_trip_calculated_chargeable_weight, pltph_trip_applied_chargeable_weight, plpth_trip_preload, tms_trip_plan_workflow_status, plpth_plan_accrual_jv_no, plpth_plan_reversal_jv_no, plpth_plan_accrual_jv_date, plpth_plan_accrual_jv_amount, plpth_plan_reversal_jv_date, plpth_plan_reversal_jv_amount, tms_trip_log_worklfow_status, etlcreateddatetime
    )
    SELECT
        plpth_ouinstance, plpth_plan_run_no, plpth_plan_run_status, plpth_trip_plan_id, plpth_trip_plan_planning_profile_id, plpth_trip_plan_status, plpth_trip_plan_date, plpth_trip_plan_end_date, plpth_trip_plan_from, plpth_trip_plan_to, plpth_vehicle_profile, plpth_vehicle_type, plpth_vehicle_id, plpth_vehicle_resource, plpth_vehicle_cov_weight, plpth_vehicle_bal_weight, plpth_vehicle_bal_weight_uom, plpth_vehicle_bal_volume, plpth_vehicle_bal_volume_uom, plpth_equipment_profile, plpth_equipment_type, plpth_equipment_id, plpth_equipment_resource, plpth_equip_cov_weight, plpth_equip_bal_weight, plpth_equip_bal_weight_uom, plpth_equip_bal_volume, plpth_equip_bal_volume_uom, plpth_driver_profile, plpth_driver_grade, plpth_driver_id, plpth_driver_resource, plpth_handler_profile, plpth_handler_grade, plpth_handler_id, plpth_handler_resource, plpth_agent_profile, plpth_agent_service, plpth_agent_id, plpth_agent_resource, plpth_rec_trip_id, plpth_schedule_id, plpth_created_by, plpth_created_date, plpth_last_modified_by, plpth_last_modified_date, plpth_timestamp, plpth_location, plpth_actual_start_time, plpth_actual_end_time, Agent_status, plpth_schedule_Profile, plpth_plan_run_type, plpth_vehicle_cov_volume, plpth_driver2_profile, plpth_driver2_grade, plpth_driver2_id, plpth_driver2_resource, plpth_handler2_profile, plpth_handler2_grade, plpth_handler2_id, plpth_handler2_resource, plpth_schedule_resource, plpth_gps_ref_no, plpth_mobile_gps_ref_no, plpth_from_date_time, plpth_to_date_time, plpth_equipment2_id, plpth_plan_mode, plpth_amend_status, plpth_trip_plan_backtohub, plpth_trip_plan_rsncd, plpth_trip_plan_remarks, plpth_vehicle_weight, plpth_vehicle_volume, pltph_booking_request_weight, pltph_booking_request_volume, pltph_expected_revenue, pltph_expected_cost, pltph_covered_qty, pltph_booking_request, pltph_equipment_type_2, pltph_equipment_status_2, pltph_trip_thu_utilization, pltph_execution_plan, pltph_trip_pallet_space, plpth_trip_plan_from_type, plpth_trip_plan_to_type, pltph_confirmation_date, pltph_release_date, pltph_unique_guid, pltph_error_id, pltph_error_desc, pltph_mobile_remarks, pltph_desktop_mobile_flag, pltph_vehicle_reg_num, pltph_trip_sht_cls_date, plpth_ship_point_id, plpth_prime_mover_chkflg, pltph_recurring_flag, plpth_Consol_Eway_bill_no, pltph_trip_calculated_chargeable_weight, pltph_trip_applied_chargeable_weight, plpth_trip_preload, tms_trip_plan_workflow_status, plpth_plan_accrual_jv_no, plpth_plan_reversal_jv_no, plpth_plan_accrual_jv_date, plpth_plan_accrual_jv_amount, plpth_plan_reversal_jv_date, plpth_plan_reversal_jv_amount, tms_trip_log_worklfow_status, etlcreateddatetime
    FROM stg.stg_tms_pltph_trip_plan_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripplanningheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_trippodattachmentdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_trippodattachmentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_tpad_pod_attachment_dtl;

    UPDATE dwh.f_trippodattachmentdetail t
    SET
	    tpad_trip_hdr_key                = fh.plpth_hdr_key,
        tpad_ouinstance                  = s.tpad_ouinstance,
        tpad_Trip_id                     = s.tpad_Trip_id,
        tpad_seqno                       = s.tpad_seqno,
        tpad_doc_no                      = s.tpad_doc_no,
        tpad_document_code               = s.tpad_document_code,
        tpad_attachment_file_name        = s.tpad_attachment_file_name,
        tpad_attachment                  = s.tpad_attachment,
        tpad_remarks                     = s.tpad_remarks,
        tpad_created_by                  = s.tpad_created_by,
        tpad_created_date                = s.tpad_created_date,
        tpad_last_updated_by             = s.tpad_last_updated_by,
        tpad_last_updated_date           = s.tpad_last_updated_date,
        tpad_timestamp                   = s.tpad_timestamp,
        tpad_addln_doc_no                = s.tpad_addln_doc_no,
        tpad_doc_type                    = s.tpad_doc_type,
        tpad_hdn_file_name               = s.tpad_hdn_file_name,
        tpad_parent_guid                 = s.tpad_parent_guid,
        tpad_dispatch_doc_no             = s.tpad_dispatch_doc_no,
        etlactiveind                     = 1,
        etljobname                       = p_etljobname,
        envsourcecd                      = p_envsourcecd,
        datasourcecd                     = p_datasourcecd,
        etlupdatedatetime                = NOW()
    FROM stg.stg_tms_tpad_pod_attachment_dtl s
	inner join dwh.f_tripplanningheader fh
	ON		tpad_ouinstance  			=	fh.plpth_ouinstance
	AND		tpad_Trip_id			    =	fh.plpth_trip_plan_id
    WHERE t.tpad_line_no = s.tpad_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_trippodattachmentdetail
    (
        tpad_trip_hdr_key,tpad_ouinstance, tpad_Trip_id, tpad_seqno, tpad_line_no, tpad_doc_no, tpad_document_code, tpad_attachment_file_name, 
		tpad_attachment, tpad_remarks, tpad_created_by, tpad_created_date, tpad_last_updated_by, tpad_last_updated_date, tpad_timestamp, 
		tpad_addln_doc_no, tpad_doc_type, tpad_hdn_file_name, tpad_parent_guid, tpad_dispatch_doc_no, etlactiveind, etljobname, 
		envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.plpth_hdr_key,s.tpad_ouinstance, s.tpad_Trip_id, s.tpad_seqno, s.tpad_line_no, s.tpad_doc_no, s.tpad_document_code, s.tpad_attachment_file_name, 
		s.tpad_attachment, s.tpad_remarks, s.tpad_created_by, s.tpad_created_date, s.tpad_last_updated_by, s.tpad_last_updated_date, s.tpad_timestamp, 
		s.tpad_addln_doc_no, s.tpad_doc_type, s.tpad_hdn_file_name, s.tpad_parent_guid, s.tpad_dispatch_doc_no, 1, p_etljobname, 
		p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_tpad_pod_attachment_dtl s
	inner join dwh.f_tripplanningheader fh
	ON		tpad_ouinstance  			=	fh.plpth_ouinstance
	AND		tpad_Trip_id			    =	fh.plpth_trip_plan_id
    LEFT JOIN dwh.f_trippodattachmentdetail t
    ON		s.tpad_line_no				=	t.tpad_line_no
    WHERE t.tpad_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tpad_pod_attachment_dtl
    (
        tpad_ouinstance, tpad_Trip_id, tpad_seqno, tpad_line_no, tpad_doc_no, tpad_document_code, tpad_attachment_file_name, 
		tpad_attachment, tpad_remarks, tpad_created_by, tpad_created_date, tpad_last_updated_by, tpad_last_updated_date, tpad_timestamp, 
		tpad_addln_doc_no, tpad_doc_type, tpad_hdn_file_name, tpad_parent_guid, tpad_dispatch_doc_no, etlcreateddatetime
    )
    SELECT
        tpad_ouinstance, tpad_Trip_id, tpad_seqno, tpad_line_no, tpad_doc_no, tpad_document_code, tpad_attachment_file_name, 
		tpad_attachment, tpad_remarks, tpad_created_by, tpad_created_date, tpad_last_updated_by, tpad_last_updated_date, tpad_timestamp, 
		tpad_addln_doc_no, tpad_doc_type, tpad_hdn_file_name, tpad_parent_guid, tpad_dispatch_doc_no, etlcreateddatetime
    FROM stg.stg_tms_tpad_pod_attachment_dtl;
    END IF;

ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_trippodattachmentdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripresourcescheduledetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripresourcescheduledetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_resource_schedule_dtl;

    UPDATE dwh.F_TripResourceScheduleDetail t

    SET
        trsd_vendor_key           = COALESCE(v.vendor_key,-1),
        trsd_trip_beh             = s.trsd_trip_beh,
        trsd_sch_status           = s.trsd_sch_status,
        trsd_resource_type        = s.trsd_resource_type,
        trsd_resource_id          = s.trsd_resource_id,
        trsd_sch_date_from        = s.trsd_sch_date_from,
        trsd_sch_date_to          = s.trsd_sch_date_to,
        trsd_sch_loc_from         = s.trsd_sch_loc_from,
        trsd_sch_loc_to           = s.trsd_sch_loc_to,
        trsd_created_by           = s.trsd_created_by,
        trsd_created_date         = s.trsd_created_date,
        trsd_modified_by          = s.trsd_modified_by,
        trsd_modified_date        = s.trsd_modified_date,
        trsd_act_date_from        = s.trsd_act_date_from,
        trsd_act_date_to          = s.trsd_act_date_to,
        trsd_ser_type             = s.trsd_ser_type,
        trsd_sub_ser_type         = s.trsd_sub_ser_type,
        trsd_timestamp            = s.trsd_timestamp,
        trsd_vendor_id            = s.trsd_vendor_id,
        etlactiveind              = 1,
        etljobname                = p_etljobname,
        envsourcecd               = p_envsourcecd,
        datasourcecd              = p_datasourcecd,
        etlupdatedatetime         = NOW()
    FROM stg.stg_tms_resource_schedule_dtl s
    LEFT JOIN dwh.d_vendor v        
        ON  s.trsd_vendor_id           = v.vendor_id 
        AND s.trsd_ouinstance          = v.vendor_ou
    WHERE t.trsd_ouinstance = s.trsd_ouinstance
    AND t.trsd_trip_Plan_id = s.trsd_trip_Plan_id
	AND COALESCE(s.trsd_resource_type,'') = COALESCE(t.trsd_resource_type,'')
	AND s.trsd_resource_id	=	 t.trsd_resource_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TripResourceScheduleDetail
    (
        trsd_vendor_key,trsd_ouinstance, trsd_trip_Plan_id, trsd_trip_beh, trsd_sch_status, trsd_resource_type, trsd_resource_id, trsd_sch_date_from, trsd_sch_date_to, trsd_sch_loc_from, trsd_sch_loc_to, trsd_created_by, trsd_created_date, trsd_modified_by, trsd_modified_date, trsd_act_date_from, trsd_act_date_to, trsd_ser_type, trsd_sub_ser_type, trsd_timestamp, trsd_vendor_id, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(v.vendor_key,-1), s.trsd_ouinstance, s.trsd_trip_Plan_id, s.trsd_trip_beh, s.trsd_sch_status, s.trsd_resource_type, s.trsd_resource_id, s.trsd_sch_date_from, s.trsd_sch_date_to, s.trsd_sch_loc_from, s.trsd_sch_loc_to, s.trsd_created_by, s.trsd_created_date, s.trsd_modified_by, s.trsd_modified_date, s.trsd_act_date_from, s.trsd_act_date_to, s.trsd_ser_type, s.trsd_sub_ser_type, s.trsd_timestamp, s.trsd_vendor_id, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_resource_schedule_dtl s
    LEFT JOIN dwh.d_vendor v        
        ON  s.trsd_vendor_id           = v.vendor_id 
        AND s.trsd_ouinstance           = v.vendor_ou
    LEFT JOIN dwh.F_TripResourceScheduleDetail t
    ON s.trsd_ouinstance = t.trsd_ouinstance
    AND s.trsd_trip_Plan_id = t.trsd_trip_Plan_id
	AND COALESCE(s.trsd_resource_type,'') = COALESCE(t.trsd_resource_type,'')
	AND s.trsd_resource_id	=	 t.trsd_resource_id
    WHERE t.trsd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_resource_schedule_dtl
    (
        trsd_ouinstance, trsd_trip_Plan_id, trsd_trip_beh, trsd_sch_status, trsd_resource_type, trsd_resource_id, trsd_sch_date_from, trsd_sch_date_to, trsd_sch_loc_from, trsd_sch_loc_to, trsd_created_by, trsd_created_date, trsd_modified_by, trsd_modified_date, trsd_act_date_from, trsd_act_date_to, trsd_ser_type, trsd_sub_ser_type, trsd_timestamp, trsd_vendor_id, etlcreateddatetime
    )
    SELECT
        trsd_ouinstance, trsd_trip_Plan_id, trsd_trip_beh, trsd_sch_status, trsd_resource_type, trsd_resource_id, trsd_sch_date_from, trsd_sch_date_to, trsd_sch_loc_from, trsd_sch_loc_to, trsd_created_by, trsd_created_date, trsd_modified_by, trsd_modified_date, trsd_act_date_from, trsd_act_date_to, trsd_ser_type, trsd_sub_ser_type, trsd_timestamp, trsd_vendor_id, etlcreateddatetime
    FROM stg.stg_tms_resource_schedule_dtl;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripresourcescheduledetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripthudetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

   
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_plttd_trip_thu_details;

        UPDATE dwh.F_TripTHUDetail t
        SET
        plttd_thu_key      			   = COALESCE(th.thu_key,-1),
        plttd_ouinstance               = s.plttd_ouinstance,
        plttd_thu_qty                  = s.plttd_thu_qty,
        plttd_thu_weight               = s.plttd_thu_weight,
        plttd_thu_vol                  = s.plttd_thu_vol,
        plttd_created_by               = s.plttd_created_by,
        plttd_created_date             = s.plttd_created_date,
        plttd_modified_by              = s.plttd_modified_by,
        plttd_modified_date            = s.plttd_modified_date,
        plttd_thu_id                   = s.plttd_thu_id,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
        FROM stg.stg_tms_plttd_trip_thu_details s

        LEFT JOIN dwh.d_thu th         
        ON  s.plttd_thu_id        = th.thu_id 
        AND s.plttd_ouinstance       = th.thu_ou       

    WHERE t.plttd_ouinstance = s.plttd_ouinstance
    AND t.plttd_trip_plan_id = s.plttd_trip_plan_id
    AND t.plttd_trip_plan_line_no = s.plttd_trip_plan_line_no
    AND t.plttd_thu_line_no = s.plttd_thu_line_no
    AND t.plttd_dispatch_doc_no = s.plttd_dispatch_doc_no;
	
    GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_TripTHUDetail
        (
           plttd_thu_key , plttd_ouinstance, plttd_trip_plan_id, plttd_trip_plan_line_no, plttd_thu_line_no, plttd_thu_qty, plttd_thu_weight, plttd_thu_vol, plttd_created_by, plttd_created_date, plttd_modified_by, plttd_modified_date, plttd_dispatch_doc_no, plttd_thu_id, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
           COALESCE(th.thu_key,-1),s.plttd_ouinstance, s.plttd_trip_plan_id, s.plttd_trip_plan_line_no, s.plttd_thu_line_no, s.plttd_thu_qty, s.plttd_thu_weight, s.plttd_thu_vol, s.plttd_created_by, s.plttd_created_date, s.plttd_modified_by, s.plttd_modified_date, s.plttd_dispatch_doc_no, s.plttd_thu_id, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_plttd_trip_thu_details s

        LEFT JOIN dwh.d_thu th         
        ON  s.plttd_thu_id        	 = th.thu_id 
        AND s.plttd_ouinstance       = th.thu_ou

        LEFT JOIN dwh.F_TripTHUDetail t
        ON s.plttd_ouinstance 		= t.plttd_ouinstance
    	AND s.plttd_trip_plan_id 	= t.plttd_trip_plan_id
    	AND s.plttd_trip_plan_line_no = t.plttd_trip_plan_line_no
    	AND s.plttd_thu_line_no 		= t.plttd_thu_line_no
    	AND s.plttd_dispatch_doc_no = t.plttd_dispatch_doc_no
    	WHERE t.plttd_ouinstance IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_plttd_trip_thu_details
        (
            plttd_ouinstance, plttd_trip_plan_id, plttd_trip_plan_line_no, plttd_thu_line_no, plttd_thu_qty, plttd_thu_weight, plttd_thu_vol, plttd_created_by, plttd_created_date, plttd_modified_by, plttd_modified_date, plttd_timestamp, plttd_dispatch_doc_no, plttd_thu_id, etlcreateddatetime
        )
        SELECT
            plttd_ouinstance, plttd_trip_plan_id, plttd_trip_plan_line_no, plttd_thu_line_no, plttd_thu_qty, plttd_thu_weight, plttd_thu_vol, plttd_created_by, plttd_created_date, plttd_modified_by, plttd_modified_date, plttd_timestamp, plttd_dispatch_doc_no, plttd_thu_id, etlcreateddatetime
        FROM stg.stg_tms_plttd_trip_thu_details;
    END IF;

    
   EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripthudetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripthuserialdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag, h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag, p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
                    AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
    THEN
        SELECT COUNT(1) INTO srccnt
        FROM stg.stg_tms_plttsd_trip_thu_serial_details;

        UPDATE dwh.F_TripTHUSerialDetail t
        SET
        plttd_trip_thu_key    =     oh.plttd_trip_thu_key ,   
        plttsd_serial                = s.plttsd_serial,
        plttsd_serial_qty            = s.plttsd_serial_qty,
        plttsd_created_by            = s.plttsd_created_by,
        plttsd_created_date          = s.plttsd_created_date,
        plttsd_modified_by           = s.plttsd_modified_by,
        plttsd_modified_date         = s.plttsd_modified_date,
        
        etlactiveind                 = 1,
        etljobname                   = p_etljobname,
        envsourcecd                  = p_envsourcecd,
        datasourcecd                 = p_datasourcecd,
        etlupdatedatetime            = NOW()
        FROM stg.stg_tms_plttsd_trip_thu_serial_details s

      	INNER JOIN dwh.f_tripthudetail oh 
	  	ON   	s.plttsd_ouinstance 	=  oh.plttd_ouinstance
      	AND  	s.plttsd_trip_plan_id 	=  oh.plttd_trip_plan_id 
       	AND 	s.plttsd_plan_line_id 	=  oh.plttd_trip_plan_line_no      
    	AND  	s.plttsd_thu_line_id 	=  oh.plttd_thu_line_no 
		AND 	s.plttsd_dispatch		=  oh.plttd_dispatch_doc_no

        WHERE t.plttsd_ouinstance 		= s.plttsd_ouinstance
    	AND t.plttsd_trip_plan_id 		= s.plttsd_trip_plan_id
    	AND t.plttsd_plan_line_id 		= s.plttsd_plan_line_id
    	AND t.plttsd_thu_line_id 		= s.plttsd_thu_line_id
    	AND t.plttsd_serial_line_id 	= s.plttsd_serial_line_id
    	AND t.plttsd_dispatch 			= s.plttsd_dispatch;
     

     GET DIAGNOSTICS updcnt = ROW_COUNT;

        INSERT INTO dwh.F_TripTHUSerialDetail
        (
             plttd_trip_thu_key, plttsd_ouinstance, plttsd_trip_plan_id, plttsd_plan_line_id, plttsd_thu_line_id, plttsd_serial_line_id, plttsd_serial, plttsd_serial_qty, plttsd_created_by, plttsd_created_date, plttsd_modified_by, plttsd_modified_date, plttsd_dispatch, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
        )

        SELECT
            oh.plttd_trip_thu_key ,s.plttsd_ouinstance, s.plttsd_trip_plan_id, s.plttsd_plan_line_id, s.plttsd_thu_line_id, s.plttsd_serial_line_id, s.plttsd_serial, s.plttsd_serial_qty, s.plttsd_created_by, s.plttsd_created_date, s.plttsd_modified_by, s.plttsd_modified_date, s.plttsd_dispatch, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
        FROM stg.stg_tms_plttsd_trip_thu_serial_details s

        INNER JOIN dwh.f_tripthudetail oh 
		ON  s.plttsd_ouinstance 	=   oh.plttd_ouinstance
       	AND s.plttsd_trip_plan_id 	=   oh.plttd_trip_plan_id 
       	AND s.plttsd_plan_line_id 	=   oh.plttd_trip_plan_line_no      
    	AND s.plttsd_thu_line_id 	=  	oh.plttd_thu_line_no 
		AND s.plttsd_dispatch		=	oh.plttd_dispatch_doc_no

        LEFT JOIN dwh.F_TripTHUSerialDetail t
        ON s.plttsd_ouinstance 		= t.plttsd_ouinstance
    	AND s.plttsd_trip_plan_id 	= t.plttsd_trip_plan_id
    	AND s.plttsd_plan_line_id 	= t.plttsd_plan_line_id
    	AND s.plttsd_thu_line_id 	= t.plttsd_thu_line_id
    	AND s.plttsd_serial_line_id = t.plttsd_serial_line_id
    	AND s.plttsd_dispatch 		= t.plttsd_dispatch
        WHERE t.plttsd_ouinstance IS NULL;

        GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

        INSERT INTO raw.raw_tms_plttsd_trip_thu_serial_details
        (
            plttsd_ouinstance, plttsd_trip_plan_id, plttsd_plan_line_id, plttsd_thu_line_id, plttsd_serial_line_id, plttsd_serial, plttsd_serial_qty, plttsd_serial_wei, plttsd_serial_vol, plttsd_created_by, plttsd_created_date, plttsd_modified_by, plttsd_modified_date, plttsd_time_stamp, plttsd_dispatch, etlcreateddatetime
        )
        SELECT
            plttsd_ouinstance, plttsd_trip_plan_id, plttsd_plan_line_id, plttsd_thu_line_id, plttsd_serial_line_id, plttsd_serial, plttsd_serial_qty, plttsd_serial_wei, plttsd_serial_vol, plttsd_created_by, plttsd_created_date, plttsd_modified_by, plttsd_modified_date, plttsd_time_stamp, plttsd_dispatch, etlcreateddatetime
        FROM stg.stg_tms_plttsd_trip_thu_serial_details;
    END IF;

   ELSE    
         p_errorid   := 0;
         select 0 into inscnt;
            select 0 into updcnt;
         select 0 into srccnt;    
         
         IF p_depsource IS NULL
         THEN 
         p_errordesc := 'The Dependent source cannot be NULL.';
         ELSE
         p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
         END IF;
         CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripthuserialdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripvendortariffrevcostdetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripvendortariffrevcostdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1  FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_tvtrcd_trip_vendor_tariff_rev_cost_dtl;

    UPDATE dwh.f_tripvendortariffrevcostdetail t
    SET
	    tvtrcd_hdr_key                    = fh.tvtrch_key,
        tvtrcd_leg_id                     = s.tvtrcd_leg_id,
        tvtrcd_buy_sell_type              = s.tvtrcd_buy_sell_type,
        tvtrcd_stage_of_derivation        = s.tvtrcd_stage_of_derivation,
        tvtrcd_date_of_stage              = s.tvtrcd_date_of_stage,
        tvtrcd_contract_id                = s.tvtrcd_contract_id,
        tvtrcd_tariff_id                  = s.tvtrcd_tariff_id,
        tvtrcd_tariff_type                = s.tvtrcd_tariff_type,
        tvtrcd_rate                       = s.tvtrcd_rate,
        tvtrcd_remarks                    = s.tvtrcd_remarks,
        tvtrcd_trip_rev_cost_sk           = s.tvtrcd_trip_rev_cost_sk,
        tvtrcd_trip_plan_hdr_sk           = s.tvtrcd_trip_plan_hdr_sk,
        tvtrcd_created_by                 = s.tvtrcd_created_by,
        tvtrcd_created_date               = s.tvtrcd_created_date,
        tvtrcd_modified_by                = s.tvtrcd_modified_by,
        tvtrcd_modified_date              = s.tvtrcd_modified_date,
        tvtrcd_time_stamp                 = s.tvtrcd_time_stamp,
        tvtrcd_resource_type              = s.tvtrcd_resource_type,
        tvtrcd_weight                     = s.tvtrcd_weight,
        tvtrcd_weight_uom                 = s.tvtrcd_weight_uom,
        tvtrcd_pallet                     = s.tvtrcd_pallet,
        tvtrcd_chk_flag                   = s.tvtrcd_chk_flag,
        tvtrcd_vendor_flag                = s.tvtrcd_vendor_flag,
        tvtrcd_tariff_remarks             = s.tvtrcd_tariff_remarks,
        tvtrcd_resource_id                = s.tvtrcd_resource_id,
        tvtrcd_amendment_no               = s.tvtrcd_amendment_no,
        tvtrcd_fl_tariff_id               = s.tvtrcd_fl_tariff_id,
        tvtrcd_Agreed_Rate                = s.tvtrcd_Agreed_Rate,
        tvtrcd_Agreed_cost                = s.tvtrcd_Agreed_cost,
        tvtrcd_charagable_quantity        = s.tvtrcd_charagable_quantity,
        tvtrcd_exchange_rate              = s.tvtrcd_exchange_rate,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_tms_tvtrcd_trip_vendor_tariff_rev_cost_dtl s
	inner join dwh.f_tripvendortariffrevcostheader fh
	on  tvtrch_ouinstance = tvtrcd_ouinstance
	and tvtrch_trip_plan_id = tvtrcd_trip_plan_id
	and tvtrch_buy_sell_type =tvtrcd_buy_sell_type
	and tvtrch_stage_of_derivation =tvtrcd_stage_of_derivation
	and tvtrch_trip_plan_hdr_sk = tvtrcd_trip_plan_hdr_sk
    WHERE t.tvtrcd_ouinstance = s.tvtrcd_ouinstance
    AND t.tvtrcd_trip_plan_id = s.tvtrcd_trip_plan_id
    AND t.tvtrcd_booking_request = s.tvtrcd_booking_request
    AND t.tvtrcd_unique_id = s.tvtrcd_unique_id;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_tripvendortariffrevcostdetail
    (
        tvtrcd_hdr_key,tvtrcd_ouinstance, tvtrcd_trip_plan_id, tvtrcd_booking_request, tvtrcd_unique_id, tvtrcd_leg_id, 
		tvtrcd_buy_sell_type, tvtrcd_stage_of_derivation, tvtrcd_date_of_stage, tvtrcd_contract_id, tvtrcd_tariff_id, 
		tvtrcd_tariff_type, tvtrcd_rate, tvtrcd_remarks, tvtrcd_trip_rev_cost_sk, tvtrcd_trip_plan_hdr_sk, tvtrcd_created_by, 
		tvtrcd_created_date, tvtrcd_modified_by, tvtrcd_modified_date, tvtrcd_time_stamp, tvtrcd_resource_type, tvtrcd_weight, 
		tvtrcd_weight_uom, tvtrcd_pallet, tvtrcd_chk_flag, tvtrcd_vendor_flag, tvtrcd_tariff_remarks, tvtrcd_resource_id, 
		tvtrcd_amendment_no, tvtrcd_fl_tariff_id, tvtrcd_Agreed_Rate, tvtrcd_Agreed_cost, tvtrcd_charagable_quantity, 
		tvtrcd_exchange_rate, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        fh.tvtrch_key,s.tvtrcd_ouinstance, s.tvtrcd_trip_plan_id, s.tvtrcd_booking_request, s.tvtrcd_unique_id, s.tvtrcd_leg_id, 
		s.tvtrcd_buy_sell_type, s.tvtrcd_stage_of_derivation, s.tvtrcd_date_of_stage, s.tvtrcd_contract_id, s.tvtrcd_tariff_id, 
		s.tvtrcd_tariff_type, s.tvtrcd_rate, s.tvtrcd_remarks, s.tvtrcd_trip_rev_cost_sk, s.tvtrcd_trip_plan_hdr_sk, s.tvtrcd_created_by, 
		s.tvtrcd_created_date, s.tvtrcd_modified_by, s.tvtrcd_modified_date, s.tvtrcd_time_stamp, s.tvtrcd_resource_type, s.tvtrcd_weight,
		s.tvtrcd_weight_uom, s.tvtrcd_pallet, s.tvtrcd_chk_flag, s.tvtrcd_vendor_flag, s.tvtrcd_tariff_remarks, s.tvtrcd_resource_id, 
		s.tvtrcd_amendment_no, s.tvtrcd_fl_tariff_id, s.tvtrcd_Agreed_Rate, s.tvtrcd_Agreed_cost, s.tvtrcd_charagable_quantity,
		s.tvtrcd_exchange_rate, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_tvtrcd_trip_vendor_tariff_rev_cost_dtl s
	inner join dwh.f_tripvendortariffrevcostheader fh
	on  tvtrch_ouinstance = tvtrcd_ouinstance
	and tvtrch_trip_plan_id = tvtrcd_trip_plan_id
	and tvtrch_buy_sell_type =tvtrcd_buy_sell_type
	and tvtrch_stage_of_derivation =tvtrcd_stage_of_derivation
	and tvtrch_trip_plan_hdr_sk = tvtrcd_trip_plan_hdr_sk
    LEFT JOIN dwh.f_tripvendortariffrevcostdetail t
    ON s.tvtrcd_ouinstance = t.tvtrcd_ouinstance
    AND s.tvtrcd_trip_plan_id = t.tvtrcd_trip_plan_id
    AND s.tvtrcd_booking_request = t.tvtrcd_booking_request
    AND s.tvtrcd_unique_id = t.tvtrcd_unique_id
    WHERE t.tvtrcd_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tvtrcd_trip_vendor_tariff_rev_cost_dtl
    (
        tvtrcd_ouinstance, tvtrcd_trip_plan_id, tvtrcd_booking_request, tvtrcd_unique_id, tvtrcd_leg_id, tvtrcd_buy_sell_type, 
		tvtrcd_stage_of_derivation, tvtrcd_date_of_stage, tvtrcd_contract_id, tvtrcd_tariff_id, tvtrcd_tariff_type, tvtrcd_rate, 
		tvtrcd_remarks, tvtrcd_trip_rev_cost_sk, tvtrcd_trip_plan_hdr_sk, tvtrcd_created_by, tvtrcd_created_date, tvtrcd_modified_by, 
		tvtrcd_modified_date, tvtrcd_time_stamp, tvtrcd_resource_type, tvtrcd_weight, tvtrcd_weight_uom, tvtrcd_pallet, tvtrcd_chk_flag, 
		tvtrcd_vendor_flag, tvtrcd_tariff_remarks, tvtrcd_resource_id, tvtrcd_amendment_no, tvtrcd_fl_tariff_id, tvtrcd_Agreed_Rate, 
		tvtrcd_Agreed_cost, tvtrcd_charagable_quantity, tvtrcd_exchange_rate, etlcreateddatetime
    )
    SELECT
        tvtrcd_ouinstance, tvtrcd_trip_plan_id, tvtrcd_booking_request, tvtrcd_unique_id, tvtrcd_leg_id, tvtrcd_buy_sell_type, 
		tvtrcd_stage_of_derivation, tvtrcd_date_of_stage, tvtrcd_contract_id, tvtrcd_tariff_id, tvtrcd_tariff_type, tvtrcd_rate, 
		tvtrcd_remarks, tvtrcd_trip_rev_cost_sk, tvtrcd_trip_plan_hdr_sk, tvtrcd_created_by, tvtrcd_created_date, tvtrcd_modified_by, 
		tvtrcd_modified_date, tvtrcd_time_stamp, tvtrcd_resource_type, tvtrcd_weight, tvtrcd_weight_uom, tvtrcd_pallet, tvtrcd_chk_flag, 
		tvtrcd_vendor_flag, tvtrcd_tariff_remarks, tvtrcd_resource_id, tvtrcd_amendment_no, tvtrcd_fl_tariff_id, tvtrcd_Agreed_Rate, 
		tvtrcd_Agreed_cost, tvtrcd_charagable_quantity, tvtrcd_exchange_rate, etlcreateddatetime
    FROM stg.stg_tms_tvtrcd_trip_vendor_tariff_rev_cost_dtl;
    END IF;

ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripvendortariffrevcostdetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_tripvendortariffrevcostheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_tripvendortariffrevcostheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_tvtrch_trip_vendor_tariff_rev_cost_hdr;

    UPDATE dwh.F_TripVendorTariffRevCostHeader t
    SET
		tvtrch_trip_plan_hrd_key			= hdr.plpth_hdr_key,
        tvtrch_buy_sell_type              = s.tvtrch_buy_sell_type,
        tvtrch_rate                       = s.tvtrch_rate,
        tvtrch_trip_plan_hdr_sk           = s.tvtrch_trip_plan_hdr_sk,
        tvtrch_created_by                 = s.tvtrch_created_by,
        tvtrch_created_date               = s.tvtrch_created_date,
        tvtrch_modified_by                = s.tvtrch_modified_by,
        tvtrch_modified_date              = s.tvtrch_modified_date,
        tvtrch_time_stamp                 = s.tvtrch_time_stamp,
        etlactiveind                      = 1,
        etljobname                        = p_etljobname,
        envsourcecd                       = p_envsourcecd,
        datasourcecd                      = p_datasourcecd,
        etlupdatedatetime                 = NOW()
    FROM stg.stg_tms_tvtrch_trip_vendor_tariff_rev_cost_hdr s
	INNER JOIN dwh.f_tripPlanningHeader	hdr
	ON hdr.plpth_trip_plan_id	= s.tvtrch_trip_plan_id
	AND	hdr.plpth_ouinstance	= s.tvtrch_ouinstance
    WHERE t.tvtrch_ouinstance = s.tvtrch_ouinstance
    AND t.tvtrch_trip_plan_id = s.tvtrch_trip_plan_id
    AND t.tvtrch_unique_id = s.tvtrch_unique_id
    AND t.tvtrch_stage_of_derivation = s.tvtrch_stage_of_derivation;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_TripVendorTariffRevCostHeader
    (
		tvtrch_trip_plan_hrd_key,
        tvtrch_ouinstance		, tvtrch_trip_plan_id	, tvtrch_unique_id			, tvtrch_stage_of_derivation, 
		tvtrch_buy_sell_type	, tvtrch_rate			, tvtrch_trip_plan_hdr_sk	, tvtrch_created_by, 
		tvtrch_created_date		, tvtrch_modified_by	, tvtrch_modified_date		, tvtrch_time_stamp, 
		etlactiveind			, etljobname			, envsourcecd				, datasourcecd		, 
		etlcreatedatetime
    )

    SELECT
		hdr.plpth_hdr_key		,
        s.tvtrch_ouinstance		, s.tvtrch_trip_plan_id	, s.tvtrch_unique_id		, s.tvtrch_stage_of_derivation, 
		s.tvtrch_buy_sell_type	, s.tvtrch_rate			, s.tvtrch_trip_plan_hdr_sk	, s.tvtrch_created_by, 
		s.tvtrch_created_date	, s.tvtrch_modified_by	, s.tvtrch_modified_date	, s.tvtrch_time_stamp, 
				1				, p_etljobname			, p_envsourcecd				, p_datasourcecd,
		NOW()
    FROM stg.stg_tms_tvtrch_trip_vendor_tariff_rev_cost_hdr s
	INNER JOIN dwh.f_tripPlanningHeader	hdr
	ON	hdr.plpth_trip_plan_id			= s.tvtrch_trip_plan_id
	AND	hdr.plpth_ouinstance			= s.tvtrch_ouinstance
    LEFT JOIN dwh.F_TripVendorTariffRevCostHeader t
    ON	s.tvtrch_ouinstance				= t.tvtrch_ouinstance
    AND	s.tvtrch_trip_plan_id			= t.tvtrch_trip_plan_id
    AND	s.tvtrch_unique_id				= t.tvtrch_unique_id
    AND	s.tvtrch_stage_of_derivation	= t.tvtrch_stage_of_derivation
    WHERE	t.tvtrch_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_tvtrch_trip_vendor_tariff_rev_cost_hdr
    (
        tvtrch_ouinstance	, tvtrch_trip_plan_id	, tvtrch_unique_id			, tvtrch_stage_of_derivation, 
		tvtrch_buy_sell_type, tvtrch_rate			, tvtrch_trip_plan_hdr_sk	, tvtrch_created_by, 
		tvtrch_created_date	, tvtrch_modified_by	, tvtrch_modified_date		, tvtrch_time_stamp, 
		etlcreateddatetime
    )
    SELECT
        tvtrch_ouinstance	, tvtrch_trip_plan_id	, tvtrch_unique_id			, tvtrch_stage_of_derivation, 
		tvtrch_buy_sell_type, tvtrch_rate			, tvtrch_trip_plan_hdr_sk	, tvtrch_created_by, 
		tvtrch_created_date	, tvtrch_modified_by	, tvtrch_modified_date		, tvtrch_time_stamp, 
		etlcreateddatetime
	FROM stg.stg_tms_tvtrch_trip_vendor_tariff_rev_cost_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_tripvendortariffrevcostheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_vehicleequiplicensedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_vehicleequiplicensedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_vrvel_veh_eqp_license_dtl;

    UPDATE dwh.F_VehicleEquipLicenseDetail t
    SET
        vrvel_vendor_key                 = COALESCE(v.vendor_key,-1),
        vrvel_ouinstance                = s.vrvel_ouinstance,
        vrvel_tend_req_no               = s.vrvel_tend_req_no,
        vrvel_line_no                   = s.vrvel_line_no,
        vrvel_resp_line_no              = s.vrvel_resp_line_no,
        vrvel_license_plate_no          = s.vrvel_license_plate_no,
        vrvel_created_by                = s.vrvel_created_by,
        vrvel_created_date              = s.vrvel_created_date,
        vrvel_last_modified_by          = s.vrvel_last_modified_by,
        vrvel_last_modified_date        = s.vrvel_last_modified_date,
        vrvel_timestamp                 = s.vrvel_timestamp,
        vrvel_is_assigned               = s.vrvel_is_assigned,
        vrvel_tend_rpt_dt_time          = s.vrvel_tend_rpt_dt_time,
        vrvel_tend_cont_person1         = s.vrvel_tend_cont_person1,
        vrvel_tend_cont_det1            = s.vrvel_tend_cont_det1,
        vrvel_tend_cont_person2         = s.vrvel_tend_cont_person2,
        vrvel_tend_cont_det2            = s.vrvel_tend_cont_det2,
        vrvel_vendor_id                 = s.vrvel_vendor_id,
        etlactiveind                    = 1,
        etljobname                      = p_etljobname,
        envsourcecd                     = p_envsourcecd,
        datasourcecd                    = p_datasourcecd,
        etlupdatedatetime               = NOW()
    FROM stg.stg_tms_vrvel_veh_eqp_license_dtl s
    LEFT JOIN dwh.d_vendor v       
        ON  s.vrvel_vendor_id           = v.vendor_id 
        AND s.vrvel_ouinstance           = v.vendor_ou
    WHERE t.vrvel_ouinstance = s.vrvel_ouinstance
    AND t.vrvel_tend_req_no = s.vrvel_tend_req_no
    AND t.vrvel_line_no = s.vrvel_line_no
    AND t.vrvel_resp_line_no = s.vrvel_resp_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_VehicleEquipLicenseDetail
    (
        vrvel_vendor_key, vrvel_ouinstance, vrvel_tend_req_no, vrvel_line_no, vrvel_resp_line_no, vrvel_license_plate_no, vrvel_created_by, vrvel_created_date, vrvel_last_modified_by, vrvel_last_modified_date, vrvel_timestamp, vrvel_is_assigned, vrvel_tend_rpt_dt_time, vrvel_tend_cont_person1, vrvel_tend_cont_det1, vrvel_tend_cont_person2, vrvel_tend_cont_det2, vrvel_vendor_id, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
       COALESCE(v.vendor_key,-1), s.vrvel_ouinstance, s.vrvel_tend_req_no, s.vrvel_line_no, s.vrvel_resp_line_no, s.vrvel_license_plate_no, s.vrvel_created_by, s.vrvel_created_date, s.vrvel_last_modified_by, s.vrvel_last_modified_date, s.vrvel_timestamp, s.vrvel_is_assigned, s.vrvel_tend_rpt_dt_time, s.vrvel_tend_cont_person1, s.vrvel_tend_cont_det1, s.vrvel_tend_cont_person2, s.vrvel_tend_cont_det2, s.vrvel_vendor_id, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_vrvel_veh_eqp_license_dtl s
     LEFT JOIN dwh.d_vendor v       
        ON  s.vrvel_vendor_id           = v.vendor_id 
        AND s.vrvel_ouinstance           = v.vendor_ou
    LEFT JOIN dwh.F_VehicleEquipLicenseDetail t
    ON s.vrvel_ouinstance = t.vrvel_ouinstance
    AND s.vrvel_tend_req_no = t.vrvel_tend_req_no
    AND s.vrvel_line_no = t.vrvel_line_no
    AND s.vrvel_resp_line_no = t.vrvel_resp_line_no
    WHERE t.vrvel_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_vrvel_veh_eqp_license_dtl
    (
        vrvel_ouinstance, vrvel_tend_req_no, vrvel_line_no, vrvel_resp_line_no, vrvel_license_plate_no, vrvel_created_by, vrvel_created_date, vrvel_last_modified_by, vrvel_last_modified_date, vrvel_timestamp, vrvel_is_assigned, vrvel_tend_rpt_dt_time, vrvel_tend_cont_person1, vrvel_tend_cont_det1, vrvel_tend_cont_person2, vrvel_tend_cont_det2, vrvel_vendor_id, etlcreateddatetime
    )
    SELECT
        vrvel_ouinstance, vrvel_tend_req_no, vrvel_line_no, vrvel_resp_line_no, vrvel_license_plate_no, vrvel_created_by, vrvel_created_date, vrvel_last_modified_by, vrvel_last_modified_date, vrvel_timestamp, vrvel_is_assigned, vrvel_tend_rpt_dt_time, vrvel_tend_cont_person1, vrvel_tend_cont_det1, vrvel_tend_cont_person2, vrvel_tend_cont_det2, vrvel_vendor_id, etlcreateddatetime
    FROM stg.stg_tms_vrvel_veh_eqp_license_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_vehicleequiplicensedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_vehicleequipresponsedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_vehicleequipresponsedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_vrve_veh_eqp_response_dtl;

    UPDATE dwh.F_VehicleEquipResponseDetail t
    SET
        vrve_vendor_key              = COALESCE(v.vendor_key,-1),
        vrve_ouinstance                = s.vrve_ouinstance,
        vrve_tend_req_no               = s.vrve_tend_req_no,
        vrve_line_no                   = s.vrve_line_no,
        vrve_vendor_id                 = s.vrve_vendor_id,
        vrve_resp_status               = s.vrve_resp_status,
        vrve_resp_for                  = s.vrve_resp_for,
        vrve_type                      = s.vrve_type,
        vrve_req_qty                   = s.vrve_req_qty,
        vrve_vend_ref_no               = s.vrve_vend_ref_no,
        vrve_vend_ref_date             = s.vrve_vend_ref_date,
        vrve_contract_id               = s.vrve_contract_id,
        vrve_confirm_status            = s.vrve_confirm_status,
        vrve_confirm_qty               = s.vrve_confirm_qty,
        vrve_rate                      = s.vrve_rate,
        vrve_created_by                = s.vrve_created_by,
        vrve_created_date              = s.vrve_created_date,
        vrve_last_modified_by          = s.vrve_last_modified_by,
        vrve_last_modified_date        = s.vrve_last_modified_date,
        vrve_confirm_price             = s.vrve_confirm_price,
        vrve_confirm_date              = s.vrve_confirm_date,
        vrve_rpt_date_time             = s.vrve_rpt_date_time,
        vrvel_remarks                  = s.vrvel_remarks,
        vrvel_reject_code              = s.vrvel_reject_code,
        vrve_for_period                = s.vrve_for_period,
        vrve_period_uom                = s.vrve_period_uom,
        vrve_from_geo                  = s.vrve_from_geo,
        vrve_from_geo_type             = s.vrve_from_geo_type,
        vrve_to_geo                    = s.vrve_to_geo,
        vrve_to_geo_type               = s.vrve_to_geo_type,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_tms_vrve_veh_eqp_response_dtl s
    LEFT JOIN dwh.d_vendor v       
        ON  s.vrve_vendor_id         = v.vendor_id 
        AND s.vrve_ouinstance        = v.vendor_ou
    WHERE t.vrve_ouinstance = s.vrve_ouinstance
    AND t.vrve_tend_req_no = s.vrve_tend_req_no
    AND t.vrve_line_no = s.vrve_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_VehicleEquipResponseDetail
    (
         vrve_vendor_key,vrve_ouinstance, vrve_tend_req_no, vrve_line_no, vrve_vendor_id, vrve_resp_status, vrve_resp_for, vrve_type, vrve_req_qty, vrve_vend_ref_no, vrve_vend_ref_date, vrve_contract_id, vrve_confirm_status, vrve_confirm_qty, vrve_rate, vrve_created_by, vrve_created_date, vrve_last_modified_by, vrve_last_modified_date, vrve_confirm_price, vrve_confirm_date, vrve_rpt_date_time, vrvel_remarks, vrvel_reject_code, vrve_for_period, vrve_period_uom, vrve_from_geo, vrve_from_geo_type, vrve_to_geo, vrve_to_geo_type, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
         COALESCE(v.vendor_key,-1) ,s.vrve_ouinstance, s.vrve_tend_req_no, s.vrve_line_no, s.vrve_vendor_id, s.vrve_resp_status, s.vrve_resp_for, s.vrve_type, s.vrve_req_qty, s.vrve_vend_ref_no, s.vrve_vend_ref_date, s.vrve_contract_id, s.vrve_confirm_status, s.vrve_confirm_qty, s.vrve_rate, s.vrve_created_by, s.vrve_created_date, s.vrve_last_modified_by, s.vrve_last_modified_date, s.vrve_confirm_price, s.vrve_confirm_date, s.vrve_rpt_date_time, s.vrvel_remarks, s.vrvel_reject_code, s.vrve_for_period, s.vrve_period_uom, s.vrve_from_geo, s.vrve_from_geo_type, s.vrve_to_geo, s.vrve_to_geo_type, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_vrve_veh_eqp_response_dtl s
     LEFT JOIN dwh.d_vendor v       
        ON  s.vrve_vendor_id         = v.vendor_id 
        AND s.vrve_ouinstance        = v.vendor_ou
    LEFT JOIN dwh.F_VehicleEquipResponseDetail t
    ON s.vrve_ouinstance = t.vrve_ouinstance
    AND s.vrve_tend_req_no = t.vrve_tend_req_no
    AND s.vrve_line_no = t.vrve_line_no
    WHERE t.vrve_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_vrve_veh_eqp_response_dtl
    (
        vrve_ouinstance, vrve_tend_req_no, vrve_line_no, vrve_vendor_id, vrve_resp_status, vrve_resp_for, vrve_type, vrve_req_qty, vrve_vend_ref_no, vrve_vend_ref_date, vrve_contract_id, vrve_confirm_status, vrve_confirm_qty, vrve_rate, vrve_created_by, vrve_created_date, vrve_last_modified_by, vrve_last_modified_date, vrve_timestamp, vrve_confirm_price, vrve_confirm_date, vrve_rpt_date_time, vrvel_remarks, vrvel_reject_code, vrve_for_period, vrve_period_uom, vrve_from_geo, vrve_from_geo_type, vrve_to_geo, vrve_to_geo_type, etlcreateddatetime
    )
    SELECT
        vrve_ouinstance, vrve_tend_req_no, vrve_line_no, vrve_vendor_id, vrve_resp_status, vrve_resp_for, vrve_type, vrve_req_qty, vrve_vend_ref_no, vrve_vend_ref_date, vrve_contract_id, vrve_confirm_status, vrve_confirm_qty, vrve_rate, vrve_created_by, vrve_created_date, vrve_last_modified_by, vrve_last_modified_date, vrve_timestamp, vrve_confirm_price, vrve_confirm_date, vrve_rpt_date_time, vrvel_remarks, vrvel_reject_code, vrve_for_period, vrve_period_uom, vrve_from_geo, vrve_from_geo_type, vrve_to_geo, vrve_to_geo_type, etlcreateddatetime
    FROM stg.stg_tms_vrve_veh_eqp_response_dtl;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_vehicleequipresponsedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_vehiclerequirements(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_vehiclerequirements(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_tms_trvr_vehicle_requirement;

    UPDATE dwh.F_VehicleRequirements t
    SET
        trvr_ouinstance                = s.trvr_ouinstance,
        trvr_tender_req_no             = s.trvr_tender_req_no,
        trvr_line_no                   = s.trvr_line_no,
        trvr_vehicle_type              = s.trvr_vehicle_type,
        trvr_no_of_vehicles            = s.trvr_no_of_vehicles,
        trvr_required_date_time        = s.trvr_required_date_time,
        trvr_pref_vehicle_model        = s.trvr_pref_vehicle_model,
        trvr_created_by                = s.trvr_created_by,
        trvr_created_date              = s.trvr_created_date,
        trvr_last_modified_by          = s.trvr_last_modified_by,
        trvr_last_modified_date        = s.trvr_last_modified_date,
        trvr_timestamp                 = s.trvr_timestamp,
        trvr_for_period                = s.trvr_for_period,
        trvr_period_uom                = s.trvr_period_uom,
        trvr_ref_doc_no                = s.trvr_ref_doc_no,
        trvr_ref_doc_type              = s.trvr_ref_doc_type,
        trvr_tender_to                 = s.trvr_tender_to,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_tms_trvr_vehicle_requirement s
    WHERE t.trvr_ouinstance = s.trvr_ouinstance
    AND t.trvr_tender_req_no = s.trvr_tender_req_no
    AND t.trvr_line_no = s.trvr_line_no;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_VehicleRequirements
    (
        trvr_ouinstance, trvr_tender_req_no, trvr_line_no, trvr_vehicle_type, trvr_no_of_vehicles, trvr_required_date_time, trvr_pref_vehicle_model, trvr_created_by, trvr_created_date, trvr_last_modified_by, trvr_last_modified_date, trvr_timestamp, trvr_for_period, trvr_period_uom, trvr_ref_doc_no, trvr_ref_doc_type, trvr_tender_to, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        s.trvr_ouinstance, s.trvr_tender_req_no, s.trvr_line_no, s.trvr_vehicle_type, s.trvr_no_of_vehicles, s.trvr_required_date_time, s.trvr_pref_vehicle_model, s.trvr_created_by, s.trvr_created_date, s.trvr_last_modified_by, s.trvr_last_modified_date, s.trvr_timestamp, s.trvr_for_period, s.trvr_period_uom, s.trvr_ref_doc_no, s.trvr_ref_doc_type, s.trvr_tender_to, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_tms_trvr_vehicle_requirement s
    LEFT JOIN dwh.F_VehicleRequirements t
    ON s.trvr_ouinstance = t.trvr_ouinstance
    AND s.trvr_tender_req_no = t.trvr_tender_req_no
    AND s.trvr_line_no = t.trvr_line_no
    WHERE t.trvr_ouinstance IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;

    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_tms_trvr_vehicle_requirement
    (
        trvr_ouinstance, trvr_tender_req_no, trvr_line_no, trvr_vehicle_type, trvr_no_of_vehicles, trvr_required_date_time, trvr_pref_vehicle_model, trvr_created_by, trvr_created_date, trvr_last_modified_by, trvr_last_modified_date, trvr_timestamp, trvr_for_period, trvr_period_uom, trvr_ref_doc_no, trvr_ref_doc_type, trvr_tender_to, etlcreateddatetime
    )
    SELECT
        trvr_ouinstance, trvr_tender_req_no, trvr_line_no, trvr_vehicle_type, trvr_no_of_vehicles, trvr_required_date_time, trvr_pref_vehicle_model, trvr_created_by, trvr_created_date, trvr_last_modified_by, trvr_last_modified_date, trvr_timestamp, trvr_for_period, trvr_period_uom, trvr_ref_doc_no, trvr_ref_doc_type, trvr_tender_to, etlcreateddatetime
    FROM stg.stg_tms_trvr_vehicle_requirement;
    
    END IF;
    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_vehiclerequirements(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_wavedetail(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_wavedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_depsource VARCHAR(100);

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag,h.depsource
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag,p_depsource
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

	IF EXISTS(SELECT 1 FROM ods.controlheader WHERE sourceid = p_depsource AND status = 'Completed' 
					AND CAST(COALESCE(lastupdateddate,createddate) AS DATE) >= NOW()::DATE)
	THEN

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_wave_dtl;

    UPDATE dwh.f_waveDetail t
    SET
	    wave_hdr_key                   = fh.wave_hdr_key,
		wave_loc_key				   = COALESCE(l.loc_key,-1),
		wave_item_key				   = COALESCE(it.itm_hdr_key,-1),
		wave_cust_key				   = COALESCE(c.customer_key,-1),
        wave_so_no                     = s.wms_wave_so_no,
        wave_so_sr_no                  = s.wms_wave_so_sr_no,
        wave_so_sch_no                 = s.wms_wave_so_sch_no,
        wave_item_code                 = s.wms_wave_item_code,
        wave_qty                       = s.wms_wave_qty,
        wave_line_status               = s.wms_wave_line_status,
        wave_outbound_no               = s.wms_wave_outbound_no,
        wave_customer_code             = s.wms_wave_customer_code,
        wave_customer_item_code        = s.wms_wave_customer_item_code,
        etlactiveind                   = 1,
        etljobname                     = p_etljobname,
        envsourcecd                    = p_envsourcecd,
        datasourcecd                   = p_datasourcecd,
        etlupdatedatetime              = NOW()
    FROM stg.stg_wms_wave_dtl s
	INNER JOIN 	dwh.f_waveheader fh 
		ON  s.wms_wave_ou 				= fh.wave_ou 
		AND s.wms_wave_loc_code			= fh.wave_loc_code 
		AND s.wms_wave_no				= fh.wave_no
	LEFT JOIN dwh.d_location L 		
		ON s.wms_wave_loc_code	 			= L.loc_code 
        AND s.wms_wave_ou	        		= L.loc_ou
	LEFT JOIN dwh.d_itemheader it 			
		ON s.wms_wave_item_code 			= it.itm_code
        AND s.wms_wave_ou	        		= it.itm_ou
	LEFT JOIN dwh.d_customer c
	    ON s.wms_wave_customer_code         = c.customer_id
		AND s.wms_wave_ou	        		= c.customer_ou
    WHERE t.wave_ou                     = s.wms_wave_ou
	 AND  t.wave_loc_code               = s.wms_wave_loc_code
	 AND  t.wave_no                     = s.wms_wave_no
	 AND  t.wave_lineno					= s.wms_wave_lineno
	 AND  t.wave_hdr_key                = fh.wave_hdr_key;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.f_waveDetail
    (
        wave_hdr_key,wave_loc_key,wave_item_key,wave_cust_key,wave_loc_code,wave_no,wave_ou,
		wave_lineno, wave_so_no, wave_so_sr_no, wave_so_sch_no, wave_item_code, wave_qty, wave_line_status, wave_outbound_no, wave_customer_code, wave_customer_item_code, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
	    fh.wave_hdr_key,COALESCE(l.loc_key,-1),COALESCE(it.itm_hdr_key,-1),COALESCE(c.customer_key,-1),s.wms_wave_loc_code,s.wms_wave_no,s.wms_wave_ou,
        s.wms_wave_lineno, s.wms_wave_so_no, s.wms_wave_so_sr_no, s.wms_wave_so_sch_no, s.wms_wave_item_code, s.wms_wave_qty, s.wms_wave_line_status, s.wms_wave_outbound_no, s.wms_wave_customer_code, s.wms_wave_customer_item_code, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_wave_dtl s
	INNER JOIN 	dwh.f_waveheader fh 
		ON  s.wms_wave_ou 					= fh.wave_ou 
		AND s.wms_wave_loc_code 			= fh.wave_loc_code 
		AND s.wms_wave_no 					= fh.wave_no
	LEFT JOIN dwh.d_location L 		
		ON s.wms_wave_loc_code	 			= L.loc_code 
        AND s.wms_wave_ou	        		= L.loc_ou
	LEFT JOIN dwh.d_itemheader it 			
		ON s.wms_wave_item_code 			= it.itm_code
        AND s.wms_wave_ou	        		= it.itm_ou
	LEFT JOIN dwh.d_customer c
	    ON s.wms_wave_customer_code         = c.customer_id
		AND s.wms_wave_ou	        		= c.customer_ou
    LEFT JOIN dwh.f_waveDetail t
    ON    s.wms_wave_lineno             = t.wave_lineno
	 AND  s.wms_wave_ou                 = t.wave_ou 
	 AND  s.wms_wave_loc_code           = t.wave_loc_code
	 AND  s.wms_wave_no                 = t.wave_no
	 AND  fh.wave_hdr_key               = t.wave_hdr_key
    WHERE t.wave_no IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_wave_dtl
    (
	    wms_wave_loc_code,wms_wave_no,wms_wave_ou,
        wms_wave_lineno, wms_wave_so_no, wms_wave_so_sr_no, wms_wave_so_sch_no, wms_wave_item_code, wms_wave_qty, wms_wave_line_status, wms_wave_outbound_no, wms_wave_customer_code, wms_wave_customer_item_code, wms_wave_tripplan_id, etlcreateddatetime
    )
    SELECT
	    wms_wave_loc_code,wms_wave_no,wms_wave_ou,
        wms_wave_lineno, wms_wave_so_no, wms_wave_so_sr_no, wms_wave_so_sch_no, wms_wave_item_code, wms_wave_qty, wms_wave_line_status, wms_wave_outbound_no, wms_wave_customer_code, wms_wave_customer_item_code, wms_wave_tripplan_id, etlcreateddatetime
    FROM stg.stg_wms_wave_dtl;
    END IF;

	ELSE	
		 p_errorid   := 0;
		 select 0 into inscnt;
       	 select 0 into updcnt;
		 select 0 into srccnt;	
		 
		 IF p_depsource IS NULL
		 THEN 
		 p_errordesc := 'The Dependent source cannot be NULL.';
		 ELSE
		 p_errordesc := 'The Dependent source '|| p_depsource || ' is not successfully executed. Please execute the source '|| p_depsource || ' then re-run the source '|| p_sourceid||'.';
		 END IF;
		 CALL ods.usp_etlerrorinsert(p_sourceid,p_targetobject,p_dataflowflag,p_batchid,p_taskname,'sp_ExceptionHandling',p_errorid,p_errordesc,NULL);
	END IF;	
	
	EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;	
END;
$$;


ALTER PROCEDURE dwh.usp_f_wavedetail(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_f_waveheader(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: dwh; Owner: proconnect
--

CREATE PROCEDURE dwh.usp_f_waveheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;

    p_rawstorageflag integer;

BEGIN
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename, h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname, p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_wms_wave_hdr;

    UPDATE dwh.f_waveHeader t
    SET
	    wave_loc_key			   = COALESCE(l.loc_key,-1),
        wave_date                  = s.wms_wave_date,
        wave_status                = s.wms_wave_status,
        wave_pln_start_date        = s.wms_wave_pln_start_date,
        wave_pln_end_date          = s.wms_wave_pln_end_date,
        wave_timestamp             = s.wms_wave_timestamp,
        wave_created_by            = s.wms_wave_created_by,
        wave_created_date          = s.wms_wave_created_date,
        wave_modified_by           = s.wms_wave_modified_by,
        wave_modified_date         = s.wms_wave_modified_date,
        wave_alloc_rule            = s.wms_wave_alloc_rule,
        wave_alloc_value           = s.wms_wave_alloc_value,
        wave_alloc_uom             = s.wms_wave_alloc_uom,
        wave_no_of_pickers         = s.wms_wave_no_of_pickers,
        wave_gen_flag              = s.wms_wave_gen_flag,
        wave_staging_id            = s.wms_wave_staging_id,
        wave_replenish_flag        = s.wms_wave_replenish_flag,
        consolidated_flg           = s.wms_consolidated_flg,
        etlactiveind               = 1,
        etljobname                 = p_etljobname,
        envsourcecd                = p_envsourcecd,
        datasourcecd               = p_datasourcecd,
        etlupdatedatetime          = NOW()
    FROM stg.stg_wms_wave_hdr s
	LEFT JOIN dwh.d_location l
	ON 	s.wms_wave_loc_code =	l.loc_code
	AND	s.wms_wave_ou       =	l.loc_ou
    WHERE t.wave_loc_code   =	s.wms_wave_loc_code
    AND t.wave_no			=	s.wms_wave_no
    AND t.wave_ou			=	s.wms_wave_ou;

    GET DIAGNOSTICS updcnt = ROW_COUNT;

    INSERT INTO dwh.F_WaveHeader
    (
        wave_loc_key,wave_loc_code, wave_no, wave_ou, wave_date, wave_status, wave_pln_start_date, wave_pln_end_date, wave_timestamp, wave_created_by, wave_created_date, wave_modified_by, wave_modified_date, wave_alloc_rule, wave_alloc_value, wave_alloc_uom, wave_no_of_pickers, wave_gen_flag, wave_staging_id, wave_replenish_flag, consolidated_flg, etlactiveind, etljobname, envsourcecd, datasourcecd, etlcreatedatetime
    )

    SELECT
        COALESCE(l.loc_key,-1),s.wms_wave_loc_code, s.wms_wave_no, s.wms_wave_ou, s.wms_wave_date, s.wms_wave_status, s.wms_wave_pln_start_date, s.wms_wave_pln_end_date, s.wms_wave_timestamp, s.wms_wave_created_by, s.wms_wave_created_date, s.wms_wave_modified_by, s.wms_wave_modified_date, s.wms_wave_alloc_rule, s.wms_wave_alloc_value, s.wms_wave_alloc_uom, s.wms_wave_no_of_pickers, s.wms_wave_gen_flag, s.wms_wave_staging_id, s.wms_wave_replenish_flag, s.wms_consolidated_flg, 1, p_etljobname, p_envsourcecd, p_datasourcecd, NOW()
    FROM stg.stg_wms_wave_hdr s
    LEFT JOIN dwh.f_waveHeader t
    ON s.wms_wave_loc_code = t.wave_loc_code
    AND s.wms_wave_no = t.wave_no
    AND s.wms_wave_ou = t.wave_ou
	LEFT JOIN dwh.d_location l
	ON 	s.wms_wave_loc_code =	l.loc_code
	AND	s.wms_wave_ou       =	l.loc_ou
    WHERE t.wave_loc_code IS NULL;

    GET DIAGNOSTICS inscnt = ROW_COUNT;
    IF p_rawstorageflag = 1
    THEN

    INSERT INTO raw.raw_wms_wave_hdr
    (
        wms_wave_loc_code, wms_wave_no, wms_wave_ou, wms_wave_date, wms_wave_status, wms_wave_pln_start_date, wms_wave_pln_end_date, wms_wave_timestamp, wms_wave_created_by, wms_wave_created_date, wms_wave_modified_by, wms_wave_modified_date, wms_wave_userdefined1, wms_wave_userdefined2, wms_wave_userdefined3, wms_wave_alloc_rule, wms_wave_alloc_value, wms_wave_alloc_uom, wms_wave_no_of_pickers, wms_wave_run_no, wms_wave_gen_flag, wms_wave_staging_id, wms_wave_replenish_flag, wms_consolidated_flg, etlcreateddatetime
    )
    SELECT
        wms_wave_loc_code, wms_wave_no, wms_wave_ou, wms_wave_date, wms_wave_status, wms_wave_pln_start_date, wms_wave_pln_end_date, wms_wave_timestamp, wms_wave_created_by, wms_wave_created_date, wms_wave_modified_by, wms_wave_modified_date, wms_wave_userdefined1, wms_wave_userdefined2, wms_wave_userdefined3, wms_wave_alloc_rule, wms_wave_alloc_value, wms_wave_alloc_uom, wms_wave_no_of_pickers, wms_wave_run_no, wms_wave_gen_flag, wms_wave_staging_id, wms_wave_replenish_flag, wms_consolidated_flg, etlcreateddatetime
    FROM stg.stg_wms_wave_hdr;
    END IF;

    EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE dwh.usp_f_waveheader(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: control_table_insertscript_generator(text, text, text); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.control_table_insertscript_generator(p_schema text, p_table text, p_where text) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $$
 DECLARE
     dumpquery_0 text;
     dumpquery_1 text;
     selquery text;
     selvalue text;
     valrec record;
     colrec record;
 BEGIN

     -- ------ --
     -- GLOBAL --
     --   build base INSERT
     --   build SELECT array[ ... ]
     dumpquery_0 := 'INSERT INTO ' ||  quote_ident(p_schema) || '.' || quote_ident(p_table) || '(';
     selquery    := 'SELECT array[';

     <<label0>>
     FOR colrec IN SELECT table_schema, table_name, column_name, data_type
                   FROM information_schema.columns
                   WHERE table_name = p_table and table_schema = p_schema
				   AND column_name <> 'id'
                   ORDER BY ordinal_position
     LOOP
         dumpquery_0 := dumpquery_0 || quote_ident(colrec.column_name) || ',';
         selquery    := selquery    || 'CAST(' || quote_ident(colrec.column_name) || ' AS TEXT),';
     END LOOP label0;

     dumpquery_0 := substring(dumpquery_0 ,1,length(dumpquery_0)-1) || ')';
     dumpquery_0 := dumpquery_0 || ' VALUES (';
     selquery    := substring(selquery    ,1,length(selquery)-1)    || '] AS MYARRAY';
     selquery    := selquery    || ' FROM ' ||quote_ident(p_schema)||'.'||quote_ident(p_table);
     selquery    := selquery    || ' WHERE sourceid ='''|| p_where||'''';
     -- GLOBAL --
     -- ------ --

     -- ----------- --
     -- SELECT LOOP --
     --   execute SELECT built and loop on each row
     <<label1>>
     FOR valrec IN  EXECUTE  selquery
     LOOP
         dumpquery_1 := '';
         IF not found THEN
             EXIT ;
         END IF;

         -- ----------- --
         -- LOOP ARRAY (EACH FIELDS) --
         <<label2>>
         FOREACH selvalue in ARRAY valrec.MYARRAY
         LOOP
             IF selvalue IS NULL
             THEN selvalue := 'NULL';
             ELSE selvalue := quote_literal(selvalue);
             END IF;
             dumpquery_1 := dumpquery_1 || selvalue || ',';
         END LOOP label2;
         dumpquery_1 := substring(dumpquery_1 ,1,length(dumpquery_1)-1) || ');';
         -- LOOP ARRAY (EACH FIELD) --
         -- ----------- --

         -- debug: RETURN NEXT dumpquery_0 || dumpquery_1 || ' --' || selquery;
         -- debug: RETURN NEXT selquery;
         RETURN NEXT dumpquery_0 || dumpquery_1;

     END LOOP label1 ;
     -- SELECT LOOP --
     -- ----------- --

 RETURN ;
 END
 
$$;


ALTER FUNCTION ods.control_table_insertscript_generator(p_schema text, p_table text, p_where text) OWNER TO proconnect;

--
-- Name: controldetailaudit(); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.controldetailaudit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
    INSERT INTO
        ods.controldetailaudit(id,sourcename,sourcetype,sourcedescription,sourceid,sourceobject,dataflowflag,
                              isreadyforexecution,loadtype,loadfrequency,flowstatus,targetname,targetschemaname,targetobject,targetprocedurename,
                              jobname,createddate,lastupdateddate,createduser,isapplicable,profilename,emailto,
                              archcondition,isdecomreq,archintvlcond,sourcequery,sourcecallingseq,etllastrundate,
                              latestbatchid,executiontype,intervaldays,eventname)
                    VALUES	(new.id, new.sourcename, new.sourcetype,	new.sourcedescription,new.sourceid,new.sourceobject,new.dataflowflag,
                             new.isreadyforexecution,	 new.loadtype, new.loadfrequency,new.flowstatus,new.targetname,new.targetschemaname,new.targetobject,new.targetprocedurename,
                             new.jobname,new.createddate,new.lastupdateddate,	new.createduser,new.isapplicable,new.profilename,new.emailto,
                             new.archcondition,	 new.isdecomreq,new.archintvlcond,	new.sourcequery,new.sourcecallingseq,new.etllastrundate,
                             new.latestbatchid,new.executiontype,new.intervaldays,tg_op);

      RETURN new;
      ELSIF (TG_OP = 'UPDATE') THEN
      INSERT INTO
        ods.controldetailaudit(id,sourcename,sourcetype,sourcedescription,sourceid,sourceobject,dataflowflag,
                              isreadyforexecution,loadtype,loadfrequency,flowstatus,targetname,targetschemaname,targetobject,targetprocedurename,
                              jobname,createddate,lastupdateddate,createduser,isapplicable,profilename,emailto,
                              archcondition,isdecomreq,archintvlcond,sourcequery,sourcecallingseq,etllastrundate,
                              latestbatchid,executiontype,intervaldays,eventname)
                    VALUES	(old.id, old.sourcename, old.sourcetype,	old.sourcedescription,old.sourceid,old.sourceobject,old.dataflowflag,
                             old.isreadyforexecution,	 old.loadtype, old.loadfrequency,old.flowstatus,old.targetname,old.targetschemaname,old.targetobject,old.targetprocedurename,
                             old.jobname,old.createddate,old.lastupdateddate,	old.createduser,old.isapplicable,old.profilename,old.emailto,
                             old.archcondition,	 old.isdecomreq,old.archintvlcond,	old.sourcequery,old.sourcecallingseq,old.etllastrundate,
                             old.latestbatchid,old.executiontype,old.intervaldays,tg_op);
     RETURN old;
     END IF;
END;
$$;


ALTER FUNCTION ods.controldetailaudit() OWNER TO proconnect;

--
-- Name: controlheaderaudit(); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.controlheaderaudit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
    INSERT INTO
        ods.controlheaderaudit(id,sourcename,sourcetype,sourcedescription,sourceid,connectionstr,adlscontainername,
                              dwobjectname,objecttype,dldirstructure,dlpurgeflag,dwpurgeflag,ftpcheck,status,createddate,
                              lastupdateddate,createduser,isapplicable,profilename,emailto,archcondition,depsource,
                              archintvlcond,sourcecallingseq,apiurl,apimethod,apiauthorizationtype,apiaccesstoken,
                              apipymodulename,apiqueryparameters,apirequestbody,envsourcecode,datasourcecode,sourcedelimiter,
                              rawstorageflag,sourcegroup,eventname)
                    VALUES	(new.id,			 new.sourcename, new.sourcetype,	new.sourcedescription,new.sourceid,new.connectionstr,new.adlscontainername,
                             new.dwobjectname,	 new.objecttype, new.dldirstructure,new.dlpurgeflag,new.dwpurgeflag,new.ftpcheck,new.status,new.createddate,
                             new.lastupdateddate,new.createduser,new.isapplicable,	new.profilename,new.emailto,new.archcondition,new.depsource,
                             new.archintvlcond,	 new.sourcecallingseq,new.apiurl,	new.apimethod,new.apiauthorizationtype,new.apiaccesstoken,
                             new.apipymodulename,new.apiqueryparameters,new.apirequestbody,new.envsourcecode,new.datasourcecode,new.sourcedelimiter,
                             new.rawstorageflag, new.sourcegroup,tg_op);

      RETURN new;
      ELSIF (TG_OP = 'UPDATE') THEN
          INSERT INTO
        ods.controlheaderaudit(id,sourcename,sourcetype,sourcedescription,sourceid,connectionstr,adlscontainername,
                              dwobjectname,objecttype,dldirstructure,dlpurgeflag,dwpurgeflag,ftpcheck,status,createddate,
                              lastupdateddate,createduser,isapplicable,profilename,emailto,archcondition,depsource,
                              archintvlcond,sourcecallingseq,apiurl,apimethod,apiauthorizationtype,apiaccesstoken,
                              apipymodulename,apiqueryparameters,apirequestbody,envsourcecode,datasourcecode,sourcedelimiter,
                              rawstorageflag,sourcegroup,eventname)
                    VALUES	(old.id,			 old.sourcename, old.sourcetype,	old.sourcedescription,old.sourceid,old.connectionstr,old.adlscontainername,
                             old.dwobjectname,	 old.objecttype, old.dldirstructure,old.dlpurgeflag,old.dwpurgeflag,old.ftpcheck,old.status,old.createddate,
                             old.lastupdateddate,old.createduser,old.isapplicable,	old.profilename,old.emailto,old.archcondition,old.depsource,
                             old.archintvlcond,	 old.sourcecallingseq,old.apiurl,	old.apimethod,old.apiauthorizationtype,old.apiaccesstoken,
                             old.apipymodulename,old.apiqueryparameters,old.apirequestbody,old.envsourcecode,old.datasourcecode,old.sourcedelimiter,
                             old.rawstorageflag, old.sourcegroup,tg_op);

      RETURN old;
      END IF;
END;
$$;


ALTER FUNCTION ods.controlheaderaudit() OWNER TO proconnect;

--
-- Name: ufn_controldtl_fetch(character varying); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.ufn_controldtl_fetch(p_sourceid character varying) RETURNS TABLE(v_sourcename character varying, v_sourcetype character varying, v_sourcedescription character varying, v_sourceid character varying, v_sourceobject character varying, v_dataflowflag character varying, v_isreadyforexecution boolean, v_loadtype character varying, v_loadfrequency character varying, v_flowstatus character varying, v_targetname character varying, v_targetschemaname character varying, v_targetobject character varying, v_targetprocedurename character varying, v_jobname character varying, v_createddate timestamp without time zone, v_lastupdateddate timestamp without time zone, v_createduser character varying, v_isapplicable boolean, v_profilename character varying, v_emailto character varying, v_archcondition character varying, v_isdecomreq integer, v_archintvlcond character varying, v_sourcequery character varying, v_sourcecallingseq integer, v_etllastrundate timestamp without time zone, v_latestbatchid integer)
    LANGUAGE plpgsql
    AS $$
BEGIN  
   
 IF p_SourceId IS NULL OR p_SourceId ='' THEN  
    p_SourceId := '%';
 END IF;  
 
  p_SourceId := REPLACE(TRIM(p_SourceId),'*','%');  
  
  RETURN QUERY SELECT SourceName,   Sourcetype,    SourceDescription,    SourceId,  
   SourceObject,  DataflowFlag,   CAST(IsReadyForExecution AS BOOLEAN),   LoadType,  
   LoadFrequency,  FlowStatus,    TargetName,      TargetSchemaName,  
   TargetObject,  TargetProcedureName, JobName,      CreatedDate,  
   LastUpdatedDate, CreatedUser,   CAST(Isapplicable AS BOOLEAN),     ProfileName,  
   EmailTo,   ArchCondition,   IsDecomReq,      ArchIntvlCond,   
   SourceQuery::varchar(10000),  SourceCallingSeq,  EtlLastRunDate,     LatestBatchId 
   
   FROM ods.ControlDetail WHERE SourceId ~~* p_SourceId   
    ORDER BY ID;
END;
$$;


ALTER FUNCTION ods.ufn_controldtl_fetch(p_sourceid character varying) OWNER TO proconnect;

--
-- Name: ufn_controldtl_upload(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.ufn_controldtl_upload(p_sourcename_d_in character varying, p_sourcetype_d_in character varying, p_sourcedescription_d_in character varying, p_sourceid_d_in character varying, p_sourceobject_d_in character varying, p_dataflowflag_d_in character varying, p_isreadyforexecution_d_in character varying, p_loadtype_d_in character varying, p_loadfrequency_d_in character varying, p_flowstatus_d_in character varying, p_targetname_d_in character varying, p_targetschemaname_d_in character varying, p_targetobject_d_in character varying, p_targetprocedurename_d_in character varying, p_jobname_d_in character varying, p_createddate_d_in character varying, p_lastupdateddate_d_in character varying, p_createduser_d_in character varying, p_isapplicable_d_in character varying, p_profilename_d_in character varying, p_emailto_d_in character varying, p_archcondition_d_in character varying, p_isdecomreq_d_in character varying, p_archintvlcond_d_in character varying, p_sourcequery_d_in character varying, p_sourcecallingseq_d_in character varying, p_etllastrundate_d_in character varying, p_latestbatchid_d_in character varying, p_flag_d_in character varying) RETURNS TABLE(p_validflag_out character varying, p_errormsg_out character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE v_IsReadyForExecution_D_in BOOLEAN;
        v_Isapplicable_D_in BOOLEAN;
		v_IsReadyForExecution_D_in_cvt INTEGER;
        v_Isapplicable_D_in_cvt INTEGER;
		v_IsDecomReq_D_in INTEGER;
		v_SourceCallingSeq_D_in INTEGER;
		v_LatestBatchId_D_in INTEGER;
		v_createddate_d_in TIMESTAMP;
		v_lastupdateddate_d_in TIMESTAMP;
		v_etllastrundate_d_in TIMESTAMP;
		
BEGIN  
  

   p_SourceName_D_in          := TRIM(p_SourceName_D_in);				p_Sourcetype_D_in  			:= TRIM(p_Sourcetype_D_in);   
   p_SourceDescription_D_in   := TRIM(p_SourceDescription_D_in);	  	p_SourceId_D_in   			:= TRIM(p_SourceId_D_in);     
   p_SourceObject_D_in        := TRIM(p_SourceObject_D_in);				p_DataflowFlag_D_in  		:= TRIM(p_DataflowFlag_D_in);   
   p_IsReadyForExecution_D_in := TRIM(p_IsReadyForExecution_D_in);		p_LoadType_D_in  			:= TRIM(p_LoadType_D_in);     
   p_LoadFrequency_D_in       := TRIM(p_LoadFrequency_D_in);			p_FlowStatus_D_in  			:= TRIM(p_FlowStatus_D_in);    
   p_TargetName_D_in          := TRIM(p_TargetName_D_in);				p_TargetSchemaName_D_in 	:= TRIM(p_TargetSchemaName_D_in);   
   p_TargetObject_D_in        := TRIM(p_TargetObject_D_in);				p_TargetProcedureName_D_in 	:= TRIM(p_TargetProcedureName_D_in);   
   p_JobName_D_in             := TRIM(p_JobName_D_in);					p_CreatedUser_D_in  		:= TRIM(p_CreatedUser_D_in);     
   p_Isapplicable_D_in        := TRIM(p_Isapplicable_D_in);				p_ProfileName_D_in  		:= TRIM(p_ProfileName_D_in);     
   p_EmailTo_D_in             := TRIM(p_EmailTo_D_in);					p_ArchCondition_D_in  		:= TRIM(p_ArchCondition_D_in);    
   p_IsDecomReq_D_in          := TRIM(p_IsDecomReq_D_in);				p_ArchIntvlCond_D_in  		:= TRIM(p_ArchIntvlCond_D_in);  
   p_SourceQuery_D_in         := TRIM(p_SourceQuery_D_in);				p_SourceCallingSeq_D_in 	:= TRIM(p_SourceCallingSeq_D_in);  
   p_EtlLastRunDate_D_in      := TRIM(p_EtlLastRunDate_D_in);			p_LatestBatchId_D_in  		:= TRIM(p_LatestBatchId_D_in);  
   p_Flag_D_in                := TRIM(p_Flag_D_in);  
  
  
   IF p_SourceName_D_in ='NULL' OR p_SourceName_D_in ='' THEN   
     p_SourceName_D_in := NULL;
   END IF;  
  
   IF p_Sourcetype_D_in ='NULL' OR p_Sourcetype_D_in ='' THEN   
     p_Sourcetype_D_in := NULL;
   END IF;  
  
   IF p_SourceDescription_D_in ='NULL' OR p_SourceDescription_D_in ='' THEN   
     p_SourceDescription_D_in :=NULL ;
   END IF;  
  
   IF p_SourceId_D_in ='NULL' OR p_SourceId_D_in ='' THEN  
    p_SourceId_D_in := NULL;
   END IF;  
  
   IF p_SourceObject_D_in ='NULL' OR p_SourceObject_D_in ='' THEN   
    p_SourceObject_D_in :=NULL ;
   END IF;  
  
   IF p_DataflowFlag_D_in ='NULL' OR p_DataflowFlag_D_in ='' THEN   
    p_DataflowFlag_D_in :=NULL ;
   END IF;  
  
   IF p_IsReadyForExecution_D_in ='NULL' OR p_IsReadyForExecution_D_in ='' THEN  
    p_IsReadyForExecution_D_in :=NULL ;
   END IF;  
  
   IF p_LoadType_D_in ='NULL' OR p_LoadType_D_in ='' THEN  
    p_LoadType_D_in := NULL;
   END IF;  
  
   IF p_LoadFrequency_D_in ='NULL' OR p_LoadFrequency_D_in ='' THEN 
    p_LoadFrequency_D_in := NULL;
   END IF;  
  
   IF p_FlowStatus_D_in ='NULL' OR p_FlowStatus_D_in ='' THEN   
    p_FlowStatus_D_in :=NULL ;
   END IF;  
  
   IF p_TargetSchemaName_D_in ='NULL' OR p_TargetSchemaName_D_in ='' THEN   
    p_TargetSchemaName_D_in :=NULL ;
   END IF;  
      
   IF p_TargetObject_D_in ='NULL' OR p_TargetObject_D_in ='' THEN   
    p_TargetObject_D_in :=NULL ;
   END IF;  
  
      
   IF p_TargetProcedureName_D_in ='NULL' OR p_TargetProcedureName_D_in ='' THEN  
    p_TargetProcedureName_D_in :=NULL ;
   END IF;  
      
  
   IF p_JobName_D_in ='NULL' OR p_JobName_D_in ='' THEN   
    p_JobName_D_in := NULL;
   END IF;  
  
   IF p_CreatedUser_D_in ='NULL' OR p_CreatedUser_D_in ='' THEN   
    p_CreatedUser_D_in := NULL;
   END IF;  
  
   IF p_Isapplicable_D_in ='NULL' OR p_Isapplicable_D_in ='' THEN   
    p_Isapplicable_D_in := NULL;
   END IF;  
  
   IF p_ProfileName_D_in ='NULL' OR p_ProfileName_D_in ='' THEN   
    p_ProfileName_D_in := NULL;
   END IF;  
  
   IF p_EmailTo_D_in ='NULL' OR p_EmailTo_D_in ='' THEN   
    p_EmailTo_D_in := NULL;
   END IF;  
  
   IF p_ArchCondition_D_in ='NULL' OR p_ArchCondition_D_in ='' THEN   
    p_ArchCondition_D_in := NULL;
   END IF;  
  
   IF p_IsDecomReq_D_in ='NULL' OR p_IsDecomReq_D_in ='' THEN   
    p_IsDecomReq_D_in := NULL;
   END IF;  
  
   IF p_ArchIntvlCond_D_in ='NULL' OR p_ArchIntvlCond_D_in ='' THEN   
    p_ArchIntvlCond_D_in := NULL;
   END IF;  
  
   IF p_SourceQuery_D_in ='NULL' OR p_SourceQuery_D_in ='' THEN   
    p_SourceQuery_D_in := NULL;
   END IF;  
      
   IF p_SourceCallingSeq_D_in ='NULL' OR p_SourceCallingSeq_D_in ='' THEN   
    p_SourceCallingSeq_D_in := NULL;
   END IF;  
   
   IF p_createddate_d_in ='NULL' OR p_createddate_d_in ='' THEN   
    p_createddate_d_in := NULL;
   END IF;  
   
   IF p_lastupdateddate_d_in ='NULL' OR p_lastupdateddate_d_in ='' THEN   
    p_lastupdateddate_d_in := NULL;
   END IF;  
      
   IF p_EtlLastRunDate_D_in ='NULL' OR p_EtlLastRunDate_D_in ='' THEN   
    p_EtlLastRunDate_D_in := NULL;
   END IF;  
      
   IF p_LatestBatchId_D_in ='NULL' OR p_LatestBatchId_D_in ='' THEN   
    p_LatestBatchId_D_in := NULL;
   END IF;  
      
   IF p_Flag_D_in ='NULL' OR p_Flag_D_in ='' THEN   
    p_Flag_D_in := NULL;
   END IF; 
   
   IF p_IsReadyForExecution_D_in = 'true'
   then v_IsReadyForExecution_D_in = 1;
   else v_IsReadyForExecution_D_in = 0;
   end If;
   
   IF p_Isapplicable_D_in = 'true'
   then v_Isapplicable_D_in = 1;
   else v_Isapplicable_D_in = 0;
   end If;
	  
   	v_IsReadyForExecution_D_in 	:= CAST(p_IsReadyForExecution_D_in AS BOOLEAN);
    v_Isapplicable_D_in        	:= CAST(p_Isapplicable_D_in AS BOOLEAN);
	v_IsDecomReq_D_in          	:= CAST(p_IsDecomReq_D_in AS INTEGER);
	v_SourceCallingSeq_D_in    	:= CAST(p_SourceCallingSeq_D_in AS INTEGER) ;
	v_LatestBatchId_D_in       	:= CAST(p_LatestBatchId_D_in AS INTEGER) ;
	p_createddate_d_in			:= TO_TIMESTAMP(p_createddate_d_in,'DD-MM-YYYY HH24:MI:SS');
	p_lastupdateddate_d_in		:= TO_TIMESTAMP(p_lastupdateddate_d_in,'DD-MM-YYYY HH24:MI:SS');
	p_etllastrundate_d_in		:= TO_TIMESTAMP(p_etllastrundate_d_in,'DD-MM-YYYY HH24:MI:SS');
	v_createddate_d_in			:= COALESCE(CAST(p_createddate_d_in AS TIMESTAMP),NOW());
	v_lastupdateddate_d_in		:= COALESCE(CAST(p_lastupdateddate_d_in AS TIMESTAMP),NOW());
	v_etllastrundate_d_in		:= CAST(p_etllastrundate_d_in AS TIMESTAMP);
	
	IF v_IsReadyForExecution_D_in = 'true'
   then v_IsReadyForExecution_D_in_cvt = 1;
   else v_IsReadyForExecution_D_in_cvt = 0;
   end If;
   
   IF v_Isapplicable_D_in = 'true'
   then v_Isapplicable_D_in_cvt = 1;
   else v_Isapplicable_D_in_cvt = 0;
   end If;
	
	
    
 IF p_Flag_D_in = 'Insert'  
 THEN  
  IF EXISTS(SELECT 'x' FROM ods.ControlDetail   
     WHERE SourceId  	= p_SourceId_D_in  
     AND  TargetName  	= p_TargetName_D_in  
     AND  DataflowFlag	= p_DataflowFlag_D_in  
     AND  TargetObject 	= p_TargetObject_D_in)  
  THEN  
   
   p_ValidFlag_out := 'No';    
   p_ErrorMsg_out :='Alert: Record already exist in the Control Detail table for this Source ID; Change flag to "Update"';   
   RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
  ELSE  
   
   INSERT INTO ods.ControlDetail  
   (  
    SourceName,   		Sourcetype,     		SourceDescription,  SourceId,    			SourceObject,  
    DataflowFlag,  		IsReadyForExecution,  	LoadType,     		LoadFrequency,   		FlowStatus,  
    TargetName,  		TargetSchemaName,   	TargetObject,    	TargetProcedureName, 	JobName,  
    CreatedDate,  		LastUpdatedDate,   		CreatedUser,    	Isapplicable,   		ProfileName,      
    EmailTo,   			ArchCondition,    		IsDecomReq,     	ArchIntvlCond,   		SourceQuery,  
    SourceCallingSeq, 	LatestBatchId,    		EtlLastRunDate  
   )  
   SELECT  
   p_SourceName_D_in,  		p_Sourcetype_D_in,   		p_SourceDescription_D_in, 	p_SourceId_D_in,    		p_SourceObject_D_in,    
   p_DataflowFlag_D_in, 	v_IsReadyForExecution_D_in_cvt, p_LoadType_D_in,    		p_LoadFrequency_D_in,  		p_FlowStatus_D_in,    
   p_TargetName_D_in,  		p_TargetSchemaName_D_in,  	p_TargetObject_D_in,  	 	p_TargetProcedureName_D_in, p_JobName_D_in,      
   NOW(),    				NOW(),     					p_CreatedUser_D_in,   		v_Isapplicable_D_in_cvt,   		p_ProfileName_D_in,     
   p_EmailTo_D_in,   		p_ArchCondition_D_in,  		v_IsDecomReq_D_in,   		p_ArchIntvlCond_D_in,  		p_SourceQuery_D_in,  
   v_SourceCallingSeq_D_in, 0,       					v_EtlLastRunDate_D_in; 
  
   
   p_ValidFlag_out := 'Yes';   
   p_ErrorMsg_out :='Info: Record inserted successfully';   
   RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;     
  END IF;  
 ELSE IF p_Flag_D_in = 'Update'  
 THEN  
  IF EXISTS( SELECT 'x' FROM ods.ControlDetail   
     WHERE SourceId  	= p_SourceId_D_in  
     AND  TargetName  	= p_TargetName_D_in  
     AND  DataflowFlag 	= p_DataflowFlag_D_in  
     AND  TargetObject 	= p_TargetObject_D_in  
       
  )  
  THEN  
   UPDATE ods.ControlDetail  
   SET  
	SourceName    			= p_SourceName_D_in,    		Sourcetype  		= p_Sourcetype_D_in,     
    SourceDescription  		= p_SourceDescription_D_in,  	SourceObject 		= p_SourceObject_D_in,  
    IsReadyForExecution  	= v_IsReadyForExecution_D_in_cvt, 	LoadType  			= p_LoadType_D_in,      
    LoadFrequency   		= p_LoadFrequency_D_in,   		FlowStatus  		= p_FlowStatus_D_in,      
    TargetSchemaName  		= p_TargetSchemaName_D_in,  	TargetObject 		= p_TargetObject_D_in,  
    TargetProcedureName  	= p_TargetProcedureName_D_in, 	JobName   			= p_JobName_D_in,  
    LastUpdatedDate   		= NOW(),     					Isapplicable 		= v_Isapplicable_D_in_cvt,    
    ProfileName   	 		= p_ProfileName_D_in,   		EmailTo   			= p_EmailTo_D_in,  
    ArchCondition   		= p_ArchCondition_D_in,   		IsDecomReq  		= v_IsDecomReq_D_in,      
    ArchIntvlCond   		= p_ArchIntvlCond_D_in,   		SourceQuery  		= p_SourceQuery_D_in,  
    EtlLastRunDate  	 	= v_EtlLastRunDate_D_in,   		SourceCallingSeq  	= v_SourceCallingSeq_D_in  
   WHERE SourceId    		= p_SourceId_D_in  
   AND  TargetName    		= p_TargetName_D_in  
   AND  DataflowFlag   		= p_DataflowFlag_D_in  
   AND  TargetObject   		= p_TargetObject_D_in;  
     
        
   
   p_ValidFlag_out := 'Yes';    
   p_ErrorMsg_out :='Info: Record Updated successfully';   
   RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
  ELSE  
   
   p_ValidFlag_out := 'No';  
   p_ErrorMsg_out :='Alert: Record not exist in the Control Detail table for this Source ID; verify and change the flag to "Insert"';   
   RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
  END IF;  
 ELSE  
   
   p_ValidFlag_out := 'NA';    
   p_ErrorMsg_out :='Info: Record not considered for processing';   
   RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
 END IF;
 END IF;  
  
  
END
$$;


ALTER FUNCTION ods.ufn_controldtl_upload(p_sourcename_d_in character varying, p_sourcetype_d_in character varying, p_sourcedescription_d_in character varying, p_sourceid_d_in character varying, p_sourceobject_d_in character varying, p_dataflowflag_d_in character varying, p_isreadyforexecution_d_in character varying, p_loadtype_d_in character varying, p_loadfrequency_d_in character varying, p_flowstatus_d_in character varying, p_targetname_d_in character varying, p_targetschemaname_d_in character varying, p_targetobject_d_in character varying, p_targetprocedurename_d_in character varying, p_jobname_d_in character varying, p_createddate_d_in character varying, p_lastupdateddate_d_in character varying, p_createduser_d_in character varying, p_isapplicable_d_in character varying, p_profilename_d_in character varying, p_emailto_d_in character varying, p_archcondition_d_in character varying, p_isdecomreq_d_in character varying, p_archintvlcond_d_in character varying, p_sourcequery_d_in character varying, p_sourcecallingseq_d_in character varying, p_etllastrundate_d_in character varying, p_latestbatchid_d_in character varying, p_flag_d_in character varying) OWNER TO proconnect;

--
-- Name: ufn_controlhdr_fetch(character varying); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.ufn_controlhdr_fetch(p_sourceid character varying) RETURNS TABLE(v_sourcename character varying, v_sourcetype character varying, v_sourcedescription character varying, v_sourceid character varying, v_connectionstr character varying, v_adlscontainername character varying, v_dwobjectname character varying, v_objecttype character varying, v_dldirstructure character varying, v_dlpurgeflag character, v_dwpurgeflag character, v_ftpcheck integer, v_status character varying, v_createddate timestamp without time zone, v_lastupdateddate timestamp without time zone, v_createduser character varying, v_isapplicable boolean, v_profilename character varying, v_emailto character varying, v_archcondition character varying, v_depsource character varying, v_archintvlcond character varying, v_sourcecallingseq integer, v_apiurl character varying, v_apimethod character varying, v_apiauthorizationtype character varying, v_apiaccesstoken character varying, v_apipymodulename character varying, v_apiqueryparameters character varying, v_apirequestbody character varying, v_envsourcecode character varying, v_datasourcecode character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN

    IF p_SourceId IS NULL OR p_SourceId ='' THEN    
        p_SourceId := '%';
    END IF;      

    p_SourceId := REPLACE(TRIM(p_SourceId),'*','%');    
    
    RETURN QUERY SELECT 
        SourceName,   Sourcetype,    SourceDescription,    SourceId,    
        ConnectionStr,  ADLSContainerName,  DWObjectName,     ObjectType,    
        DLDirStructure,  DLPurgeFlag,   DWPurgeFlag,     FTPCheck,    
        Status,    CreatedDate,   LastUpdatedDate,    CreatedUser,    
        cast(Isapplicable as boolean) ,  ProfileName,   EmailTo,      ArchCondition,    
        DepSource,   ArchIntvlCond,   SourceCallingSeq,    APIUrl,        
        APIMethod,   APIAuthorizationType, APIAccessToken,     APIPyModuleName,    
        APIQueryParameters, APIRequestBody  , EnvSourceCode,  
        DataSourceCode      
    FROM ods.ControlHeader WHERE SourceId ~~* p_SourceId   
    ORDER BY ID;
END;
$$;


ALTER FUNCTION ods.ufn_controlhdr_fetch(p_sourceid character varying) OWNER TO proconnect;

--
-- Name: ufn_controlhdr_upload(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.ufn_controlhdr_upload(p_sourcename_h_in character varying, p_sourcetype_h_in character varying, p_sourcedescription_h_in character varying, p_sourceid_h_in character varying, p_connectionstr_h_in character varying, p_adlscontainername_h_in character varying, p_dwobjectname_h_in character varying, p_objecttype_h_in character varying, p_dldirstructure_h_in character varying, p_dlpurgeflag_h_in character varying, p_dwpurgeflag_h_in character varying, p_ftpcheck_h_in character varying, p_status_h_in character varying, p_createddate_h_in character varying, p_lastupdateddate_h_in character varying, p_createduser_h_in character varying, p_isapplicable_h_in character varying, p_profilename_h_in character varying, p_emailto_h_in character varying, p_archcondition_h_in character varying, p_dep_source_in character varying, p_archintvlcond_h_in character varying, p_sourcecallingseq_h_in character varying, p_apiurl_in character varying, p_apimethod_in character varying, p_apiauthorizationtype_in character varying, p_apiaccesstoken_in character varying, p_apipymodulename_in character varying, p_apiqueryparameters_in character varying, p_apirequestbody_in character varying, p_envsourcecode_h_in character varying, p_datasourcecode_h_in character varying, p_flag_h_in character varying) RETURNS TABLE(p_validflag_out character varying, p_errormsg_out character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE v_FTPCheck_H_in INTEGER;
		v_Isapplicable_H_in BOOLEAN;
		v_SourceCallingSeq_H_in INTEGER;
		v_Isapplicable_H_in_cvt INTEGER;
BEGIN
 
	p_SourceName_H_in  			:= TRIM(p_SourceName_H_in);             p_Sourcetype_H_in  			:= TRIM(p_Sourcetype_H_in);   
	p_SourceDescription_H_in	:= TRIM(p_SourceDescription_H_in); 		p_SourceId_H_in   			:= TRIM(p_SourceId_H_in);     
	p_ConnectionStr_H_in  		:= TRIM(p_ConnectionStr_H_in);     		p_ADLSContainerName_H_in 	:= TRIM(p_ADLSContainerName_H_in);   
	p_DWObjectName_H_in  		:= TRIM(p_DWObjectName_H_in);      		p_ObjectType_H_in  			:= TRIM(p_ObjectType_H_in);     
	p_DLDirStructure_H_in 		:= TRIM(p_DLDirStructure_H_in);  		p_DLPurgeFlag_H_in  		:= TRIM(p_DLPurgeFlag_H_in);    
	p_DWPurgeFlag_H_in  		:= TRIM(p_DWPurgeFlag_H_in);   			p_FTPCheck_H_in   			:= TRIM(p_FTPCheck_H_in);    
	p_Status_H_in   			:= TRIM(p_Status_H_in);    				p_CreatedUser_H_in  		:= TRIM(p_CreatedUser_H_in);     
	p_Isapplicable_H_in  		:= TRIM(p_Isapplicable_H_in);   		p_ProfileName_H_in  		:= TRIM(p_ProfileName_H_in);     
	p_EmailTo_H_in   			:= TRIM(p_EmailTo_H_in);    			p_ArchCondition_H_in  		:= TRIM(p_ArchCondition_H_in);    
	p_Dep_Source_in   			:= TRIM(p_Dep_Source_in);    			p_ArchIntvlCond_H_in  		:= TRIM(p_ArchIntvlCond_H_in);  
	p_SourceCallingSeq_H_in 	:= TRIM(p_SourceCallingSeq_H_in);  	  	p_APIUrl_in    				:= TRIM(p_APIUrl_in);  
	p_APIMethod_in   			:= TRIM(p_APIMethod_in);    			p_APIAuthorizationType_in 	:= TRIM(p_APIAuthorizationType_in);  
	p_APIAccessToken_in  		:= TRIM(p_APIAccessToken_in);   		p_APIPyModuleName_in  		:= TRIM(p_APIPyModuleName_in);  
	p_APIQueryParameters_in 	:= TRIM(p_APIQueryParameters_in);  		p_APIRequestBody_in  		:= TRIM(p_APIRequestBody_in);  
	p_EnvSourceCode_H_in  		:= TRIM(p_EnvSourceCode_H_in);   		p_DataSourceCode_H_in  		:= TRIM(p_DataSourceCode_H_in);  
  
  
	IF p_SourceName_H_in ='NULL' OR p_SourceName_H_in ='' THEN   
		p_SourceName_H_in := NULL;
	END IF;  
  
	IF p_Sourcetype_H_in ='NULL' OR p_Sourcetype_H_in ='' THEN   
		p_Sourcetype_H_in := NULL;
	END IF;  
  
	IF p_SourceDescription_H_in ='NULL' OR p_SourceDescription_H_in ='' THEN     
		p_SourceDescription_H_in := NULL;
	END IF;  
  
	IF p_SourceId_H_in ='NULL' OR p_SourceId_H_in ='' THEN     
		p_SourceId_H_in := NULL;
	END IF;  
  
	IF p_ConnectionStr_H_in ='NULL' OR p_ConnectionStr_H_in ='' THEN     
		p_ConnectionStr_H_in := NULL;
	END IF;  
  
	IF p_ADLSContainerName_H_in ='NULL' OR p_ADLSContainerName_H_in ='' THEN      
		p_ADLSContainerName_H_in := NULL;
	END IF;  
  
	IF p_DWObjectName_H_in ='NULL' OR p_DWObjectName_H_in ='' THEN    
		p_DWObjectName_H_in := NULL;
	END IF;  
  
	IF p_ObjectType_H_in ='NULL' OR p_ObjectType_H_in ='' THEN    
		p_ObjectType_H_in := NULL;
	END IF;  
  
	IF p_DLDirStructure_H_in ='NULL' OR p_DLDirStructure_H_in ='' THEN 
		p_DLDirStructure_H_in := NULL;
	END IF;  
  
	IF p_DLPurgeFlag_H_in ='NULL' OR p_DLPurgeFlag_H_in ='' THEN    
		p_DLPurgeFlag_H_in := NULL;
	END IF;  
  
	IF p_FTPCheck_H_in ='NULL' OR p_FTPCheck_H_in ='' THEN     
		p_FTPCheck_H_in := NULL;
	END IF;
  
	IF p_Status_H_in ='NULL' OR p_Status_H_in ='' THEN    
		p_Status_H_in := NULL;
	END IF;  
  
	IF p_CreatedUser_H_in ='NULL' OR p_CreatedUser_H_in ='' THEN      
		p_CreatedUser_H_in := NULL;
	END IF;  
  
	IF p_Isapplicable_H_in ='NULL' OR p_Isapplicable_H_in ='' THEN     
		p_Isapplicable_H_in := NULL;
	END IF;
		 
	IF p_ProfileName_H_in ='NULL' OR p_ProfileName_H_in ='' THEN     
		p_ProfileName_H_in := NULL;
	END IF;  
  
	IF p_EmailTo_H_in ='NULL' OR p_EmailTo_H_in ='' THEN      
		p_EmailTo_H_in := NULL;
	END IF;  
  
	IF p_ArchCondition_H_in ='NULL' OR p_ArchCondition_H_in ='' THEN      
		p_ArchCondition_H_in := NULL;
	END IF;  
  
	IF p_Dep_Source_in ='NULL' OR p_Dep_Source_in ='' THEN      
		p_Dep_Source_in := NULL;
	END IF;  
  
	IF p_ArchIntvlCond_H_in ='NULL' OR p_ArchIntvlCond_H_in ='' THEN      
		p_ArchIntvlCond_H_in := NULL;
	END IF;  
  
	IF p_SourceCallingSeq_H_in ='NULL' OR p_SourceCallingSeq_H_in ='' THEN       
		p_SourceCallingSeq_H_in := NULL;
	END IF;
  
	IF p_APIUrl_in ='NULL' OR p_APIUrl_in ='' THEN      
		p_APIUrl_in := NULL;
	END IF;  
  
	IF p_APIMethod_in ='NULL' OR p_APIMethod_in ='' THEN      
		p_APIMethod_in := NULL;
	END IF;  
  
	IF p_APIAuthorizationType_in ='NULL' OR p_APIAuthorizationType_in ='' THEN      
		p_APIAuthorizationType_in := NULL;
	END IF;  
  
	IF p_APIAccessToken_in ='NULL' OR p_APIAccessToken_in ='' THEN      
		p_APIAccessToken_in := NULL;
	END IF;  
  
	IF p_APIPyModuleName_in ='NULL' OR p_APIPyModuleName_in ='' THEN      
		p_APIPyModuleName_in := NULL;
	END IF;  
  
	IF p_APIQueryParameters_in ='NULL' OR p_APIQueryParameters_in ='' THEN     
		p_APIQueryParameters_in := NULL;
	END IF;  
  
	IF p_APIRequestBody_in ='NULL' OR p_APIRequestBody_in ='' THEN      
		p_APIRequestBody_in := NULL;
	END IF;  
   
	IF p_EnvSourceCode_H_in ='NULL' OR p_EnvSourceCode_H_in ='' THEN      
		p_EnvSourceCode_H_in := NULL;
	END IF;  
  
	IF p_DataSourceCode_H_in ='NULL' OR p_DataSourceCode_H_in ='' THEN   
		p_DataSourceCode_H_in := NULL;
	END IF;  
	
	v_FTPCheck_H_in			:= CAST(p_FTPCheck_H_in AS INTEGER);
	v_Isapplicable_H_in		:= CAST(p_Isapplicable_H_in AS Boolean);
	v_SourceCallingSeq_H_in := CAST(p_SourceCallingSeq_H_in AS INTEGER);
	
	IF v_Isapplicable_H_in = 'true'
	THEN v_Isapplicable_H_in_cvt = 1;
	ELSE
	v_Isapplicable_H_in_cvt = 0;
	END IF;
  
	IF p_Flag_H_in = 'Insert' THEN  
		IF EXISTS(SELECT 'x' FROM ods.ControlHeader WHERE SourceId  = p_SourceId_H_in) THEN  
			p_ValidFlag_out := 'No';    
			p_ErrorMsg_out :='Alert: Record already exist in the Control table for this Source ID, Change flag to "Update"';   
			RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
		ELSE     
			INSERT INTO ods.ControlHeader  
			(  
				SourceName,    			Sourcetype,   	SourceDescription,  SourceId,   		ConnectionStr,  
				ADLSContainerName,  	DWObjectName,  	ObjectType,     	DLDirStructure,  	DLPurgeFlag,  
				DWPurgeFlag,   			FTPCheck,   	Status,      		CreatedDate,  		LastUpdatedDate,  
				CreatedUser,   			Isapplicable,  	ProfileName,    	EmailTo,   			ArchCondition,  
				DepSource,    			ArchIntvlCond,  SourceCallingSeq,   APIUrl,    			APIMethod,  
				APIAuthorizationType, 	APIAccessToken, APIPyModuleName,   	APIQueryParameters, APIRequestBody,  
				EnvSourceCode,   		DataSourceCode  
			)  
			SELECT  
				p_SourceName_H_in,   		p_Sourcetype_H_in, 		p_SourceDescription_H_in, 	p_SourceId_H_in,   		p_ConnectionStr_H_in,    
				p_ADLSContainerName_H_in, 	p_DWObjectName_H_in, 	p_ObjectType_H_in,   		p_DLDirStructure_H_in, 	p_DLPurgeFlag_H_in,    
				p_DWPurgeFlag_H_in,   		v_FTPCheck_H_in,  		p_Status_H_in,    			NOW(),    				NOW(),  
				p_CreatedUser_H_in,   		v_Isapplicable_H_in_cvt, 	p_ProfileName_H_in,   		p_EmailTo_H_in,   		p_ArchCondition_H_in,    
				p_Dep_Source_in,    		p_ArchIntvlCond_H_in,	v_SourceCallingSeq_H_in,  	p_APIUrl_in,    		p_APIMethod_in,  
				p_APIAuthorizationType_in, 	p_APIAccessToken_in, 	p_APIPyModuleName_in,  		p_APIQueryParameters_in,p_APIRequestBody_in,  
				p_EnvSourceCode_H_in,  		p_DataSourceCode_H_in;  
  
			p_ValidFlag_out := 'Yes';  
			p_ErrorMsg_out :='Info: Record inserted successfully';   
			RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;       
		END IF;  

		ELSE IF p_Flag_H_in = 'Update' THEN  
			IF EXISTS(SELECT 'x' FROM ods.ControlHeader WHERE SourceId  = p_SourceId_H_in)  
			THEN  
			UPDATE ods.ControlHeader  
			SET  
				SourceName				= p_SourceName_H_in,			Sourcetype			= p_Sourcetype_H_in,     
				SourceDescription		= p_SourceDescription_H_in,		ConnectionStr		= p_ConnectionStr_H_in,  
				ADLSContainerName		= p_ADLSContainerName_H_in,		DWObjectName		= p_DWObjectName_H_in,  
				ObjectType				= p_ObjectType_H_in,			DLDirStructure		= p_DLDirStructure_H_in,  
				DLPurgeFlag				= p_DLPurgeFlag_H_in,			DWPurgeFlag			= p_DWPurgeFlag_H_in,  
				FTPCheck				= v_FTPCheck_H_in,				Status				= p_Status_H_in,  
				LastUpdatedDate			= NOW(),						Isapplicable		= v_Isapplicable_H_in_cvt,    
				ProfileName				= p_ProfileName_H_in,			EmailTo				= p_EmailTo_H_in,  
				ArchCondition			= p_ArchCondition_H_in,			DepSource			= p_Dep_Source_in,      
				ArchIntvlCond			= p_ArchIntvlCond_H_in,			SourceCallingSeq	= v_SourceCallingSeq_H_in,  
				APIUrl					= p_APIUrl_in,					APIMethod			= p_APIMethod_in,  
				APIAuthorizationType	= p_APIAuthorizationType_in,	APIAccessToken		= p_APIAccessToken_in,   
				APIPyModuleName			= p_APIPyModuleName_in,			APIQueryParameters	= p_APIQueryParameters_in,  
				APIRequestBody			= p_APIRequestBody_in,			EnvSourceCode		= p_EnvSourceCode_H_in,  
				DataSourceCode			= p_DataSourceCode_H_in  
			WHERE SourceId				= p_SourceId_H_in;
        
			p_ValidFlag_out := 'Yes';  
			p_ErrorMsg_out :='Info: Record Updated successfully';   
			RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
			ELSE  
 
			p_ValidFlag_out := 'No';  
			p_ErrorMsg_out :='Alert: Record not exist in the Control table for this Source ID, verify and change the flag to "Insert"';   
			RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
		END IF;  
		ELSE  
			p_ValidFlag_out := 'NA';  
			p_ErrorMsg_out :='Info: Record not considered for processing';   
			RETURN QUERY SELECT p_ValidFlag_out,p_ErrorMsg_out;  
		END IF;
	END IF;  
END;
$$;


ALTER FUNCTION ods.ufn_controlhdr_upload(p_sourcename_h_in character varying, p_sourcetype_h_in character varying, p_sourcedescription_h_in character varying, p_sourceid_h_in character varying, p_connectionstr_h_in character varying, p_adlscontainername_h_in character varying, p_dwobjectname_h_in character varying, p_objecttype_h_in character varying, p_dldirstructure_h_in character varying, p_dlpurgeflag_h_in character varying, p_dwpurgeflag_h_in character varying, p_ftpcheck_h_in character varying, p_status_h_in character varying, p_createddate_h_in character varying, p_lastupdateddate_h_in character varying, p_createduser_h_in character varying, p_isapplicable_h_in character varying, p_profilename_h_in character varying, p_emailto_h_in character varying, p_archcondition_h_in character varying, p_dep_source_in character varying, p_archintvlcond_h_in character varying, p_sourcecallingseq_h_in character varying, p_apiurl_in character varying, p_apimethod_in character varying, p_apiauthorizationtype_in character varying, p_apiaccesstoken_in character varying, p_apipymodulename_in character varying, p_apiqueryparameters_in character varying, p_apirequestbody_in character varying, p_envsourcecode_h_in character varying, p_datasourcecode_h_in character varying, p_flag_h_in character varying) OWNER TO proconnect;

--
-- Name: usp_db_table_size(); Type: PROCEDURE; Schema: ods; Owner: proconnect
--

CREATE PROCEDURE ods.usp_db_table_size()
    LANGUAGE plpgsql
    AS $$

DECLARE
    Snapshot_time timestamp;
    
BEGIN

SELECT Now()::timestamp into Snapshot_time;

INSERT INTO ods.db_size(snapshot_date,db_name,db_size)
SELECT Snapshot_time,datname,pg_size_pretty( pg_database_size(datname) )
FROM pg_database
where datname = 'onesource';

INSERT INTO ods.Table_size(Snapshot_date,DB_Name,Table_Schema,Table_Name,Row_Count,Table_Size)
select
  Snapshot_time,
  table_catalog,
  table_schema,
  table_name,
  count_rows_of_table(table_schema, table_name),
  pg_size_pretty(pg_total_relation_size(table_schema||'.'||table_name))
from
  information_schema.tables
where  table_schema  in ('dwh', 'click')
and table_type = 'BASE TABLE'
order by  3 desc,  4 asc;

END;
$$;


ALTER PROCEDURE ods.usp_db_table_size() OWNER TO proconnect;

--
-- Name: usp_dwh_data_count(); Type: PROCEDURE; Schema: ods; Owner: proconnect
--

CREATE PROCEDURE ods.usp_dwh_data_count()
    LANGUAGE plpgsql
    AS $$
	
declare v_max int;
 v_id integer =1;

begin
truncate only ods.dwh_Data_Count restart identity;
select max(Row_id)  into v_max   from ods.DataValidation_ScriptGenerator;
 
--select  100 into v_max;

while v_id <= v_max
   loop            
    	Insert into ods.dwh_Data_Count(sourcetable,dwhtablename,dimension,period,datacount)
		select * from ods.usp_target_count(v_id);
 		v_id:=v_id+1;
   end loop;
	 	   
update ods.dwh_data_count set period ='NA' where period = '9999';
   
		   
END;
$$;


ALTER PROCEDURE ods.usp_dwh_data_count() OWNER TO proconnect;

--
-- Name: usp_etlerrorinsert(character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, integer); Type: PROCEDURE; Schema: ods; Owner: proconnect
--

CREATE PROCEDURE ods.usp_etlerrorinsert(IN p_sourceid character varying, IN p_targetobject character varying, IN p_dataflowflag character varying, IN p_batchid integer, IN p_taskname character varying, IN p_packagename character varying, IN p_errorid integer, IN p_errordesc character varying, IN p_errorline integer)
    LANGUAGE plpgsql
    AS $$

DECLARE p_Flag1			INT ;
		p_Flag2			VARCHAR(100);
    
BEGIN
	
-- SQLINES DEMO ***  with Status, Source, Target, Inserted and Updated record counts

	IF ( SELECT 1 FROM  ODS.ControlDetail 
				WHERE TargetObject	= p_TargetObject   
				AND SourceId		= p_SourceId  
				AND DataflowFlag	= p_DataflowFlag  ) = 1
	THEN

	-- SQLINES LICENSE FOR EVALUATION USE ONLY
		INSERT INTO ODS.Error
				   (SourceName						,SourceType
				   ,SourceDescription				,SourceId
				   ,SourceObject					,DataflowFlag
				   ,TargetName						,TargetSchemaName
				   ,TargetObject					,TargetProcedureName
				   ,TaskName						,PackageName
				   ,JobName							,ErrorID
				   ,ErrorDesc						,ErrorLine
				   ,ErrorDate						,LatestBatchId)
		SELECT 
				    SourceName						,SourceType
				   ,SourceDescription				,SourceId
				   ,SourceObject					,DataflowFlag
				   ,TargetName						,TargetSchemaName
				   ,TargetObject					,TargetProcedureName
				   ,p_TaskName						,p_PackageName
				   ,JobName							,p_ErrorId
				   ,p_ErrorDesc						,p_ErrorLine
				   ,NOW()							,LatestBatchId
		FROM ODS.ControlDetail
		WHERE 	TargetObject 	= p_TargetObject   
		AND 	SourceId 		= p_SourceId  
		AND 	DataflowFlag 	= p_DataflowFlag;

	END IF;

	-- SQLINES DEMO *** control Table

	UPDATE ODS.ControlDetail
	SET		FlowStatus 	= 'Failed'    
	WHERE 	TargetObject 	= p_TargetObject   
	AND 	SourceId 		= p_SourceId  
	AND 	DataflowFlag 	= p_DataflowFlag 
    AND     latestbatchid   = p_batchid;
    
	UPDATE ODS.ControlHeader
	SET		Status 	= 'Failed'    
	WHERE 	SourceId 		= p_SourceId;    

	-- SQLINES DEMO ***  Audit Table
	UPDATE ODS.Audit
	SET		FlowStatus 	= 'Failed'     
	WHERE 	TargetObject 	= p_TargetObject   
	AND 	SourceId 		= p_SourceId  
	AND 	DataflowFlag 	= p_DataflowFlag
    AND     latestbatchid   = p_batchid;  
	
	IF p_dataflowflag = 'DWtoClick'
	THEN
		INSERT INTO ODS.Error
				   (SourceName						,SourceType
				   ,SourceDescription				,SourceId
				   ,SourceObject					,DataflowFlag
				   ,TargetName						,TargetSchemaName
				   ,TargetObject					,TargetProcedureName
				   ,TaskName						,PackageName
				   ,JobName							,ErrorID
				   ,ErrorDesc						,ErrorLine
				   ,ErrorDate						,LatestBatchId)
		SELECT 
				    'onesource'						,'PostgreSQL'
				   ,'PostgreSQL'					,p_sourceid
				   ,p_sourceid						,p_dataflowflag
				   ,'click'							,'click'
				   ,p_targetobject					,NULL
				   ,p_TaskName						,p_PackageName
				   ,NULL							,p_ErrorId
				   ,p_ErrorDesc						,p_ErrorLine
				   ,NOW()							,p_batchid;
				   
			END IF;

END;
$$;


ALTER PROCEDURE ods.usp_etlerrorinsert(IN p_sourceid character varying, IN p_targetobject character varying, IN p_dataflowflag character varying, IN p_batchid integer, IN p_taskname character varying, IN p_packagename character varying, IN p_errorid integer, IN p_errordesc character varying, IN p_errorline integer) OWNER TO proconnect;

--
-- Name: usp_etlpostprocess(character varying, character varying, character varying, integer, integer, integer, integer, integer); Type: PROCEDURE; Schema: ods; Owner: proconnect
--

CREATE PROCEDURE ods.usp_etlpostprocess(IN psourceid character varying, IN ptargetobject character varying, IN pdataflowflag character varying, IN sourcegroupflag integer, IN pbatchid integer, IN psourcecount integer, IN pinsertcount integer, IN pupdatecount integer)
    LANGUAGE plpgsql
    AS $$
  
--Declare variables  
  
DECLARE   
	vSrcDelCnt 				INT := 0;  
	IsFailed 				INT :=0;
	ErrorId					VARCHAR(50);
	ErrorDesc				VARCHAR(2000);
	ErrorLine				VARCHAR(2000);
	STGtoDWLastRunDate 		TIMESTAMP(3);
	DepSourceLastRunDate 	TIMESTAMP(3);
	DepSource 				VARCHAR(40); 
	DepSourceStatus 		VARCHAR(40);
	v_etllastrundate 		TIMESTAMP(3);
	deletecount 			INTEGER;
	flag1 					INTEGER;
	flag2 					CHARACTER;
BEGIN

-- SQLINES DEMO ***  Error Table
-- SQLINES LICENSE FOR EVALUATION USE ONLY
	SELECT 
		COALESCE(COUNT(*),0) INTO IsFailed 
	FROM ODS.Error
	WHERE LatestBatchId = pbatchid  
	AND TargetObject = ptargetobject  
	AND SourceId = psourceid  
	AND DataflowFlag = pdataflowflag;
	
	SELECT NOW()::TIMESTAMP INTO v_etllastrundate;

IF IsFailed = 0 
THEN 	
	IF (pdataflowflag = 'SRCtoStg')  
		THEN  
			-- SQLINES DEMO *** ADER FOR STATUS
		UPDATE ODS.ControlDetail
		SET     IsReadyForExecution		= 0  
		WHERE   SourceId				= psourceid  
		AND     DataflowFlag			= 'SRCtoStg'  
		AND     Isapplicable			= 1;
        
		UPDATE ODS.ControlHeader
		SET		Status				=	'Started',
				LastUpdatedDate		=	NOW()
		WHERE	SourceId			=	psourceid 
		AND		Isapplicable		=	1;
		
		UPDATE ODS.ControlDetail
		SET     IsReadyForExecution		= 1  
		WHERE   SourceId				= psourceid  
		AND     DataflowFlag			= 'StgtoDW'  
		AND     Isapplicable			= 1;
	END IF;		
  
	IF (pdataflowflag = 'StgtoDW')  
	THEN  

		-- SQLINES DEMO *** ADER FOR STATUS

		UPDATE ODS.ControlHeader
		SET		Status				=	'Completed',
				LastUpdatedDate		=	NOW()
		WHERE	SourceId			=	psourceid 
		AND		Isapplicable		=	1;

		  
		UPDATE ODS.ControlDetail
		SET		IsReadyForExecution 	= 0
		WHERE 	TargetObject 			= ptargetobject
		AND 	SourceId 				= psourceid  
		AND 	DataflowFlag			= 'StgtoDW'  
		AND 	Isapplicable			= 1;

		UPDATE ODS.ControlDetail
		SET     IsReadyForExecution		= 1
		WHERE   SourceId				= psourceid  
		AND     DataflowFlag			= 'SRCtoStg'  
		AND     Isapplicable			= 1;
		
		IF sourcegroupflag =  1
		THEN
		
		update ods.sourcegroupingdtl
		set status 				= 'Completed',
			lastrundatetime		=	v_etllastrundate,
			loadenddatetime = NOW()::timestamp
			where sourceid = psourceid
			and schemaname = 'dwh'
			and isapplicable = 1;
			
		END IF;		   

	END IF; 

	-- SQLINES DEMO *** le with Status and Updated date  
  
	UPDATE ODS.ControlDetail
	SET		FlowStatus 		= 'Completed',
			EtlLastRunDate 	= v_etllastrundate
	WHERE 	LatestBatchId 	= pbatchid  
	AND 	TargetObject 	= ptargetobject   
	AND 	SourceId 		= psourceid  
	AND 	DataflowFlag 	= pdataflowflag  
	AND 	Isapplicable 	= 1;

	UPDATE ODS.Audit 
	SET		SrcRwCnt 		= psourcecount,
			TgtInscnt 		= pinsertcount,
			TgtUpdcnt 		= pupdatecount,
			FlowStatus 		= 'Completed',
			UpdatedDate 	= Now(),
			LoadEndTime 	= Now()  
	WHERE 	LatestBatchId 	= pbatchid  
	AND 	TargetObject 	= ptargetobject  
	AND 	SourceId 		= psourceid  
	AND 	DataflowFlag 	= pdataflowflag; 

	ELSE 

		-- SQLINES DEMO *** le with Status and Updated date  

		UPDATE ODS.ControlHeader
		SET		Status				=	'Failed',
				LastUpdatedDate		=	NOW()
		WHERE	SourceId			=	psourceid 
		AND		Isapplicable		=	1;
  
		UPDATE ODS.ControlDetail 
		SET		FlowStatus 			= 'Failed'     
		WHERE 	LatestBatchId 		= pbatchid  
		AND 	TargetObject 		= ptargetobject   
		AND 	SourceId 			= psourceid  
		AND 	DataflowFlag 		= pdataflowflag  
		AND 	Isapplicable 		= 1;

		
		UPDATE ODS.Audit
	    SET		SrcRwCnt 		= psourcecount,
			    TgtInscnt 		= pinsertcount,		    
			    TgtUpdcnt 		= pupdatecount,
				FlowStatus 		= 'Failed',
				UpdatedDate 	= Now(),
				LoadEndTime 	= Now()  
		WHERE 	LatestBatchId 	= pbatchid  
		AND 	TargetObject 	= ptargetobject  
		AND 	SourceId 		= psourceid  
		AND 	DataflowFlag 	= pdataflowflag;
		
		IF sourcegroupflag =  1
	THEN		
		update ods.sourcegroupingdtl
		set status = 'Failed',
		loadenddatetime = NOW()::timestamp
		where sourceid = psourceid
		and schemaname = 'dwh'
		and isapplicable = 1;
		
	END IF;
  

	END IF;

END;
$$;


ALTER PROCEDURE ods.usp_etlpostprocess(IN psourceid character varying, IN ptargetobject character varying, IN pdataflowflag character varying, IN sourcegroupflag integer, IN pbatchid integer, IN psourcecount integer, IN pinsertcount integer, IN pupdatecount integer) OWNER TO proconnect;

--
-- Name: usp_etlpreprocess(character varying, character varying, character varying, integer, integer, character varying, character varying, integer); Type: PROCEDURE; Schema: ods; Owner: proconnect
--

CREATE PROCEDURE ods.usp_etlpreprocess(IN psourceid character varying, IN ptargetobject character varying, IN pdataflowflag character varying, IN sourcegroupflag integer, IN sourcecount integer, IN useragent character varying, IN etlbatchid character varying, INOUT batchid integer)
    LANGUAGE plpgsql
    AS $$

	DECLARE Sql1 			TEXT;
			Stagetable 		VARCHAR(100);
			ErrorId			VARCHAR(50);
			ErrorDesc		VARCHAR(2000);
			ErrorLine		VARCHAR(2000);
			TargetSchema  	VARCHAR(400);
			vSourceName		VARCHAR(100);
	        loadstarttime   timestamp without time zone;
	        executionflag   integer;
	        flag1           integer;
	        flag2           character varying;            

BEGIN

	ExecutionFlag := 1;

	-- SQLINES LICENSE FOR EVALUATION USE ONLY
	SELECT IsReadyForExecution,
		  TargetSchemaName || '.' || TargetObject,
		  SourceName INTO ExecutionFlag, TargetSchema, vSourceName
	FROM ods.ControlDetail
	WHERE SourceId		= psourceid
	AND   TargetObject	= ptargetobject
	AND   DataflowFlag	= pdataflowflag
	AND   Isapplicable 	= 1; 	
	
	
	--TRUNCATE TABLE targetobject;
    IF (pdataflowflag = 'SRCtoStg')  
	THEN     
        EXECUTE 'TRUNCATE ' || TargetSchema;
	END IF;

    IF (pdataflowflag = 'STGtoDW')  
	THEN  
		SELECT  
            SourceObject INTO Stagetable
        FROM ODS.ControlDetail
        WHERE SourceId = psourceid 
		AND DataflowFlag = pdataflowflag 
        AND TargetObject = ptargetobject
		AND Isapplicable = 1;
		
		Sql1 := N'SELECT @SourceCount  = COUNT(1) FROM OneSource_Stage.dbo.'||Stagetable;
		EXECUTE sp_executesql Sql1, N'@SourceCount NVARCHAR(100) OUTPUT', SourceCount = SourceCount OUTPUT;
	END IF;
-- SQLINES DEMO *** om Control table

	SELECT 
		COALESCE(LatestBatchId,0) + 1 AS Batch INTO BatchId 
	FROM ODS.ControlDetail
	WHERE SourceId = psourceid 
	AND TargetObject = ptargetobject
	AND DataflowFlag = pdataflowflag
	AND Isapplicable = 1; 
	
	LoadStartTime := now();

-- SQLINES DEMO *** Control Header

	UPDATE ODS.ControlHeader
	SET		Status			=	'Started',
			LastUpdatedDate	=	NOW()
	WHERE	SourceId		=	psourceid 
	AND		Isapplicable	=	1;

-- SQLINES DEMO *** Control Table

	UPDATE ODS.ControlDetail
	SET LatestBatchId 	= BatchId,
		FlowStatus 		= 'Started'
	WHERE SourceId 		= psourceid 
	AND TargetObject 	= ptargetobject
	AND DataflowFlag 	= pdataflowflag
	and Isapplicable 	= 1;

-- SQLINES DEMO ***  with Status, Source, Target, Inserted and Updated record counts

-- SQLINES LICENSE FOR EVALUATION USE ONLY
	INSERT INTO ODS.Audit
			   (SourceName          ,Sourcetype			,SourceDescription         	,SourceObject
			   ,SourceId			,DataflowFlag       ,SrcRwCnt					,SrcDelCnt           
			   ,TgtInscnt           ,TgtDelcnt			,TgtUpdcnt				   	,FlowStatus
			   ,TargetName          ,TargetSchemaName   ,TargetObject				,TargetProcedureName
			   ,CreatedDate         ,UpdatedDate        ,LoadStartTime			   	,LoadEndTime
			   ,LatestBatchId		,LoadType			,etlbatchid					,useragent		,sourcegroupflag)
	SELECT		SourceName	        ,Sourcetype	        ,SourceDescription	        ,SourceObject
			   ,SourceId	        ,DataflowFlag	    ,SourceCount				,0
			   ,NULL				,NULL				,NULL						,'Started'
			   ,TargetName          ,TargetSchemaName   ,TargetObject				,TargetProcedureName
			   ,Now()				,NULL				,LoadStartTime				,NULL
			   ,BatchId				,LoadType			,etlbatchid					,useragent		,sourcegroupflag
	FROM ODS.ControlDetail
	WHERE SourceId = psourceid 
	AND TargetObject = ptargetobject
	AND DataflowFlag = pdataflowflag
	and Isapplicable = 1;
	
	IF sourcegroupflag =  1
	THEN
	
	update ods.sourcegroupingdtl
	set status = 'Started',
	loadstartdatetime = NOW()::timestamp
	where sourceid = psourceid
	and schemaname = 'dwh'
	and isapplicable = 1
	and pdataflowflag = 'SRCtoStg';
	
	END IF;
	
	select BatchId INTO batchid;

END;
$$;


ALTER PROCEDURE ods.usp_etlpreprocess(IN psourceid character varying, IN ptargetobject character varying, IN pdataflowflag character varying, IN sourcegroupflag integer, IN sourcecount integer, IN useragent character varying, IN etlbatchid character varying, INOUT batchid integer) OWNER TO proconnect;

--
-- Name: usp_ods_data_count(); Type: FUNCTION; Schema: ods; Owner: proconnect
--

CREATE FUNCTION ods.usp_ods_data_count() RETURNS void
    LANGUAGE plpgsql
    AS $$

declare v_Data text;

 v_TableName text;
 v_Column_List text;
 v_FromClause text;
 v_WhereClause text;
 v_GroupByClause text;
 begin

select TableName from DataValidation_ScriptGenerator;
select Column_List from DataValidation_ScriptGenerator;
select TableName from DataValidation_ScriptGenerator;
select WhereClause_ColumnName from DataValidation_ScriptGenerator;
select GroupBy_ColumnName from DataValidation_ScriptGenerator;

v_Data:='select '' '|| v_TableName || ''',' || v_Column_List ||
'from ' || v_TableName || ' where ' || v_WhereClause ||
'group by '|| v_GroupByClause;


Select v_Data;

END;
$$;


ALTER FUNCTION ods.usp_ods_data_count() OWNER TO proconnect;

--
-- Name: usp_source_target_count(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: ods; Owner: proconnect
--

CREATE PROCEDURE ods.usp_source_target_count(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying)
    LANGUAGE plpgsql
    AS $$

DECLARE
    p_etljobname VARCHAR(100);
    p_envsourcecd VARCHAR(50);
    p_datasourcecd VARCHAR(50);
    p_batchid integer;
    p_taskname VARCHAR(100);
    p_packagename  VARCHAR(100);
    p_errorid integer;
    p_errordesc character varying;
    p_errorline integer;
	p_rawstorageflag integer;

BEGIN

	CREATE TEMP TABLE dwh_target_count
  (
    Sourcetable varchar(100) COLLATE public.nocase,
	Targettable varchar(100) COLLATE public.nocase,
 	TargetDimension varchar(50) COLLATE public.nocase,
	TargetAttributes varchar(50) COLLATE public.nocase,
 	Period bigint,   	
 	TargetDataCount bigint
  )
  ON COMMIT DELETE ROWS;
   
  
    SELECT d.jobname, h.envsourcecode, h.datasourcecode, d.latestbatchid, d.targetprocedurename,h.rawstorageflag
    INTO p_etljobname, p_envsourcecd, p_datasourcecd, p_batchid, p_taskname,p_rawstorageflag
    FROM ods.controldetail d
    INNER JOIN ods.controlheader h
        ON d.sourceid = h.sourceid
    WHERE d.sourceid = p_sourceId
        AND d.dataflowflag = p_dataflowflag
        AND d.targetobject = p_targetobject;

    SELECT COUNT(1) INTO srccnt
    FROM stg.stg_datavalidation;
	
	
	TRUNCATE ONLY ods.source_target_count RESTART IDENTITY;
	
	INSERT INTO ods.source_target_count
	(sourcetable,dimension,Period,SourceDataCount)		
	SELECT 	sourcetable,dimension,Period,SourceDataCount
	FROM stg.stg_datavalidation;
	
 	select 0 into inscnt;
	
	 
	 UPDATE ods.source_target_count d
	 set 	targettable 	= t.dwhtablename,
	 		targetdatacount = t.datacount
	 FROM ods.dwh_data_count t
	 where  TRIM(d.Sourcetable) 	= TRIM(t.sourcetable)
	 and 	TRIM(d.Period)     		= TRIM(t.period)
	 and 	TRIM(d.dimension) 		= TRIM(t.dimension);
	 
	 GET DIAGNOSTICS updcnt = ROW_COUNT;
	 
	 update ods.source_target_count
	 set diffcount = SourceDataCount - targetdatacount
	 where 1=1;

	 

	 
	 

	
	
	  EXCEPTION WHEN others THEN
        get stacked diagnostics
            p_errorid   = returned_sqlstate,
            p_errordesc = message_text;
    CALL ods.usp_etlerrorinsert(p_sourceid, p_targetobject, p_dataflowflag, p_batchid,p_taskname, 'sp_ExceptionHandling', p_errorid, p_errordesc, null);
       select 0 into inscnt;
       select 0 into updcnt;
END;
$$;


ALTER PROCEDURE ods.usp_source_target_count(IN p_sourceid character varying, IN p_dataflowflag character varying, IN p_targetobject character varying, OUT srccnt integer, OUT inscnt integer, OUT updcnt integer, OUT dltcount integer, INOUT flag1 character varying, OUT flag2 character varying) OWNER TO proconnect;

--
-- Name: usp_table_reindex(); Type: PROCEDURE; Schema: ods; Owner: proconnect
--

CREATE PROCEDURE ods.usp_table_reindex()
    LANGUAGE plpgsql
    AS $$
	
declare v_max int;
 v_min int;
 v_tableschema character varying;
 v_tablename character varying;
begin
 select max(rowid),min(rowid) into v_max,v_min from ods.table_size 
	where snapshot_date :: date = current_date::Date
	and row_count > 10000;
	
	--select 2,2 into v_max,v_min;
while v_min <= v_max
   loop            
   		 select  table_name,table_schema into v_tablename,v_tableschema from ods.table_size 
		 where rowid = v_min;
	-- raise notice 'Value: %',  'REINDEX TABLE ' || v_tableschema || '.' ||v_tablename;
    	
		EXECUTE 'REINDEX TABLE ' || v_tableschema || '.' ||v_tablename;
 		v_min:=v_min+1;
   end loop;
		   
END;
$$;


ALTER PROCEDURE ods.usp_table_reindex() OWNER TO proconnect;
